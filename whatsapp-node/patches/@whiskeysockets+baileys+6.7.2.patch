diff --git a/node_modules/@whiskeysockets/baileys/.eslintignore b/node_modules/@whiskeysockets/baileys/.eslintignore
deleted file mode 100644
index d41f50d..0000000
--- a/node_modules/@whiskeysockets/baileys/.eslintignore
+++ /dev/null
@@ -1,10 +0,0 @@
-# Ignore artifacts:
-lib
-coverage
-*.lock
-.eslintrc.json
-src/WABinary/index.ts
-WAProto
-WASignalGroup
-Example/test.ts
-docs
diff --git a/node_modules/@whiskeysockets/baileys/.eslintrc.json b/node_modules/@whiskeysockets/baileys/.eslintrc.json
deleted file mode 100644
index 258042d..0000000
--- a/node_modules/@whiskeysockets/baileys/.eslintrc.json
+++ /dev/null
@@ -1,35 +0,0 @@
-{
-    "extends": "@adiwajshing",
-    "parserOptions": {
-        "sourceType": "module",
-        "project": "./tsconfig.json"
-    },
-    "ignorePatterns": ["src/Tests/*"],
-    "rules": {
-        "@typescript-eslint/no-explicit-any": [
-            "warn",
-            {
-                "ignoreRestArgs": true
-            }
-        ],
-        "@typescript-eslint/no-inferrable-types": [
-            "warn"
-        ],
-        "@typescript-eslint/no-redundant-type-constituents": [
-            "warn"
-        ],
-        "@typescript-eslint/no-unnecessary-type-assertion": [
-            "warn"
-        ],
-        "no-restricted-syntax": [
-            "warn",
-            {
-                "selector": "TSEnumDeclaration",
-                "message": "Don't declare enums, use literals instead"
-            }
-        ],
-        "keyword-spacing": [
-            "warn"
-        ]
-    }
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/.gitattributes b/node_modules/@whiskeysockets/baileys/.gitattributes
deleted file mode 100644
index dfe0770..0000000
--- a/node_modules/@whiskeysockets/baileys/.gitattributes
+++ /dev/null
@@ -1,2 +0,0 @@
-# Auto detect text files and perform LF normalization
-* text=auto
diff --git a/node_modules/@whiskeysockets/baileys/.github/FUNDING.yml b/node_modules/@whiskeysockets/baileys/.github/FUNDING.yml
deleted file mode 100644
index 7315bd3..0000000
--- a/node_modules/@whiskeysockets/baileys/.github/FUNDING.yml
+++ /dev/null
@@ -1 +0,0 @@
-github: [purpshell, auties00, SheIITear]
diff --git a/node_modules/@whiskeysockets/baileys/.github/ISSUE_TEMPLATE/bug_report.md b/node_modules/@whiskeysockets/baileys/.github/ISSUE_TEMPLATE/bug_report.md
deleted file mode 100644
index a097926..0000000
--- a/node_modules/@whiskeysockets/baileys/.github/ISSUE_TEMPLATE/bug_report.md
+++ /dev/null
@@ -1,29 +0,0 @@
----
-name: Bug report
-about: Create a report to help improve the library
-title: "[BUG]"
-labels: bug
-assignees: ''
-
----
-
-**Describe the bug**
-A clear and concise description of what the bug is.
-
-**To Reproduce**
-Steps to reproduce the behavior:
-1. Created a new connection
-2. Closed & used saved credentials to log back in
-3. Etc.
-
-**Expected behavior**
-A clear and concise description of what you expected to happen.
-
-**Environment (please complete the following information):**
- - Is this on a server?
- - What do your `connectOptions` look like? 
- - Do you have multiple clients on the same IP?
- - Are you using a proxy?
-
-**Additional context**
-Add any other context about the problem here.
diff --git a/node_modules/@whiskeysockets/baileys/.github/ISSUE_TEMPLATE/config.yml b/node_modules/@whiskeysockets/baileys/.github/ISSUE_TEMPLATE/config.yml
deleted file mode 100644
index d47c93f..0000000
--- a/node_modules/@whiskeysockets/baileys/.github/ISSUE_TEMPLATE/config.yml
+++ /dev/null
@@ -1,4 +0,0 @@
-contact_links:
-  - name: Have a question?
-    about: Join our discord and send a post in the `#baileys-help` channel
-    url: https://discord.gg/WeJM5FP9GG
diff --git a/node_modules/@whiskeysockets/baileys/.github/ISSUE_TEMPLATE/feature-requests.md b/node_modules/@whiskeysockets/baileys/.github/ISSUE_TEMPLATE/feature-requests.md
deleted file mode 100644
index 19e6495..0000000
--- a/node_modules/@whiskeysockets/baileys/.github/ISSUE_TEMPLATE/feature-requests.md
+++ /dev/null
@@ -1,15 +0,0 @@
----
-name: Feature Requests
-about: Template for general issues/feature requests
-title: ''
-labels: ''
-assignees: ''
-
----
-
-**Before adding this issue, make sure you do the following to make sure this is not a duplicate:**
-1. Search through the repo's previous issues
-2. Read through the readme at least once
-3. Search the docs for the feature you're looking for
-
-**Just describe the feature**
diff --git a/node_modules/@whiskeysockets/baileys/.github/workflows/lint.yml b/node_modules/@whiskeysockets/baileys/.github/workflows/lint.yml
deleted file mode 100644
index 487816a..0000000
--- a/node_modules/@whiskeysockets/baileys/.github/workflows/lint.yml
+++ /dev/null
@@ -1,22 +0,0 @@
-name: Check PR health
-
-on: [pull_request]
-
-jobs:
-  check-lint:
-    runs-on: ubuntu-latest
-    timeout-minutes: 10
-
-    steps:
-    - uses: actions/checkout@v2
-
-    - name: Install Node
-      uses: actions/setup-node@v1
-      with:
-        node-version: 18.x
-
-    - name: Install packages
-      run: yarn
-    
-    - name: Check linting
-      run: yarn lint
diff --git a/node_modules/@whiskeysockets/baileys/.github/workflows/manual-release.yml b/node_modules/@whiskeysockets/baileys/.github/workflows/manual-release.yml
deleted file mode 100644
index c3d5720..0000000
--- a/node_modules/@whiskeysockets/baileys/.github/workflows/manual-release.yml
+++ /dev/null
@@ -1,46 +0,0 @@
-name: Manual Release
-
-on:
-  workflow_dispatch:
-    inputs:
-      increment:
-        type: string
-        description: "Must be: patch, minor, major, pre* or <version>"
-        required: true
-        default: "patch"
-jobs:
-  manual-release:
-    runs-on: ubuntu-latest
-    steps:
-      - name: Checkout
-        uses: actions/checkout@v3
-        with:
-          token: ${{ secrets.PERSONAL_TOKEN }}
-
-      - name: Setup GIT
-        run: |
-          git config --global user.name "github-actions[bot]"
-          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
-
-      - name: Setup Node
-        uses: actions/setup-node@v3.6.0
-        with:
-          node-version: 18.x
-
-      - name: Get yarn cache directory path
-        id: yarn-cache-dir-path
-        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
-
-      - uses: actions/cache@v3
-        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
-        with:
-          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
-          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
-          restore-keys: |
-            ${{ runner.os }}-yarn-
-
-      - name: Install Dependencies
-        run: yarn
-
-      - name: Release
-        run: "npx release-it --increment ${{ github.event.inputs.increment }}"
diff --git a/node_modules/@whiskeysockets/baileys/.github/workflows/pr-comment.yml b/node_modules/@whiskeysockets/baileys/.github/workflows/pr-comment.yml
deleted file mode 100644
index 7807a5f..0000000
--- a/node_modules/@whiskeysockets/baileys/.github/workflows/pr-comment.yml
+++ /dev/null
@@ -1,36 +0,0 @@
-name: PR Comment
-
-on:
-  pull_request_target:
-    types:
-      - opened
-      - synchronize
-      - reopened
-      - unlocked
-
-jobs:
-  pr-comment:
-    runs-on: ubuntu-latest
-    timeout-minutes: 10
-    permissions: write-all
-    steps:
-      - uses: actions/checkout@v3
-
-      - uses: mshick/add-pr-comment@v2
-        with:
-          repo-token: ${{ secrets.PERSONAL_TOKEN}}
-          message-id: pr-test
-          message: |
-            Thanks for your contribution.
-
-            The next step is to wait for review and approval to merge it to main repository
-
-            The community can help reacting with a thumb up (:thumbsup:) for approval and rocket (:rocket:) for who has tested it.
-
-            To test this PR you can run the following command below:
-            ```
-            # NPM
-            npm install @whiskeysockets/baileys@${{ github.event.pull_request.head.repo.full_name }}#${{ github.event.pull_request.head.ref }}
-            # YARN v2
-            yarn add @whiskeysockets/baileys@${{ github.event.pull_request.head.repo.full_name }}#${{ github.event.pull_request.head.ref }}
-            ```
diff --git a/node_modules/@whiskeysockets/baileys/.github/workflows/publish-release.yml b/node_modules/@whiskeysockets/baileys/.github/workflows/publish-release.yml
deleted file mode 100644
index eed4ac0..0000000
--- a/node_modules/@whiskeysockets/baileys/.github/workflows/publish-release.yml
+++ /dev/null
@@ -1,89 +0,0 @@
-name: Publish Release
-
-on:
-  push:
-    tags:
-      - "v*"
-
-permissions: write-all
-
-jobs:
-  publish-release:
-    runs-on: ubuntu-latest
-    steps:
-      - name: Checkout
-        uses: actions/checkout@v3
-        with:
-          fetch-depth: 0
-
-      - name: Fetching tags
-        run: git fetch --tags -f || true
-
-      - name: Setup Node
-        uses: actions/setup-node@v3.6.0
-        with:
-          node-version: 18.x
-          registry-url: "https://registry.npmjs.org"
-        env:
-          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
-
-      - name: Get yarn cache directory path
-        id: yarn-cache-dir-path
-        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
-
-      - uses: actions/cache@v3
-        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
-        with:
-          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
-          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
-          restore-keys: |
-            ${{ runner.os }}-yarn-
-
-      - name: Install Dependencies
-        run: yarn
-        env:
-          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
-
-      - name: Publish in NPM (as `baileys`)
-        run: npm publish --access public
-        env:
-          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
-      
-      - name: Publish in NPM (whiskeysockets scope)
-        run: |
-          npx json -I -f package.json -e "this.name='@whiskeysockets/baileys'"
-          npm publish --access public --//registry.npmjs.org/:_authToken=$NPM_TOKEN
-          npx json -I -f package.json -e "this.name='baileys'"
-        env:
-          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
-
-      - name: Generate Changelog
-        id: generate_changelog
-        run: |
-          changelog=$(npm run changelog:last --silent)
-          echo "changelog<<EOF" >> $GITHUB_OUTPUT
-          echo "${changelog}" >> $GITHUB_OUTPUT
-          echo "EOF" >> $GITHUB_OUTPUT
-
-      - name: Make Package
-        run: npm pack
-
-      - name: Rename Pack
-        run: mv *.tgz baileys.tgz
-
-      - name: Create Release
-        uses: meeDamian/github-release@2.0
-        env:
-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
-        with:
-          token: ${{ secrets.GITHUB_TOKEN }}
-          tag: ${{ github.ref }}
-          commitish: ${{ github.sha }}
-          name: ${{ github.ref_name }}
-          body: ${{ steps.generate_changelog.outputs.changelog }}
-          draft: false
-          prerelease: false
-          files: >
-            baileys.tgz
-          gzip: folders
-          allow_override: true
diff --git a/node_modules/@whiskeysockets/baileys/.github/workflows/stale.yml b/node_modules/@whiskeysockets/baileys/.github/workflows/stale.yml
deleted file mode 100644
index dc509f9..0000000
--- a/node_modules/@whiskeysockets/baileys/.github/workflows/stale.yml
+++ /dev/null
@@ -1,17 +0,0 @@
-name: Mark stale issues and pull requests
-
-on:
-  schedule:
-  - cron: "30 1 * * *"
-
-jobs:
-  stale:
-    runs-on: ubuntu-latest
-    steps:
-    - uses: actions/stale@v3
-      with:
-        repo-token: ${{ secrets.GITHUB_TOKEN }}
-        stale-issue-message: 'This issue is stale because it has been open 6 days with no activity. Remove the stale label or comment or this will be closed in 2 days'
-        stale-pr-message: 'This PR is stale because it has been open 6 days with no activity. Remove the stale label or comment or this will be closed in 2 days'
-        days-before-stale: 6
-        days-before-close: 2
diff --git a/node_modules/@whiskeysockets/baileys/.github/workflows/update-docs.yml b/node_modules/@whiskeysockets/baileys/.github/workflows/update-docs.yml
deleted file mode 100644
index d26938c..0000000
--- a/node_modules/@whiskeysockets/baileys/.github/workflows/update-docs.yml
+++ /dev/null
@@ -1,43 +0,0 @@
-name: Update Docs
-
-permissions:
-  contents: write
-
-on:
-  push:
-    branches:
-    - master
-jobs:
-  Build:
-    runs-on: ubuntu-latest
-    outputs:
-      package-name: ${{ steps.packageInfo.outputs.package-name }}
-      package-version: ${{ steps.packageInfo.outputs.package-version }}
-      commit-msg: ${{ steps.packageInfo.outputs.commit-msg }}
-    # Steps represent a sequence of tasks that will be executed as part of the job
-    steps:
-    - name: Checkout Commit
-      uses: actions/checkout@v2
-
-    - name: Parsing Package Info
-      id: packageInfo
-      run: |
-        echo "::set-output name=package-name::$(jq -r .name package.json)"
-        echo "::set-output name=package-version::$(jq -r .version package.json)"
-        echo "::set-output name=commit-msg::$(git log -1 --pretty=%B)"
-        
-    - name: Setup Node.js environment
-      uses: actions/setup-node@v2.1.1
-
-    - name: Install Dependencies
-      run: yarn
-
-    - name: Build
-      run: yarn run build:all
-
-    - name: Publish to Pages
-      uses: peaceiris/actions-gh-pages@v3
-      with:
-        publish_branch: gh-pages
-        publish_dir: ./docs
-        github_token: ${{ secrets.GITHUB_TOKEN }}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/.github/workflows/update-nightly.yml b/node_modules/@whiskeysockets/baileys/.github/workflows/update-nightly.yml
deleted file mode 100644
index 9d7987c..0000000
--- a/node_modules/@whiskeysockets/baileys/.github/workflows/update-nightly.yml
+++ /dev/null
@@ -1,79 +0,0 @@
-name: Update Nightly
-
-permissions:
-  contents: write
-
-on:
-  push:
-    branches:
-      - master
-
-jobs:
-  update-nightly:
-    runs-on: ubuntu-latest
-    steps:
-      - name: Checkout
-        uses: actions/checkout@v3
-        with:
-          fetch-depth: 0
-
-      - name: Fetching tags
-        run: git fetch --tags -f || true
-
-      - name: Setup Node
-        uses: actions/setup-node@v3.6.0
-        with:
-          node-version: 18.x
-
-      - name: Get yarn cache directory path
-        id: yarn-cache-dir-path
-        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
-
-      - uses: actions/cache@v3
-        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
-        with:
-          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
-          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
-          restore-keys: |
-            ${{ runner.os }}-yarn-
-
-      - name: Install Dependencies
-        run: yarn
-
-      - name: Update version to alpha
-        run: yarn version --prerelease --preid=alpha --no-git --no-git-tag-version
-
-      - name: Build NPM package
-        run: yarn pack && mv baileys-*.tgz baileys-nightly.tgz
-
-      - name: Generate Changelog
-        id: generate_changelog
-        run: |
-          changelog=$(yarn run --silent changelog:preview)
-          echo "changelog<<EOF" >> $GITHUB_OUTPUT
-          echo "${changelog}" >> $GITHUB_OUTPUT
-          echo "EOF" >> $GITHUB_OUTPUT
-
-      - name: Update Nightly TAG
-        uses: richardsimko/update-tag@v1
-        env:
-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
-        with:
-          tag_name: nightly
-
-      - name: Update Nightly Release
-        uses: meeDamian/github-release@2.0
-        env:
-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
-        with:
-          token: ${{ secrets.GITHUB_TOKEN }}
-          tag: nightly
-          commitish: ${{ github.sha }}
-          name: Nightly Release
-          body: ${{ steps.generate_changelog.outputs.changelog }}
-          draft: false
-          prerelease: true
-          files: >
-            baileys-nightly.tgz
-          gzip: folders
-          allow_override: true
diff --git a/node_modules/@whiskeysockets/baileys/.github/workflows/update-proto.yml b/node_modules/@whiskeysockets/baileys/.github/workflows/update-proto.yml
deleted file mode 100644
index a4292df..0000000
--- a/node_modules/@whiskeysockets/baileys/.github/workflows/update-proto.yml
+++ /dev/null
@@ -1,59 +0,0 @@
-name: Update WAProto
-
-on:
-  schedule:
-    - cron: "10 1 * * *"
-  workflow_dispatch:
-
-permissions:
-  contents: write
-  pull-requests: write
-
-jobs:
-  update-proto:
-    runs-on: ubuntu-latest
-    timeout-minutes: 10
-
-    steps:
-      - uses: actions/checkout@v3
-
-      - name: Install Node
-        uses: actions/setup-node@v3
-        with:
-          node-version: 18.x
-
-      - name: Install packages
-        run: |
-          yarn
-          yarn --pure-lockfile --cwd proto-extract
-
-      - name: Update WAProto.proto
-        id: wa_proto_info
-        run: |
-          yarn --cwd proto-extract start > wa-logs.txt
-          WA_VERSION=$(cat wa-logs.txt | perl -n -e'/Current version\: (.+)/ && print $1')
-          WA_JS_URL=$(cat wa-logs.txt | perl -n -e'/Found source JS URL\: (.+)/ && print $1')
-          echo "wa_version=$WA_VERSION" >> $GITHUB_OUTPUT
-          echo "wa_js_url=$WA_JS_URL" >> $GITHUB_OUTPUT
-
-      - name: GenerateStatics
-        run: yarn gen:protobuf
-
-      - name: Update baileys-version.json
-        run: |
-          WA_VERSION="${{steps.wa_proto_info.outputs.wa_version}}"
-          WA_NUMBERS=$(echo $WA_VERSION | sed "s/\./, /g")
-          echo -e "{\n\t\"version\": [$WA_NUMBERS]\n}" > src/Defaults/baileys-version.json
-
-      - name: Create Pull Request
-        uses: peter-evans/create-pull-request@v5
-        with:
-          commit-message: "chore: updated proto/version to v${{steps.wa_proto_info.outputs.wa_version}}"
-          title: "Whatsapp v${{steps.wa_proto_info.outputs.wa_version}} proto/version change"
-          branch: "update-proto/stable"
-          delete-branch: true
-          labels: "update-proto"
-          body: "Automated changes\nFound source JS URL: ${{steps.wa_proto_info.outputs.wa_js_url}}\nCurrent version: v${{steps.wa_proto_info.outputs.wa_version}}"
-          add-paths: |
-            WAProto/*
-            src/Defaults/baileys-version.json
diff --git a/node_modules/@whiskeysockets/baileys/.npmignore b/node_modules/@whiskeysockets/baileys/.npmignore
deleted file mode 100644
index e69de29..0000000
diff --git a/node_modules/@whiskeysockets/baileys/.prettierignore b/node_modules/@whiskeysockets/baileys/.prettierignore
deleted file mode 100644
index f59ec20..0000000
--- a/node_modules/@whiskeysockets/baileys/.prettierignore
+++ /dev/null
@@ -1 +0,0 @@
-*
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/.release-it.yml b/node_modules/@whiskeysockets/baileys/.release-it.yml
deleted file mode 100644
index cd5376e..0000000
--- a/node_modules/@whiskeysockets/baileys/.release-it.yml
+++ /dev/null
@@ -1,14 +0,0 @@
-git:
-  commitMessage: "chore(release): v${version}"
-  tagAnnotation: "chore(release): v${version}"
-  tagName: "v${version}"
-
-hooks:
-  after:bump:
-    - "npm run changelog:update"
-
-# automatic publish from github workflow
-npm:
-  publish: false
-  private: true
-  registry: "OMITTED"
diff --git a/node_modules/@whiskeysockets/baileys/CHANGELOG.md b/node_modules/@whiskeysockets/baileys/CHANGELOG.md
deleted file mode 100644
index e58fe5f..0000000
--- a/node_modules/@whiskeysockets/baileys/CHANGELOG.md
+++ /dev/null
@@ -1,4 +0,0 @@
-## 6.7.2 (2024-05-06)
-
-
-
diff --git a/node_modules/@whiskeysockets/baileys/Example/boot_analytics_test.json b/node_modules/@whiskeysockets/baileys/Example/boot_analytics_test.json
deleted file mode 100644
index 98ff220..0000000
--- a/node_modules/@whiskeysockets/baileys/Example/boot_analytics_test.json
+++ /dev/null
@@ -1,924 +0,0 @@
-{
-  "header": {
-    "wamVersion": 5,
-    "eventSequenceNumber": 26885,
-    "regular": true
-  },
-  "events": [
-    {
-      "WebcFingerprint": {
-        "props": {
-          "webcDocumentWebdriverEvaluate": false,
-          "webcDocumentSeleniumEvaluate": false,
-          "webcDocumentWebdriverScriptFunction": false,
-          "webcDocumentWebdriverScriptFunc": false,
-          "webcDocumentWebdriverScriptFn": false,
-          "webcDocumentFxdriverEvaluate": false,
-          "webcDocumentDriverUnwrapped": false,
-          "webcDocumentWebdriverUnwrapped": false,
-          "webcDocumentDriverEvaluate": false,
-          "webcDocumentSeleniumUnwrapped": false,
-          "webcDocumentFxdriverUnwrapped": false,
-          "webcDocumentElementAttrSelenium": false,
-          "webcDocumentElementAttrWebdriver": false,
-          "webcDocumentElementAttrDriver": false,
-          "webcWindowPhantom": false,
-          "webcWindowNightmare": false,
-          "webcWindowSelenium": false,
-          "webcWindowCallphantom": false,
-          "webcWindowCallselenium": false,
-          "webcWindowSeleniumIdeRecorder": false,
-          "webcWindowNavigatorWebdriver": 0
-        },
-        "globals": {
-          "platform": 8,
-          "deviceName": "Mac OS",
-          "appVersion": "2.3000.1012146637",
-          "appIsBetaRelease": true,
-          "commitTime": 1710835207,
-          "browserVersion": "Chrome 122.0.0.0",
-          "webcEnv": 0,
-          "browser": "Chrome",
-          "webcWebPlatform": 1,
-          "appBuild": 4,
-          "sequenceNumber": 0,
-          "webcTabId": "x311909394",
-          "deviceVersion": "10.15.7",
-          "ocVersion": 1,
-          "deviceClassification": 4
-        }
-      }
-    },
-    {
-      "WebcDbOpen": {
-        "props": {
-          "webcDbName": "wawc",
-          "webcDbOpenWasSuccess": true,
-          "webcDbOpenNumAttempts": 0
-        },
-        "globals": {
-          "commitTime": 1710835208,
-          "sequenceNumber": 1
-        }
-      }
-    },
-    {
-      "WebDbVersionsSource": {
-        "props": {
-          "webDbVersionSource": 1,
-          "webSchemaInitiator": 1
-        },
-        "globals": {
-          "commitTime": 1710835208,
-          "sequenceNumber": 2
-        }
-      }
-    },
-    {
-      "WebcAssetLoad": {
-        "props": {
-          "webcAssetName": "initial-assets",
-          "webcAssetFromCache": false,
-          "webcAssetCacheType": 0,
-          "webcAssetLoadT": 376
-        },
-        "globals": {
-          "commitTime": 1710835209,
-          "webcPhonePlatform": 2,
-          "sequenceNumber": 3
-        }
-      }
-    },
-    {
-      "WebcStorageStat": {
-        "props": {
-          "webcStorageUsage": 8158454,
-          "webcStorageQuota": 596797550592
-        },
-        "globals": {
-          "commitTime": 1710835209,
-          "sequenceNumber": 4
-        }
-      }
-    },
-    {
-      "OfflineResumeStage": {
-        "props": {
-          "offlineSessionId": "8FDE5A4D1710835208",
-          "offlineResumeMode": 1,
-          "offlineStageTimestampMs": 1799,
-          "currentOfflineStage": 2
-        },
-        "globals": {
-          "commitTime": 1710835209,
-          "sequenceNumber": 5
-        }
-      }
-    },
-    {
-      "OfflineResumeStage": {
-        "props": {
-          "offlineSessionId": "8FDE5A4D1710835208",
-          "offlineResumeMode": 1,
-          "offlineStageTimestampMs": 2244,
-          "currentOfflineStage": 3,
-          "offlineDecryptErrorCount": 0
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "webcBucket": null,
-          "sequenceNumber": 6,
-          "serviceImprovementOptOut": false
-        }
-      }
-    },
-    {
-      "OfflineResumeStage": {
-        "props": {
-          "offlineSessionId": "8FDE5A4D1710835208",
-          "offlineResumeMode": 1,
-          "offlineStageTimestampMs": 2328,
-          "currentOfflineStage": 4,
-          "offlineDecryptErrorCount": 0,
-          "chatThreadCount": 20
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 7
-        }
-      }
-    },
-    {
-      "WebcStreamModeChange": {
-        "props": {
-          "webcStreamMode": 1
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 8
-        }
-      }
-    },
-    {
-      "WebcStatusSync": {
-        "props": {
-          "webcStatusSyncT": 8,
-          "webcStatusRecentItemCount": 0,
-          "webcStatusRecentRowCount": 0,
-          "webcStatusViewedItemCount": 0,
-          "webcStatusViewedRowCount": 0,
-          "webcStatusMutedItemCount": 0,
-          "webcStatusMutedRowCount": 0
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 9
-        }
-      }
-    },
-    {
-      "OfflineResume": {
-        "props": {
-          "offlineMessageCount": 0,
-          "offlineReceiptCount": 0,
-          "offlineNotificationCount": 0,
-          "offlineDecryptErrorCount": 0,
-          "offlineSizeBytes": 0,
-          "chatThreadCount": 20,
-          "preackMessageCount": 0,
-          "preackReceiptCount": 0,
-          "isOfflineCompleteMissed": false,
-          "pageLoadT": 1436,
-          "isResumeInForeground": true,
-          "socketConnectT": 3235,
-          "lastStanzaT": 3680,
-          "mainScreenLoadT": 3765,
-          "mailboxAge": 0
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 10
-        }
-      }
-    },
-    {
-      "TsNavigation": {
-        "props": {
-          "tsSessionId": 1988827797,
-          "relativeTimestampMs": 234453,
-          "navigationSource": 6,
-          "navigationDestination": 8
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 11
-        }
-      }
-    },
-    {
-      "UserActivity": {
-        "props": {
-          "userActivitySessionId": "2mq50p",
-          "userActivityStartTime": 1710835183,
-          "userActivityBitmapLen": 24,
-          "userActivityBitmapLow": 12582931,
-          "userActivitySessionSeq": 0,
-          "userActivitySessionCum": 5
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 12
-        }
-      }
-    },
-    {
-      "TsBitArray": {
-        "props": {
-          "tsSessionId": 1988827797,
-          "bitarrayLength": 24,
-          "bitarrayLow": 12582931,
-          "bitarrayHigh": 0,
-          "cumulativeBits": 17,
-          "relativeTimestampMs": 211037,
-          "sessionSeq": 5
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 13
-        }
-      }
-    },
-    {
-      "WebcPageLoad": {
-        "props": {
-          "webcExeStart": 1406,
-          "webcExeDone": 1422,
-          "webcMainScriptStart": 2225,
-          "webcMainScriptEnd": 2235,
-          "webcInitialPanel": "MAIN",
-          "webcInitialPanelMountStartT": 4178,
-          "webcInitialPanelRenderT": 4338,
-          "webcPageLoadT": 1386,
-          "webcUnloadEventStart": 185,
-          "webcUnloadEventEnd": 185,
-          "webcRedirectStart": 0,
-          "webcRedirectEnd": 0,
-          "webcFetchStart": 2,
-          "webcDomainLookupStart": 2,
-          "webcDomainLookupEnd": 2,
-          "webcConnectStart": 2,
-          "webcConnectEnd": 2,
-          "webcSecureConnectionStart": 0,
-          "webcRequestStart": 4,
-          "webcResponseStart": 180,
-          "webcResponseEnd": 512,
-          "webcDomLoading": 191,
-          "webcDomInteractive": 522,
-          "webcDomContentLoadedEventStart": 522,
-          "webcDomContentLoadedEventEnd": 522,
-          "webcDomComplete": 1386,
-          "webcLoadEventStart": 1386,
-          "webcLoadEventEnd": 1386,
-          "webcCached": true,
-          "webcNavigation": 1,
-          "webcRedirectCount": 0,
-          "webcWsOpening": 2246,
-          "webcWsPairing": 3235,
-          "webcWsSyncing": 3235,
-          "webcWsNormal": 3765,
-          "webcWsAttempts": 1,
-          "webcQrCode": false,
-          "webcInitialPanelMountT": 3778,
-          "webcLoadInForeground": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 14
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/yG/l/0,cross/wutZ6S4uSJD27Zd4v4x-HvK6Sjj5ZPWYb.css?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 296,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 15
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/yk/r/kNbB3PuS_Bf.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 309,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 16
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/yF/r/p55HfXW__mM.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 281,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 17
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/yJ/r/9oJ1yn1k9uE.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 321,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 18
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/ym/r/MlywYX_J_TLaJ0ADN4LEWAWCoJeodTdwSDQjJxOHorPJvsWqehdEtWwDQVEH-g-FDC.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 312,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 19
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3iZ_S4/ys/l/makehaste_jhash/nUxbTp4lNHX.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 894,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 20
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc-translations.php/v6iZ_S4/y-/l/en_US/nUxbTp4lNHX.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 874,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 21
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3i30p4/yV/l/makehaste_jhash/iCyna0MjBGV.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 281,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 22
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc-translations.php/v6i30p4/y1/l/en_US/iCyna0MjBGV.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 891,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 23
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/yX/r/7e4NMmX2B0m.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 951,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 24
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc-translations.php/v6iXYF4/y8/l/en_US/df_rO3jdhlI.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 948,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 25
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3iXYF4/yE/l/makehaste_jhash/df_rO3jdhlI.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 1092,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 26
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3ixps4/y8/l/makehaste_jhash/knKF43raTSI.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 1093,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 27
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc-translations.php/v6ixps4/yp/l/en_US/knKF43raTSI.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 896,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 28
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/killswitch/",
-          "webcResourceDuration": 287,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 29
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/yy/r/0VfZP3-iu6n.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 67,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 30
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/yM/r/FPlNguXyB9e.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 82,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 31
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3ih1C4/yN/l/makehaste_jhash/KibbF6u10gY.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 282,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 32
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3i0oM4/yw/l/makehaste_jhash/lnWgrQmN2YX.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 311,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 33
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3i68a4/y-/l/makehaste_jhash/XqFc2T3XXdL.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 308,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 34
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/yt/r/iLS68Cpho3U.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 225,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 35
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/yU/r/DdQbUpSH52U.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 238,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 36
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3ibOv4/yZ/l/makehaste_jhash/WAWmJZMUU6R.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 235,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 37
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3il6a4/yM/l/makehaste_jhash/kShvtcfXO0D.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 251,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 38
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3iNLP4/yS/l/makehaste_jhash/afY5G3FyBQ4.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 342,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 39
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3io034/yu/l/makehaste_jhash/0wrWn7oiQ97.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 563,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 40
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/yT/r/BCEPMVgrDGc.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 262,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 41
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/y4/l/0,cross/U4m_Em-cSVc.css?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 78,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 42
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3isKW4/y0/l/makehaste_jhash/jb4EFFP9i02.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 714,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 43
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3iXg_4/y1/l/makehaste_jhash/k9NKSzUO_jN.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 638,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 44
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/yu/l/0,cross/nDbTkqlvGPP.css?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 79,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 45
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/yJ/r/ztUgagupDlO.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 623,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 46
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/yP/r/rYZqPCBaG70.png",
-          "webcResourceDuration": 281,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 47
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/data/manifest.json",
-          "webcResourceDuration": 238,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 48
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/static_resources/webworker_v1/init_script/?__hs=19801.HYP%3Awhatsapp_comet_pkg.2.1..0.1&__spin_r=1012146637&__spin_b=trunk&__spin_t=1710835206",
-          "webcResourceDuration": 236,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 49
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/y-/r/qmLVV-6EM4D.png",
-          "webcResourceDuration": 55,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 50
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3iJeR4/yN/l/makehaste_jhash/dG5SZIGf7BA.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 316,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 51
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3iTvy4/yI/l/makehaste_jhash/x68ZDZLJQK2.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 320,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 52
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3i1IW4/yp/l/makehaste_jhash/nskS-3z5DeR.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 73,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 53
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3i6Fp4/yA/l/makehaste_jhash/GVQkKM-FFf7.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 129,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 54
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/y7/r/bm0sbp22sOS.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 185,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 55
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3/yZ/l/0,cross/V2VsZ0Z8CrF.css?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 59,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 56
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3iasf4/yv/l/makehaste_jhash/wF6oRkcktwM.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 187,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 57
-        }
-      }
-    },
-    {
-      "WebcResourceLoad": {
-        "props": {
-          "webcResourceName": "/rsrc.php/v3iica4/yM/l/makehaste_jhash/PbawSa9OMfG.js?_nc_x=Ij3Wp8lg5Kz",
-          "webcResourceDuration": 206,
-          "webcResourceCached": true
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 58
-        }
-      }
-    },
-    {
-      "TsNavigation": {
-        "props": {
-          "tsSessionId": 1988827797,
-          "relativeTimestampMs": 239713,
-          "navigationSource": 8,
-          "navigationDestination": 6
-        },
-        "globals": {
-          "commitTime": 1710835210,
-          "sequenceNumber": 59
-        }
-      }
-    },
-    {
-      "WebcImgError": {
-        "props": {
-          "webcImgErrorCode": 404
-        },
-        "globals": {
-          "commitTime": 1710835211,
-          "sequenceNumber": 60
-        }
-      }
-    },
-    {
-      "WebcAssetLoad": {
-        "props": {
-          "webcAssetName": "emojis",
-          "webcAssetFromCache": false,
-          "webcAssetCacheType": 0,
-          "webcAssetLoadT": 748
-        },
-        "globals": {
-          "commitTime": 1710835212,
-          "sequenceNumber": 61
-        }
-      }
-    },
-    {
-      "WebcStorageStat": {
-        "props": {
-          "webcStorageUsage": 8309457,
-          "webcStorageQuota": 596797550592
-        },
-        "globals": {
-          "commitTime": 1710835212,
-          "sequenceNumber": 62
-        }
-      }
-    }
-  ]
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/Example/example.ts b/node_modules/@whiskeysockets/baileys/Example/example.ts
deleted file mode 100644
index a78eb36..0000000
--- a/node_modules/@whiskeysockets/baileys/Example/example.ts
+++ /dev/null
@@ -1,324 +0,0 @@
-import { Boom } from '@hapi/boom'
-import NodeCache from 'node-cache'
-import readline from 'readline'
-import makeWASocket, { AnyMessageContent, BinaryInfo, delay, DisconnectReason, encodeWAM, fetchLatestBaileysVersion, getAggregateVotesInPollMessage, makeCacheableSignalKeyStore, makeInMemoryStore, PHONENUMBER_MCC, proto, useMultiFileAuthState, WAMessageContent, WAMessageKey } from '../src'
-import MAIN_LOGGER from '../src/Utils/logger'
-import open from 'open'
-import fs from 'fs'
-
-const logger = MAIN_LOGGER.child({})
-logger.level = 'trace'
-
-const useStore = !process.argv.includes('--no-store')
-const doReplies = !process.argv.includes('--no-reply')
-const usePairingCode = process.argv.includes('--use-pairing-code')
-const useMobile = process.argv.includes('--mobile')
-
-// external map to store retry counts of messages when decryption/encryption fails
-// keep this out of the socket itself, so as to prevent a message decryption/encryption loop across socket restarts
-const msgRetryCounterCache = new NodeCache()
-
-// Read line interface
-const rl = readline.createInterface({ input: process.stdin, output: process.stdout })
-const question = (text: string) => new Promise<string>((resolve) => rl.question(text, resolve))
-
-// the store maintains the data of the WA connection in memory
-// can be written out to a file & read from it
-const store = useStore ? makeInMemoryStore({ logger }) : undefined
-store?.readFromFile('./baileys_store_multi.json')
-// save every 10s
-setInterval(() => {
-	store?.writeToFile('./baileys_store_multi.json')
-}, 10_000)
-
-// start a connection
-const startSock = async() => {
-	const { state, saveCreds } = await useMultiFileAuthState('baileys_auth_info')
-	// fetch latest version of WA Web
-	const { version, isLatest } = await fetchLatestBaileysVersion()
-	console.log(`using WA v${version.join('.')}, isLatest: ${isLatest}`)
-
-	const sock = makeWASocket({
-		version,
-		logger,
-		printQRInTerminal: !usePairingCode,
-		mobile: useMobile,
-		auth: {
-			creds: state.creds,
-			/** caching makes the store faster to send/recv messages */
-			keys: makeCacheableSignalKeyStore(state.keys, logger),
-		},
-		msgRetryCounterCache,
-		generateHighQualityLinkPreview: true,
-		// ignore all broadcast messages -- to receive the same
-		// comment the line below out
-		// shouldIgnoreJid: jid => isJidBroadcast(jid),
-		// implement to handle retries & poll updates
-		getMessage,
-	})
-
-	store?.bind(sock.ev)
-
-	// Pairing code for Web clients
-	if(usePairingCode && !sock.authState.creds.registered) {
-		if(useMobile) {
-			throw new Error('Cannot use pairing code with mobile api')
-		}
-
-		const phoneNumber = await question('Please enter your mobile phone number:\n')
-		const code = await sock.requestPairingCode(phoneNumber)
-		console.log(`Pairing code: ${code}`)
-	}
-
-	// If mobile was chosen, ask for the code
-	if(useMobile && !sock.authState.creds.registered) {
-		const { registration } = sock.authState.creds || { registration: {} }
-
-		if(!registration.phoneNumber) {
-			registration.phoneNumber = await question('Please enter your mobile phone number:\n')
-		}
-
-		const libPhonenumber = await import("libphonenumber-js")
-		const phoneNumber = libPhonenumber.parsePhoneNumber(registration!.phoneNumber)
-		if(!phoneNumber?.isValid()) {
-			throw new Error('Invalid phone number: ' + registration!.phoneNumber)
-		}
-
-		registration.phoneNumber = phoneNumber.format('E.164')
-		registration.phoneNumberCountryCode = phoneNumber.countryCallingCode
-		registration.phoneNumberNationalNumber = phoneNumber.nationalNumber
-		const mcc = PHONENUMBER_MCC[phoneNumber.countryCallingCode]
-		if(!mcc) {
-			throw new Error('Could not find MCC for phone number: ' + registration!.phoneNumber + '\nPlease specify the MCC manually.')
-		}
-
-		registration.phoneNumberMobileCountryCode = mcc
-
-		async function enterCode() {
-			try {
-				const code = await question('Please enter the one time code:\n')
-				const response = await sock.register(code.replace(/["']/g, '').trim().toLowerCase())
-				console.log('Successfully registered your phone number.')
-				console.log(response)
-				rl.close()
-			} catch(error) {
-				console.error('Failed to register your phone number. Please try again.\n', error)
-				await askForOTP()
-			}
-		}
-
-		async function enterCaptcha() {
-			const response = await sock.requestRegistrationCode({ ...registration, method: 'captcha' })
-			const path = __dirname + '/captcha.png'
-			fs.writeFileSync(path, Buffer.from(response.image_blob!, 'base64'))
-
-			open(path)
-			const code = await question('Please enter the captcha code:\n')
-			fs.unlinkSync(path)
-			registration.captcha = code.replace(/["']/g, '').trim().toLowerCase()
-		}
-
-		async function askForOTP() {
-			if (!registration.method) {
-				await delay(2000)
-				let code = await question('How would you like to receive the one time code for registration? "sms" or "voice"\n')
-				code = code.replace(/["']/g, '').trim().toLowerCase()
-				if(code !== 'sms' && code !== 'voice') {
-					return await askForOTP()
-				}
-
-				registration.method = code
-			}
-
-			try {
-				await sock.requestRegistrationCode(registration)
-				await enterCode()
-			} catch(error) {
-				console.error('Failed to request registration code. Please try again.\n', error)
-
-				if(error?.reason === 'code_checkpoint') {
-					await enterCaptcha()
-				}
-
-				await askForOTP()
-			}
-		}
-
-		askForOTP()
-	}
-
-	const sendMessageWTyping = async(msg: AnyMessageContent, jid: string) => {
-		await sock.presenceSubscribe(jid)
-		await delay(500)
-
-		await sock.sendPresenceUpdate('composing', jid)
-		await delay(2000)
-
-		await sock.sendPresenceUpdate('paused', jid)
-
-		await sock.sendMessage(jid, msg)
-	}
-
-	// the process function lets you process all events that just occurred
-	// efficiently in a batch
-	sock.ev.process(
-		// events is a map for event name => event data
-		async(events) => {
-			// something about the connection changed
-			// maybe it closed, or we received all offline message or connection opened
-			if(events['connection.update']) {
-				const update = events['connection.update']
-				const { connection, lastDisconnect } = update
-				if(connection === 'close') {
-					// reconnect if not logged out
-					if((lastDisconnect?.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut) {
-						startSock()
-					} else {
-						console.log('Connection closed. You are logged out.')
-					}
-				}
-				
-				// WARNING: THIS WILL SEND A WAM EXAMPLE AND THIS IS A ****CAPTURED MESSAGE.****
-				// DO NOT ACTUALLY ENABLE THIS UNLESS YOU MODIFIED THE FILE.JSON!!!!!
-				// THE ANALYTICS IN THE FILE ARE OLD. DO NOT USE THEM.
-				// YOUR APP SHOULD HAVE GLOBALS AND ANALYTICS ACCURATE TO TIME, DATE AND THE SESSION
-				// THIS FILE.JSON APPROACH IS JUST AN APPROACH I USED, BE FREE TO DO THIS IN ANOTHER WAY.
-				// THE FIRST EVENT CONTAINS THE CONSTANT GLOBALS, EXCEPT THE seqenceNumber(in the event) and commitTime
-				// THIS INCLUDES STUFF LIKE ocVersion WHICH IS CRUCIAL FOR THE PREVENTION OF THE WARNING
-				const sendWAMExample = false;
-				if(connection === 'open' && sendWAMExample) {
-					/// sending WAM EXAMPLE
-					const {
-						header: {
-							wamVersion,
-							eventSequenceNumber,
-						},
-						events,
-					} = JSON.parse(await fs.promises.readFile("./boot_analytics_test.json", "utf-8"))
-
-					const binaryInfo = new BinaryInfo({
-						protocolVersion: wamVersion,
-						sequence: eventSequenceNumber,
-						events: events
-					})
-
-					const buffer = encodeWAM(binaryInfo);
-					
-					const result = await sock.sendWAMBuffer(buffer)
-					console.log(result)
-				}
-
-				console.log('connection update', update)
-			}
-
-			// credentials updated -- save them
-			if(events['creds.update']) {
-				await saveCreds()
-			}
-
-			if(events['labels.association']) {
-				console.log(events['labels.association'])
-			}
-
-
-			if(events['labels.edit']) {
-				console.log(events['labels.edit'])
-			}
-
-			if(events.call) {
-				console.log('recv call event', events.call)
-			}
-
-			// history received
-			if(events['messaging-history.set']) {
-				const { chats, contacts, messages, isLatest } = events['messaging-history.set']
-				console.log(`recv ${chats.length} chats, ${contacts.length} contacts, ${messages.length} msgs (is latest: ${isLatest})`)
-			}
-
-			// received a new message
-			if(events['messages.upsert']) {
-				const upsert = events['messages.upsert']
-				console.log('recv messages ', JSON.stringify(upsert, undefined, 2))
-
-				if(upsert.type === 'notify') {
-					for(const msg of upsert.messages) {
-						if(!msg.key.fromMe && doReplies) {
-							console.log('replying to', msg.key.remoteJid)
-							await sock!.readMessages([msg.key])
-							await sendMessageWTyping({ text: 'Hello there!' }, msg.key.remoteJid!)
-						}
-					}
-				}
-			}
-
-			// messages updated like status delivered, message deleted etc.
-			if(events['messages.update']) {
-				console.log(
-					JSON.stringify(events['messages.update'], undefined, 2)
-				)
-
-				for(const { key, update } of events['messages.update']) {
-					if(update.pollUpdates) {
-						const pollCreation = await getMessage(key)
-						if(pollCreation) {
-							console.log(
-								'got poll update, aggregation: ',
-								getAggregateVotesInPollMessage({
-									message: pollCreation,
-									pollUpdates: update.pollUpdates,
-								})
-							)
-						}
-					}
-				}
-			}
-
-			if(events['message-receipt.update']) {
-				console.log(events['message-receipt.update'])
-			}
-
-			if(events['messages.reaction']) {
-				console.log(events['messages.reaction'])
-			}
-
-			if(events['presence.update']) {
-				console.log(events['presence.update'])
-			}
-
-			if(events['chats.update']) {
-				console.log(events['chats.update'])
-			}
-
-			if(events['contacts.update']) {
-				for(const contact of events['contacts.update']) {
-					if(typeof contact.imgUrl !== 'undefined') {
-						const newUrl = contact.imgUrl === null
-							? null
-							: await sock!.profilePictureUrl(contact.id!).catch(() => null)
-						console.log(
-							`contact ${contact.id} has a new profile pic: ${newUrl}`,
-						)
-					}
-				}
-			}
-
-			if(events['chats.delete']) {
-				console.log('chats deleted ', events['chats.delete'])
-			}
-		}
-	)
-
-	return sock
-
-	async function getMessage(key: WAMessageKey): Promise<WAMessageContent | undefined> {
-		if(store) {
-			const msg = await store.loadMessage(key.remoteJid!, key.id!)
-			return msg?.message || undefined
-		}
-
-		// only if store is present
-		return proto.Message.fromObject({})
-	}
-}
-
-startSock()
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/Media/.npmignore b/node_modules/@whiskeysockets/baileys/Media/.npmignore
deleted file mode 100644
index 77d2a2d..0000000
--- a/node_modules/@whiskeysockets/baileys/Media/.npmignore
+++ /dev/null
@@ -1,2 +0,0 @@
-received_*
-media_*
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/Media/cat.jpeg b/node_modules/@whiskeysockets/baileys/Media/cat.jpeg
deleted file mode 100644
index 5063d09..0000000
Binary files a/node_modules/@whiskeysockets/baileys/Media/cat.jpeg and /dev/null differ
diff --git a/node_modules/@whiskeysockets/baileys/Media/icon.png b/node_modules/@whiskeysockets/baileys/Media/icon.png
deleted file mode 100644
index e54d8fb..0000000
Binary files a/node_modules/@whiskeysockets/baileys/Media/icon.png and /dev/null differ
diff --git a/node_modules/@whiskeysockets/baileys/Media/ma_gif.mp4 b/node_modules/@whiskeysockets/baileys/Media/ma_gif.mp4
deleted file mode 100644
index d48b0fe..0000000
Binary files a/node_modules/@whiskeysockets/baileys/Media/ma_gif.mp4 and /dev/null differ
diff --git a/node_modules/@whiskeysockets/baileys/Media/meme.jpeg b/node_modules/@whiskeysockets/baileys/Media/meme.jpeg
deleted file mode 100644
index e09535b..0000000
Binary files a/node_modules/@whiskeysockets/baileys/Media/meme.jpeg and /dev/null differ
diff --git a/node_modules/@whiskeysockets/baileys/Media/octopus.webp b/node_modules/@whiskeysockets/baileys/Media/octopus.webp
deleted file mode 100644
index ddb9ac0..0000000
Binary files a/node_modules/@whiskeysockets/baileys/Media/octopus.webp and /dev/null differ
diff --git a/node_modules/@whiskeysockets/baileys/Media/sonata.mp3 b/node_modules/@whiskeysockets/baileys/Media/sonata.mp3
deleted file mode 100644
index 4bb3661..0000000
Binary files a/node_modules/@whiskeysockets/baileys/Media/sonata.mp3 and /dev/null differ
diff --git a/node_modules/@whiskeysockets/baileys/WASignalGroup/generate-proto.sh b/node_modules/@whiskeysockets/baileys/WASignalGroup/generate-proto.sh
deleted file mode 100644
index 051876d..0000000
--- a/node_modules/@whiskeysockets/baileys/WASignalGroup/generate-proto.sh
+++ /dev/null
@@ -1 +0,0 @@
-yarn pbjs -t static-module -w commonjs -o ./WASignalGroup/GroupProtocol.js ./WASignalGroup/group.proto
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/WASignalGroup/group.proto b/node_modules/@whiskeysockets/baileys/WASignalGroup/group.proto
deleted file mode 100644
index e6f549b..0000000
--- a/node_modules/@whiskeysockets/baileys/WASignalGroup/group.proto
+++ /dev/null
@@ -1,42 +0,0 @@
-package groupproto;
-
-message SenderKeyMessage {
-	optional uint32 id         = 1;
-	optional uint32 iteration  = 2;
-	optional bytes  ciphertext = 3;
-  }
-  
-  message SenderKeyDistributionMessage {
-	optional uint32 id         = 1;
-	optional uint32 iteration  = 2;
-	optional bytes  chainKey   = 3;
-	optional bytes  signingKey = 4;
-  }
-  
-  message SenderChainKey {
-    optional uint32 iteration = 1;
-    optional bytes  seed      = 2;
-}
-
-message SenderMessageKey {
-    optional uint32 iteration = 1;
-    optional bytes  seed      = 2;
-}
-
-message SenderSigningKey {
-    optional bytes public  = 1;
-    optional bytes private = 2;
-}
-
-message SenderKeyStateStructure {
-    
-
-    optional uint32           senderKeyId       = 1;
-    optional SenderChainKey   senderChainKey    = 2;
-    optional SenderSigningKey senderSigningKey  = 3;
-    repeated SenderMessageKey senderMessageKeys = 4;
-}
-
-message SenderKeyRecordStructure {
-    repeated SenderKeyStateStructure senderKeyStates = 1;
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/WASignalGroup/readme.md b/node_modules/@whiskeysockets/baileys/WASignalGroup/readme.md
deleted file mode 100644
index 8290d9c..0000000
--- a/node_modules/@whiskeysockets/baileys/WASignalGroup/readme.md
+++ /dev/null
@@ -1,6 +0,0 @@
-# Signal-Group
-
-This contains the code to decrypt/encrypt WA group messages. 
-Originally from [pokearaujo/libsignal-node](https://github.com/pokearaujo/libsignal-node)
-
-The code has been moved outside the signal package as I felt it didn't belong in ths signal package, as it isn't inherently a part of signal but of WA.
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/jest.config.js b/node_modules/@whiskeysockets/baileys/jest.config.js
deleted file mode 100644
index 9d83927..0000000
--- a/node_modules/@whiskeysockets/baileys/jest.config.js
+++ /dev/null
@@ -1,14 +0,0 @@
-module.exports = {
-	'roots': [
-		'<rootDir>/src'
-	],
-	'testMatch': [
-		'**/Tests/test.*.+(ts|tsx|js)',
-	],
-	'transform': {
-		'^.+\\.(ts|tsx)$': 'ts-jest'
-	},
-	moduleNameMapper: {
-		'^axios$': require.resolve('axios'),
-	},
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/lib/Defaults/baileys-version.json b/node_modules/@whiskeysockets/baileys/lib/Defaults/baileys-version.json
new file mode 100644
index 0000000..0364bd7
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Defaults/baileys-version.json
@@ -0,0 +1,3 @@
+{
+    "version": [2, 2413, 1]
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/Defaults/index.d.ts b/node_modules/@whiskeysockets/baileys/lib/Defaults/index.d.ts
new file mode 100644
index 0000000..b37d6fa
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Defaults/index.d.ts
@@ -0,0 +1,283 @@
+/// <reference types="node" />
+import { proto } from '../../WAProto';
+import type { MediaType, SocketConfig } from '../Types';
+export declare const UNAUTHORIZED_CODES: number[];
+export declare const PHONENUMBER_MCC: {
+    "93": number;
+    "355": number;
+    "213": number;
+    "1-684": number;
+    "376": number;
+    "244": number;
+    "1-264": number;
+    "1-268": number;
+    "54": number;
+    "374": number;
+    "297": number;
+    "61": number;
+    "43": number;
+    "994": number;
+    "1-242": number;
+    "973": number;
+    "880": number;
+    "1-246": number;
+    "375": number;
+    "32": number;
+    "501": number;
+    "229": number;
+    "1-441": number;
+    "975": number;
+    "591": number;
+    "387": number;
+    "267": number;
+    "55": number;
+    "1-284": number;
+    "673": number;
+    "359": number;
+    "226": number;
+    "257": number;
+    "855": number;
+    "237": number;
+    "238": number;
+    "1-345": number;
+    "236": number;
+    "235": number;
+    "56": number;
+    "86": number;
+    "57": number;
+    "269": number;
+    "682": number;
+    "506": number;
+    "385": number;
+    "53": number;
+    "357": number;
+    "420": number;
+    "243": number;
+    "45": number;
+    "253": number;
+    "1-767": number;
+    "1-809": number;
+    "1-849": number;
+    "1-829": number;
+    "593": number;
+    "20": number;
+    "503": number;
+    "240": number;
+    "291": number;
+    "372": number;
+    "251": number;
+    "500": number;
+    "298": number;
+    "679": number;
+    "358": number;
+    "33": number;
+    "689": number;
+    "241": number;
+    "220": number;
+    "995": number;
+    "49": number;
+    "233": number;
+    "350": number;
+    "30": number;
+    "299": number;
+    "1-473": number;
+    "1-671": number;
+    "502": number;
+    "224": number;
+    "592": number;
+    "509": number;
+    "504": number;
+    "852": number;
+    "36": number;
+    "354": number;
+    "91": number;
+    "62": number;
+    "98": number;
+    "964": number;
+    "353": number;
+    "972": number;
+    "39": number;
+    "225": number;
+    "1-876": number;
+    "81": number;
+    "962": number;
+    "254": number;
+    "686": number;
+    "383": number;
+    "965": number;
+    "371": number;
+    "961": number;
+    "266": number;
+    "231": number;
+    "218": number;
+    "423": number;
+    "370": number;
+    "352": number;
+    "389": number;
+    "261": number;
+    "265": number;
+    "60": number;
+    "960": number;
+    "223": number;
+    "356": number;
+    "692": number;
+    "222": number;
+    "230": number;
+    "52": number;
+    "691": number;
+    "373": number;
+    "377": number;
+    "976": number;
+    "382": number;
+    "1-664": number;
+    "212": number;
+    "258": number;
+    "95": number;
+    "264": number;
+    "674": number;
+    "977": number;
+    "31": number;
+    "687": number;
+    "64": number;
+    "505": number;
+    "227": number;
+    "234": number;
+    "683": number;
+    "1-670": number;
+    "47": number;
+    "968": number;
+    "92": number;
+    "680": number;
+    "970": number;
+    "507": number;
+    "675": number;
+    "595": number;
+    "51": number;
+    "63": number;
+    "48": number;
+    "351": number;
+    "1-787, 1-939": number;
+    "974": number;
+    "242": number;
+    "40": number;
+    "7": number;
+    "250": number;
+    "290": number;
+    "1-869": number;
+    "1-758": number;
+    "508": number;
+    "1-784": number;
+    "685": number;
+    "378": number;
+    "239": number;
+    "966": number;
+    "221": number;
+    "381": number;
+    "248": number;
+    "232": number;
+    "65": number;
+    "386": number;
+    "677": number;
+    "27": number;
+    "211": number;
+    "34": number;
+    "94": number;
+    "249": number;
+    "597": number;
+    "268": number;
+    "46": number;
+    "41": number;
+    "963": number;
+    "886": number;
+    "992": number;
+    "255": number;
+    "66": number;
+    "228": number;
+    "690": number;
+    "676": number;
+    "1-868": number;
+    "216": number;
+    "90": number;
+    "993": number;
+    "1-649": number;
+    "688": number;
+    "1-340": number;
+    "256": number;
+    "380": number;
+    "971": number;
+    "44": number;
+    "1": number;
+    "598": number;
+    "998": number;
+    "678": number;
+    "379": number;
+    "58": number;
+    "681": number;
+    "967": number;
+    "260": number;
+    "263": number;
+    "670": number;
+    "245": number;
+    "856": number;
+    "599": number;
+    "850": number;
+    "262": number;
+    "82": number;
+    "84": number;
+};
+export declare const DEFAULT_ORIGIN = "https://web.whatsapp.com";
+export declare const MOBILE_ENDPOINT = "g.whatsapp.net";
+export declare const MOBILE_PORT = 443;
+export declare const DEF_CALLBACK_PREFIX = "CB:";
+export declare const DEF_TAG_PREFIX = "TAG:";
+export declare const PHONE_CONNECTION_CB = "CB:Pong";
+export declare const WA_DEFAULT_EPHEMERAL: number;
+export declare const MOBILE_TOKEN: Buffer;
+export declare const MOBILE_REGISTRATION_ENDPOINT = "https://v.whatsapp.net/v2";
+export declare const MOBILE_USERAGENT: string;
+export declare const REGISTRATION_PUBLIC_KEY: Buffer;
+export declare const NOISE_MODE = "Noise_XX_25519_AESGCM_SHA256\0\0\0\0";
+export declare const DICT_VERSION = 2;
+export declare const KEY_BUNDLE_TYPE: Buffer;
+export declare const NOISE_WA_HEADER: Buffer;
+export declare const PROTOCOL_VERSION: number[];
+export declare const MOBILE_NOISE_HEADER: Buffer;
+/** from: https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url */
+export declare const URL_REGEX: RegExp;
+export declare const WA_CERT_DETAILS: {
+    SERIAL: number;
+};
+export declare const PROCESSABLE_HISTORY_TYPES: proto.Message.HistorySyncNotification.HistorySyncType[];
+export declare const DEFAULT_CONNECTION_CONFIG: SocketConfig;
+export declare const MEDIA_PATH_MAP: {
+    [T in MediaType]?: string;
+};
+export declare const MEDIA_HKDF_KEY_MAPPING: {
+    audio: string;
+    document: string;
+    gif: string;
+    image: string;
+    ppic: string;
+    product: string;
+    ptt: string;
+    sticker: string;
+    video: string;
+    'thumbnail-document': string;
+    'thumbnail-image': string;
+    'thumbnail-video': string;
+    'thumbnail-link': string;
+    'md-msg-hist': string;
+    'md-app-state': string;
+    'product-catalog-image': string;
+    'payment-bg-image': string;
+    ptv: string;
+};
+export declare const MEDIA_KEYS: ("ppic" | "product" | "image" | "video" | "sticker" | "audio" | "gif" | "ptt" | "thumbnail-document" | "thumbnail-image" | "thumbnail-link" | "thumbnail-video" | "md-app-state" | "md-msg-hist" | "document" | "product-catalog-image" | "payment-bg-image" | "ptv")[];
+export declare const MIN_PREKEY_COUNT = 5;
+export declare const INITIAL_PREKEY_COUNT = 30;
+export declare const DEFAULT_CACHE_TTLS: {
+    SIGNAL_STORE: number;
+    MSG_RETRY: number;
+    CALL_OFFER: number;
+    USER_DEVICES: number;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Defaults/index.js b/node_modules/@whiskeysockets/baileys/lib/Defaults/index.js
new file mode 100644
index 0000000..92a548a
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Defaults/index.js
@@ -0,0 +1,119 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.DEFAULT_CACHE_TTLS = exports.INITIAL_PREKEY_COUNT = exports.MIN_PREKEY_COUNT = exports.MEDIA_KEYS = exports.MEDIA_HKDF_KEY_MAPPING = exports.MEDIA_PATH_MAP = exports.DEFAULT_CONNECTION_CONFIG = exports.PROCESSABLE_HISTORY_TYPES = exports.WA_CERT_DETAILS = exports.URL_REGEX = exports.MOBILE_NOISE_HEADER = exports.PROTOCOL_VERSION = exports.NOISE_WA_HEADER = exports.KEY_BUNDLE_TYPE = exports.DICT_VERSION = exports.NOISE_MODE = exports.REGISTRATION_PUBLIC_KEY = exports.MOBILE_USERAGENT = exports.MOBILE_REGISTRATION_ENDPOINT = exports.MOBILE_TOKEN = exports.WA_DEFAULT_EPHEMERAL = exports.PHONE_CONNECTION_CB = exports.DEF_TAG_PREFIX = exports.DEF_CALLBACK_PREFIX = exports.MOBILE_PORT = exports.MOBILE_ENDPOINT = exports.DEFAULT_ORIGIN = exports.PHONENUMBER_MCC = exports.UNAUTHORIZED_CODES = void 0;
+const crypto_1 = require("crypto");
+const WAProto_1 = require("../../WAProto");
+const libsignal_1 = require("../Signal/libsignal");
+const Utils_1 = require("../Utils");
+const logger_1 = __importDefault(require("../Utils/logger"));
+const baileys_version_json_1 = require("./baileys-version.json");
+const phonenumber_mcc_json_1 = __importDefault(require("./phonenumber-mcc.json"));
+exports.UNAUTHORIZED_CODES = [401, 403, 419];
+exports.PHONENUMBER_MCC = phonenumber_mcc_json_1.default;
+exports.DEFAULT_ORIGIN = 'https://web.whatsapp.com';
+exports.MOBILE_ENDPOINT = 'g.whatsapp.net';
+exports.MOBILE_PORT = 443;
+exports.DEF_CALLBACK_PREFIX = 'CB:';
+exports.DEF_TAG_PREFIX = 'TAG:';
+exports.PHONE_CONNECTION_CB = 'CB:Pong';
+exports.WA_DEFAULT_EPHEMERAL = 7 * 24 * 60 * 60;
+const WA_VERSION = '2.24.6.77';
+const WA_VERSION_HASH = (0, crypto_1.createHash)('md5').update(WA_VERSION).digest('hex');
+exports.MOBILE_TOKEN = Buffer.from('0a1mLfGUIBVrMKF1RdvLI5lkRBvof6vn0fD2QRSM' + WA_VERSION_HASH);
+exports.MOBILE_REGISTRATION_ENDPOINT = 'https://v.whatsapp.net/v2';
+exports.MOBILE_USERAGENT = `WhatsApp/${WA_VERSION} iOS/15.3.1 Device/Apple-iPhone_7`;
+exports.REGISTRATION_PUBLIC_KEY = Buffer.from([
+    5, 142, 140, 15, 116, 195, 235, 197, 215, 166, 134, 92, 108, 60, 132, 56, 86, 176, 97, 33, 204, 232, 234, 119, 77,
+    34, 251, 111, 18, 37, 18, 48, 45,
+]);
+exports.NOISE_MODE = 'Noise_XX_25519_AESGCM_SHA256\0\0\0\0';
+exports.DICT_VERSION = 2;
+exports.KEY_BUNDLE_TYPE = Buffer.from([5]);
+exports.NOISE_WA_HEADER = Buffer.from([87, 65, 6, exports.DICT_VERSION]); // last is "DICT_VERSION"
+exports.PROTOCOL_VERSION = [5, 2];
+exports.MOBILE_NOISE_HEADER = Buffer.concat([Buffer.from('WA'), Buffer.from(exports.PROTOCOL_VERSION)]);
+/** from: https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url */
+exports.URL_REGEX = /(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/;
+exports.WA_CERT_DETAILS = {
+    SERIAL: 0,
+};
+exports.PROCESSABLE_HISTORY_TYPES = [
+    WAProto_1.proto.Message.HistorySyncNotification.HistorySyncType.INITIAL_BOOTSTRAP,
+    WAProto_1.proto.Message.HistorySyncNotification.HistorySyncType.PUSH_NAME,
+    WAProto_1.proto.Message.HistorySyncNotification.HistorySyncType.RECENT,
+    WAProto_1.proto.Message.HistorySyncNotification.HistorySyncType.FULL
+];
+exports.DEFAULT_CONNECTION_CONFIG = {
+    version: baileys_version_json_1.version,
+    browser: Utils_1.Browsers.ubuntu('Chrome'),
+    waWebSocketUrl: 'wss://web.whatsapp.com/ws/chat',
+    connectTimeoutMs: 20000,
+    keepAliveIntervalMs: 30000,
+    logger: logger_1.default.child({ class: 'baileys' }),
+    printQRInTerminal: false,
+    emitOwnEvents: true,
+    defaultQueryTimeoutMs: 60000,
+    customUploadHosts: [],
+    retryRequestDelayMs: 250,
+    maxMsgRetryCount: 5,
+    fireInitQueries: true,
+    auth: undefined,
+    markOnlineOnConnect: true,
+    syncFullHistory: false,
+    patchMessageBeforeSending: msg => msg,
+    shouldSyncHistoryMessage: () => true,
+    shouldIgnoreJid: () => false,
+    linkPreviewImageThumbnailWidth: 192,
+    transactionOpts: { maxCommitRetries: 10, delayBetweenTriesMs: 3000 },
+    generateHighQualityLinkPreview: false,
+    options: {},
+    appStateMacVerification: {
+        patch: false,
+        snapshot: false,
+    },
+    getMessage: async () => undefined,
+    makeSignalRepository: libsignal_1.makeLibSignalRepository
+};
+exports.MEDIA_PATH_MAP = {
+    image: '/mms/image',
+    video: '/mms/video',
+    document: '/mms/document',
+    audio: '/mms/audio',
+    sticker: '/mms/image',
+    'thumbnail-link': '/mms/image',
+    'product-catalog-image': '/product/image',
+    'md-app-state': '',
+    'md-msg-hist': '/mms/md-app-state',
+};
+exports.MEDIA_HKDF_KEY_MAPPING = {
+    'audio': 'Audio',
+    'document': 'Document',
+    'gif': 'Video',
+    'image': 'Image',
+    'ppic': '',
+    'product': 'Image',
+    'ptt': 'Audio',
+    'sticker': 'Image',
+    'video': 'Video',
+    'thumbnail-document': 'Document Thumbnail',
+    'thumbnail-image': 'Image Thumbnail',
+    'thumbnail-video': 'Video Thumbnail',
+    'thumbnail-link': 'Link Thumbnail',
+    'md-msg-hist': 'History',
+    'md-app-state': 'App State',
+    'product-catalog-image': '',
+    'payment-bg-image': 'Payment Background',
+    'ptv': 'Video'
+};
+exports.MEDIA_KEYS = Object.keys(exports.MEDIA_PATH_MAP);
+exports.MIN_PREKEY_COUNT = 5;
+exports.INITIAL_PREKEY_COUNT = 30;
+exports.DEFAULT_CACHE_TTLS = {
+    SIGNAL_STORE: 5 * 60,
+    MSG_RETRY: 60 * 60,
+    CALL_OFFER: 5 * 60,
+    USER_DEVICES: 5 * 60, // 5 minutes
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Defaults/phonenumber-mcc.json b/node_modules/@whiskeysockets/baileys/lib/Defaults/phonenumber-mcc.json
new file mode 100644
index 0000000..fa411dd
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Defaults/phonenumber-mcc.json
@@ -0,0 +1,223 @@
+{
+    "93": 412,
+    "355": 276,
+    "213": 603,
+    "1-684": 544,
+    "376": 213,
+    "244": 631,
+    "1-264": 365,
+    "1-268": 344,
+    "54": 722,
+    "374": 283,
+    "297": 363,
+    "61": 505,
+    "43": 232,
+    "994": 400,
+    "1-242": 364,
+    "973": 426,
+    "880": 470,
+    "1-246": 342,
+    "375": 257,
+    "32": 206,
+    "501": 702,
+    "229": 616,
+    "1-441": 350,
+    "975": 402,
+    "591": 736,
+    "387": 218,
+    "267": 652,
+    "55": 724,
+    "1-284": 348,
+    "673": 528,
+    "359": 284,
+    "226": 613,
+    "257": 642,
+    "855": 456,
+    "237": 624,
+    "238": 625,
+    "1-345": 346,
+    "236": 623,
+    "235": 622,
+    "56": 730,
+    "86": 454,
+    "57": 732,
+    "269": 654,
+    "682": 548,
+    "506": 712,
+    "385": 219,
+    "53": 368,
+    "357": 280,
+    "420": 230,
+    "243": 630,
+    "45": 238,
+    "253": 638,
+    "1-767": 366,
+    "1-809": 370,
+    "1-849": 370,
+    "1-829": 370,
+    "593": 740,
+    "20": 602,
+    "503": 706,
+    "240": 627,
+    "291": 657,
+    "372": 248,
+    "251": 636,
+    "500": 750,
+    "298": 288,
+    "679": 542,
+    "358": 244,
+    "33": 208,
+    "689": 547,
+    "241": 628,
+    "220": 607,
+    "995": 282,
+    "49": 262,
+    "233": 620,
+    "350": 266,
+    "30": 202,
+    "299": 290,
+    "1-473": 352,
+    "1-671": 535,
+    "502": 704,
+    "224": 537,
+    "592": 738,
+    "509": 372,
+    "504": 708,
+    "852": 454,
+    "36": 216,
+    "354": 274,
+    "91": 404,
+    "62": 510,
+    "98": 432,
+    "964": 418,
+    "353": 234,
+    "972": 425,
+    "39": 222,
+    "225": 612,
+    "1-876": 338,
+    "81": 440,
+    "962": 416,
+    "254": 639,
+    "686": 545,
+    "383": 221,
+    "965": 419,
+    "371": 247,
+    "961": 415,
+    "266": 651,
+    "231": 618,
+    "218": 606,
+    "423": 295,
+    "370": 246,
+    "352": 270,
+    "389": 294,
+    "261": 646,
+    "265": 650,
+    "60": 502,
+    "960": 472,
+    "223": 610,
+    "356": 278,
+    "692": 551,
+    "222": 609,
+    "230": 617,
+    "52": 334,
+    "691": 550,
+    "373": 259,
+    "377": 212,
+    "976": 428,
+    "382": 297,
+    "1-664": 354,
+    "212": 604,
+    "258": 643,
+    "95": 414,
+    "264": 649,
+    "674": 536,
+    "977": 429,
+    "31": 204,
+    "687": 546,
+    "64": 530,
+    "505": 710,
+    "227": 614,
+    "234": 621,
+    "683": 555,
+    "1-670": 534,
+    "47": 242,
+    "968": 226,
+    "92": 410,
+    "680": 552,
+    "970": 423,
+    "507": 714,
+    "675": 537,
+    "595": 744,
+    "51": 716,
+    "63": 515,
+    "48": 260,
+    "351": 268,
+    "1-787, 1-939": 330,
+    "974": 427,
+    "242": 630,
+    "40": 226,
+    "7": 250,
+    "250": 635,
+    "290": 658,
+    "1-869": 356,
+    "1-758": 358,
+    "508": 308,
+    "1-784": 360,
+    "685": 544,
+    "378": 292,
+    "239": 626,
+    "966": 420,
+    "221": 608,
+    "381": 220,
+    "248": 633,
+    "232": 619,
+    "65": 525,
+    "386": 293,
+    "677": 540,
+    "27": 655,
+    "211": 659,
+    "34": 214,
+    "94": 413,
+    "249": 634,
+    "597": 746,
+    "268": 653,
+    "46": 240,
+    "41": 228,
+    "963": 417,
+    "886": 466,
+    "992": 436,
+    "255": 640,
+    "66": 520,
+    "228": 615,
+    "690": 554,
+    "676": 539,
+    "1-868": 374,
+    "216": 605,
+    "90": 286,
+    "993": 438,
+    "1-649": 376,
+    "688": 553,
+    "1-340": 332,
+    "256": 641,
+    "380": 255,
+    "971": 424,
+    "44": 234,
+    "1": 310,
+    "598": 748,
+    "998": 434,
+    "678": 541,
+    "379": 225,
+    "58": 734,
+    "681": 543,
+    "967": 421,
+    "260": 645,
+    "263": 648,
+    "670": 514,
+    "245": 632,
+    "856": 457,
+    "599": 362,
+    "850": 467,
+    "262": 647,
+    "82": 450,
+    "84": 452
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/Signal/libsignal.d.ts b/node_modules/@whiskeysockets/baileys/lib/Signal/libsignal.d.ts
new file mode 100644
index 0000000..7d6ce13
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Signal/libsignal.d.ts
@@ -0,0 +1,3 @@
+import { SignalAuthState } from '../Types';
+import { SignalRepository } from '../Types/Signal';
+export declare function makeLibSignalRepository(auth: SignalAuthState): SignalRepository;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Signal/libsignal.js b/node_modules/@whiskeysockets/baileys/lib/Signal/libsignal.js
new file mode 100644
index 0000000..3621fea
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Signal/libsignal.js
@@ -0,0 +1,152 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
+var __importStar = (this && this.__importStar) || function (mod) {
+    if (mod && mod.__esModule) return mod;
+    var result = {};
+    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
+    return result;
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.makeLibSignalRepository = void 0;
+const libsignal = __importStar(require("libsignal"));
+const WASignalGroup_1 = require("../../WASignalGroup");
+const Utils_1 = require("../Utils");
+const WABinary_1 = require("../WABinary");
+function makeLibSignalRepository(auth) {
+    const storage = signalStorage(auth);
+    return {
+        decryptGroupMessage({ group, authorJid, msg }) {
+            const senderName = jidToSignalSenderKeyName(group, authorJid);
+            const cipher = new WASignalGroup_1.GroupCipher(storage, senderName);
+            return cipher.decrypt(msg);
+        },
+        async processSenderKeyDistributionMessage({ item, authorJid }) {
+            const builder = new WASignalGroup_1.GroupSessionBuilder(storage);
+            const senderName = jidToSignalSenderKeyName(item.groupId, authorJid);
+            const senderMsg = new WASignalGroup_1.SenderKeyDistributionMessage(null, null, null, null, item.axolotlSenderKeyDistributionMessage);
+            const { [senderName]: senderKey } = await auth.keys.get('sender-key', [senderName]);
+            if (!senderKey) {
+                await storage.storeSenderKey(senderName, new WASignalGroup_1.SenderKeyRecord());
+            }
+            await builder.process(senderName, senderMsg);
+        },
+        async decryptMessage({ jid, type, ciphertext }) {
+            const addr = jidToSignalProtocolAddress(jid);
+            const session = new libsignal.SessionCipher(storage, addr);
+            let result;
+            switch (type) {
+                case 'pkmsg':
+                    result = await session.decryptPreKeyWhisperMessage(ciphertext);
+                    break;
+                case 'msg':
+                    result = await session.decryptWhisperMessage(ciphertext);
+                    break;
+            }
+            return result;
+        },
+        async encryptMessage({ jid, data }) {
+            const addr = jidToSignalProtocolAddress(jid);
+            const cipher = new libsignal.SessionCipher(storage, addr);
+            const { type: sigType, body } = await cipher.encrypt(data);
+            const type = sigType === 3 ? 'pkmsg' : 'msg';
+            return { type, ciphertext: Buffer.from(body, 'binary') };
+        },
+        async encryptGroupMessage({ group, meId, data }) {
+            const senderName = jidToSignalSenderKeyName(group, meId);
+            const builder = new WASignalGroup_1.GroupSessionBuilder(storage);
+            const { [senderName]: senderKey } = await auth.keys.get('sender-key', [senderName]);
+            if (!senderKey) {
+                await storage.storeSenderKey(senderName, new WASignalGroup_1.SenderKeyRecord());
+            }
+            const senderKeyDistributionMessage = await builder.create(senderName);
+            const session = new WASignalGroup_1.GroupCipher(storage, senderName);
+            const ciphertext = await session.encrypt(data);
+            return {
+                ciphertext,
+                senderKeyDistributionMessage: senderKeyDistributionMessage.serialize(),
+            };
+        },
+        async injectE2ESession({ jid, session }) {
+            const cipher = new libsignal.SessionBuilder(storage, jidToSignalProtocolAddress(jid));
+            await cipher.initOutgoing(session);
+        },
+        jidToSignalProtocolAddress(jid) {
+            return jidToSignalProtocolAddress(jid).toString();
+        },
+    };
+}
+exports.makeLibSignalRepository = makeLibSignalRepository;
+const jidToSignalProtocolAddress = (jid) => {
+    const { user, device } = (0, WABinary_1.jidDecode)(jid);
+    return new libsignal.ProtocolAddress(user, device || 0);
+};
+const jidToSignalSenderKeyName = (group, user) => {
+    return new WASignalGroup_1.SenderKeyName(group, jidToSignalProtocolAddress(user)).toString();
+};
+function signalStorage({ creds, keys }) {
+    return {
+        loadSession: async (id) => {
+            const { [id]: sess } = await keys.get('session', [id]);
+            if (sess) {
+                return libsignal.SessionRecord.deserialize(sess);
+            }
+        },
+        storeSession: async (id, session) => {
+            await keys.set({ 'session': { [id]: session.serialize() } });
+        },
+        isTrustedIdentity: () => {
+            return true;
+        },
+        loadPreKey: async (id) => {
+            const keyId = id.toString();
+            const { [keyId]: key } = await keys.get('pre-key', [keyId]);
+            if (key) {
+                return {
+                    privKey: Buffer.from(key.private),
+                    pubKey: Buffer.from(key.public)
+                };
+            }
+        },
+        removePreKey: (id) => keys.set({ 'pre-key': { [id]: null } }),
+        loadSignedPreKey: () => {
+            const key = creds.signedPreKey;
+            return {
+                privKey: Buffer.from(key.keyPair.private),
+                pubKey: Buffer.from(key.keyPair.public)
+            };
+        },
+        loadSenderKey: async (keyId) => {
+            const { [keyId]: key } = await keys.get('sender-key', [keyId]);
+            if (key) {
+                return new WASignalGroup_1.SenderKeyRecord(key);
+            }
+        },
+        storeSenderKey: async (keyId, key) => {
+            await keys.set({ 'sender-key': { [keyId]: key.serialize() } });
+        },
+        getOurRegistrationId: () => (creds.registrationId),
+        getOurIdentity: () => {
+            const { signedIdentityKey } = creds;
+            return {
+                privKey: Buffer.from(signedIdentityKey.private),
+                pubKey: (0, Utils_1.generateSignalPubKey)(signedIdentityKey.public),
+            };
+        }
+    };
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/Client/abstract-socket-client.d.ts b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/abstract-socket-client.d.ts
new file mode 100644
index 0000000..2a31036
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/abstract-socket-client.d.ts
@@ -0,0 +1,17 @@
+/// <reference types="node" />
+/// <reference types="node" />
+import { EventEmitter } from 'events';
+import { URL } from 'url';
+import { SocketConfig } from '../../Types';
+export declare abstract class AbstractSocketClient extends EventEmitter {
+    url: URL;
+    config: SocketConfig;
+    abstract get isOpen(): boolean;
+    abstract get isClosed(): boolean;
+    abstract get isClosing(): boolean;
+    abstract get isConnecting(): boolean;
+    constructor(url: URL, config: SocketConfig);
+    abstract connect(): Promise<void>;
+    abstract close(): Promise<void>;
+    abstract send(str: Uint8Array | string, cb?: (err?: Error) => void): boolean;
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/Client/abstract-socket-client.js b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/abstract-socket-client.js
new file mode 100644
index 0000000..f964f33
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/abstract-socket-client.js
@@ -0,0 +1,13 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.AbstractSocketClient = void 0;
+const events_1 = require("events");
+class AbstractSocketClient extends events_1.EventEmitter {
+    constructor(url, config) {
+        super();
+        this.url = url;
+        this.config = config;
+        this.setMaxListeners(0);
+    }
+}
+exports.AbstractSocketClient = AbstractSocketClient;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/Client/index.d.ts b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/index.d.ts
new file mode 100644
index 0000000..992371c
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/index.d.ts
@@ -0,0 +1,3 @@
+export * from './abstract-socket-client';
+export * from './mobile-socket-client';
+export * from './web-socket-client';
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/Client/index.js b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/index.js
new file mode 100644
index 0000000..44ef088
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/index.js
@@ -0,0 +1,19 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __exportStar = (this && this.__exportStar) || function(m, exports) {
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+__exportStar(require("./abstract-socket-client"), exports);
+__exportStar(require("./mobile-socket-client"), exports);
+__exportStar(require("./web-socket-client"), exports);
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/Client/mobile-socket-client.d.ts b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/mobile-socket-client.d.ts
new file mode 100644
index 0000000..aee8dbe
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/mobile-socket-client.d.ts
@@ -0,0 +1,13 @@
+/// <reference types="node" />
+import { Socket } from 'net';
+import { AbstractSocketClient } from './abstract-socket-client';
+export declare class MobileSocketClient extends AbstractSocketClient {
+    protected socket: Socket | null;
+    get isOpen(): boolean;
+    get isClosed(): boolean;
+    get isClosing(): boolean;
+    get isConnecting(): boolean;
+    connect(): Promise<void>;
+    close(): Promise<void>;
+    send(str: string | Uint8Array, cb?: (err?: Error) => void): boolean;
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/Client/mobile-socket-client.js b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/mobile-socket-client.js
new file mode 100644
index 0000000..9306861
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/mobile-socket-client.js
@@ -0,0 +1,65 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.MobileSocketClient = void 0;
+const net_1 = require("net");
+const abstract_socket_client_1 = require("./abstract-socket-client");
+class MobileSocketClient extends abstract_socket_client_1.AbstractSocketClient {
+    constructor() {
+        super(...arguments);
+        this.socket = null;
+    }
+    get isOpen() {
+        var _a;
+        return ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.readyState) === 'open';
+    }
+    get isClosed() {
+        var _a;
+        return this.socket === null || ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.readyState) === 'closed';
+    }
+    get isClosing() {
+        var _a;
+        return this.socket === null || ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.readyState) === 'closed';
+    }
+    get isConnecting() {
+        var _a;
+        return ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.readyState) === 'opening';
+    }
+    async connect() {
+        var _a;
+        if (this.socket) {
+            return;
+        }
+        if (this.config.agent) {
+            throw new Error('There are not support for proxy agent for mobile connection');
+        }
+        else {
+            this.socket = (0, net_1.connect)({
+                host: this.url.hostname,
+                port: Number(this.url.port) || 443
+            });
+        }
+        this.socket.setMaxListeners(0);
+        const events = ['close', 'connect', 'data', 'drain', 'end', 'error', 'lookup', 'ready', 'timeout'];
+        for (const event of events) {
+            (_a = this.socket) === null || _a === void 0 ? void 0 : _a.on(event, (...args) => this.emit(event, ...args));
+        }
+        this.socket.on('data', (...args) => this.emit('message', ...args));
+        this.socket.on('ready', (...args) => this.emit('open', ...args));
+    }
+    async close() {
+        if (!this.socket) {
+            return;
+        }
+        return new Promise(resolve => {
+            this.socket.end(resolve);
+            this.socket = null;
+        });
+    }
+    send(str, cb) {
+        if (this.socket === null) {
+            return false;
+        }
+        return this.socket.write(str, undefined, cb);
+    }
+}
+exports.MobileSocketClient = MobileSocketClient;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/Client/web-socket-client.d.ts b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/web-socket-client.d.ts
new file mode 100644
index 0000000..78ce5d7
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/web-socket-client.d.ts
@@ -0,0 +1,12 @@
+import WebSocket from 'ws';
+import { AbstractSocketClient } from './abstract-socket-client';
+export declare class WebSocketClient extends AbstractSocketClient {
+    protected socket: WebSocket | null;
+    get isOpen(): boolean;
+    get isClosed(): boolean;
+    get isClosing(): boolean;
+    get isConnecting(): boolean;
+    connect(): Promise<void>;
+    close(): Promise<void>;
+    send(str: string | Uint8Array, cb?: (err?: Error) => void): boolean;
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/Client/web-socket-client.js b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/web-socket-client.js
new file mode 100644
index 0000000..9730cc2
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/Client/web-socket-client.js
@@ -0,0 +1,62 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.WebSocketClient = void 0;
+const ws_1 = __importDefault(require("ws"));
+const Defaults_1 = require("../../Defaults");
+const abstract_socket_client_1 = require("./abstract-socket-client");
+class WebSocketClient extends abstract_socket_client_1.AbstractSocketClient {
+    constructor() {
+        super(...arguments);
+        this.socket = null;
+    }
+    get isOpen() {
+        var _a;
+        return ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.readyState) === ws_1.default.OPEN;
+    }
+    get isClosed() {
+        var _a;
+        return this.socket === null || ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.readyState) === ws_1.default.CLOSED;
+    }
+    get isClosing() {
+        var _a;
+        return this.socket === null || ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.readyState) === ws_1.default.CLOSING;
+    }
+    get isConnecting() {
+        var _a;
+        return ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.readyState) === ws_1.default.CONNECTING;
+    }
+    async connect() {
+        var _a, _b;
+        if (this.socket) {
+            return;
+        }
+        this.socket = new ws_1.default(this.url, {
+            origin: Defaults_1.DEFAULT_ORIGIN,
+            headers: (_a = this.config.options) === null || _a === void 0 ? void 0 : _a.headers,
+            handshakeTimeout: this.config.connectTimeoutMs,
+            timeout: this.config.connectTimeoutMs,
+            agent: this.config.agent,
+        });
+        this.socket.setMaxListeners(0);
+        const events = ['close', 'error', 'upgrade', 'message', 'open', 'ping', 'pong', 'unexpected-response'];
+        for (const event of events) {
+            (_b = this.socket) === null || _b === void 0 ? void 0 : _b.on(event, (...args) => this.emit(event, ...args));
+        }
+    }
+    async close() {
+        if (!this.socket) {
+            return;
+        }
+        this.socket.close();
+        this.socket = null;
+    }
+    send(str, cb) {
+        var _a;
+        (_a = this.socket) === null || _a === void 0 ? void 0 : _a.send(str, cb);
+        return Boolean(this.socket);
+    }
+}
+exports.WebSocketClient = WebSocketClient;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/business.d.ts b/node_modules/@whiskeysockets/baileys/lib/Socket/business.d.ts
new file mode 100644
index 0000000..ed87e40
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/business.d.ts
@@ -0,0 +1,136 @@
+/// <reference types="node" />
+import { GetCatalogOptions, ProductCreate, ProductUpdate, SocketConfig } from '../Types';
+import { BinaryNode } from '../WABinary';
+export declare const makeBusinessSocket: (config: SocketConfig) => {
+    getOrderDetails: (orderId: string, tokenBase64: string) => Promise<import("../Types").OrderDetails>;
+    getCatalog: ({ jid, limit, cursor }: GetCatalogOptions) => Promise<{
+        products: import("../Types").Product[];
+        nextPageCursor: string | undefined;
+    }>;
+    getCollections: (jid?: string, limit?: number) => Promise<{
+        collections: import("../Types").CatalogCollection[];
+    }>;
+    productCreate: (create: ProductCreate) => Promise<import("../Types").Product>;
+    productDelete: (productIds: string[]) => Promise<{
+        deleted: number;
+    }>;
+    productUpdate: (productId: string, update: ProductUpdate) => Promise<import("../Types").Product>;
+    sendMessageAck: ({ tag, attrs, content }: BinaryNode) => Promise<void>;
+    sendRetryRequest: (node: BinaryNode, forceIncludeKeys?: boolean) => Promise<void>;
+    rejectCall: (callId: string, callFrom: string) => Promise<void>;
+    getPrivacyTokens: (jids: string[]) => Promise<BinaryNode>;
+    assertSessions: (jids: string[], force: boolean) => Promise<boolean>;
+    relayMessage: (jid: string, message: import("../Types").WAProto.IMessage, { messageId: msgId, participant, additionalAttributes, useUserDevicesCache, cachedGroupMetadata, statusJidList }: import("../Types").MessageRelayOptions) => Promise<string>;
+    sendReceipt: (jid: string, participant: string | undefined, messageIds: string[], type: import("../Types").MessageReceiptType) => Promise<void>;
+    sendReceipts: (keys: import("../Types").WAProto.IMessageKey[], type: import("../Types").MessageReceiptType) => Promise<void>;
+    getButtonArgs: (message: import("../Types").WAProto.IMessage) => {
+        [key: string]: string;
+    };
+    readMessages: (keys: import("../Types").WAProto.IMessageKey[]) => Promise<void>;
+    refreshMediaConn: (forceGet?: boolean) => Promise<import("../Types").MediaConnInfo>;
+    waUploadToServer: import("../Types").WAMediaUploadFunction;
+    fetchPrivacySettings: (force?: boolean) => Promise<{
+        [_: string]: string;
+    }>;
+    updateMediaMessage: (message: import("../Types").WAProto.IWebMessageInfo) => Promise<import("../Types").WAProto.IWebMessageInfo>;
+    sendMessage: (jid: string, content: import("../Types").AnyMessageContent, options?: import("../Types").MiscMessageGenerationOptions) => Promise<import("../Types").WAProto.WebMessageInfo | undefined>;
+    groupMetadata: (jid: string) => Promise<import("../Types").GroupMetadata>;
+    groupCreate: (subject: string, participants: string[]) => Promise<import("../Types").GroupMetadata>;
+    groupLeave: (id: string) => Promise<void>;
+    groupUpdateSubject: (jid: string, subject: string) => Promise<void>;
+    groupRequestParticipantsList: (jid: string) => Promise<{
+        [key: string]: string;
+    }[]>;
+    groupRequestParticipantsUpdate: (jid: string, participants: string[], action: "reject" | "approve") => Promise<{
+        status: string;
+        jid: string;
+    }[]>;
+    groupParticipantsUpdate: (jid: string, participants: string[], action: import("../Types").ParticipantAction) => Promise<{
+        status: string;
+        jid: string;
+        content: BinaryNode;
+    }[]>;
+    groupUpdateDescription: (jid: string, description?: string | undefined) => Promise<void>;
+    groupInviteCode: (jid: string) => Promise<string | undefined>;
+    groupRevokeInvite: (jid: string) => Promise<string | undefined>;
+    groupAcceptInvite: (code: string) => Promise<string | undefined>;
+    groupAcceptInviteV4: (key: string | import("../Types").WAProto.IMessageKey, inviteMessage: import("../Types").WAProto.Message.IGroupInviteMessage) => Promise<string>;
+    groupGetInviteInfo: (code: string) => Promise<import("../Types").GroupMetadata>;
+    groupToggleEphemeral: (jid: string, ephemeralExpiration: number) => Promise<void>;
+    groupSettingUpdate: (jid: string, setting: "announcement" | "locked" | "not_announcement" | "unlocked") => Promise<void>;
+    groupMemberAddMode: (jid: string, mode: "all_member_add" | "admin_add") => Promise<void>;
+    groupJoinApprovalMode: (jid: string, mode: "on" | "off") => Promise<void>;
+    groupFetchAllParticipating: () => Promise<{
+        [_: string]: import("../Types").GroupMetadata;
+    }>;
+    processingMutex: {
+        mutex<T>(code: () => T | Promise<T>): Promise<T>;
+    };
+    upsertMessage: (msg: import("../Types").WAProto.IWebMessageInfo, type: import("../Types").MessageUpsertType) => Promise<void>;
+    appPatch: (patchCreate: import("../Types").WAPatchCreate) => Promise<void>;
+    sendPresenceUpdate: (type: import("../Types").WAPresence, toJid?: string | undefined) => Promise<void>;
+    presenceSubscribe: (toJid: string, tcToken?: Buffer | undefined) => Promise<void>;
+    profilePictureUrl: (jid: string, type?: "image" | "preview", timeoutMs?: number | undefined) => Promise<string | undefined>;
+    onWhatsApp: (...jids: string[]) => Promise<{
+        exists: boolean;
+        jid: string;
+    }[]>;
+    fetchBlocklist: () => Promise<string[]>;
+    fetchStatus: (jid: string) => Promise<{
+        status: string | undefined;
+        setAt: Date;
+    } | undefined>;
+    updateProfilePicture: (jid: string, content: import("../Types").WAMediaUpload) => Promise<void>;
+    removeProfilePicture: (jid: string) => Promise<void>;
+    updateProfileStatus: (status: string) => Promise<void>;
+    updateProfileName: (name: string) => Promise<void>;
+    updateBlockStatus: (jid: string, action: "block" | "unblock") => Promise<void>;
+    updateLastSeenPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateOnlinePrivacy: (value: import("../Types").WAPrivacyOnlineValue) => Promise<void>;
+    updateProfilePicturePrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateStatusPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateReadReceiptsPrivacy: (value: import("../Types").WAReadReceiptsValue) => Promise<void>;
+    updateGroupsAddPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateDefaultDisappearingMode: (duration: number) => Promise<void>;
+    getBusinessProfile: (jid: string) => Promise<void | import("../Types").WABusinessProfile>;
+    resyncAppState: (collections: readonly ("critical_block" | "critical_unblock_low" | "regular_high" | "regular_low" | "regular")[], isInitialSync: boolean) => Promise<void>;
+    chatModify: (mod: import("../Types").ChatModification, jid: string) => Promise<void>;
+    cleanDirtyBits: (type: "account_sync" | "groups", fromTimestamp?: string | number | undefined) => Promise<void>;
+    addChatLabel: (jid: string, labelId: string) => Promise<void>;
+    removeChatLabel: (jid: string, labelId: string) => Promise<void>;
+    addMessageLabel: (jid: string, messageId: string, labelId: string) => Promise<void>;
+    removeMessageLabel: (jid: string, messageId: string, labelId: string) => Promise<void>;
+    star: (jid: string, messages: {
+        id: string;
+        fromMe?: boolean | undefined;
+    }[], star: boolean) => Promise<void>;
+    type: "md";
+    ws: any;
+    ev: import("../Types").BaileysEventEmitter & {
+        process(handler: (events: Partial<import("../Types").BaileysEventMap>) => void | Promise<void>): () => void;
+        buffer(): void;
+        createBufferedFunction<A extends any[], T_1>(work: (...args: A) => Promise<T_1>): (...args: A) => Promise<T_1>;
+        flush(force?: boolean | undefined): boolean;
+        isBuffering(): boolean;
+    };
+    authState: {
+        creds: import("../Types").AuthenticationCreds;
+        keys: import("../Types").SignalKeyStoreWithTransaction;
+    };
+    signalRepository: import("../Types").SignalRepository;
+    user: import("../Types").Contact | undefined;
+    generateMessageTag: () => string;
+    query: (node: BinaryNode, timeoutMs?: number | undefined) => Promise<BinaryNode>;
+    waitForMessage: <T_2>(msgId: string, timeoutMs?: number | undefined) => Promise<T_2>;
+    waitForSocketOpen: () => Promise<void>;
+    sendRawMessage: (data: Uint8Array | Buffer) => Promise<void>;
+    sendNode: (frame: BinaryNode) => Promise<void>;
+    logout: (msg?: string | undefined) => Promise<void>;
+    end: (error: Error | undefined) => void;
+    onUnexpectedError: (err: Error | import("@hapi/boom").Boom<any>, msg: string) => void;
+    uploadPreKeys: (count?: number) => Promise<void>;
+    uploadPreKeysToServerIfRequired: () => Promise<void>;
+    requestPairingCode: (phoneNumber: string) => Promise<string>;
+    waitForConnectionUpdate: (check: (u: Partial<import("../Types").ConnectionState>) => boolean | undefined, timeoutMs?: number | undefined) => Promise<void>;
+    sendWAMBuffer: (wamBuffer: Buffer) => Promise<BinaryNode>;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/business.js b/node_modules/@whiskeysockets/baileys/lib/Socket/business.js
new file mode 100644
index 0000000..b459e15
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/business.js
@@ -0,0 +1,259 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.makeBusinessSocket = void 0;
+const business_1 = require("../Utils/business");
+const WABinary_1 = require("../WABinary");
+const generic_utils_1 = require("../WABinary/generic-utils");
+const messages_recv_1 = require("./messages-recv");
+const makeBusinessSocket = (config) => {
+    const sock = (0, messages_recv_1.makeMessagesRecvSocket)(config);
+    const { authState, query, waUploadToServer } = sock;
+    const getCatalog = async ({ jid, limit, cursor }) => {
+        var _a;
+        jid = jid || ((_a = authState.creds.me) === null || _a === void 0 ? void 0 : _a.id);
+        jid = (0, WABinary_1.jidNormalizedUser)(jid);
+        const queryParamNodes = [
+            {
+                tag: 'limit',
+                attrs: {},
+                content: Buffer.from((limit || 10).toString())
+            },
+            {
+                tag: 'width',
+                attrs: {},
+                content: Buffer.from('100')
+            },
+            {
+                tag: 'height',
+                attrs: {},
+                content: Buffer.from('100')
+            },
+        ];
+        if (cursor) {
+            queryParamNodes.push({
+                tag: 'after',
+                attrs: {},
+                content: cursor
+            });
+        }
+        const result = await query({
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'get',
+                xmlns: 'w:biz:catalog'
+            },
+            content: [
+                {
+                    tag: 'product_catalog',
+                    attrs: {
+                        jid,
+                        'allow_shop_source': 'true'
+                    },
+                    content: queryParamNodes
+                }
+            ]
+        });
+        return (0, business_1.parseCatalogNode)(result);
+    };
+    const getCollections = async (jid, limit = 51) => {
+        var _a;
+        jid = jid || ((_a = authState.creds.me) === null || _a === void 0 ? void 0 : _a.id);
+        jid = (0, WABinary_1.jidNormalizedUser)(jid);
+        const result = await query({
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'get',
+                xmlns: 'w:biz:catalog',
+                'smax_id': '35'
+            },
+            content: [
+                {
+                    tag: 'collections',
+                    attrs: {
+                        'biz_jid': jid,
+                    },
+                    content: [
+                        {
+                            tag: 'collection_limit',
+                            attrs: {},
+                            content: Buffer.from(limit.toString())
+                        },
+                        {
+                            tag: 'item_limit',
+                            attrs: {},
+                            content: Buffer.from(limit.toString())
+                        },
+                        {
+                            tag: 'width',
+                            attrs: {},
+                            content: Buffer.from('100')
+                        },
+                        {
+                            tag: 'height',
+                            attrs: {},
+                            content: Buffer.from('100')
+                        }
+                    ]
+                }
+            ]
+        });
+        return (0, business_1.parseCollectionsNode)(result);
+    };
+    const getOrderDetails = async (orderId, tokenBase64) => {
+        const result = await query({
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'get',
+                xmlns: 'fb:thrift_iq',
+                'smax_id': '5'
+            },
+            content: [
+                {
+                    tag: 'order',
+                    attrs: {
+                        op: 'get',
+                        id: orderId
+                    },
+                    content: [
+                        {
+                            tag: 'image_dimensions',
+                            attrs: {},
+                            content: [
+                                {
+                                    tag: 'width',
+                                    attrs: {},
+                                    content: Buffer.from('100')
+                                },
+                                {
+                                    tag: 'height',
+                                    attrs: {},
+                                    content: Buffer.from('100')
+                                }
+                            ]
+                        },
+                        {
+                            tag: 'token',
+                            attrs: {},
+                            content: Buffer.from(tokenBase64)
+                        }
+                    ]
+                }
+            ]
+        });
+        return (0, business_1.parseOrderDetailsNode)(result);
+    };
+    const productUpdate = async (productId, update) => {
+        update = await (0, business_1.uploadingNecessaryImagesOfProduct)(update, waUploadToServer);
+        const editNode = (0, business_1.toProductNode)(productId, update);
+        const result = await query({
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'set',
+                xmlns: 'w:biz:catalog'
+            },
+            content: [
+                {
+                    tag: 'product_catalog_edit',
+                    attrs: { v: '1' },
+                    content: [
+                        editNode,
+                        {
+                            tag: 'width',
+                            attrs: {},
+                            content: '100'
+                        },
+                        {
+                            tag: 'height',
+                            attrs: {},
+                            content: '100'
+                        }
+                    ]
+                }
+            ]
+        });
+        const productCatalogEditNode = (0, generic_utils_1.getBinaryNodeChild)(result, 'product_catalog_edit');
+        const productNode = (0, generic_utils_1.getBinaryNodeChild)(productCatalogEditNode, 'product');
+        return (0, business_1.parseProductNode)(productNode);
+    };
+    const productCreate = async (create) => {
+        // ensure isHidden is defined
+        create.isHidden = !!create.isHidden;
+        create = await (0, business_1.uploadingNecessaryImagesOfProduct)(create, waUploadToServer);
+        const createNode = (0, business_1.toProductNode)(undefined, create);
+        const result = await query({
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'set',
+                xmlns: 'w:biz:catalog'
+            },
+            content: [
+                {
+                    tag: 'product_catalog_add',
+                    attrs: { v: '1' },
+                    content: [
+                        createNode,
+                        {
+                            tag: 'width',
+                            attrs: {},
+                            content: '100'
+                        },
+                        {
+                            tag: 'height',
+                            attrs: {},
+                            content: '100'
+                        }
+                    ]
+                }
+            ]
+        });
+        const productCatalogAddNode = (0, generic_utils_1.getBinaryNodeChild)(result, 'product_catalog_add');
+        const productNode = (0, generic_utils_1.getBinaryNodeChild)(productCatalogAddNode, 'product');
+        return (0, business_1.parseProductNode)(productNode);
+    };
+    const productDelete = async (productIds) => {
+        const result = await query({
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'set',
+                xmlns: 'w:biz:catalog'
+            },
+            content: [
+                {
+                    tag: 'product_catalog_delete',
+                    attrs: { v: '1' },
+                    content: productIds.map(id => ({
+                        tag: 'product',
+                        attrs: {},
+                        content: [
+                            {
+                                tag: 'id',
+                                attrs: {},
+                                content: Buffer.from(id)
+                            }
+                        ]
+                    }))
+                }
+            ]
+        });
+        const productCatalogDelNode = (0, generic_utils_1.getBinaryNodeChild)(result, 'product_catalog_delete');
+        return {
+            deleted: +((productCatalogDelNode === null || productCatalogDelNode === void 0 ? void 0 : productCatalogDelNode.attrs.deleted_count) || 0)
+        };
+    };
+    return {
+        ...sock,
+        getOrderDetails,
+        getCatalog,
+        getCollections,
+        productCreate,
+        productDelete,
+        productUpdate
+    };
+};
+exports.makeBusinessSocket = makeBusinessSocket;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/chats.d.ts b/node_modules/@whiskeysockets/baileys/lib/Socket/chats.d.ts
new file mode 100644
index 0000000..a099e10
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/chats.d.ts
@@ -0,0 +1,80 @@
+/// <reference types="node" />
+import { Boom } from '@hapi/boom';
+import { proto } from '../../WAProto';
+import { ChatModification, MessageUpsertType, SocketConfig, WABusinessProfile, WAMediaUpload, WAPatchCreate, WAPresence, WAPrivacyOnlineValue, WAPrivacyValue, WAReadReceiptsValue } from '../Types';
+import { BinaryNode } from '../WABinary';
+export declare const makeChatsSocket: (config: SocketConfig) => {
+    processingMutex: {
+        mutex<T>(code: () => T | Promise<T>): Promise<T>;
+    };
+    fetchPrivacySettings: (force?: boolean) => Promise<{
+        [_: string]: string;
+    }>;
+    upsertMessage: (msg: proto.IWebMessageInfo, type: MessageUpsertType) => Promise<void>;
+    appPatch: (patchCreate: WAPatchCreate) => Promise<void>;
+    sendPresenceUpdate: (type: WAPresence, toJid?: string) => Promise<void>;
+    presenceSubscribe: (toJid: string, tcToken?: Buffer) => Promise<void>;
+    profilePictureUrl: (jid: string, type?: 'preview' | 'image', timeoutMs?: number) => Promise<string | undefined>;
+    onWhatsApp: (...jids: string[]) => Promise<{
+        exists: boolean;
+        jid: string;
+    }[]>;
+    fetchBlocklist: () => Promise<string[]>;
+    fetchStatus: (jid: string) => Promise<{
+        status: string | undefined;
+        setAt: Date;
+    } | undefined>;
+    updateProfilePicture: (jid: string, content: WAMediaUpload) => Promise<void>;
+    removeProfilePicture: (jid: string) => Promise<void>;
+    updateProfileStatus: (status: string) => Promise<void>;
+    updateProfileName: (name: string) => Promise<void>;
+    updateBlockStatus: (jid: string, action: 'block' | 'unblock') => Promise<void>;
+    updateLastSeenPrivacy: (value: WAPrivacyValue) => Promise<void>;
+    updateOnlinePrivacy: (value: WAPrivacyOnlineValue) => Promise<void>;
+    updateProfilePicturePrivacy: (value: WAPrivacyValue) => Promise<void>;
+    updateStatusPrivacy: (value: WAPrivacyValue) => Promise<void>;
+    updateReadReceiptsPrivacy: (value: WAReadReceiptsValue) => Promise<void>;
+    updateGroupsAddPrivacy: (value: WAPrivacyValue) => Promise<void>;
+    updateDefaultDisappearingMode: (duration: number) => Promise<void>;
+    getBusinessProfile: (jid: string) => Promise<WABusinessProfile | void>;
+    resyncAppState: (collections: readonly ("critical_block" | "critical_unblock_low" | "regular_high" | "regular_low" | "regular")[], isInitialSync: boolean) => Promise<void>;
+    chatModify: (mod: ChatModification, jid: string) => Promise<void>;
+    cleanDirtyBits: (type: 'account_sync' | 'groups', fromTimestamp?: number | string) => Promise<void>;
+    addChatLabel: (jid: string, labelId: string) => Promise<void>;
+    removeChatLabel: (jid: string, labelId: string) => Promise<void>;
+    addMessageLabel: (jid: string, messageId: string, labelId: string) => Promise<void>;
+    removeMessageLabel: (jid: string, messageId: string, labelId: string) => Promise<void>;
+    star: (jid: string, messages: {
+        id: string;
+        fromMe?: boolean;
+    }[], star: boolean) => Promise<void>;
+    type: "md";
+    ws: any;
+    ev: import("../Types").BaileysEventEmitter & {
+        process(handler: (events: Partial<import("../Types").BaileysEventMap>) => void | Promise<void>): () => void;
+        buffer(): void;
+        createBufferedFunction<A extends any[], T_1>(work: (...args: A) => Promise<T_1>): (...args: A) => Promise<T_1>;
+        flush(force?: boolean | undefined): boolean;
+        isBuffering(): boolean;
+    };
+    authState: {
+        creds: import("../Types").AuthenticationCreds;
+        keys: import("../Types").SignalKeyStoreWithTransaction;
+    };
+    signalRepository: import("../Types").SignalRepository;
+    user: import("../Types").Contact | undefined;
+    generateMessageTag: () => string;
+    query: (node: BinaryNode, timeoutMs?: number | undefined) => Promise<BinaryNode>;
+    waitForMessage: <T_2>(msgId: string, timeoutMs?: number | undefined) => Promise<T_2>;
+    waitForSocketOpen: () => Promise<void>;
+    sendRawMessage: (data: Uint8Array | Buffer) => Promise<void>;
+    sendNode: (frame: BinaryNode) => Promise<void>;
+    logout: (msg?: string | undefined) => Promise<void>;
+    end: (error: Error | undefined) => void;
+    onUnexpectedError: (err: Error | Boom<any>, msg: string) => void;
+    uploadPreKeys: (count?: number) => Promise<void>;
+    uploadPreKeysToServerIfRequired: () => Promise<void>;
+    requestPairingCode: (phoneNumber: string) => Promise<string>;
+    waitForConnectionUpdate: (check: (u: Partial<import("../Types").ConnectionState>) => boolean | undefined, timeoutMs?: number | undefined) => Promise<void>;
+    sendWAMBuffer: (wamBuffer: Buffer) => Promise<BinaryNode>;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/chats.js b/node_modules/@whiskeysockets/baileys/lib/Socket/chats.js
new file mode 100644
index 0000000..cb7b67a
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/chats.js
@@ -0,0 +1,838 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.makeChatsSocket = void 0;
+const boom_1 = require("@hapi/boom");
+const WAProto_1 = require("../../WAProto");
+const Defaults_1 = require("../Defaults");
+const Types_1 = require("../Types");
+const Utils_1 = require("../Utils");
+const make_mutex_1 = require("../Utils/make-mutex");
+const process_message_1 = __importDefault(require("../Utils/process-message"));
+const WABinary_1 = require("../WABinary");
+const socket_1 = require("./socket");
+const MAX_SYNC_ATTEMPTS = 2;
+const makeChatsSocket = (config) => {
+    const { logger, markOnlineOnConnect, fireInitQueries, appStateMacVerification, shouldIgnoreJid, shouldSyncHistoryMessage, } = config;
+    const sock = (0, socket_1.makeSocket)(config);
+    const { ev, ws, authState, generateMessageTag, sendNode, query, onUnexpectedError, } = sock;
+    let privacySettings;
+    let needToFlushWithAppStateSync = false;
+    let pendingAppStateSync = false;
+    /** this mutex ensures that the notifications (receipts, messages etc.) are processed in order */
+    const processingMutex = (0, make_mutex_1.makeMutex)();
+    /** helper function to fetch the given app state sync key */
+    const getAppStateSyncKey = async (keyId) => {
+        const { [keyId]: key } = await authState.keys.get('app-state-sync-key', [keyId]);
+        return key;
+    };
+    const fetchPrivacySettings = async (force = false) => {
+        if (!privacySettings || force) {
+            const { content } = await query({
+                tag: 'iq',
+                attrs: {
+                    xmlns: 'privacy',
+                    to: WABinary_1.S_WHATSAPP_NET,
+                    type: 'get'
+                },
+                content: [
+                    { tag: 'privacy', attrs: {} }
+                ]
+            });
+            privacySettings = (0, WABinary_1.reduceBinaryNodeToDictionary)(content === null || content === void 0 ? void 0 : content[0], 'category');
+        }
+        return privacySettings;
+    };
+    /** helper function to run a privacy IQ query */
+    const privacyQuery = async (name, value) => {
+        await query({
+            tag: 'iq',
+            attrs: {
+                xmlns: 'privacy',
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'set'
+            },
+            content: [{
+                    tag: 'privacy',
+                    attrs: {},
+                    content: [
+                        {
+                            tag: 'category',
+                            attrs: { name, value }
+                        }
+                    ]
+                }]
+        });
+    };
+    const updateLastSeenPrivacy = async (value) => {
+        await privacyQuery('last', value);
+    };
+    const updateOnlinePrivacy = async (value) => {
+        await privacyQuery('online', value);
+    };
+    const updateProfilePicturePrivacy = async (value) => {
+        await privacyQuery('profile', value);
+    };
+    const updateStatusPrivacy = async (value) => {
+        await privacyQuery('status', value);
+    };
+    const updateReadReceiptsPrivacy = async (value) => {
+        await privacyQuery('readreceipts', value);
+    };
+    const updateGroupsAddPrivacy = async (value) => {
+        await privacyQuery('groupadd', value);
+    };
+    const updateDefaultDisappearingMode = async (duration) => {
+        await query({
+            tag: 'iq',
+            attrs: {
+                xmlns: 'disappearing_mode',
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'set'
+            },
+            content: [{
+                    tag: 'disappearing_mode',
+                    attrs: {
+                        duration: duration.toString()
+                    }
+                }]
+        });
+    };
+    /** helper function to run a generic IQ query */
+    const interactiveQuery = async (userNodes, queryNode) => {
+        const result = await query({
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'get',
+                xmlns: 'usync',
+            },
+            content: [
+                {
+                    tag: 'usync',
+                    attrs: {
+                        sid: generateMessageTag(),
+                        mode: 'query',
+                        last: 'true',
+                        index: '0',
+                        context: 'interactive',
+                    },
+                    content: [
+                        {
+                            tag: 'query',
+                            attrs: {},
+                            content: [queryNode]
+                        },
+                        {
+                            tag: 'list',
+                            attrs: {},
+                            content: userNodes
+                        }
+                    ]
+                }
+            ],
+        });
+        const usyncNode = (0, WABinary_1.getBinaryNodeChild)(result, 'usync');
+        const listNode = (0, WABinary_1.getBinaryNodeChild)(usyncNode, 'list');
+        const users = (0, WABinary_1.getBinaryNodeChildren)(listNode, 'user');
+        return users;
+    };
+    const onWhatsApp = async (...jids) => {
+        const query = { tag: 'contact', attrs: {} };
+        const list = jids.map((jid) => {
+            // insures only 1 + is there
+            const content = `+${jid.replace('+', '')}`;
+            return {
+                tag: 'user',
+                attrs: {},
+                content: [{
+                        tag: 'contact',
+                        attrs: {},
+                        content,
+                    }],
+            };
+        });
+        const results = await interactiveQuery(list, query);
+        return results.map(user => {
+            const contact = (0, WABinary_1.getBinaryNodeChild)(user, 'contact');
+            return { exists: (contact === null || contact === void 0 ? void 0 : contact.attrs.type) === 'in', jid: user.attrs.jid };
+        }).filter(item => item.exists);
+    };
+    const fetchStatus = async (jid) => {
+        const [result] = await interactiveQuery([{ tag: 'user', attrs: { jid } }], { tag: 'status', attrs: {} });
+        if (result) {
+            const status = (0, WABinary_1.getBinaryNodeChild)(result, 'status');
+            return {
+                status: status === null || status === void 0 ? void 0 : status.content.toString(),
+                setAt: new Date(+((status === null || status === void 0 ? void 0 : status.attrs.t) || 0) * 1000)
+            };
+        }
+    };
+    /** update the profile picture for yourself or a group */
+    const updateProfilePicture = async (jid, content) => {
+        const { img } = await (0, Utils_1.generateProfilePicture)(content);
+        await query({
+            tag: 'iq',
+            attrs: {
+                to: (0, WABinary_1.jidNormalizedUser)(jid),
+                type: 'set',
+                xmlns: 'w:profile:picture'
+            },
+            content: [
+                {
+                    tag: 'picture',
+                    attrs: { type: 'image' },
+                    content: img
+                }
+            ]
+        });
+    };
+    /** remove the profile picture for yourself or a group */
+    const removeProfilePicture = async (jid) => {
+        await query({
+            tag: 'iq',
+            attrs: {
+                to: (0, WABinary_1.jidNormalizedUser)(jid),
+                type: 'set',
+                xmlns: 'w:profile:picture'
+            }
+        });
+    };
+    /** update the profile status for yourself */
+    const updateProfileStatus = async (status) => {
+        await query({
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'set',
+                xmlns: 'status'
+            },
+            content: [
+                {
+                    tag: 'status',
+                    attrs: {},
+                    content: Buffer.from(status, 'utf-8')
+                }
+            ]
+        });
+    };
+    const updateProfileName = async (name) => {
+        await chatModify({ pushNameSetting: name }, '');
+    };
+    const fetchBlocklist = async () => {
+        const result = await query({
+            tag: 'iq',
+            attrs: {
+                xmlns: 'blocklist',
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'get'
+            }
+        });
+        const listNode = (0, WABinary_1.getBinaryNodeChild)(result, 'list');
+        return (0, WABinary_1.getBinaryNodeChildren)(listNode, 'item')
+            .map(n => n.attrs.jid);
+    };
+    const updateBlockStatus = async (jid, action) => {
+        await query({
+            tag: 'iq',
+            attrs: {
+                xmlns: 'blocklist',
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'set'
+            },
+            content: [
+                {
+                    tag: 'item',
+                    attrs: {
+                        action,
+                        jid
+                    }
+                }
+            ]
+        });
+    };
+    const getBusinessProfile = async (jid) => {
+        var _a, _b, _c, _d, _e, _f, _g;
+        const results = await query({
+            tag: 'iq',
+            attrs: {
+                to: 's.whatsapp.net',
+                xmlns: 'w:biz',
+                type: 'get'
+            },
+            content: [{
+                    tag: 'business_profile',
+                    attrs: { v: '244' },
+                    content: [{
+                            tag: 'profile',
+                            attrs: { jid }
+                        }]
+                }]
+        });
+        const profileNode = (0, WABinary_1.getBinaryNodeChild)(results, 'business_profile');
+        const profiles = (0, WABinary_1.getBinaryNodeChild)(profileNode, 'profile');
+        if (profiles) {
+            const address = (0, WABinary_1.getBinaryNodeChild)(profiles, 'address');
+            const description = (0, WABinary_1.getBinaryNodeChild)(profiles, 'description');
+            const website = (0, WABinary_1.getBinaryNodeChild)(profiles, 'website');
+            const email = (0, WABinary_1.getBinaryNodeChild)(profiles, 'email');
+            const category = (0, WABinary_1.getBinaryNodeChild)((0, WABinary_1.getBinaryNodeChild)(profiles, 'categories'), 'category');
+            const businessHours = (0, WABinary_1.getBinaryNodeChild)(profiles, 'business_hours');
+            const businessHoursConfig = businessHours
+                ? (0, WABinary_1.getBinaryNodeChildren)(businessHours, 'business_hours_config')
+                : undefined;
+            const websiteStr = (_a = website === null || website === void 0 ? void 0 : website.content) === null || _a === void 0 ? void 0 : _a.toString();
+            return {
+                wid: (_b = profiles.attrs) === null || _b === void 0 ? void 0 : _b.jid,
+                address: (_c = address === null || address === void 0 ? void 0 : address.content) === null || _c === void 0 ? void 0 : _c.toString(),
+                description: ((_d = description === null || description === void 0 ? void 0 : description.content) === null || _d === void 0 ? void 0 : _d.toString()) || '',
+                website: websiteStr ? [websiteStr] : [],
+                email: (_e = email === null || email === void 0 ? void 0 : email.content) === null || _e === void 0 ? void 0 : _e.toString(),
+                category: (_f = category === null || category === void 0 ? void 0 : category.content) === null || _f === void 0 ? void 0 : _f.toString(),
+                'business_hours': {
+                    timezone: (_g = businessHours === null || businessHours === void 0 ? void 0 : businessHours.attrs) === null || _g === void 0 ? void 0 : _g.timezone,
+                    'business_config': businessHoursConfig === null || businessHoursConfig === void 0 ? void 0 : businessHoursConfig.map(({ attrs }) => attrs)
+                }
+            };
+        }
+    };
+    const cleanDirtyBits = async (type, fromTimestamp) => {
+        logger.info({ fromTimestamp }, 'clean dirty bits ' + type);
+        await sendNode({
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'set',
+                xmlns: 'urn:xmpp:whatsapp:dirty',
+                id: generateMessageTag(),
+            },
+            content: [
+                {
+                    tag: 'clean',
+                    attrs: {
+                        type,
+                        ...(fromTimestamp ? { timestamp: fromTimestamp.toString() } : null),
+                    }
+                }
+            ]
+        });
+    };
+    const newAppStateChunkHandler = (isInitialSync) => {
+        return {
+            onMutation(mutation) {
+                (0, Utils_1.processSyncAction)(mutation, ev, authState.creds.me, isInitialSync ? { accountSettings: authState.creds.accountSettings } : undefined, logger);
+            }
+        };
+    };
+    const resyncAppState = ev.createBufferedFunction(async (collections, isInitialSync) => {
+        // we use this to determine which events to fire
+        // otherwise when we resync from scratch -- all notifications will fire
+        const initialVersionMap = {};
+        const globalMutationMap = {};
+        await authState.keys.transaction(async () => {
+            var _a;
+            const collectionsToHandle = new Set(collections);
+            // in case something goes wrong -- ensure we don't enter a loop that cannot be exited from
+            const attemptsMap = {};
+            // keep executing till all collections are done
+            // sometimes a single patch request will not return all the patches (God knows why)
+            // so we fetch till they're all done (this is determined by the "has_more_patches" flag)
+            while (collectionsToHandle.size) {
+                const states = {};
+                const nodes = [];
+                for (const name of collectionsToHandle) {
+                    const result = await authState.keys.get('app-state-sync-version', [name]);
+                    let state = result[name];
+                    if (state) {
+                        if (typeof initialVersionMap[name] === 'undefined') {
+                            initialVersionMap[name] = state.version;
+                        }
+                    }
+                    else {
+                        state = (0, Utils_1.newLTHashState)();
+                    }
+                    states[name] = state;
+                    logger.info(`resyncing ${name} from v${state.version}`);
+                    nodes.push({
+                        tag: 'collection',
+                        attrs: {
+                            name,
+                            version: state.version.toString(),
+                            // return snapshot if being synced from scratch
+                            'return_snapshot': (!state.version).toString()
+                        }
+                    });
+                }
+                const result = await query({
+                    tag: 'iq',
+                    attrs: {
+                        to: WABinary_1.S_WHATSAPP_NET,
+                        xmlns: 'w:sync:app:state',
+                        type: 'set'
+                    },
+                    content: [
+                        {
+                            tag: 'sync',
+                            attrs: {},
+                            content: nodes
+                        }
+                    ]
+                });
+                // extract from binary node
+                const decoded = await (0, Utils_1.extractSyncdPatches)(result, config === null || config === void 0 ? void 0 : config.options);
+                for (const key in decoded) {
+                    const name = key;
+                    const { patches, hasMorePatches, snapshot } = decoded[name];
+                    try {
+                        if (snapshot) {
+                            const { state: newState, mutationMap } = await (0, Utils_1.decodeSyncdSnapshot)(name, snapshot, getAppStateSyncKey, initialVersionMap[name], appStateMacVerification.snapshot);
+                            states[name] = newState;
+                            Object.assign(globalMutationMap, mutationMap);
+                            logger.info(`restored state of ${name} from snapshot to v${newState.version} with mutations`);
+                            await authState.keys.set({ 'app-state-sync-version': { [name]: newState } });
+                        }
+                        // only process if there are syncd patches
+                        if (patches.length) {
+                            const { state: newState, mutationMap } = await (0, Utils_1.decodePatches)(name, patches, states[name], getAppStateSyncKey, config.options, initialVersionMap[name], logger, appStateMacVerification.patch);
+                            await authState.keys.set({ 'app-state-sync-version': { [name]: newState } });
+                            logger.info(`synced ${name} to v${newState.version}`);
+                            initialVersionMap[name] = newState.version;
+                            Object.assign(globalMutationMap, mutationMap);
+                        }
+                        if (hasMorePatches) {
+                            logger.info(`${name} has more patches...`);
+                        }
+                        else { // collection is done with sync
+                            collectionsToHandle.delete(name);
+                        }
+                    }
+                    catch (error) {
+                        // if retry attempts overshoot
+                        // or key not found
+                        const isIrrecoverableError = attemptsMap[name] >= MAX_SYNC_ATTEMPTS
+                            || ((_a = error.output) === null || _a === void 0 ? void 0 : _a.statusCode) === 404
+                            || error.name === 'TypeError';
+                        logger.info({ name, error: error.stack }, `failed to sync state from version${isIrrecoverableError ? '' : ', removing and trying from scratch'}`);
+                        await authState.keys.set({ 'app-state-sync-version': { [name]: null } });
+                        // increment number of retries
+                        attemptsMap[name] = (attemptsMap[name] || 0) + 1;
+                        if (isIrrecoverableError) {
+                            // stop retrying
+                            collectionsToHandle.delete(name);
+                        }
+                    }
+                }
+            }
+        });
+        const { onMutation } = newAppStateChunkHandler(isInitialSync);
+        for (const key in globalMutationMap) {
+            onMutation(globalMutationMap[key]);
+        }
+    });
+    /**
+     * fetch the profile picture of a user/group
+     * type = "preview" for a low res picture
+     * type = "image for the high res picture"
+     */
+    const profilePictureUrl = async (jid, type = 'preview', timeoutMs) => {
+        var _a;
+        jid = (0, WABinary_1.jidNormalizedUser)(jid);
+        const result = await query({
+            tag: 'iq',
+            attrs: {
+                to: jid,
+                type: 'get',
+                xmlns: 'w:profile:picture'
+            },
+            content: [
+                { tag: 'picture', attrs: { type, query: 'url' } }
+            ]
+        }, timeoutMs);
+        const child = (0, WABinary_1.getBinaryNodeChild)(result, 'picture');
+        return (_a = child === null || child === void 0 ? void 0 : child.attrs) === null || _a === void 0 ? void 0 : _a.url;
+    };
+    const sendPresenceUpdate = async (type, toJid) => {
+        const me = authState.creds.me;
+        if (type === 'available' || type === 'unavailable') {
+            if (!me.name) {
+                logger.warn('no name present, ignoring presence update request...');
+                return;
+            }
+            ev.emit('connection.update', { isOnline: type === 'available' });
+            await sendNode({
+                tag: 'presence',
+                attrs: {
+                    name: me.name,
+                    type
+                }
+            });
+        }
+        else {
+            await sendNode({
+                tag: 'chatstate',
+                attrs: {
+                    from: me.id,
+                    to: toJid,
+                },
+                content: [
+                    {
+                        tag: type === 'recording' ? 'composing' : type,
+                        attrs: type === 'recording' ? { media: 'audio' } : {}
+                    }
+                ]
+            });
+        }
+    };
+    /**
+     * @param toJid the jid to subscribe to
+     * @param tcToken token for subscription, use if present
+     */
+    const presenceSubscribe = (toJid, tcToken) => (sendNode({
+        tag: 'presence',
+        attrs: {
+            to: toJid,
+            id: generateMessageTag(),
+            type: 'subscribe'
+        },
+        content: tcToken
+            ? [
+                {
+                    tag: 'tctoken',
+                    attrs: {},
+                    content: tcToken
+                }
+            ]
+            : undefined
+    }));
+    const handlePresenceUpdate = ({ tag, attrs, content }) => {
+        var _a;
+        let presence;
+        const jid = attrs.from;
+        const participant = attrs.participant || attrs.from;
+        if (shouldIgnoreJid(jid)) {
+            return;
+        }
+        if (tag === 'presence') {
+            presence = {
+                lastKnownPresence: attrs.type === 'unavailable' ? 'unavailable' : 'available',
+                lastSeen: attrs.last && attrs.last !== 'deny' ? +attrs.last : undefined
+            };
+        }
+        else if (Array.isArray(content)) {
+            const [firstChild] = content;
+            let type = firstChild.tag;
+            if (type === 'paused') {
+                type = 'available';
+            }
+            if (((_a = firstChild.attrs) === null || _a === void 0 ? void 0 : _a.media) === 'audio') {
+                type = 'recording';
+            }
+            presence = { lastKnownPresence: type };
+        }
+        else {
+            logger.error({ tag, attrs, content }, 'recv invalid presence node');
+        }
+        if (presence) {
+            ev.emit('presence.update', { id: jid, presences: { [participant]: presence } });
+        }
+    };
+    const appPatch = async (patchCreate) => {
+        const name = patchCreate.type;
+        const myAppStateKeyId = authState.creds.myAppStateKeyId;
+        if (!myAppStateKeyId) {
+            throw new boom_1.Boom('App state key not present!', { statusCode: 400 });
+        }
+        let initial;
+        let encodeResult;
+        await processingMutex.mutex(async () => {
+            await authState.keys.transaction(async () => {
+                logger.debug({ patch: patchCreate }, 'applying app patch');
+                await resyncAppState([name], false);
+                const { [name]: currentSyncVersion } = await authState.keys.get('app-state-sync-version', [name]);
+                initial = currentSyncVersion || (0, Utils_1.newLTHashState)();
+                encodeResult = await (0, Utils_1.encodeSyncdPatch)(patchCreate, myAppStateKeyId, initial, getAppStateSyncKey);
+                const { patch, state } = encodeResult;
+                const node = {
+                    tag: 'iq',
+                    attrs: {
+                        to: WABinary_1.S_WHATSAPP_NET,
+                        type: 'set',
+                        xmlns: 'w:sync:app:state'
+                    },
+                    content: [
+                        {
+                            tag: 'sync',
+                            attrs: {},
+                            content: [
+                                {
+                                    tag: 'collection',
+                                    attrs: {
+                                        name,
+                                        version: (state.version - 1).toString(),
+                                        'return_snapshot': 'false'
+                                    },
+                                    content: [
+                                        {
+                                            tag: 'patch',
+                                            attrs: {},
+                                            content: WAProto_1.proto.SyncdPatch.encode(patch).finish()
+                                        }
+                                    ]
+                                }
+                            ]
+                        }
+                    ]
+                };
+                await query(node);
+                await authState.keys.set({ 'app-state-sync-version': { [name]: state } });
+            });
+        });
+        if (config.emitOwnEvents) {
+            const { onMutation } = newAppStateChunkHandler(false);
+            const { mutationMap } = await (0, Utils_1.decodePatches)(name, [{ ...encodeResult.patch, version: { version: encodeResult.state.version }, }], initial, getAppStateSyncKey, config.options, undefined, logger);
+            for (const key in mutationMap) {
+                onMutation(mutationMap[key]);
+            }
+        }
+    };
+    /** sending non-abt props may fix QR scan fail if server expects */
+    const fetchProps = async () => {
+        var _a, _b;
+        const resultNode = await query({
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                xmlns: 'w',
+                type: 'get',
+            },
+            content: [
+                { tag: 'props', attrs: {
+                        protocol: '2',
+                        hash: ((_a = authState === null || authState === void 0 ? void 0 : authState.creds) === null || _a === void 0 ? void 0 : _a.lastPropHash) || ""
+                    } }
+            ]
+        });
+        const propsNode = (0, WABinary_1.getBinaryNodeChild)(resultNode, 'props');
+        let props = {};
+        if (propsNode) {
+            authState.creds.lastPropHash = (_b = propsNode === null || propsNode === void 0 ? void 0 : propsNode.attrs) === null || _b === void 0 ? void 0 : _b.hash;
+            ev.emit('creds.update', authState.creds);
+            props = (0, WABinary_1.reduceBinaryNodeToDictionary)(propsNode, 'prop');
+        }
+        logger.debug('fetched props');
+        return props;
+    };
+    /**
+     * modify a chat -- mark unread, read etc.
+     * lastMessages must be sorted in reverse chronologically
+     * requires the last messages till the last message received; required for archive & unread
+    */
+    const chatModify = (mod, jid) => {
+        const patch = (0, Utils_1.chatModificationToAppPatch)(mod, jid);
+        return appPatch(patch);
+    };
+    /**
+     * Star or Unstar a message
+     */
+    const star = (jid, messages, star) => {
+        return chatModify({
+            star: {
+                messages,
+                star
+            }
+        }, jid);
+    };
+    /**
+     * Adds label for the chats
+     */
+    const addChatLabel = (jid, labelId) => {
+        return chatModify({
+            addChatLabel: {
+                labelId
+            }
+        }, jid);
+    };
+    /**
+     * Removes label for the chat
+     */
+    const removeChatLabel = (jid, labelId) => {
+        return chatModify({
+            removeChatLabel: {
+                labelId
+            }
+        }, jid);
+    };
+    /**
+     * Adds label for the message
+     */
+    const addMessageLabel = (jid, messageId, labelId) => {
+        return chatModify({
+            addMessageLabel: {
+                messageId,
+                labelId
+            }
+        }, jid);
+    };
+    /**
+     * Removes label for the message
+     */
+    const removeMessageLabel = (jid, messageId, labelId) => {
+        return chatModify({
+            removeMessageLabel: {
+                messageId,
+                labelId
+            }
+        }, jid);
+    };
+    /**
+     * queries need to be fired on connection open
+     * help ensure parity with WA Web
+     * */
+    const executeInitQueries = async () => {
+        await Promise.all([
+            fetchProps(),
+            fetchBlocklist(),
+            fetchPrivacySettings(),
+        ]);
+    };
+    const upsertMessage = ev.createBufferedFunction(async (msg, type) => {
+        var _a, _b, _c;
+        ev.emit('messages.upsert', { messages: [msg], type });
+        if (!!msg.pushName) {
+            let jid = msg.key.fromMe ? authState.creds.me.id : (msg.key.participant || msg.key.remoteJid);
+            jid = (0, WABinary_1.jidNormalizedUser)(jid);
+            if (!msg.key.fromMe) {
+                ev.emit('contacts.update', [{ id: jid, notify: msg.pushName, verifiedName: msg.verifiedBizName }]);
+            }
+            // update our pushname too
+            if (msg.key.fromMe && msg.pushName && ((_a = authState.creds.me) === null || _a === void 0 ? void 0 : _a.name) !== msg.pushName) {
+                ev.emit('creds.update', { me: { ...authState.creds.me, name: msg.pushName } });
+            }
+        }
+        const historyMsg = (0, Utils_1.getHistoryMsg)(msg.message);
+        const shouldProcessHistoryMsg = historyMsg
+            ? (shouldSyncHistoryMessage(historyMsg)
+                && Defaults_1.PROCESSABLE_HISTORY_TYPES.includes(historyMsg.syncType))
+            : false;
+        if (historyMsg && !authState.creds.myAppStateKeyId) {
+            logger.warn('skipping app state sync, as myAppStateKeyId is not set');
+            pendingAppStateSync = true;
+        }
+        await Promise.all([
+            (async () => {
+                if (historyMsg
+                    && authState.creds.myAppStateKeyId) {
+                    pendingAppStateSync = false;
+                    await doAppStateSync();
+                }
+            })(),
+            (0, process_message_1.default)(msg, {
+                shouldProcessHistoryMsg,
+                ev,
+                creds: authState.creds,
+                keyStore: authState.keys,
+                logger,
+                options: config.options,
+                getMessage: config.getMessage,
+            })
+        ]);
+        if (((_c = (_b = msg.message) === null || _b === void 0 ? void 0 : _b.protocolMessage) === null || _c === void 0 ? void 0 : _c.appStateSyncKeyShare)
+            && pendingAppStateSync) {
+            await doAppStateSync();
+            pendingAppStateSync = false;
+        }
+        async function doAppStateSync() {
+            if (!authState.creds.accountSyncCounter) {
+                logger.info('doing initial app state sync');
+                await resyncAppState(Types_1.ALL_WA_PATCH_NAMES, true);
+                const accountSyncCounter = (authState.creds.accountSyncCounter || 0) + 1;
+                ev.emit('creds.update', { accountSyncCounter });
+                if (needToFlushWithAppStateSync) {
+                    logger.debug('flushing with app state sync');
+                    ev.flush();
+                }
+            }
+        }
+    });
+    ws.on('CB:presence', handlePresenceUpdate);
+    ws.on('CB:chatstate', handlePresenceUpdate);
+    ws.on('CB:ib,,dirty', async (node) => {
+        const { attrs } = (0, WABinary_1.getBinaryNodeChild)(node, 'dirty');
+        const type = attrs.type;
+        switch (type) {
+            case 'account_sync':
+                if (attrs.timestamp) {
+                    let { lastAccountSyncTimestamp } = authState.creds;
+                    if (lastAccountSyncTimestamp) {
+                        await cleanDirtyBits('account_sync', lastAccountSyncTimestamp);
+                    }
+                    lastAccountSyncTimestamp = +attrs.timestamp;
+                    ev.emit('creds.update', { lastAccountSyncTimestamp });
+                }
+                break;
+            case 'groups':
+                // handled in groups.ts
+                break;
+            default:
+                logger.info({ node }, 'received unknown sync');
+                break;
+        }
+    });
+    ev.on('connection.update', ({ connection, receivedPendingNotifications }) => {
+        var _a;
+        if (connection === 'open') {
+            if (fireInitQueries) {
+                executeInitQueries()
+                    .catch(error => onUnexpectedError(error, 'init queries'));
+            }
+            sendPresenceUpdate(markOnlineOnConnect ? 'available' : 'unavailable')
+                .catch(error => onUnexpectedError(error, 'presence update requests'));
+        }
+        if (receivedPendingNotifications) {
+            // if we don't have the app state key
+            // we keep buffering events until we finally have
+            // the key and can sync the messages
+            if (!((_a = authState.creds) === null || _a === void 0 ? void 0 : _a.myAppStateKeyId) && !config.mobile) {
+                ev.buffer();
+                needToFlushWithAppStateSync = true;
+            }
+        }
+    });
+    return {
+        ...sock,
+        processingMutex,
+        fetchPrivacySettings,
+        upsertMessage,
+        appPatch,
+        sendPresenceUpdate,
+        presenceSubscribe,
+        profilePictureUrl,
+        onWhatsApp,
+        fetchBlocklist,
+        fetchStatus,
+        updateProfilePicture,
+        removeProfilePicture,
+        updateProfileStatus,
+        updateProfileName,
+        updateBlockStatus,
+        updateLastSeenPrivacy,
+        updateOnlinePrivacy,
+        updateProfilePicturePrivacy,
+        updateStatusPrivacy,
+        updateReadReceiptsPrivacy,
+        updateGroupsAddPrivacy,
+        updateDefaultDisappearingMode,
+        getBusinessProfile,
+        resyncAppState,
+        chatModify,
+        cleanDirtyBits,
+        addChatLabel,
+        removeChatLabel,
+        addMessageLabel,
+        removeMessageLabel,
+        star
+    };
+};
+exports.makeChatsSocket = makeChatsSocket;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/groups.d.ts b/node_modules/@whiskeysockets/baileys/lib/Socket/groups.d.ts
new file mode 100644
index 0000000..6dbe12b
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/groups.d.ts
@@ -0,0 +1,114 @@
+/// <reference types="node" />
+import { proto } from '../../WAProto';
+import { GroupMetadata, ParticipantAction, SocketConfig } from '../Types';
+import { BinaryNode } from '../WABinary';
+export declare const makeGroupsSocket: (config: SocketConfig) => {
+    groupMetadata: (jid: string) => Promise<GroupMetadata>;
+    groupCreate: (subject: string, participants: string[]) => Promise<GroupMetadata>;
+    groupLeave: (id: string) => Promise<void>;
+    groupUpdateSubject: (jid: string, subject: string) => Promise<void>;
+    groupRequestParticipantsList: (jid: string) => Promise<{
+        [key: string]: string;
+    }[]>;
+    groupRequestParticipantsUpdate: (jid: string, participants: string[], action: 'approve' | 'reject') => Promise<{
+        status: string;
+        jid: string;
+    }[]>;
+    groupParticipantsUpdate: (jid: string, participants: string[], action: ParticipantAction) => Promise<{
+        status: string;
+        jid: string;
+        content: BinaryNode;
+    }[]>;
+    groupUpdateDescription: (jid: string, description?: string) => Promise<void>;
+    groupInviteCode: (jid: string) => Promise<string | undefined>;
+    groupRevokeInvite: (jid: string) => Promise<string | undefined>;
+    groupAcceptInvite: (code: string) => Promise<string | undefined>;
+    /**
+     * accept a GroupInviteMessage
+     * @param key the key of the invite message, or optionally only provide the jid of the person who sent the invite
+     * @param inviteMessage the message to accept
+     */
+    groupAcceptInviteV4: (key: string | proto.IMessageKey, inviteMessage: proto.Message.IGroupInviteMessage) => Promise<string>;
+    groupGetInviteInfo: (code: string) => Promise<GroupMetadata>;
+    groupToggleEphemeral: (jid: string, ephemeralExpiration: number) => Promise<void>;
+    groupSettingUpdate: (jid: string, setting: 'announcement' | 'not_announcement' | 'locked' | 'unlocked') => Promise<void>;
+    groupMemberAddMode: (jid: string, mode: 'admin_add' | 'all_member_add') => Promise<void>;
+    groupJoinApprovalMode: (jid: string, mode: 'on' | 'off') => Promise<void>;
+    groupFetchAllParticipating: () => Promise<{
+        [_: string]: GroupMetadata;
+    }>;
+    processingMutex: {
+        mutex<T>(code: () => T | Promise<T>): Promise<T>;
+    };
+    fetchPrivacySettings: (force?: boolean) => Promise<{
+        [_: string]: string;
+    }>;
+    upsertMessage: (msg: proto.IWebMessageInfo, type: import("../Types").MessageUpsertType) => Promise<void>;
+    appPatch: (patchCreate: import("../Types").WAPatchCreate) => Promise<void>;
+    sendPresenceUpdate: (type: import("../Types").WAPresence, toJid?: string | undefined) => Promise<void>;
+    presenceSubscribe: (toJid: string, tcToken?: Buffer | undefined) => Promise<void>;
+    profilePictureUrl: (jid: string, type?: "image" | "preview", timeoutMs?: number | undefined) => Promise<string | undefined>;
+    onWhatsApp: (...jids: string[]) => Promise<{
+        exists: boolean;
+        jid: string;
+    }[]>;
+    fetchBlocklist: () => Promise<string[]>;
+    fetchStatus: (jid: string) => Promise<{
+        status: string | undefined;
+        setAt: Date;
+    } | undefined>;
+    updateProfilePicture: (jid: string, content: import("../Types").WAMediaUpload) => Promise<void>;
+    removeProfilePicture: (jid: string) => Promise<void>;
+    updateProfileStatus: (status: string) => Promise<void>;
+    updateProfileName: (name: string) => Promise<void>;
+    updateBlockStatus: (jid: string, action: "block" | "unblock") => Promise<void>;
+    updateLastSeenPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateOnlinePrivacy: (value: import("../Types").WAPrivacyOnlineValue) => Promise<void>;
+    updateProfilePicturePrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateStatusPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateReadReceiptsPrivacy: (value: import("../Types").WAReadReceiptsValue) => Promise<void>;
+    updateGroupsAddPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateDefaultDisappearingMode: (duration: number) => Promise<void>;
+    getBusinessProfile: (jid: string) => Promise<void | import("../Types").WABusinessProfile>;
+    resyncAppState: (collections: readonly ("critical_block" | "critical_unblock_low" | "regular_high" | "regular_low" | "regular")[], isInitialSync: boolean) => Promise<void>;
+    chatModify: (mod: import("../Types").ChatModification, jid: string) => Promise<void>;
+    cleanDirtyBits: (type: "account_sync" | "groups", fromTimestamp?: string | number | undefined) => Promise<void>;
+    addChatLabel: (jid: string, labelId: string) => Promise<void>;
+    removeChatLabel: (jid: string, labelId: string) => Promise<void>;
+    addMessageLabel: (jid: string, messageId: string, labelId: string) => Promise<void>;
+    removeMessageLabel: (jid: string, messageId: string, labelId: string) => Promise<void>;
+    star: (jid: string, messages: {
+        id: string;
+        fromMe?: boolean | undefined;
+    }[], star: boolean) => Promise<void>;
+    type: "md";
+    ws: any;
+    ev: import("../Types").BaileysEventEmitter & {
+        process(handler: (events: Partial<import("../Types").BaileysEventMap>) => void | Promise<void>): () => void;
+        buffer(): void;
+        createBufferedFunction<A extends any[], T_1>(work: (...args: A) => Promise<T_1>): (...args: A) => Promise<T_1>;
+        flush(force?: boolean | undefined): boolean;
+        isBuffering(): boolean;
+    };
+    authState: {
+        creds: import("../Types").AuthenticationCreds;
+        keys: import("../Types").SignalKeyStoreWithTransaction;
+    };
+    signalRepository: import("../Types").SignalRepository;
+    user: import("../Types").Contact | undefined;
+    generateMessageTag: () => string;
+    query: (node: BinaryNode, timeoutMs?: number | undefined) => Promise<BinaryNode>;
+    waitForMessage: <T_2>(msgId: string, timeoutMs?: number | undefined) => Promise<T_2>;
+    waitForSocketOpen: () => Promise<void>;
+    sendRawMessage: (data: Uint8Array | Buffer) => Promise<void>;
+    sendNode: (frame: BinaryNode) => Promise<void>;
+    logout: (msg?: string | undefined) => Promise<void>;
+    end: (error: Error | undefined) => void;
+    onUnexpectedError: (err: Error | import("@hapi/boom").Boom<any>, msg: string) => void;
+    uploadPreKeys: (count?: number) => Promise<void>;
+    uploadPreKeysToServerIfRequired: () => Promise<void>;
+    requestPairingCode: (phoneNumber: string) => Promise<string>;
+    waitForConnectionUpdate: (check: (u: Partial<import("../Types").ConnectionState>) => boolean | undefined, timeoutMs?: number | undefined) => Promise<void>;
+    sendWAMBuffer: (wamBuffer: Buffer) => Promise<BinaryNode>;
+};
+export declare const extractGroupMetadata: (result: BinaryNode) => GroupMetadata;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/groups.js b/node_modules/@whiskeysockets/baileys/lib/Socket/groups.js
new file mode 100644
index 0000000..a0373bf
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/groups.js
@@ -0,0 +1,303 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.extractGroupMetadata = exports.makeGroupsSocket = void 0;
+const WAProto_1 = require("../../WAProto");
+const Types_1 = require("../Types");
+const Utils_1 = require("../Utils");
+const WABinary_1 = require("../WABinary");
+const chats_1 = require("./chats");
+const makeGroupsSocket = (config) => {
+    const sock = (0, chats_1.makeChatsSocket)(config);
+    const { authState, ev, query, upsertMessage } = sock;
+    const groupQuery = async (jid, type, content) => (query({
+        tag: 'iq',
+        attrs: {
+            type,
+            xmlns: 'w:g2',
+            to: jid,
+        },
+        content
+    }));
+    const groupMetadata = async (jid) => {
+        const result = await groupQuery(jid, 'get', [{ tag: 'query', attrs: { request: 'interactive' } }]);
+        return (0, exports.extractGroupMetadata)(result);
+    };
+    const groupFetchAllParticipating = async () => {
+        const result = await query({
+            tag: 'iq',
+            attrs: {
+                to: '@g.us',
+                xmlns: 'w:g2',
+                type: 'get',
+            },
+            content: [
+                {
+                    tag: 'participating',
+                    attrs: {},
+                    content: [
+                        { tag: 'participants', attrs: {} },
+                        { tag: 'description', attrs: {} }
+                    ]
+                }
+            ]
+        });
+        const data = {};
+        const groupsChild = (0, WABinary_1.getBinaryNodeChild)(result, 'groups');
+        if (groupsChild) {
+            const groups = (0, WABinary_1.getBinaryNodeChildren)(groupsChild, 'group');
+            for (const groupNode of groups) {
+                const meta = (0, exports.extractGroupMetadata)({
+                    tag: 'result',
+                    attrs: {},
+                    content: [groupNode]
+                });
+                data[meta.id] = meta;
+            }
+        }
+        sock.ev.emit('groups.update', Object.values(data));
+        return data;
+    };
+    sock.ws.on('CB:ib,,dirty', async (node) => {
+        const { attrs } = (0, WABinary_1.getBinaryNodeChild)(node, 'dirty');
+        if (attrs.type !== 'groups') {
+            return;
+        }
+        await groupFetchAllParticipating();
+        await sock.cleanDirtyBits('groups');
+    });
+    return {
+        ...sock,
+        groupMetadata,
+        groupCreate: async (subject, participants) => {
+            const key = (0, Utils_1.generateMessageID)();
+            const result = await groupQuery('@g.us', 'set', [
+                {
+                    tag: 'create',
+                    attrs: {
+                        subject,
+                        key
+                    },
+                    content: participants.map(jid => ({
+                        tag: 'participant',
+                        attrs: { jid }
+                    }))
+                }
+            ]);
+            return (0, exports.extractGroupMetadata)(result);
+        },
+        groupLeave: async (id) => {
+            await groupQuery('@g.us', 'set', [
+                {
+                    tag: 'leave',
+                    attrs: {},
+                    content: [
+                        { tag: 'group', attrs: { id } }
+                    ]
+                }
+            ]);
+        },
+        groupUpdateSubject: async (jid, subject) => {
+            await groupQuery(jid, 'set', [
+                {
+                    tag: 'subject',
+                    attrs: {},
+                    content: Buffer.from(subject, 'utf-8')
+                }
+            ]);
+        },
+        groupRequestParticipantsList: async (jid) => {
+            const result = await groupQuery(jid, 'get', [
+                {
+                    tag: 'membership_approval_requests',
+                    attrs: {}
+                }
+            ]);
+            const node = (0, WABinary_1.getBinaryNodeChild)(result, 'membership_approval_requests');
+            const participants = (0, WABinary_1.getBinaryNodeChildren)(node, 'membership_approval_request');
+            return participants.map(v => v.attrs);
+        },
+        groupRequestParticipantsUpdate: async (jid, participants, action) => {
+            const result = await groupQuery(jid, 'set', [{
+                    tag: 'membership_requests_action',
+                    attrs: {},
+                    content: [
+                        {
+                            tag: action,
+                            attrs: {},
+                            content: participants.map(jid => ({
+                                tag: 'participant',
+                                attrs: { jid }
+                            }))
+                        }
+                    ]
+                }]);
+            const node = (0, WABinary_1.getBinaryNodeChild)(result, 'membership_requests_action');
+            const nodeAction = (0, WABinary_1.getBinaryNodeChild)(node, action);
+            const participantsAffected = (0, WABinary_1.getBinaryNodeChildren)(nodeAction, 'participant');
+            return participantsAffected.map(p => {
+                return { status: p.attrs.error || '200', jid: p.attrs.jid };
+            });
+        },
+        groupParticipantsUpdate: async (jid, participants, action) => {
+            const result = await groupQuery(jid, 'set', [
+                {
+                    tag: action,
+                    attrs: {},
+                    content: participants.map(jid => ({
+                        tag: 'participant',
+                        attrs: { jid }
+                    }))
+                }
+            ]);
+            const node = (0, WABinary_1.getBinaryNodeChild)(result, action);
+            const participantsAffected = (0, WABinary_1.getBinaryNodeChildren)(node, 'participant');
+            return participantsAffected.map(p => {
+                return { status: p.attrs.error || '200', jid: p.attrs.jid, content: p };
+            });
+        },
+        groupUpdateDescription: async (jid, description) => {
+            var _a;
+            const metadata = await groupMetadata(jid);
+            const prev = (_a = metadata.descId) !== null && _a !== void 0 ? _a : null;
+            await groupQuery(jid, 'set', [
+                {
+                    tag: 'description',
+                    attrs: {
+                        ...(description ? { id: (0, Utils_1.generateMessageID)() } : { delete: 'true' }),
+                        ...(prev ? { prev } : {})
+                    },
+                    content: description ? [
+                        { tag: 'body', attrs: {}, content: Buffer.from(description, 'utf-8') }
+                    ] : undefined
+                }
+            ]);
+        },
+        groupInviteCode: async (jid) => {
+            const result = await groupQuery(jid, 'get', [{ tag: 'invite', attrs: {} }]);
+            const inviteNode = (0, WABinary_1.getBinaryNodeChild)(result, 'invite');
+            return inviteNode === null || inviteNode === void 0 ? void 0 : inviteNode.attrs.code;
+        },
+        groupRevokeInvite: async (jid) => {
+            const result = await groupQuery(jid, 'set', [{ tag: 'invite', attrs: {} }]);
+            const inviteNode = (0, WABinary_1.getBinaryNodeChild)(result, 'invite');
+            return inviteNode === null || inviteNode === void 0 ? void 0 : inviteNode.attrs.code;
+        },
+        groupAcceptInvite: async (code) => {
+            const results = await groupQuery('@g.us', 'set', [{ tag: 'invite', attrs: { code } }]);
+            const result = (0, WABinary_1.getBinaryNodeChild)(results, 'group');
+            return result === null || result === void 0 ? void 0 : result.attrs.jid;
+        },
+        /**
+         * accept a GroupInviteMessage
+         * @param key the key of the invite message, or optionally only provide the jid of the person who sent the invite
+         * @param inviteMessage the message to accept
+         */
+        groupAcceptInviteV4: ev.createBufferedFunction(async (key, inviteMessage) => {
+            key = typeof key === 'string' ? { remoteJid: key } : key;
+            const results = await groupQuery(inviteMessage.groupJid, 'set', [{
+                    tag: 'accept',
+                    attrs: {
+                        code: inviteMessage.inviteCode,
+                        expiration: inviteMessage.inviteExpiration.toString(),
+                        admin: key.remoteJid
+                    }
+                }]);
+            // if we have the full message key
+            // update the invite message to be expired
+            if (key.id) {
+                // create new invite message that is expired
+                inviteMessage = WAProto_1.proto.Message.GroupInviteMessage.fromObject(inviteMessage);
+                inviteMessage.inviteExpiration = 0;
+                inviteMessage.inviteCode = '';
+                ev.emit('messages.update', [
+                    {
+                        key,
+                        update: {
+                            message: {
+                                groupInviteMessage: inviteMessage
+                            }
+                        }
+                    }
+                ]);
+            }
+            // generate the group add message
+            await upsertMessage({
+                key: {
+                    remoteJid: inviteMessage.groupJid,
+                    id: (0, Utils_1.generateMessageID)(),
+                    fromMe: false,
+                    participant: key.remoteJid,
+                },
+                messageStubType: Types_1.WAMessageStubType.GROUP_PARTICIPANT_ADD,
+                messageStubParameters: [
+                    authState.creds.me.id
+                ],
+                participant: key.remoteJid,
+                messageTimestamp: (0, Utils_1.unixTimestampSeconds)()
+            }, 'notify');
+            return results.attrs.from;
+        }),
+        groupGetInviteInfo: async (code) => {
+            const results = await groupQuery('@g.us', 'get', [{ tag: 'invite', attrs: { code } }]);
+            return (0, exports.extractGroupMetadata)(results);
+        },
+        groupToggleEphemeral: async (jid, ephemeralExpiration) => {
+            const content = ephemeralExpiration ?
+                { tag: 'ephemeral', attrs: { expiration: ephemeralExpiration.toString() } } :
+                { tag: 'not_ephemeral', attrs: {} };
+            await groupQuery(jid, 'set', [content]);
+        },
+        groupSettingUpdate: async (jid, setting) => {
+            await groupQuery(jid, 'set', [{ tag: setting, attrs: {} }]);
+        },
+        groupMemberAddMode: async (jid, mode) => {
+            await groupQuery(jid, 'set', [{ tag: 'member_add_mode', attrs: {}, content: mode }]);
+        },
+        groupJoinApprovalMode: async (jid, mode) => {
+            await groupQuery(jid, 'set', [{ tag: 'membership_approval_mode', attrs: {}, content: [{ tag: 'group_join', attrs: { state: mode } }] }]);
+        },
+        groupFetchAllParticipating
+    };
+};
+exports.makeGroupsSocket = makeGroupsSocket;
+const extractGroupMetadata = (result) => {
+    var _a, _b;
+    const group = (0, WABinary_1.getBinaryNodeChild)(result, 'group');
+    const descChild = (0, WABinary_1.getBinaryNodeChild)(group, 'description');
+    let desc;
+    let descId;
+    if (descChild) {
+        desc = (0, WABinary_1.getBinaryNodeChildString)(descChild, 'body');
+        descId = descChild.attrs.id;
+    }
+    const groupId = group.attrs.id.includes('@') ? group.attrs.id : (0, WABinary_1.jidEncode)(group.attrs.id, 'g.us');
+    const eph = (_a = (0, WABinary_1.getBinaryNodeChild)(group, 'ephemeral')) === null || _a === void 0 ? void 0 : _a.attrs.expiration;
+    const memberAddMode = (0, WABinary_1.getBinaryNodeChildString)(group, 'member_add_mode') === 'all_member_add';
+    const metadata = {
+        id: groupId,
+        subject: group.attrs.subject,
+        subjectOwner: group.attrs.s_o,
+        subjectTime: +group.attrs.s_t,
+        size: (0, WABinary_1.getBinaryNodeChildren)(group, 'participant').length,
+        creation: +group.attrs.creation,
+        owner: group.attrs.creator ? (0, WABinary_1.jidNormalizedUser)(group.attrs.creator) : undefined,
+        desc,
+        descId,
+        linkedParent: ((_b = (0, WABinary_1.getBinaryNodeChild)(group, 'linked_parent')) === null || _b === void 0 ? void 0 : _b.attrs.jid) || undefined,
+        restrict: !!(0, WABinary_1.getBinaryNodeChild)(group, 'locked'),
+        announce: !!(0, WABinary_1.getBinaryNodeChild)(group, 'announcement'),
+        isCommunity: !!(0, WABinary_1.getBinaryNodeChild)(group, 'parent'),
+        isCommunityAnnounce: !!(0, WABinary_1.getBinaryNodeChild)(group, 'default_sub_group'),
+        joinApprovalMode: !!(0, WABinary_1.getBinaryNodeChild)(group, 'membership_approval_mode'),
+        memberAddMode,
+        participants: (0, WABinary_1.getBinaryNodeChildren)(group, 'participant').map(({ attrs }) => {
+            return {
+                id: attrs.jid,
+                admin: (attrs.type || null),
+            };
+        }),
+        ephemeralDuration: eph ? +eph : undefined
+    };
+    return metadata;
+};
+exports.extractGroupMetadata = extractGroupMetadata;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/index.d.ts b/node_modules/@whiskeysockets/baileys/lib/Socket/index.d.ts
new file mode 100644
index 0000000..9c45bfa
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/index.d.ts
@@ -0,0 +1,138 @@
+/// <reference types="node" />
+import { UserFacingSocketConfig } from '../Types';
+declare const makeWASocket: (config: UserFacingSocketConfig) => {
+    register: (code: string) => Promise<import("./registration").ExistsResponse>;
+    requestRegistrationCode: (registrationOptions?: import("./registration").RegistrationOptions | undefined) => Promise<import("./registration").ExistsResponse>;
+    getOrderDetails: (orderId: string, tokenBase64: string) => Promise<import("../Types").OrderDetails>;
+    getCatalog: ({ jid, limit, cursor }: import("../Types").GetCatalogOptions) => Promise<{
+        products: import("../Types").Product[];
+        nextPageCursor: string | undefined;
+    }>;
+    getCollections: (jid?: string | undefined, limit?: number) => Promise<{
+        collections: import("../Types").CatalogCollection[];
+    }>;
+    productCreate: (create: import("../Types").ProductCreate) => Promise<import("../Types").Product>;
+    productDelete: (productIds: string[]) => Promise<{
+        deleted: number;
+    }>;
+    productUpdate: (productId: string, update: import("../Types").ProductUpdate) => Promise<import("../Types").Product>;
+    sendMessageAck: ({ tag, attrs, content }: import("../index").BinaryNode) => Promise<void>;
+    sendRetryRequest: (node: import("../index").BinaryNode, forceIncludeKeys?: boolean) => Promise<void>;
+    rejectCall: (callId: string, callFrom: string) => Promise<void>;
+    getPrivacyTokens: (jids: string[]) => Promise<import("../index").BinaryNode>;
+    assertSessions: (jids: string[], force: boolean) => Promise<boolean>;
+    relayMessage: (jid: string, message: import("../Types").WAProto.IMessage, { messageId: msgId, participant, additionalAttributes, useUserDevicesCache, cachedGroupMetadata, statusJidList }: import("../Types").MessageRelayOptions) => Promise<string>;
+    sendReceipt: (jid: string, participant: string | undefined, messageIds: string[], type: import("../Types").MessageReceiptType) => Promise<void>;
+    sendReceipts: (keys: import("../Types").WAProto.IMessageKey[], type: import("../Types").MessageReceiptType) => Promise<void>;
+    getButtonArgs: (message: import("../Types").WAProto.IMessage) => {
+        [key: string]: string;
+    };
+    readMessages: (keys: import("../Types").WAProto.IMessageKey[]) => Promise<void>;
+    refreshMediaConn: (forceGet?: boolean) => Promise<import("../Types").MediaConnInfo>;
+    waUploadToServer: import("../Types").WAMediaUploadFunction;
+    fetchPrivacySettings: (force?: boolean) => Promise<{
+        [_: string]: string;
+    }>;
+    updateMediaMessage: (message: import("../Types").WAProto.IWebMessageInfo) => Promise<import("../Types").WAProto.IWebMessageInfo>;
+    sendMessage: (jid: string, content: import("../Types").AnyMessageContent, options?: import("../Types").MiscMessageGenerationOptions) => Promise<import("../Types").WAProto.WebMessageInfo | undefined>;
+    groupMetadata: (jid: string) => Promise<import("../Types").GroupMetadata>;
+    groupCreate: (subject: string, participants: string[]) => Promise<import("../Types").GroupMetadata>;
+    groupLeave: (id: string) => Promise<void>;
+    groupUpdateSubject: (jid: string, subject: string) => Promise<void>;
+    groupRequestParticipantsList: (jid: string) => Promise<{
+        [key: string]: string;
+    }[]>;
+    groupRequestParticipantsUpdate: (jid: string, participants: string[], action: "reject" | "approve") => Promise<{
+        status: string;
+        jid: string;
+    }[]>;
+    groupParticipantsUpdate: (jid: string, participants: string[], action: import("../Types").ParticipantAction) => Promise<{
+        status: string;
+        jid: string;
+        content: import("../index").BinaryNode;
+    }[]>;
+    groupUpdateDescription: (jid: string, description?: string | undefined) => Promise<void>;
+    groupInviteCode: (jid: string) => Promise<string | undefined>;
+    groupRevokeInvite: (jid: string) => Promise<string | undefined>;
+    groupAcceptInvite: (code: string) => Promise<string | undefined>;
+    groupAcceptInviteV4: (key: string | import("../Types").WAProto.IMessageKey, inviteMessage: import("../Types").WAProto.Message.IGroupInviteMessage) => Promise<string>;
+    groupGetInviteInfo: (code: string) => Promise<import("../Types").GroupMetadata>;
+    groupToggleEphemeral: (jid: string, ephemeralExpiration: number) => Promise<void>;
+    groupSettingUpdate: (jid: string, setting: "announcement" | "locked" | "not_announcement" | "unlocked") => Promise<void>;
+    groupMemberAddMode: (jid: string, mode: "all_member_add" | "admin_add") => Promise<void>;
+    groupJoinApprovalMode: (jid: string, mode: "on" | "off") => Promise<void>;
+    groupFetchAllParticipating: () => Promise<{
+        [_: string]: import("../Types").GroupMetadata;
+    }>;
+    processingMutex: {
+        mutex<T>(code: () => T | Promise<T>): Promise<T>;
+    };
+    upsertMessage: (msg: import("../Types").WAProto.IWebMessageInfo, type: import("../Types").MessageUpsertType) => Promise<void>;
+    appPatch: (patchCreate: import("../Types").WAPatchCreate) => Promise<void>;
+    sendPresenceUpdate: (type: import("../Types").WAPresence, toJid?: string | undefined) => Promise<void>;
+    presenceSubscribe: (toJid: string, tcToken?: Buffer | undefined) => Promise<void>;
+    profilePictureUrl: (jid: string, type?: "image" | "preview", timeoutMs?: number | undefined) => Promise<string | undefined>;
+    onWhatsApp: (...jids: string[]) => Promise<{
+        exists: boolean;
+        jid: string;
+    }[]>;
+    fetchBlocklist: () => Promise<string[]>;
+    fetchStatus: (jid: string) => Promise<{
+        status: string | undefined;
+        setAt: Date;
+    } | undefined>;
+    updateProfilePicture: (jid: string, content: import("../Types").WAMediaUpload) => Promise<void>;
+    removeProfilePicture: (jid: string) => Promise<void>;
+    updateProfileStatus: (status: string) => Promise<void>;
+    updateProfileName: (name: string) => Promise<void>;
+    updateBlockStatus: (jid: string, action: "block" | "unblock") => Promise<void>;
+    updateLastSeenPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateOnlinePrivacy: (value: import("../Types").WAPrivacyOnlineValue) => Promise<void>;
+    updateProfilePicturePrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateStatusPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateReadReceiptsPrivacy: (value: import("../Types").WAReadReceiptsValue) => Promise<void>;
+    updateGroupsAddPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateDefaultDisappearingMode: (duration: number) => Promise<void>;
+    getBusinessProfile: (jid: string) => Promise<void | import("../Types").WABusinessProfile>;
+    resyncAppState: (collections: readonly ("critical_block" | "critical_unblock_low" | "regular_high" | "regular_low" | "regular")[], isInitialSync: boolean) => Promise<void>;
+    chatModify: (mod: import("../Types").ChatModification, jid: string) => Promise<void>;
+    cleanDirtyBits: (type: "account_sync" | "groups", fromTimestamp?: string | number | undefined) => Promise<void>;
+    addChatLabel: (jid: string, labelId: string) => Promise<void>;
+    removeChatLabel: (jid: string, labelId: string) => Promise<void>;
+    addMessageLabel: (jid: string, messageId: string, labelId: string) => Promise<void>;
+    removeMessageLabel: (jid: string, messageId: string, labelId: string) => Promise<void>;
+    star: (jid: string, messages: {
+        id: string;
+        fromMe?: boolean | undefined;
+    }[], star: boolean) => Promise<void>;
+    type: "md";
+    ws: any;
+    ev: import("../Types").BaileysEventEmitter & {
+        process(handler: (events: Partial<import("../Types").BaileysEventMap>) => void | Promise<void>): () => void;
+        buffer(): void;
+        createBufferedFunction<A extends any[], T_1>(work: (...args: A) => Promise<T_1>): (...args: A) => Promise<T_1>;
+        flush(force?: boolean | undefined): boolean;
+        isBuffering(): boolean;
+    };
+    authState: {
+        creds: import("../Types").AuthenticationCreds;
+        keys: import("../Types").SignalKeyStoreWithTransaction;
+    };
+    signalRepository: import("../Types").SignalRepository;
+    user: import("../Types").Contact | undefined;
+    generateMessageTag: () => string;
+    query: (node: import("../index").BinaryNode, timeoutMs?: number | undefined) => Promise<import("../index").BinaryNode>;
+    waitForMessage: <T_2>(msgId: string, timeoutMs?: number | undefined) => Promise<T_2>;
+    waitForSocketOpen: () => Promise<void>;
+    sendRawMessage: (data: Uint8Array | Buffer) => Promise<void>;
+    sendNode: (frame: import("../index").BinaryNode) => Promise<void>;
+    logout: (msg?: string | undefined) => Promise<void>;
+    end: (error: Error | undefined) => void;
+    onUnexpectedError: (err: Error | import("@hapi/boom").Boom<any>, msg: string) => void;
+    uploadPreKeys: (count?: number) => Promise<void>;
+    uploadPreKeysToServerIfRequired: () => Promise<void>;
+    requestPairingCode: (phoneNumber: string) => Promise<string>;
+    waitForConnectionUpdate: (check: (u: Partial<import("../Types").ConnectionState>) => boolean | undefined, timeoutMs?: number | undefined) => Promise<void>;
+    sendWAMBuffer: (wamBuffer: Buffer) => Promise<import("../index").BinaryNode>;
+};
+export default makeWASocket;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/index.js b/node_modules/@whiskeysockets/baileys/lib/Socket/index.js
new file mode 100644
index 0000000..77fd004
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/index.js
@@ -0,0 +1,10 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const Defaults_1 = require("../Defaults");
+const registration_1 = require("./registration");
+// export the last socket layer
+const makeWASocket = (config) => ((0, registration_1.makeRegistrationSocket)({
+    ...Defaults_1.DEFAULT_CONNECTION_CONFIG,
+    ...config
+}));
+exports.default = makeWASocket;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/messages-recv.d.ts b/node_modules/@whiskeysockets/baileys/lib/Socket/messages-recv.d.ts
new file mode 100644
index 0000000..e897993
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/messages-recv.d.ts
@@ -0,0 +1,125 @@
+/// <reference types="node" />
+import { Boom } from '@hapi/boom';
+import { proto } from '../../WAProto';
+import { MessageReceiptType, MessageRelayOptions, SocketConfig } from '../Types';
+import { BinaryNode } from '../WABinary';
+export declare const makeMessagesRecvSocket: (config: SocketConfig) => {
+    sendMessageAck: ({ tag, attrs, content }: BinaryNode) => Promise<void>;
+    sendRetryRequest: (node: BinaryNode, forceIncludeKeys?: boolean) => Promise<void>;
+    rejectCall: (callId: string, callFrom: string) => Promise<void>;
+    getPrivacyTokens: (jids: string[]) => Promise<BinaryNode>;
+    assertSessions: (jids: string[], force: boolean) => Promise<boolean>;
+    relayMessage: (jid: string, message: proto.IMessage, { messageId: msgId, participant, additionalAttributes, useUserDevicesCache, cachedGroupMetadata, statusJidList }: MessageRelayOptions) => Promise<string>;
+    sendReceipt: (jid: string, participant: string | undefined, messageIds: string[], type: MessageReceiptType) => Promise<void>;
+    sendReceipts: (keys: proto.IMessageKey[], type: MessageReceiptType) => Promise<void>;
+    getButtonArgs: (message: proto.IMessage) => {
+        [key: string]: string;
+    };
+    readMessages: (keys: proto.IMessageKey[]) => Promise<void>;
+    refreshMediaConn: (forceGet?: boolean) => Promise<import("../Types").MediaConnInfo>;
+    waUploadToServer: import("../Types").WAMediaUploadFunction;
+    fetchPrivacySettings: (force?: boolean) => Promise<{
+        [_: string]: string;
+    }>;
+    updateMediaMessage: (message: proto.IWebMessageInfo) => Promise<proto.IWebMessageInfo>;
+    sendMessage: (jid: string, content: import("../Types").AnyMessageContent, options?: import("../Types").MiscMessageGenerationOptions) => Promise<proto.WebMessageInfo | undefined>;
+    groupMetadata: (jid: string) => Promise<import("../Types").GroupMetadata>;
+    groupCreate: (subject: string, participants: string[]) => Promise<import("../Types").GroupMetadata>;
+    groupLeave: (id: string) => Promise<void>;
+    groupUpdateSubject: (jid: string, subject: string) => Promise<void>;
+    groupRequestParticipantsList: (jid: string) => Promise<{
+        [key: string]: string;
+    }[]>;
+    groupRequestParticipantsUpdate: (jid: string, participants: string[], action: "reject" | "approve") => Promise<{
+        status: string;
+        jid: string;
+    }[]>;
+    groupParticipantsUpdate: (jid: string, participants: string[], action: import("../Types").ParticipantAction) => Promise<{
+        status: string;
+        jid: string;
+        content: BinaryNode;
+    }[]>;
+    groupUpdateDescription: (jid: string, description?: string | undefined) => Promise<void>;
+    groupInviteCode: (jid: string) => Promise<string | undefined>;
+    groupRevokeInvite: (jid: string) => Promise<string | undefined>;
+    groupAcceptInvite: (code: string) => Promise<string | undefined>;
+    groupAcceptInviteV4: (key: string | proto.IMessageKey, inviteMessage: proto.Message.IGroupInviteMessage) => Promise<string>;
+    groupGetInviteInfo: (code: string) => Promise<import("../Types").GroupMetadata>;
+    groupToggleEphemeral: (jid: string, ephemeralExpiration: number) => Promise<void>;
+    groupSettingUpdate: (jid: string, setting: "announcement" | "locked" | "not_announcement" | "unlocked") => Promise<void>;
+    groupMemberAddMode: (jid: string, mode: "all_member_add" | "admin_add") => Promise<void>;
+    groupJoinApprovalMode: (jid: string, mode: "on" | "off") => Promise<void>;
+    groupFetchAllParticipating: () => Promise<{
+        [_: string]: import("../Types").GroupMetadata;
+    }>;
+    processingMutex: {
+        mutex<T>(code: () => T | Promise<T>): Promise<T>;
+    };
+    upsertMessage: (msg: proto.IWebMessageInfo, type: import("../Types").MessageUpsertType) => Promise<void>;
+    appPatch: (patchCreate: import("../Types").WAPatchCreate) => Promise<void>;
+    sendPresenceUpdate: (type: import("../Types").WAPresence, toJid?: string | undefined) => Promise<void>;
+    presenceSubscribe: (toJid: string, tcToken?: Buffer | undefined) => Promise<void>;
+    profilePictureUrl: (jid: string, type?: "image" | "preview", timeoutMs?: number | undefined) => Promise<string | undefined>;
+    onWhatsApp: (...jids: string[]) => Promise<{
+        exists: boolean;
+        jid: string;
+    }[]>;
+    fetchBlocklist: () => Promise<string[]>;
+    fetchStatus: (jid: string) => Promise<{
+        status: string | undefined;
+        setAt: Date;
+    } | undefined>;
+    updateProfilePicture: (jid: string, content: import("../Types").WAMediaUpload) => Promise<void>;
+    removeProfilePicture: (jid: string) => Promise<void>;
+    updateProfileStatus: (status: string) => Promise<void>;
+    updateProfileName: (name: string) => Promise<void>;
+    updateBlockStatus: (jid: string, action: "block" | "unblock") => Promise<void>;
+    updateLastSeenPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateOnlinePrivacy: (value: import("../Types").WAPrivacyOnlineValue) => Promise<void>;
+    updateProfilePicturePrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateStatusPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateReadReceiptsPrivacy: (value: import("../Types").WAReadReceiptsValue) => Promise<void>;
+    updateGroupsAddPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateDefaultDisappearingMode: (duration: number) => Promise<void>;
+    getBusinessProfile: (jid: string) => Promise<void | import("../Types").WABusinessProfile>;
+    resyncAppState: (collections: readonly ("critical_block" | "critical_unblock_low" | "regular_high" | "regular_low" | "regular")[], isInitialSync: boolean) => Promise<void>;
+    chatModify: (mod: import("../Types").ChatModification, jid: string) => Promise<void>;
+    cleanDirtyBits: (type: "account_sync" | "groups", fromTimestamp?: string | number | undefined) => Promise<void>;
+    addChatLabel: (jid: string, labelId: string) => Promise<void>;
+    removeChatLabel: (jid: string, labelId: string) => Promise<void>;
+    addMessageLabel: (jid: string, messageId: string, labelId: string) => Promise<void>;
+    removeMessageLabel: (jid: string, messageId: string, labelId: string) => Promise<void>;
+    star: (jid: string, messages: {
+        id: string;
+        fromMe?: boolean | undefined;
+    }[], star: boolean) => Promise<void>;
+    type: "md";
+    ws: any;
+    ev: import("../Types").BaileysEventEmitter & {
+        process(handler: (events: Partial<import("../Types").BaileysEventMap>) => void | Promise<void>): () => void;
+        buffer(): void;
+        createBufferedFunction<A extends any[], T_1>(work: (...args: A) => Promise<T_1>): (...args: A) => Promise<T_1>;
+        flush(force?: boolean | undefined): boolean;
+        isBuffering(): boolean;
+    };
+    authState: {
+        creds: import("../Types").AuthenticationCreds;
+        keys: import("../Types").SignalKeyStoreWithTransaction;
+    };
+    signalRepository: import("../Types").SignalRepository;
+    user: import("../Types").Contact | undefined;
+    generateMessageTag: () => string;
+    query: (node: BinaryNode, timeoutMs?: number | undefined) => Promise<BinaryNode>;
+    waitForMessage: <T_2>(msgId: string, timeoutMs?: number | undefined) => Promise<T_2>;
+    waitForSocketOpen: () => Promise<void>;
+    sendRawMessage: (data: Uint8Array | Buffer) => Promise<void>;
+    sendNode: (frame: BinaryNode) => Promise<void>;
+    logout: (msg?: string | undefined) => Promise<void>;
+    end: (error: Error | undefined) => void;
+    onUnexpectedError: (err: Error | Boom<any>, msg: string) => void;
+    uploadPreKeys: (count?: number) => Promise<void>;
+    uploadPreKeysToServerIfRequired: () => Promise<void>;
+    requestPairingCode: (phoneNumber: string) => Promise<string>;
+    waitForConnectionUpdate: (check: (u: Partial<import("../Types").ConnectionState>) => boolean | undefined, timeoutMs?: number | undefined) => Promise<void>;
+    sendWAMBuffer: (wamBuffer: Buffer) => Promise<BinaryNode>;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/messages-recv.js b/node_modules/@whiskeysockets/baileys/lib/Socket/messages-recv.js
new file mode 100644
index 0000000..f618aec
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/messages-recv.js
@@ -0,0 +1,751 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.makeMessagesRecvSocket = void 0;
+const boom_1 = require("@hapi/boom");
+const crypto_1 = require("crypto");
+const node_cache_1 = __importDefault(require("node-cache"));
+const WAProto_1 = require("../../WAProto");
+const Defaults_1 = require("../Defaults");
+const Types_1 = require("../Types");
+const Utils_1 = require("../Utils");
+const Utils_2 = require("../Utils");
+const make_mutex_1 = require("../Utils/make-mutex");
+const WABinary_1 = require("../WABinary");
+const groups_1 = require("./groups");
+const messages_send_1 = require("./messages-send");
+const makeMessagesRecvSocket = (config) => {
+    const { logger, retryRequestDelayMs, maxMsgRetryCount, getMessage, shouldIgnoreJid } = config;
+    const sock = (0, messages_send_1.makeMessagesSocket)(config);
+    const { ev, authState, ws, processingMutex, signalRepository, query, upsertMessage, resyncAppState, onUnexpectedError, assertSessions, sendNode, relayMessage, sendReceipt, uploadPreKeys, } = sock;
+    /** this mutex ensures that each retryRequest will wait for the previous one to finish */
+    const retryMutex = (0, make_mutex_1.makeMutex)();
+    const msgRetryCache = config.msgRetryCounterCache || new node_cache_1.default({
+        stdTTL: Defaults_1.DEFAULT_CACHE_TTLS.MSG_RETRY,
+        useClones: false
+    });
+    const callOfferCache = config.callOfferCache || new node_cache_1.default({
+        stdTTL: Defaults_1.DEFAULT_CACHE_TTLS.CALL_OFFER,
+        useClones: false
+    });
+    let sendActiveReceipts = false;
+    const sendMessageAck = async ({ tag, attrs, content }) => {
+        const stanza = {
+            tag: 'ack',
+            attrs: {
+                id: attrs.id,
+                to: attrs.from,
+                class: tag,
+            }
+        };
+        if (!!attrs.participant) {
+            stanza.attrs.participant = attrs.participant;
+        }
+        if (!!attrs.recipient) {
+            stanza.attrs.recipient = attrs.recipient;
+        }
+        if (!!attrs.type && (tag !== 'message' || (0, WABinary_1.getBinaryNodeChild)({ tag, attrs, content }, 'unavailable'))) {
+            stanza.attrs.type = attrs.type;
+        }
+        if (tag === 'message' && (0, WABinary_1.getBinaryNodeChild)({ tag, attrs, content }, 'unavailable')) {
+            stanza.attrs.from = authState.creds.me.id;
+        }
+        logger.debug({ recv: { tag, attrs }, sent: stanza.attrs }, 'sent ack');
+        await sendNode(stanza);
+    };
+    const rejectCall = async (callId, callFrom) => {
+        const stanza = ({
+            tag: 'call',
+            attrs: {
+                from: authState.creds.me.id,
+                to: callFrom,
+            },
+            content: [{
+                    tag: 'reject',
+                    attrs: {
+                        'call-id': callId,
+                        'call-creator': callFrom,
+                        count: '0',
+                    },
+                    content: undefined,
+                }],
+        });
+        await query(stanza);
+    };
+    const sendRetryRequest = async (node, forceIncludeKeys = false) => {
+        const msgId = node.attrs.id;
+        let retryCount = msgRetryCache.get(msgId) || 0;
+        if (retryCount >= maxMsgRetryCount) {
+            logger.debug({ retryCount, msgId }, 'reached retry limit, clearing');
+            msgRetryCache.del(msgId);
+            return;
+        }
+        retryCount += 1;
+        msgRetryCache.set(msgId, retryCount);
+        const { account, signedPreKey, signedIdentityKey: identityKey } = authState.creds;
+        const deviceIdentity = (0, Utils_1.encodeSignedDeviceIdentity)(account, true);
+        await authState.keys.transaction(async () => {
+            const receipt = {
+                tag: 'receipt',
+                attrs: {
+                    id: msgId,
+                    type: 'retry',
+                    to: node.attrs.from
+                },
+                content: [
+                    {
+                        tag: 'retry',
+                        attrs: {
+                            count: retryCount.toString(),
+                            id: node.attrs.id,
+                            t: node.attrs.t,
+                            v: '1'
+                        }
+                    },
+                    {
+                        tag: 'registration',
+                        attrs: {},
+                        content: (0, Utils_1.encodeBigEndian)(authState.creds.registrationId)
+                    }
+                ]
+            };
+            if (node.attrs.recipient) {
+                receipt.attrs.recipient = node.attrs.recipient;
+            }
+            if (node.attrs.participant) {
+                receipt.attrs.participant = node.attrs.participant;
+            }
+            if (retryCount > 1 || forceIncludeKeys) {
+                const { update, preKeys } = await (0, Utils_1.getNextPreKeys)(authState, 1);
+                const [keyId] = Object.keys(preKeys);
+                const key = preKeys[+keyId];
+                const content = receipt.content;
+                content.push({
+                    tag: 'keys',
+                    attrs: {},
+                    content: [
+                        { tag: 'type', attrs: {}, content: Buffer.from(Defaults_1.KEY_BUNDLE_TYPE) },
+                        { tag: 'identity', attrs: {}, content: identityKey.public },
+                        (0, Utils_1.xmppPreKey)(key, +keyId),
+                        (0, Utils_1.xmppSignedPreKey)(signedPreKey),
+                        { tag: 'device-identity', attrs: {}, content: deviceIdentity }
+                    ]
+                });
+                ev.emit('creds.update', update);
+            }
+            await sendNode(receipt);
+            logger.info({ msgAttrs: node.attrs, retryCount }, 'sent retry receipt');
+        });
+    };
+    const handleEncryptNotification = async (node) => {
+        const from = node.attrs.from;
+        if (from === WABinary_1.S_WHATSAPP_NET) {
+            const countChild = (0, WABinary_1.getBinaryNodeChild)(node, 'count');
+            const count = +countChild.attrs.value;
+            const shouldUploadMorePreKeys = count < Defaults_1.MIN_PREKEY_COUNT;
+            logger.debug({ count, shouldUploadMorePreKeys }, 'recv pre-key count');
+            if (shouldUploadMorePreKeys) {
+                await uploadPreKeys();
+            }
+        }
+        else {
+            const identityNode = (0, WABinary_1.getBinaryNodeChild)(node, 'identity');
+            if (identityNode) {
+                logger.info({ jid: from }, 'identity changed');
+                // not handling right now
+                // signal will override new identity anyway
+            }
+            else {
+                logger.info({ node }, 'unknown encrypt notification');
+            }
+        }
+    };
+    const handleGroupNotification = (participant, child, msg) => {
+        switch (child === null || child === void 0 ? void 0 : child.tag) {
+            case 'create':
+                const metadata = (0, groups_1.extractGroupMetadata)(child);
+                msg.messageStubType = Types_1.WAMessageStubType.GROUP_CREATE;
+                msg.messageStubParameters = [metadata.subject];
+                msg.key = { participant: metadata.owner };
+                ev.emit('chats.upsert', [{
+                        id: metadata.id,
+                        name: metadata.subject,
+                        conversationTimestamp: metadata.creation,
+                    }]);
+                ev.emit('groups.upsert', [{
+                        ...metadata,
+                        author: participant
+                    }]);
+                break;
+            case 'ephemeral':
+            case 'not_ephemeral':
+                msg.message = {
+                    protocolMessage: {
+                        type: WAProto_1.proto.Message.ProtocolMessage.Type.EPHEMERAL_SETTING,
+                        ephemeralExpiration: +(child.attrs.expiration || 0)
+                    }
+                };
+                break;
+            case 'promote':
+            case 'demote':
+            case 'remove':
+            case 'add':
+            case 'leave':
+                const stubType = `GROUP_PARTICIPANT_${child.tag.toUpperCase()}`;
+                msg.messageStubType = Types_1.WAMessageStubType[stubType];
+                const participants = (0, WABinary_1.getBinaryNodeChildren)(child, 'participant').map(p => p.attrs.jid);
+                if (participants.length === 1 &&
+                    // if recv. "remove" message and sender removed themselves
+                    // mark as left
+                    (0, WABinary_1.areJidsSameUser)(participants[0], participant) &&
+                    child.tag === 'remove') {
+                    msg.messageStubType = Types_1.WAMessageStubType.GROUP_PARTICIPANT_LEAVE;
+                }
+                msg.messageStubParameters = participants;
+                break;
+            case 'subject':
+                msg.messageStubType = Types_1.WAMessageStubType.GROUP_CHANGE_SUBJECT;
+                msg.messageStubParameters = [child.attrs.subject];
+                break;
+            case 'announcement':
+            case 'not_announcement':
+                msg.messageStubType = Types_1.WAMessageStubType.GROUP_CHANGE_ANNOUNCE;
+                msg.messageStubParameters = [(child.tag === 'announcement') ? 'on' : 'off'];
+                break;
+            case 'locked':
+            case 'unlocked':
+                msg.messageStubType = Types_1.WAMessageStubType.GROUP_CHANGE_RESTRICT;
+                msg.messageStubParameters = [(child.tag === 'locked') ? 'on' : 'off'];
+                break;
+            case 'invite':
+                msg.messageStubType = Types_1.WAMessageStubType.GROUP_CHANGE_INVITE_LINK;
+                msg.messageStubParameters = [child.attrs.code];
+                break;
+            case 'member_add_mode':
+                const addMode = child.content;
+                if (addMode) {
+                    msg.messageStubType = Types_1.WAMessageStubType.GROUP_MEMBER_ADD_MODE;
+                    msg.messageStubParameters = [addMode.toString()];
+                }
+                break;
+            case 'membership_approval_mode':
+                const approvalMode = (0, WABinary_1.getBinaryNodeChild)(child, 'group_join');
+                if (approvalMode) {
+                    msg.messageStubType = Types_1.WAMessageStubType.GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE;
+                    msg.messageStubParameters = [approvalMode.attrs.state];
+                }
+                break;
+        }
+    };
+    const processNotification = async (node) => {
+        var _a, _b, _c;
+        const result = {};
+        const [child] = (0, WABinary_1.getAllBinaryNodeChildren)(node);
+        const nodeType = node.attrs.type;
+        const from = (0, WABinary_1.jidNormalizedUser)(node.attrs.from);
+        switch (nodeType) {
+            case 'privacy_token':
+                const tokenList = (0, WABinary_1.getBinaryNodeChildren)(child, 'token');
+                for (const { attrs, content } of tokenList) {
+                    const jid = attrs.jid;
+                    ev.emit('chats.update', [
+                        {
+                            id: jid,
+                            tcToken: content
+                        }
+                    ]);
+                    logger.debug({ jid }, 'got privacy token update');
+                }
+                break;
+            case 'w:gp2':
+                handleGroupNotification(node.attrs.participant, child, result);
+                break;
+            case 'mediaretry':
+                const event = (0, Utils_1.decodeMediaRetryNode)(node);
+                ev.emit('messages.media-update', [event]);
+                break;
+            case 'encrypt':
+                await handleEncryptNotification(node);
+                break;
+            case 'devices':
+                const devices = (0, WABinary_1.getBinaryNodeChildren)(child, 'device');
+                if ((0, WABinary_1.areJidsSameUser)(child.attrs.jid, authState.creds.me.id)) {
+                    const deviceJids = devices.map(d => d.attrs.jid);
+                    logger.info({ deviceJids }, 'got my own devices');
+                }
+                break;
+            case 'server_sync':
+                const update = (0, WABinary_1.getBinaryNodeChild)(node, 'collection');
+                if (update) {
+                    const name = update.attrs.name;
+                    await resyncAppState([name], false);
+                }
+                break;
+            case 'picture':
+                const setPicture = (0, WABinary_1.getBinaryNodeChild)(node, 'set');
+                const delPicture = (0, WABinary_1.getBinaryNodeChild)(node, 'delete');
+                ev.emit('contacts.update', [{
+                        id: (0, WABinary_1.jidNormalizedUser)((_a = node === null || node === void 0 ? void 0 : node.attrs) === null || _a === void 0 ? void 0 : _a.jid) || ((_c = (_b = (setPicture || delPicture)) === null || _b === void 0 ? void 0 : _b.attrs) === null || _c === void 0 ? void 0 : _c.hash) || '',
+                        imgUrl: setPicture ? 'changed' : 'removed'
+                    }]);
+                if ((0, WABinary_1.isJidGroup)(from)) {
+                    const node = setPicture || delPicture;
+                    result.messageStubType = Types_1.WAMessageStubType.GROUP_CHANGE_ICON;
+                    if (setPicture) {
+                        result.messageStubParameters = [setPicture.attrs.id];
+                    }
+                    result.participant = node === null || node === void 0 ? void 0 : node.attrs.author;
+                    result.key = {
+                        ...result.key || {},
+                        participant: setPicture === null || setPicture === void 0 ? void 0 : setPicture.attrs.author
+                    };
+                }
+                break;
+            case 'account_sync':
+                if (child.tag === 'disappearing_mode') {
+                    const newDuration = +child.attrs.duration;
+                    const timestamp = +child.attrs.t;
+                    logger.info({ newDuration }, 'updated account disappearing mode');
+                    ev.emit('creds.update', {
+                        accountSettings: {
+                            ...authState.creds.accountSettings,
+                            defaultDisappearingMode: {
+                                ephemeralExpiration: newDuration,
+                                ephemeralSettingTimestamp: timestamp,
+                            },
+                        }
+                    });
+                }
+                else if (child.tag === 'blocklist') {
+                    const blocklists = (0, WABinary_1.getBinaryNodeChildren)(child, 'item');
+                    for (const { attrs } of blocklists) {
+                        const blocklist = [attrs.jid];
+                        const type = (attrs.action === 'block') ? 'add' : 'remove';
+                        ev.emit('blocklist.update', { blocklist, type });
+                    }
+                }
+                break;
+            case 'link_code_companion_reg':
+                const linkCodeCompanionReg = (0, WABinary_1.getBinaryNodeChild)(node, 'link_code_companion_reg');
+                const ref = toRequiredBuffer((0, WABinary_1.getBinaryNodeChildBuffer)(linkCodeCompanionReg, 'link_code_pairing_ref'));
+                const primaryIdentityPublicKey = toRequiredBuffer((0, WABinary_1.getBinaryNodeChildBuffer)(linkCodeCompanionReg, 'primary_identity_pub'));
+                const primaryEphemeralPublicKeyWrapped = toRequiredBuffer((0, WABinary_1.getBinaryNodeChildBuffer)(linkCodeCompanionReg, 'link_code_pairing_wrapped_primary_ephemeral_pub'));
+                const codePairingPublicKey = decipherLinkPublicKey(primaryEphemeralPublicKeyWrapped);
+                const companionSharedKey = Utils_1.Curve.sharedKey(authState.creds.pairingEphemeralKeyPair.private, codePairingPublicKey);
+                const random = (0, crypto_1.randomBytes)(32);
+                const linkCodeSalt = (0, crypto_1.randomBytes)(32);
+                const linkCodePairingExpanded = (0, Utils_1.hkdf)(companionSharedKey, 32, {
+                    salt: linkCodeSalt,
+                    info: 'link_code_pairing_key_bundle_encryption_key'
+                });
+                const encryptPayload = Buffer.concat([Buffer.from(authState.creds.signedIdentityKey.public), primaryIdentityPublicKey, random]);
+                const encryptIv = (0, crypto_1.randomBytes)(12);
+                const encrypted = (0, Utils_1.aesEncryptGCM)(encryptPayload, linkCodePairingExpanded, encryptIv, Buffer.alloc(0));
+                const encryptedPayload = Buffer.concat([linkCodeSalt, encryptIv, encrypted]);
+                const identitySharedKey = Utils_1.Curve.sharedKey(authState.creds.signedIdentityKey.private, primaryIdentityPublicKey);
+                const identityPayload = Buffer.concat([companionSharedKey, identitySharedKey, random]);
+                authState.creds.advSecretKey = (0, Utils_1.hkdf)(identityPayload, 32, { info: 'adv_secret' }).toString('base64');
+                await query({
+                    tag: 'iq',
+                    attrs: {
+                        to: WABinary_1.S_WHATSAPP_NET,
+                        type: 'set',
+                        id: sock.generateMessageTag(),
+                        xmlns: 'md'
+                    },
+                    content: [
+                        {
+                            tag: 'link_code_companion_reg',
+                            attrs: {
+                                jid: authState.creds.me.id,
+                                stage: 'companion_finish',
+                            },
+                            content: [
+                                {
+                                    tag: 'link_code_pairing_wrapped_key_bundle',
+                                    attrs: {},
+                                    content: encryptedPayload
+                                },
+                                {
+                                    tag: 'companion_identity_public',
+                                    attrs: {},
+                                    content: authState.creds.signedIdentityKey.public
+                                },
+                                {
+                                    tag: 'link_code_pairing_ref',
+                                    attrs: {},
+                                    content: ref
+                                }
+                            ]
+                        }
+                    ]
+                });
+                authState.creds.registered = true;
+                ev.emit('creds.update', authState.creds);
+        }
+        if (Object.keys(result).length) {
+            return result;
+        }
+    };
+    function decipherLinkPublicKey(data) {
+        const buffer = toRequiredBuffer(data);
+        const salt = buffer.slice(0, 32);
+        const secretKey = (0, Utils_1.derivePairingCodeKey)(authState.creds.pairingCode, salt);
+        const iv = buffer.slice(32, 48);
+        const payload = buffer.slice(48, 80);
+        return (0, Utils_1.aesDecryptCTR)(payload, secretKey, iv);
+    }
+    function toRequiredBuffer(data) {
+        if (data === undefined) {
+            throw new boom_1.Boom('Invalid buffer', { statusCode: 400 });
+        }
+        return data instanceof Buffer ? data : Buffer.from(data);
+    }
+    const willSendMessageAgain = (id, participant) => {
+        const key = `${id}:${participant}`;
+        const retryCount = msgRetryCache.get(key) || 0;
+        return retryCount < maxMsgRetryCount;
+    };
+    const updateSendMessageAgainCount = (id, participant) => {
+        const key = `${id}:${participant}`;
+        const newValue = (msgRetryCache.get(key) || 0) + 1;
+        msgRetryCache.set(key, newValue);
+    };
+    const sendMessagesAgain = async (key, ids, retryNode) => {
+        var _a;
+        const msgs = await Promise.all(ids.map(id => getMessage({ ...key, id })));
+        const remoteJid = key.remoteJid;
+        const participant = key.participant || remoteJid;
+        // if it's the primary jid sending the request
+        // just re-send the message to everyone
+        // prevents the first message decryption failure
+        const sendToAll = !((_a = (0, WABinary_1.jidDecode)(participant)) === null || _a === void 0 ? void 0 : _a.device);
+        await assertSessions([participant], true);
+        if ((0, WABinary_1.isJidGroup)(remoteJid)) {
+            await authState.keys.set({ 'sender-key-memory': { [remoteJid]: null } });
+        }
+        logger.debug({ participant, sendToAll }, 'forced new session for retry recp');
+        for (let i = 0; i < msgs.length; i++) {
+            const msg = msgs[i];
+            if (msg) {
+                updateSendMessageAgainCount(ids[i], participant);
+                const msgRelayOpts = { messageId: ids[i] };
+                if (sendToAll) {
+                    msgRelayOpts.useUserDevicesCache = false;
+                }
+                else {
+                    msgRelayOpts.participant = {
+                        jid: participant,
+                        count: +retryNode.attrs.count
+                    };
+                }
+                await relayMessage(key.remoteJid, msg, msgRelayOpts);
+            }
+            else {
+                logger.debug({ jid: key.remoteJid, id: ids[i] }, 'recv retry request, but message not available');
+            }
+        }
+    };
+    const handleReceipt = async (node) => {
+        var _a, _b;
+        const { attrs, content } = node;
+        const isLid = attrs.from.includes('lid');
+        const isNodeFromMe = (0, WABinary_1.areJidsSameUser)(attrs.participant || attrs.from, isLid ? (_a = authState.creds.me) === null || _a === void 0 ? void 0 : _a.lid : (_b = authState.creds.me) === null || _b === void 0 ? void 0 : _b.id);
+        const remoteJid = !isNodeFromMe || (0, WABinary_1.isJidGroup)(attrs.from) ? attrs.from : attrs.recipient;
+        const fromMe = !attrs.recipient || (attrs.type === 'retry' && isNodeFromMe);
+        const key = {
+            remoteJid,
+            id: '',
+            fromMe,
+            participant: attrs.participant
+        };
+        if (shouldIgnoreJid(remoteJid)) {
+            logger.debug({ remoteJid }, 'ignoring receipt from jid');
+            await sendMessageAck(node);
+            return;
+        }
+        const ids = [attrs.id];
+        if (Array.isArray(content)) {
+            const items = (0, WABinary_1.getBinaryNodeChildren)(content[0], 'item');
+            ids.push(...items.map(i => i.attrs.id));
+        }
+        await Promise.all([
+            processingMutex.mutex(async () => {
+                const status = (0, Utils_1.getStatusFromReceiptType)(attrs.type);
+                if (typeof status !== 'undefined' &&
+                    (
+                    // basically, we only want to know when a message from us has been delivered to/read by the other person
+                    // or another device of ours has read some messages
+                    status > WAProto_1.proto.WebMessageInfo.Status.DELIVERY_ACK ||
+                        !isNodeFromMe)) {
+                    if ((0, WABinary_1.isJidGroup)(remoteJid)) {
+                        if (attrs.participant) {
+                            const updateKey = status === WAProto_1.proto.WebMessageInfo.Status.DELIVERY_ACK ? 'receiptTimestamp' : 'readTimestamp';
+                            ev.emit('message-receipt.update', ids.map(id => ({
+                                key: { ...key, id },
+                                receipt: {
+                                    userJid: (0, WABinary_1.jidNormalizedUser)(attrs.participant),
+                                    [updateKey]: +attrs.t
+                                }
+                            })));
+                        }
+                    }
+                    else {
+                        ev.emit('messages.update', ids.map(id => ({
+                            key: { ...key, id },
+                            update: { status }
+                        })));
+                    }
+                }
+                if (attrs.type === 'retry') {
+                    // correctly set who is asking for the retry
+                    key.participant = key.participant || attrs.from;
+                    const retryNode = (0, WABinary_1.getBinaryNodeChild)(node, 'retry');
+                    if (willSendMessageAgain(ids[0], key.participant)) {
+                        if (key.fromMe) {
+                            try {
+                                logger.debug({ attrs, key }, 'recv retry request');
+                                await sendMessagesAgain(key, ids, retryNode);
+                            }
+                            catch (error) {
+                                logger.error({ key, ids, trace: error.stack }, 'error in sending message again');
+                            }
+                        }
+                        else {
+                            logger.info({ attrs, key }, 'recv retry for not fromMe message');
+                        }
+                    }
+                    else {
+                        logger.info({ attrs, key }, 'will not send message again, as sent too many times');
+                    }
+                }
+            }),
+            sendMessageAck(node)
+        ]);
+    };
+    const handleNotification = async (node) => {
+        const remoteJid = node.attrs.from;
+        if (shouldIgnoreJid(remoteJid)) {
+            logger.debug({ remoteJid, id: node.attrs.id }, 'ignored notification');
+            await sendMessageAck(node);
+            return;
+        }
+        await Promise.all([
+            processingMutex.mutex(async () => {
+                var _a;
+                const msg = await processNotification(node);
+                if (msg) {
+                    const fromMe = (0, WABinary_1.areJidsSameUser)(node.attrs.participant || remoteJid, authState.creds.me.id);
+                    msg.key = {
+                        remoteJid,
+                        fromMe,
+                        participant: node.attrs.participant,
+                        id: node.attrs.id,
+                        ...(msg.key || {})
+                    };
+                    (_a = msg.participant) !== null && _a !== void 0 ? _a : (msg.participant = node.attrs.participant);
+                    msg.messageTimestamp = +node.attrs.t;
+                    const fullMsg = WAProto_1.proto.WebMessageInfo.fromObject(msg);
+                    await upsertMessage(fullMsg, 'append');
+                }
+            }),
+            sendMessageAck(node)
+        ]);
+    };
+    const handleMessage = async (node) => {
+        var _a, _b;
+        const { fullMessage: msg, category, author, decrypt } = (0, Utils_1.decryptMessageNode)(node, authState.creds.me.id, authState.creds.me.lid || '', signalRepository, logger);
+        if (((_b = (_a = msg.message) === null || _a === void 0 ? void 0 : _a.protocolMessage) === null || _b === void 0 ? void 0 : _b.type) === WAProto_1.proto.Message.ProtocolMessage.Type.SHARE_PHONE_NUMBER) {
+            if (node.attrs.sender_pn) {
+                ev.emit('chats.phoneNumberShare', { lid: node.attrs.from, jid: node.attrs.sender_pn });
+            }
+        }
+        if (shouldIgnoreJid(msg.key.remoteJid)) {
+            logger.debug({ key: msg.key }, 'ignored message');
+            await sendMessageAck(node);
+            return;
+        }
+        await Promise.all([
+            processingMutex.mutex(async () => {
+                await decrypt();
+                // message failed to decrypt
+                if (msg.messageStubType === WAProto_1.proto.WebMessageInfo.StubType.CIPHERTEXT) {
+                    retryMutex.mutex(async () => {
+                        if (ws.isOpen) {
+                            const encNode = (0, WABinary_1.getBinaryNodeChild)(node, 'enc');
+                            await sendRetryRequest(node, !encNode);
+                            if (retryRequestDelayMs) {
+                                await (0, Utils_1.delay)(retryRequestDelayMs);
+                            }
+                        }
+                        else {
+                            logger.debug({ node }, 'connection closed, ignoring retry req');
+                        }
+                    });
+                }
+                else {
+                    // no type in the receipt => message delivered
+                    let type = undefined;
+                    let participant = msg.key.participant;
+                    if (category === 'peer') { // special peer message
+                        type = 'peer_msg';
+                    }
+                    else if (msg.key.fromMe) { // message was sent by us from a different device
+                        type = 'sender';
+                        // need to specially handle this case
+                        if ((0, WABinary_1.isJidUser)(msg.key.remoteJid)) {
+                            participant = author;
+                        }
+                    }
+                    else if (!sendActiveReceipts) {
+                        type = 'inactive';
+                    }
+                    await sendReceipt(msg.key.remoteJid, participant, [msg.key.id], type);
+                    // send ack for history message
+                    const isAnyHistoryMsg = (0, Utils_1.getHistoryMsg)(msg.message);
+                    if (isAnyHistoryMsg) {
+                        const jid = (0, WABinary_1.jidNormalizedUser)(msg.key.remoteJid);
+                        await sendReceipt(jid, undefined, [msg.key.id], 'hist_sync');
+                    }
+                }
+                (0, Utils_2.cleanMessage)(msg, authState.creds.me.id);
+                await upsertMessage(msg, node.attrs.offline ? 'append' : 'notify');
+            }),
+            sendMessageAck(node)
+        ]);
+    };
+    const handleCall = async (node) => {
+        const { attrs } = node;
+        const [infoChild] = (0, WABinary_1.getAllBinaryNodeChildren)(node);
+        const callId = infoChild.attrs['call-id'];
+        const from = infoChild.attrs.from || infoChild.attrs['call-creator'];
+        const status = (0, Utils_1.getCallStatusFromNode)(infoChild);
+        const call = {
+            chatId: attrs.from,
+            from,
+            id: callId,
+            date: new Date(+attrs.t * 1000),
+            offline: !!attrs.offline,
+            status,
+        };
+        if (status === 'offer') {
+            call.isVideo = !!(0, WABinary_1.getBinaryNodeChild)(infoChild, 'video');
+            call.isGroup = infoChild.attrs.type === 'group' || !!infoChild.attrs['group-jid'];
+            call.groupJid = infoChild.attrs['group-jid'];
+            callOfferCache.set(call.id, call);
+        }
+        const existingCall = callOfferCache.get(call.id);
+        // use existing call info to populate this event
+        if (existingCall) {
+            call.isVideo = existingCall.isVideo;
+            call.isGroup = existingCall.isGroup;
+        }
+        // delete data once call has ended
+        if (status === 'reject' || status === 'accept' || status === 'timeout') {
+            callOfferCache.del(call.id);
+        }
+        ev.emit('call', [call]);
+        await sendMessageAck(node);
+    };
+    const handleBadAck = async ({ attrs }) => {
+        const key = { remoteJid: attrs.from, fromMe: true, id: attrs.id };
+        // current hypothesis is that if pash is sent in the ack
+        // it means -- the message hasn't reached all devices yet
+        // we'll retry sending the message here
+        if (attrs.phash) {
+            logger.info({ attrs }, 'received phash in ack, resending message...');
+            const msg = await getMessage(key);
+            if (msg) {
+                await relayMessage(key.remoteJid, msg, { messageId: key.id, useUserDevicesCache: false });
+            }
+            else {
+                logger.warn({ attrs }, 'could not send message again, as it was not found');
+            }
+        }
+        // error in acknowledgement,
+        // device could not display the message
+        if (attrs.error) {
+            logger.warn({ attrs }, 'received error in ack');
+            ev.emit('messages.update', [
+                {
+                    key,
+                    update: {
+                        status: Types_1.WAMessageStatus.ERROR,
+                        messageStubParameters: [
+                            attrs.error
+                        ]
+                    }
+                }
+            ]);
+        }
+    };
+    /// processes a node with the given function
+    /// and adds the task to the existing buffer if we're buffering events
+    const processNodeWithBuffer = async (node, identifier, exec) => {
+        ev.buffer();
+        await execTask();
+        ev.flush();
+        function execTask() {
+            return exec(node)
+                .catch(err => onUnexpectedError(err, identifier));
+        }
+    };
+    // recv a message
+    ws.on('CB:message', (node) => {
+        processNodeWithBuffer(node, 'processing message', handleMessage);
+    });
+    ws.on('CB:call', async (node) => {
+        processNodeWithBuffer(node, 'handling call', handleCall);
+    });
+    ws.on('CB:receipt', node => {
+        processNodeWithBuffer(node, 'handling receipt', handleReceipt);
+    });
+    ws.on('CB:notification', async (node) => {
+        processNodeWithBuffer(node, 'handling notification', handleNotification);
+    });
+    ws.on('CB:ack,class:message', (node) => {
+        handleBadAck(node)
+            .catch(error => onUnexpectedError(error, 'handling bad ack'));
+    });
+    ev.on('call', ([call]) => {
+        // missed call + group call notification message generation
+        if (call.status === 'timeout' || (call.status === 'offer' && call.isGroup)) {
+            const msg = {
+                key: {
+                    remoteJid: call.chatId,
+                    id: call.id,
+                    fromMe: false
+                },
+                messageTimestamp: (0, Utils_1.unixTimestampSeconds)(call.date),
+            };
+            if (call.status === 'timeout') {
+                if (call.isGroup) {
+                    msg.messageStubType = call.isVideo ? Types_1.WAMessageStubType.CALL_MISSED_GROUP_VIDEO : Types_1.WAMessageStubType.CALL_MISSED_GROUP_VOICE;
+                }
+                else {
+                    msg.messageStubType = call.isVideo ? Types_1.WAMessageStubType.CALL_MISSED_VIDEO : Types_1.WAMessageStubType.CALL_MISSED_VOICE;
+                }
+            }
+            else {
+                msg.message = { call: { callKey: Buffer.from(call.id) } };
+            }
+            const protoMsg = WAProto_1.proto.WebMessageInfo.fromObject(msg);
+            upsertMessage(protoMsg, call.offline ? 'append' : 'notify');
+        }
+    });
+    ev.on('connection.update', ({ isOnline }) => {
+        if (typeof isOnline !== 'undefined') {
+            sendActiveReceipts = isOnline;
+            logger.trace(`sendActiveReceipts set to "${sendActiveReceipts}"`);
+        }
+    });
+    return {
+        ...sock,
+        sendMessageAck,
+        sendRetryRequest,
+        rejectCall
+    };
+};
+exports.makeMessagesRecvSocket = makeMessagesRecvSocket;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/messages-send.d.ts b/node_modules/@whiskeysockets/baileys/lib/Socket/messages-send.d.ts
new file mode 100644
index 0000000..648a94c
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/messages-send.d.ts
@@ -0,0 +1,120 @@
+/// <reference types="node" />
+import { Boom } from '@hapi/boom';
+import { proto } from '../../WAProto';
+import { AnyMessageContent, MediaConnInfo, MessageReceiptType, MessageRelayOptions, MiscMessageGenerationOptions, SocketConfig, WAMessageKey } from '../Types';
+import { BinaryNode } from '../WABinary';
+export declare const makeMessagesSocket: (config: SocketConfig) => {
+    getPrivacyTokens: (jids: string[]) => Promise<BinaryNode>;
+    assertSessions: (jids: string[], force: boolean) => Promise<boolean>;
+    relayMessage: (jid: string, message: proto.IMessage, { messageId: msgId, participant, additionalAttributes, useUserDevicesCache, cachedGroupMetadata, statusJidList }: MessageRelayOptions) => Promise<string>;
+    sendReceipt: (jid: string, participant: string | undefined, messageIds: string[], type: MessageReceiptType) => Promise<void>;
+    sendReceipts: (keys: WAMessageKey[], type: MessageReceiptType) => Promise<void>;
+    getButtonArgs: (message: proto.IMessage) => BinaryNode['attrs'];
+    readMessages: (keys: WAMessageKey[]) => Promise<void>;
+    refreshMediaConn: (forceGet?: boolean) => Promise<MediaConnInfo>;
+    waUploadToServer: import("../Types").WAMediaUploadFunction;
+    fetchPrivacySettings: (force?: boolean) => Promise<{
+        [_: string]: string;
+    }>;
+    updateMediaMessage: (message: proto.IWebMessageInfo) => Promise<proto.IWebMessageInfo>;
+    sendMessage: (jid: string, content: AnyMessageContent, options?: MiscMessageGenerationOptions) => Promise<proto.WebMessageInfo | undefined>;
+    groupMetadata: (jid: string) => Promise<import("../Types").GroupMetadata>;
+    groupCreate: (subject: string, participants: string[]) => Promise<import("../Types").GroupMetadata>;
+    groupLeave: (id: string) => Promise<void>;
+    groupUpdateSubject: (jid: string, subject: string) => Promise<void>;
+    groupRequestParticipantsList: (jid: string) => Promise<{
+        [key: string]: string;
+    }[]>;
+    groupRequestParticipantsUpdate: (jid: string, participants: string[], action: "reject" | "approve") => Promise<{
+        status: string;
+        jid: string; /** Bulk read messages. Keys can be from different chats & participants */
+    }[]>;
+    groupParticipantsUpdate: (jid: string, participants: string[], action: import("../Types").ParticipantAction) => Promise<{
+        status: string;
+        jid: string;
+        content: BinaryNode;
+    }[]>;
+    groupUpdateDescription: (jid: string, description?: string | undefined) => Promise<void>;
+    groupInviteCode: (jid: string) => Promise<string | undefined>;
+    groupRevokeInvite: (jid: string) => Promise<string | undefined>;
+    groupAcceptInvite: (code: string) => Promise<string | undefined>;
+    groupAcceptInviteV4: (key: string | proto.IMessageKey, inviteMessage: proto.Message.IGroupInviteMessage) => Promise<string>;
+    groupGetInviteInfo: (code: string) => Promise<import("../Types").GroupMetadata>;
+    groupToggleEphemeral: (jid: string, ephemeralExpiration: number) => Promise<void>;
+    groupSettingUpdate: (jid: string, setting: "announcement" | "locked" | "not_announcement" | "unlocked") => Promise<void>;
+    groupMemberAddMode: (jid: string, mode: "all_member_add" | "admin_add") => Promise<void>;
+    groupJoinApprovalMode: (jid: string, mode: "on" | "off") => Promise<void>;
+    groupFetchAllParticipating: () => Promise<{
+        [_: string]: import("../Types").GroupMetadata;
+    }>;
+    processingMutex: {
+        mutex<T>(code: () => T | Promise<T>): Promise<T>;
+    };
+    upsertMessage: (msg: proto.IWebMessageInfo, type: import("../Types").MessageUpsertType) => Promise<void>;
+    appPatch: (patchCreate: import("../Types").WAPatchCreate) => Promise<void>;
+    sendPresenceUpdate: (type: import("../Types").WAPresence, toJid?: string | undefined) => Promise<void>;
+    presenceSubscribe: (toJid: string, tcToken?: Buffer | undefined) => Promise<void>;
+    profilePictureUrl: (jid: string, type?: "image" | "preview", timeoutMs?: number | undefined) => Promise<string | undefined>;
+    onWhatsApp: (...jids: string[]) => Promise<{
+        exists: boolean;
+        jid: string;
+    }[]>;
+    fetchBlocklist: () => Promise<string[]>;
+    fetchStatus: (jid: string) => Promise<{
+        status: string | undefined;
+        setAt: Date;
+    } | undefined>;
+    updateProfilePicture: (jid: string, content: import("../Types").WAMediaUpload) => Promise<void>;
+    removeProfilePicture: (jid: string) => Promise<void>;
+    updateProfileStatus: (status: string) => Promise<void>;
+    updateProfileName: (name: string) => Promise<void>;
+    updateBlockStatus: (jid: string, action: "block" | "unblock") => Promise<void>;
+    updateLastSeenPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateOnlinePrivacy: (value: import("../Types").WAPrivacyOnlineValue) => Promise<void>;
+    updateProfilePicturePrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateStatusPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateReadReceiptsPrivacy: (value: import("../Types").WAReadReceiptsValue) => Promise<void>;
+    updateGroupsAddPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateDefaultDisappearingMode: (duration: number) => Promise<void>;
+    getBusinessProfile: (jid: string) => Promise<void | import("../Types").WABusinessProfile>;
+    resyncAppState: (collections: readonly ("critical_block" | "critical_unblock_low" | "regular_high" | "regular_low" | "regular")[], isInitialSync: boolean) => Promise<void>;
+    chatModify: (mod: import("../Types").ChatModification, jid: string) => Promise<void>;
+    cleanDirtyBits: (type: "account_sync" | "groups", fromTimestamp?: string | number | undefined) => Promise<void>;
+    addChatLabel: (jid: string, labelId: string) => Promise<void>;
+    removeChatLabel: (jid: string, labelId: string) => Promise<void>;
+    addMessageLabel: (jid: string, messageId: string, labelId: string) => Promise<void>;
+    removeMessageLabel: (jid: string, messageId: string, labelId: string) => Promise<void>;
+    star: (jid: string, messages: {
+        id: string;
+        fromMe?: boolean | undefined;
+    }[], star: boolean) => Promise<void>;
+    type: "md";
+    ws: any;
+    ev: import("../Types").BaileysEventEmitter & {
+        process(handler: (events: Partial<import("../Types").BaileysEventMap>) => void | Promise<void>): () => void;
+        buffer(): void;
+        createBufferedFunction<A extends any[], T_1>(work: (...args: A) => Promise<T_1>): (...args: A) => Promise<T_1>;
+        flush(force?: boolean | undefined): boolean;
+        isBuffering(): boolean;
+    };
+    authState: {
+        creds: import("../Types").AuthenticationCreds;
+        keys: import("../Types").SignalKeyStoreWithTransaction;
+    };
+    signalRepository: import("../Types").SignalRepository;
+    user: import("../Types").Contact | undefined;
+    generateMessageTag: () => string;
+    query: (node: BinaryNode, timeoutMs?: number | undefined) => Promise<BinaryNode>;
+    waitForMessage: <T_2>(msgId: string, timeoutMs?: number | undefined) => Promise<T_2>;
+    waitForSocketOpen: () => Promise<void>;
+    sendRawMessage: (data: Uint8Array | Buffer) => Promise<void>;
+    sendNode: (frame: BinaryNode) => Promise<void>;
+    logout: (msg?: string | undefined) => Promise<void>;
+    end: (error: Error | undefined) => void;
+    onUnexpectedError: (err: Error | Boom<any>, msg: string) => void;
+    uploadPreKeys: (count?: number) => Promise<void>;
+    uploadPreKeysToServerIfRequired: () => Promise<void>;
+    requestPairingCode: (phoneNumber: string) => Promise<string>;
+    waitForConnectionUpdate: (check: (u: Partial<import("../Types").ConnectionState>) => boolean | undefined, timeoutMs?: number | undefined) => Promise<void>;
+    sendWAMBuffer: (wamBuffer: Buffer) => Promise<BinaryNode>;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/messages-send.js b/node_modules/@whiskeysockets/baileys/lib/Socket/messages-send.js
new file mode 100644
index 0000000..9bc8158
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/messages-send.js
@@ -0,0 +1,663 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.makeMessagesSocket = void 0;
+const boom_1 = require("@hapi/boom");
+const node_cache_1 = __importDefault(require("node-cache"));
+const WAProto_1 = require("../../WAProto");
+const Defaults_1 = require("../Defaults");
+const Utils_1 = require("../Utils");
+const link_preview_1 = require("../Utils/link-preview");
+const WABinary_1 = require("../WABinary");
+const groups_1 = require("./groups");
+var ListType = WAProto_1.proto.Message.ListMessage.ListType;
+const makeMessagesSocket = (config) => {
+    const { logger, linkPreviewImageThumbnailWidth, generateHighQualityLinkPreview, options: axiosOptions, patchMessageBeforeSending, } = config;
+    const sock = (0, groups_1.makeGroupsSocket)(config);
+    const { ev, authState, processingMutex, signalRepository, upsertMessage, query, fetchPrivacySettings, generateMessageTag, sendNode, groupMetadata, groupToggleEphemeral } = sock;
+    const userDevicesCache = config.userDevicesCache || new node_cache_1.default({
+        stdTTL: Defaults_1.DEFAULT_CACHE_TTLS.USER_DEVICES,
+        useClones: false
+    });
+    let mediaConn;
+    const refreshMediaConn = async (forceGet = false) => {
+        const media = await mediaConn;
+        if (!media || forceGet || (new Date().getTime() - media.fetchDate.getTime()) > media.ttl * 1000) {
+            mediaConn = (async () => {
+                const result = await query({
+                    tag: 'iq',
+                    attrs: {
+                        type: 'set',
+                        xmlns: 'w:m',
+                        to: WABinary_1.S_WHATSAPP_NET,
+                    },
+                    content: [{ tag: 'media_conn', attrs: {} }]
+                });
+                const mediaConnNode = (0, WABinary_1.getBinaryNodeChild)(result, 'media_conn');
+                const node = {
+                    hosts: (0, WABinary_1.getBinaryNodeChildren)(mediaConnNode, 'host').map(({ attrs }) => ({
+                        hostname: attrs.hostname,
+                        maxContentLengthBytes: +attrs.maxContentLengthBytes,
+                    })),
+                    auth: mediaConnNode.attrs.auth,
+                    ttl: +mediaConnNode.attrs.ttl,
+                    fetchDate: new Date()
+                };
+                logger.debug('fetched media conn');
+                return node;
+            })();
+        }
+        return mediaConn;
+    };
+    /**
+     * generic send receipt function
+     * used for receipts of phone call, read, delivery etc.
+     * */
+    const sendReceipt = async (jid, participant, messageIds, type) => {
+        const node = {
+            tag: 'receipt',
+            attrs: {
+                id: messageIds[0],
+            },
+        };
+        const isReadReceipt = type === 'read' || type === 'read-self';
+        if (isReadReceipt) {
+            node.attrs.t = (0, Utils_1.unixTimestampSeconds)().toString();
+        }
+        if (type === 'sender' && (0, WABinary_1.isJidUser)(jid)) {
+            node.attrs.recipient = jid;
+            node.attrs.to = participant;
+        }
+        else {
+            node.attrs.to = jid;
+            if (participant) {
+                node.attrs.participant = participant;
+            }
+        }
+        if (type) {
+            node.attrs.type = type;
+        }
+        const remainingMessageIds = messageIds.slice(1);
+        if (remainingMessageIds.length) {
+            node.content = [
+                {
+                    tag: 'list',
+                    attrs: {},
+                    content: remainingMessageIds.map(id => ({
+                        tag: 'item',
+                        attrs: { id }
+                    }))
+                }
+            ];
+        }
+        logger.debug({ attrs: node.attrs, messageIds }, 'sending receipt for messages');
+        await sendNode(node);
+    };
+    /** Correctly bulk send receipts to multiple chats, participants */
+    const sendReceipts = async (keys, type) => {
+        const recps = (0, Utils_1.aggregateMessageKeysNotFromMe)(keys);
+        for (const { jid, participant, messageIds } of recps) {
+            await sendReceipt(jid, participant, messageIds, type);
+        }
+    };
+    /** Bulk read messages. Keys can be from different chats & participants */
+    const readMessages = async (keys) => {
+        const privacySettings = await fetchPrivacySettings();
+        // based on privacy settings, we have to change the read type
+        const readType = privacySettings.readreceipts === 'all' ? 'read' : 'read-self';
+        await sendReceipts(keys, readType);
+    };
+    /** Fetch all the devices we've to send a message to */
+    const getUSyncDevices = async (jids, useCache, ignoreZeroDevices) => {
+        var _a;
+        const deviceResults = [];
+        if (!useCache) {
+            logger.debug('not using cache for devices');
+        }
+        const users = [];
+        jids = Array.from(new Set(jids));
+        for (let jid of jids) {
+            const user = (_a = (0, WABinary_1.jidDecode)(jid)) === null || _a === void 0 ? void 0 : _a.user;
+            jid = (0, WABinary_1.jidNormalizedUser)(jid);
+            const devices = userDevicesCache.get(user);
+            if (devices && useCache) {
+                deviceResults.push(...devices);
+                logger.trace({ user }, 'using cache for devices');
+            }
+            else {
+                users.push({ tag: 'user', attrs: { jid } });
+            }
+        }
+        const iq = {
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'get',
+                xmlns: 'usync',
+            },
+            content: [
+                {
+                    tag: 'usync',
+                    attrs: {
+                        sid: generateMessageTag(),
+                        mode: 'query',
+                        last: 'true',
+                        index: '0',
+                        context: 'message',
+                    },
+                    content: [
+                        {
+                            tag: 'query',
+                            attrs: {},
+                            content: [
+                                {
+                                    tag: 'devices',
+                                    attrs: { version: '2' }
+                                }
+                            ]
+                        },
+                        { tag: 'list', attrs: {}, content: users }
+                    ]
+                },
+            ],
+        };
+        const result = await query(iq);
+        const extracted = (0, Utils_1.extractDeviceJids)(result, authState.creds.me.id, ignoreZeroDevices);
+        const deviceMap = {};
+        for (const item of extracted) {
+            deviceMap[item.user] = deviceMap[item.user] || [];
+            deviceMap[item.user].push(item);
+            deviceResults.push(item);
+        }
+        for (const key in deviceMap) {
+            userDevicesCache.set(key, deviceMap[key]);
+        }
+        return deviceResults;
+    };
+    const assertSessions = async (jids, force) => {
+        let didFetchNewSession = false;
+        let jidsRequiringFetch = [];
+        if (force) {
+            jidsRequiringFetch = jids;
+        }
+        else {
+            const addrs = jids.map(jid => (signalRepository
+                .jidToSignalProtocolAddress(jid)));
+            const sessions = await authState.keys.get('session', addrs);
+            for (const jid of jids) {
+                const signalId = signalRepository
+                    .jidToSignalProtocolAddress(jid);
+                if (!sessions[signalId]) {
+                    jidsRequiringFetch.push(jid);
+                }
+            }
+        }
+        if (jidsRequiringFetch.length) {
+            logger.debug({ jidsRequiringFetch }, 'fetching sessions');
+            const result = await query({
+                tag: 'iq',
+                attrs: {
+                    xmlns: 'encrypt',
+                    type: 'get',
+                    to: WABinary_1.S_WHATSAPP_NET,
+                },
+                content: [
+                    {
+                        tag: 'key',
+                        attrs: {},
+                        content: jidsRequiringFetch.map(jid => ({
+                            tag: 'user',
+                            attrs: { jid },
+                        }))
+                    }
+                ]
+            });
+            await (0, Utils_1.parseAndInjectE2ESessions)(result, signalRepository);
+            didFetchNewSession = true;
+        }
+        return didFetchNewSession;
+    };
+    const createParticipantNodes = async (jids, message, extraAttrs) => {
+        const patched = await patchMessageBeforeSending(message, jids);
+        const bytes = (0, Utils_1.encodeWAMessage)(patched);
+        let shouldIncludeDeviceIdentity = false;
+        const nodes = await Promise.all(jids.map(async (jid) => {
+            const { type, ciphertext } = await signalRepository
+                .encryptMessage({ jid, data: bytes });
+            if (type === 'pkmsg') {
+                shouldIncludeDeviceIdentity = true;
+            }
+            const node = {
+                tag: 'to',
+                attrs: { jid },
+                content: [{
+                        tag: 'enc',
+                        attrs: {
+                            v: '2',
+                            type,
+                            ...extraAttrs || {}
+                        },
+                        content: ciphertext
+                    }]
+            };
+            return node;
+        }));
+        return { nodes, shouldIncludeDeviceIdentity };
+    };
+    const relayMessage = async (jid, message, { messageId: msgId, participant, additionalAttributes, useUserDevicesCache, cachedGroupMetadata, statusJidList }) => {
+        const meId = authState.creds.me.id;
+        let shouldIncludeDeviceIdentity = false;
+        const { user, server } = (0, WABinary_1.jidDecode)(jid);
+        const statusJid = 'status@broadcast';
+        const isGroup = server === 'g.us';
+        const isStatus = jid === statusJid;
+        const isLid = server === 'lid';
+        msgId = msgId || (0, Utils_1.generateMessageID)();
+        useUserDevicesCache = useUserDevicesCache !== false;
+        const participants = [];
+        const destinationJid = (!isStatus) ? (0, WABinary_1.jidEncode)(user, isLid ? 'lid' : isGroup ? 'g.us' : 's.whatsapp.net') : statusJid;
+        const binaryNodeContent = [];
+        const devices = [];
+        const meMsg = {
+            deviceSentMessage: {
+                destinationJid,
+                message
+            }
+        };
+        if (participant) {
+            // when the retry request is not for a group
+            // only send to the specific device that asked for a retry
+            // otherwise the message is sent out to every device that should be a recipient
+            if (!isGroup && !isStatus) {
+                additionalAttributes = { ...additionalAttributes, 'device_fanout': 'false' };
+            }
+            const { user, device } = (0, WABinary_1.jidDecode)(participant.jid);
+            devices.push({ user, device });
+        }
+        await authState.keys.transaction(async () => {
+            var _a, _b;
+            const mediaType = getMediaType(message);
+            if (isGroup || isStatus) {
+                const [groupData, senderKeyMap] = await Promise.all([
+                    (async () => {
+                        let groupData = cachedGroupMetadata ? await cachedGroupMetadata(jid) : undefined;
+                        if (groupData) {
+                            logger.trace({ jid, participants: groupData.participants.length }, 'using cached group metadata');
+                        }
+                        if (!groupData && !isStatus) {
+                            groupData = await groupMetadata(jid);
+                        }
+                        return groupData;
+                    })(),
+                    (async () => {
+                        if (!participant && !isStatus) {
+                            const result = await authState.keys.get('sender-key-memory', [jid]);
+                            return result[jid] || {};
+                        }
+                        return {};
+                    })()
+                ]);
+                if (!participant) {
+                    const participantsList = (groupData && !isStatus) ? groupData.participants.map(p => p.id) : [];
+                    if (isStatus && statusJidList) {
+                        participantsList.push(...statusJidList);
+                    }
+                    const additionalDevices = await getUSyncDevices(participantsList, !!useUserDevicesCache, false);
+                    devices.push(...additionalDevices);
+                }
+                const patched = await patchMessageBeforeSending(message, devices.map(d => (0, WABinary_1.jidEncode)(d.user, isLid ? 'lid' : 's.whatsapp.net', d.device)));
+                const bytes = (0, Utils_1.encodeWAMessage)(patched);
+                const { ciphertext, senderKeyDistributionMessage } = await signalRepository.encryptGroupMessage({
+                    group: destinationJid,
+                    data: bytes,
+                    meId,
+                });
+                const senderKeyJids = [];
+                // ensure a connection is established with every device
+                for (const { user, device } of devices) {
+                    const jid = (0, WABinary_1.jidEncode)(user, isLid ? 'lid' : 's.whatsapp.net', device);
+                    if (!senderKeyMap[jid] || !!participant) {
+                        senderKeyJids.push(jid);
+                        // store that this person has had the sender keys sent to them
+                        senderKeyMap[jid] = true;
+                    }
+                }
+                // if there are some participants with whom the session has not been established
+                // if there are, we re-send the senderkey
+                if (senderKeyJids.length) {
+                    logger.debug({ senderKeyJids }, 'sending new sender key');
+                    const senderKeyMsg = {
+                        senderKeyDistributionMessage: {
+                            axolotlSenderKeyDistributionMessage: senderKeyDistributionMessage,
+                            groupId: destinationJid
+                        }
+                    };
+                    await assertSessions(senderKeyJids, false);
+                    const result = await createParticipantNodes(senderKeyJids, senderKeyMsg, mediaType ? { mediatype: mediaType } : undefined);
+                    shouldIncludeDeviceIdentity = shouldIncludeDeviceIdentity || result.shouldIncludeDeviceIdentity;
+                    participants.push(...result.nodes);
+                }
+                binaryNodeContent.push({
+                    tag: 'enc',
+                    attrs: { v: '2', type: 'skmsg' },
+                    content: ciphertext
+                });
+                await authState.keys.set({ 'sender-key-memory': { [jid]: senderKeyMap } });
+            }
+            else {
+                const { user: meUser, device: meDevice } = (0, WABinary_1.jidDecode)(meId);
+                if (!participant) {
+                    devices.push({ user });
+                    // do not send message to self if the device is 0 (mobile)
+                    if (meDevice !== undefined && meDevice !== 0) {
+                        devices.push({ user: meUser });
+                    }
+                    const additionalDevices = await getUSyncDevices([meId, jid], !!useUserDevicesCache, true);
+                    devices.push(...additionalDevices);
+                }
+                const allJids = [];
+                const meJids = [];
+                const otherJids = [];
+                for (const { user, device } of devices) {
+                    const isMe = user === meUser;
+                    const jid = (0, WABinary_1.jidEncode)(isMe && isLid ? ((_b = (_a = authState.creds) === null || _a === void 0 ? void 0 : _a.me) === null || _b === void 0 ? void 0 : _b.lid.split(':')[0]) || user : user, isLid ? 'lid' : 's.whatsapp.net', device);
+                    if (isMe) {
+                        meJids.push(jid);
+                    }
+                    else {
+                        otherJids.push(jid);
+                    }
+                    allJids.push(jid);
+                }
+                await assertSessions(allJids, false);
+                const [{ nodes: meNodes, shouldIncludeDeviceIdentity: s1 }, { nodes: otherNodes, shouldIncludeDeviceIdentity: s2 }] = await Promise.all([
+                    createParticipantNodes(meJids, meMsg, mediaType ? { mediatype: mediaType } : undefined),
+                    createParticipantNodes(otherJids, message, mediaType ? { mediatype: mediaType } : undefined)
+                ]);
+                participants.push(...meNodes);
+                participants.push(...otherNodes);
+                shouldIncludeDeviceIdentity = shouldIncludeDeviceIdentity || s1 || s2;
+            }
+            if (participants.length) {
+                binaryNodeContent.push({
+                    tag: 'participants',
+                    attrs: {},
+                    content: participants
+                });
+            }
+            const stanza = {
+                tag: 'message',
+                attrs: {
+                    id: msgId,
+                    type: 'text',
+                    ...(additionalAttributes || {})
+                },
+                content: binaryNodeContent
+            };
+            // if the participant to send to is explicitly specified (generally retry recp)
+            // ensure the message is only sent to that person
+            // if a retry receipt is sent to everyone -- it'll fail decryption for everyone else who received the msg
+            if (participant) {
+                if ((0, WABinary_1.isJidGroup)(destinationJid)) {
+                    stanza.attrs.to = destinationJid;
+                    stanza.attrs.participant = participant.jid;
+                }
+                else if ((0, WABinary_1.areJidsSameUser)(participant.jid, meId)) {
+                    stanza.attrs.to = participant.jid;
+                    stanza.attrs.recipient = destinationJid;
+                }
+                else {
+                    stanza.attrs.to = participant.jid;
+                }
+            }
+            else {
+                stanza.attrs.to = destinationJid;
+            }
+            if (shouldIncludeDeviceIdentity) {
+                stanza.content.push({
+                    tag: 'device-identity',
+                    attrs: {},
+                    content: (0, Utils_1.encodeSignedDeviceIdentity)(authState.creds.account, true)
+                });
+                logger.debug({ jid }, 'adding device identity');
+            }
+            const buttonType = getButtonType(message);
+            if (buttonType) {
+                stanza.content.push({
+                    tag: 'biz',
+                    attrs: {},
+                    content: [
+                        {
+                            tag: buttonType,
+                            attrs: getButtonArgs(message),
+                        }
+                    ]
+                });
+                logger.debug({ jid }, 'adding business node');
+            }
+            logger.debug({ msgId }, `sending message to ${participants.length} devices`);
+            await sendNode(stanza);
+        });
+        return msgId;
+    };
+    const getMediaType = (message) => {
+        if (message.imageMessage) {
+            return 'image';
+        }
+        else if (message.videoMessage) {
+            return message.videoMessage.gifPlayback ? 'gif' : 'video';
+        }
+        else if (message.audioMessage) {
+            return message.audioMessage.ptt ? 'ptt' : 'audio';
+        }
+        else if (message.contactMessage) {
+            return 'vcard';
+        }
+        else if (message.documentMessage) {
+            return 'document';
+        }
+        else if (message.contactsArrayMessage) {
+            return 'contact_array';
+        }
+        else if (message.liveLocationMessage) {
+            return 'livelocation';
+        }
+        else if (message.stickerMessage) {
+            return 'sticker';
+        }
+        else if (message.listMessage) {
+            return 'list';
+        }
+        else if (message.listResponseMessage) {
+            return 'list_response';
+        }
+        else if (message.buttonsResponseMessage) {
+            return 'buttons_response';
+        }
+        else if (message.orderMessage) {
+            return 'order';
+        }
+        else if (message.productMessage) {
+            return 'product';
+        }
+        else if (message.interactiveResponseMessage) {
+            return 'native_flow_response';
+        }
+    };
+    const getButtonType = (message) => {
+        if (message.buttonsMessage) {
+            return 'buttons';
+        }
+        else if (message.buttonsResponseMessage) {
+            return 'buttons_response';
+        }
+        else if (message.interactiveResponseMessage) {
+            return 'interactive_response';
+        }
+        else if (message.listMessage) {
+            return 'list';
+        }
+        else if (message.listResponseMessage) {
+            return 'list_response';
+        }
+    };
+    const getButtonArgs = (message) => {
+        if (message.templateMessage) {
+            // TODO: Add attributes
+            return {};
+        }
+        else if (message.listMessage) {
+            const type = message.listMessage.listType;
+            if (!type) {
+                throw new boom_1.Boom('Expected list type inside message');
+            }
+            return { v: '2', type: ListType[type].toLowerCase() };
+        }
+        else {
+            return {};
+        }
+    };
+    const getPrivacyTokens = async (jids) => {
+        const t = (0, Utils_1.unixTimestampSeconds)().toString();
+        const result = await query({
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'set',
+                xmlns: 'privacy'
+            },
+            content: [
+                {
+                    tag: 'tokens',
+                    attrs: {},
+                    content: jids.map(jid => ({
+                        tag: 'token',
+                        attrs: {
+                            jid: (0, WABinary_1.jidNormalizedUser)(jid),
+                            t,
+                            type: 'trusted_contact'
+                        }
+                    }))
+                }
+            ]
+        });
+        return result;
+    };
+    const waUploadToServer = (0, Utils_1.getWAUploadToServer)(config, refreshMediaConn);
+    const waitForMsgMediaUpdate = (0, Utils_1.bindWaitForEvent)(ev, 'messages.media-update');
+    return {
+        ...sock,
+        getPrivacyTokens,
+        assertSessions,
+        relayMessage,
+        sendReceipt,
+        sendReceipts,
+        getButtonArgs,
+        readMessages,
+        refreshMediaConn,
+        waUploadToServer,
+        fetchPrivacySettings,
+        updateMediaMessage: async (message) => {
+            const content = (0, Utils_1.assertMediaContent)(message.message);
+            const mediaKey = content.mediaKey;
+            const meId = authState.creds.me.id;
+            const node = (0, Utils_1.encryptMediaRetryRequest)(message.key, mediaKey, meId);
+            let error = undefined;
+            await Promise.all([
+                sendNode(node),
+                waitForMsgMediaUpdate(update => {
+                    const result = update.find(c => c.key.id === message.key.id);
+                    if (result) {
+                        if (result.error) {
+                            error = result.error;
+                        }
+                        else {
+                            try {
+                                const media = (0, Utils_1.decryptMediaRetryData)(result.media, mediaKey, result.key.id);
+                                if (media.result !== WAProto_1.proto.MediaRetryNotification.ResultType.SUCCESS) {
+                                    const resultStr = WAProto_1.proto.MediaRetryNotification.ResultType[media.result];
+                                    throw new boom_1.Boom(`Media re-upload failed by device (${resultStr})`, { data: media, statusCode: (0, Utils_1.getStatusCodeForMediaRetry)(media.result) || 404 });
+                                }
+                                content.directPath = media.directPath;
+                                content.url = (0, Utils_1.getUrlFromDirectPath)(content.directPath);
+                                logger.debug({ directPath: media.directPath, key: result.key }, 'media update successful');
+                            }
+                            catch (err) {
+                                error = err;
+                            }
+                        }
+                        return true;
+                    }
+                })
+            ]);
+            if (error) {
+                throw error;
+            }
+            ev.emit('messages.update', [
+                { key: message.key, update: { message: message.message } }
+            ]);
+            return message;
+        },
+        sendMessage: async (jid, content, options = {}) => {
+            var _a, _b;
+            const userJid = authState.creds.me.id;
+            if (typeof content === 'object' &&
+                'disappearingMessagesInChat' in content &&
+                typeof content['disappearingMessagesInChat'] !== 'undefined' &&
+                (0, WABinary_1.isJidGroup)(jid)) {
+                const { disappearingMessagesInChat } = content;
+                const value = typeof disappearingMessagesInChat === 'boolean' ?
+                    (disappearingMessagesInChat ? Defaults_1.WA_DEFAULT_EPHEMERAL : 0) :
+                    disappearingMessagesInChat;
+                await groupToggleEphemeral(jid, value);
+            }
+            else {
+                const fullMsg = await (0, Utils_1.generateWAMessage)(jid, content, {
+                    logger,
+                    userJid,
+                    getUrlInfo: text => (0, link_preview_1.getUrlInfo)(text, {
+                        thumbnailWidth: linkPreviewImageThumbnailWidth,
+                        fetchOpts: {
+                            timeout: 3000,
+                            ...axiosOptions || {}
+                        },
+                        logger,
+                        uploadImage: generateHighQualityLinkPreview
+                            ? waUploadToServer
+                            : undefined
+                    }),
+                    upload: waUploadToServer,
+                    mediaCache: config.mediaCache,
+                    options: config.options,
+                    ...options,
+                });
+                const isDeleteMsg = 'delete' in content && !!content.delete;
+                const isEditMsg = 'edit' in content && !!content.edit;
+                const additionalAttributes = {};
+                // required for delete
+                if (isDeleteMsg) {
+                    // if the chat is a group, and I am not the author, then delete the message as an admin
+                    if ((0, WABinary_1.isJidGroup)((_a = content.delete) === null || _a === void 0 ? void 0 : _a.remoteJid) && !((_b = content.delete) === null || _b === void 0 ? void 0 : _b.fromMe)) {
+                        additionalAttributes.edit = '8';
+                    }
+                    else {
+                        additionalAttributes.edit = '7';
+                    }
+                }
+                else if (isEditMsg) {
+                    additionalAttributes.edit = '1';
+                }
+                await relayMessage(jid, fullMsg.message, { messageId: fullMsg.key.id, cachedGroupMetadata: options.cachedGroupMetadata, additionalAttributes, statusJidList: options.statusJidList });
+                if (config.emitOwnEvents) {
+                    process.nextTick(() => {
+                        processingMutex.mutex(() => (upsertMessage(fullMsg, 'append')));
+                    });
+                }
+                return fullMsg;
+            }
+        }
+    };
+};
+exports.makeMessagesSocket = makeMessagesSocket;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/registration.d.ts b/node_modules/@whiskeysockets/baileys/lib/Socket/registration.d.ts
new file mode 100644
index 0000000..893254f
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/registration.d.ts
@@ -0,0 +1,233 @@
+/// <reference types="node" />
+import { AxiosRequestConfig } from 'axios';
+import { KeyPair, SignedKeyPair, SocketConfig } from '../Types';
+export declare const makeRegistrationSocket: (config: SocketConfig) => {
+    register: (code: string) => Promise<ExistsResponse>;
+    requestRegistrationCode: (registrationOptions?: RegistrationOptions) => Promise<ExistsResponse>;
+    getOrderDetails: (orderId: string, tokenBase64: string) => Promise<import("../Types").OrderDetails>;
+    getCatalog: ({ jid, limit, cursor }: import("../Types").GetCatalogOptions) => Promise<{
+        products: import("../Types").Product[];
+        nextPageCursor: string | undefined;
+    }>;
+    getCollections: (jid?: string | undefined, limit?: number) => Promise<{
+        collections: import("../Types").CatalogCollection[];
+    }>;
+    productCreate: (create: import("../Types").ProductCreate) => Promise<import("../Types").Product>;
+    productDelete: (productIds: string[]) => Promise<{
+        deleted: number;
+    }>;
+    productUpdate: (productId: string, update: import("../Types").ProductUpdate) => Promise<import("../Types").Product>;
+    sendMessageAck: ({ tag, attrs, content }: import("../WABinary").BinaryNode) => Promise<void>;
+    sendRetryRequest: (node: import("../WABinary").BinaryNode, forceIncludeKeys?: boolean) => Promise<void>;
+    rejectCall: (callId: string, callFrom: string) => Promise<void>;
+    getPrivacyTokens: (jids: string[]) => Promise<import("../WABinary").BinaryNode>;
+    assertSessions: (jids: string[], force: boolean) => Promise<boolean>;
+    relayMessage: (jid: string, message: import("../Types").WAProto.IMessage, { messageId: msgId, participant, additionalAttributes, useUserDevicesCache, cachedGroupMetadata, statusJidList }: import("../Types").MessageRelayOptions) => Promise<string>;
+    sendReceipt: (jid: string, participant: string | undefined, messageIds: string[], type: import("../Types").MessageReceiptType) => Promise<void>;
+    sendReceipts: (keys: import("../Types").WAProto.IMessageKey[], type: import("../Types").MessageReceiptType) => Promise<void>;
+    getButtonArgs: (message: import("../Types").WAProto.IMessage) => {
+        [key: string]: string;
+    };
+    readMessages: (keys: import("../Types").WAProto.IMessageKey[]) => Promise<void>;
+    refreshMediaConn: (forceGet?: boolean) => Promise<import("../Types").MediaConnInfo>;
+    waUploadToServer: import("../Types").WAMediaUploadFunction;
+    fetchPrivacySettings: (force?: boolean) => Promise<{
+        [_: string]: string;
+    }>;
+    updateMediaMessage: (message: import("../Types").WAProto.IWebMessageInfo) => Promise<import("../Types").WAProto.IWebMessageInfo>;
+    sendMessage: (jid: string, content: import("../Types").AnyMessageContent, options?: import("../Types").MiscMessageGenerationOptions) => Promise<import("../Types").WAProto.WebMessageInfo | undefined>;
+    groupMetadata: (jid: string) => Promise<import("../Types").GroupMetadata>;
+    groupCreate: (subject: string, participants: string[]) => Promise<import("../Types").GroupMetadata>;
+    groupLeave: (id: string) => Promise<void>;
+    /** the network code of your mobile network
+     * @see {@link https://de.wikipedia.org/wiki/Mobile_Network_Code}
+     */
+    groupUpdateSubject: (jid: string, subject: string) => Promise<void>;
+    groupRequestParticipantsList: (jid: string) => Promise<{
+        [key: string]: string;
+    }[]>;
+    groupRequestParticipantsUpdate: (jid: string, participants: string[], action: "reject" | "approve") => Promise<{
+        status: string;
+        jid: string;
+    }[]>;
+    groupParticipantsUpdate: (jid: string, participants: string[], action: import("../Types").ParticipantAction) => Promise<{
+        status: string;
+        jid: string;
+        content: import("../WABinary").BinaryNode;
+    }[]>;
+    groupUpdateDescription: (jid: string, description?: string | undefined) => Promise<void>;
+    groupInviteCode: (jid: string) => Promise<string | undefined>;
+    groupRevokeInvite: (jid: string) => Promise<string | undefined>;
+    groupAcceptInvite: (code: string) => Promise<string | undefined>;
+    groupAcceptInviteV4: (key: string | import("../Types").WAProto.IMessageKey, inviteMessage: import("../Types").WAProto.Message.IGroupInviteMessage) => Promise<string>;
+    groupGetInviteInfo: (code: string) => Promise<import("../Types").GroupMetadata>;
+    groupToggleEphemeral: (jid: string, ephemeralExpiration: number) => Promise<void>;
+    groupSettingUpdate: (jid: string, setting: "announcement" | "locked" | "not_announcement" | "unlocked") => Promise<void>;
+    groupMemberAddMode: (jid: string, mode: "all_member_add" | "admin_add") => Promise<void>;
+    groupJoinApprovalMode: (jid: string, mode: "on" | "off") => Promise<void>;
+    groupFetchAllParticipating: () => Promise<{
+        [_: string]: import("../Types").GroupMetadata;
+    }>;
+    processingMutex: {
+        mutex<T>(code: () => T | Promise<T>): Promise<T>;
+    };
+    upsertMessage: (msg: import("../Types").WAProto.IWebMessageInfo, type: import("../Types").MessageUpsertType) => Promise<void>;
+    appPatch: (patchCreate: import("../Types").WAPatchCreate) => Promise<void>;
+    sendPresenceUpdate: (type: import("../Types").WAPresence, toJid?: string | undefined) => Promise<void>;
+    presenceSubscribe: (toJid: string, tcToken?: Buffer | undefined) => Promise<void>;
+    profilePictureUrl: (jid: string, type?: "image" | "preview", timeoutMs?: number | undefined) => Promise<string | undefined>;
+    onWhatsApp: (...jids: string[]) => Promise<{
+        exists: boolean;
+        jid: string;
+    }[]>;
+    fetchBlocklist: () => Promise<string[]>;
+    fetchStatus: (jid: string) => Promise<{
+        status: string | undefined;
+        setAt: Date;
+    } | undefined>;
+    updateProfilePicture: (jid: string, content: import("../Types").WAMediaUpload) => Promise<void>;
+    removeProfilePicture: (jid: string) => Promise<void>;
+    updateProfileStatus: (status: string) => Promise<void>;
+    updateProfileName: (name: string) => Promise<void>;
+    updateBlockStatus: (jid: string, action: "block" | "unblock") => Promise<void>;
+    updateLastSeenPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateOnlinePrivacy: (value: import("../Types").WAPrivacyOnlineValue) => Promise<void>;
+    updateProfilePicturePrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateStatusPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateReadReceiptsPrivacy: (value: import("../Types").WAReadReceiptsValue) => Promise<void>;
+    updateGroupsAddPrivacy: (value: import("../Types").WAPrivacyValue) => Promise<void>;
+    updateDefaultDisappearingMode: (duration: number) => Promise<void>;
+    getBusinessProfile: (jid: string) => Promise<void | import("../Types").WABusinessProfile>;
+    resyncAppState: (collections: readonly ("critical_block" | "critical_unblock_low" | "regular_high" | "regular_low" | "regular")[], isInitialSync: boolean) => Promise<void>;
+    chatModify: (mod: import("../Types").ChatModification, jid: string) => Promise<void>;
+    cleanDirtyBits: (type: "account_sync" | "groups", fromTimestamp?: string | number | undefined) => Promise<void>;
+    addChatLabel: (jid: string, labelId: string) => Promise<void>;
+    removeChatLabel: (jid: string, labelId: string) => Promise<void>;
+    addMessageLabel: (jid: string, messageId: string, labelId: string) => Promise<void>;
+    removeMessageLabel: (jid: string, messageId: string, labelId: string) => Promise<void>;
+    star: (jid: string, messages: {
+        id: string;
+        fromMe?: boolean | undefined;
+    }[], star: boolean) => Promise<void>;
+    type: "md";
+    ws: any;
+    ev: import("../Types").BaileysEventEmitter & {
+        process(handler: (events: Partial<import("../Types").BaileysEventMap>) => void | Promise<void>): () => void;
+        buffer(): void;
+        createBufferedFunction<A extends any[], T_1>(work: (...args: A) => Promise<T_1>): (...args: A) => Promise<T_1>;
+        flush(force?: boolean | undefined): boolean;
+        isBuffering(): boolean;
+    };
+    authState: {
+        creds: import("../Types").AuthenticationCreds;
+        keys: import("../Types").SignalKeyStoreWithTransaction;
+    };
+    signalRepository: import("../Types").SignalRepository;
+    user: import("../Types").Contact | undefined;
+    generateMessageTag: () => string;
+    query: (node: import("../WABinary").BinaryNode, timeoutMs?: number | undefined) => Promise<import("../WABinary").BinaryNode>;
+    waitForMessage: <T_2>(msgId: string, timeoutMs?: number | undefined) => Promise<T_2>;
+    waitForSocketOpen: () => Promise<void>;
+    sendRawMessage: (data: Uint8Array | Buffer) => Promise<void>;
+    sendNode: (frame: import("../WABinary").BinaryNode) => Promise<void>;
+    logout: (msg?: string | undefined) => Promise<void>;
+    end: (error: Error | undefined) => void;
+    onUnexpectedError: (err: Error | import("@hapi/boom").Boom<any>, msg: string) => void;
+    uploadPreKeys: (count?: number) => Promise<void>;
+    uploadPreKeysToServerIfRequired: () => Promise<void>;
+    requestPairingCode: (phoneNumber: string) => Promise<string>;
+    waitForConnectionUpdate: (check: (u: Partial<import("../Types").ConnectionState>) => boolean | undefined, timeoutMs?: number | undefined) => Promise<void>;
+    sendWAMBuffer: (wamBuffer: Buffer) => Promise<import("../WABinary").BinaryNode>;
+};
+export interface RegistrationData {
+    registrationId: number;
+    signedPreKey: SignedKeyPair;
+    noiseKey: KeyPair;
+    signedIdentityKey: KeyPair;
+    identityId: Buffer;
+    phoneId: string;
+    deviceId: string;
+    backupToken: Buffer;
+}
+export interface RegistrationOptions {
+    /** your phone number */
+    phoneNumber?: string;
+    /** the country code of your phone number */
+    phoneNumberCountryCode: string;
+    /** your phone number without country code */
+    phoneNumberNationalNumber: string;
+    /** the country code of your mobile network
+     * @see {@link https://de.wikipedia.org/wiki/Mobile_Country_Code}
+     */
+    phoneNumberMobileCountryCode: string;
+    /** the network code of your mobile network
+     * @see {@link https://de.wikipedia.org/wiki/Mobile_Network_Code}
+     */
+    phoneNumberMobileNetworkCode: string;
+    /**
+     * How to send the one time code
+     */
+    method?: 'sms' | 'voice' | 'captcha';
+    /**
+     * The captcha code if it was requested
+     */
+    captcha?: string;
+}
+export type RegistrationParams = RegistrationData & RegistrationOptions;
+export declare function registrationParams(params: RegistrationParams): {
+    cc: string;
+    in: string;
+    Rc: string;
+    lg: string;
+    lc: string;
+    mistyped: string;
+    authkey: string;
+    e_regid: string;
+    e_keytype: string;
+    e_ident: string;
+    e_skey_id: string;
+    e_skey_val: string;
+    e_skey_sig: string;
+    fdid: string;
+    network_ratio_type: string;
+    expid: string;
+    simnum: string;
+    hasinrc: string;
+    pid: string;
+    id: string;
+    backup_token: string;
+    token: string;
+    fraud_checkpoint_code: string | undefined;
+};
+/**
+ * Requests a registration code for the given phone number.
+ */
+export declare function mobileRegisterCode(params: RegistrationParams, fetchOptions?: AxiosRequestConfig): Promise<ExistsResponse>;
+export declare function mobileRegisterExists(params: RegistrationParams, fetchOptions?: AxiosRequestConfig): Promise<ExistsResponse>;
+/**
+ * Registers the phone number on whatsapp with the received OTP code.
+ */
+export declare function mobileRegister(params: RegistrationParams & {
+    code: string;
+}, fetchOptions?: AxiosRequestConfig): Promise<ExistsResponse>;
+/**
+ * Encrypts the given string as AEAD aes-256-gcm with the public whatsapp key and a random keypair.
+ */
+export declare function mobileRegisterEncrypt(data: string): string;
+export declare function mobileRegisterFetch(path: string, opts?: AxiosRequestConfig): Promise<ExistsResponse>;
+export interface ExistsResponse {
+    status: 'fail' | 'sent';
+    voice_length?: number;
+    voice_wait?: number;
+    sms_length?: number;
+    sms_wait?: number;
+    reason?: 'incorrect' | 'missing_param' | 'code_checkpoint';
+    login?: string;
+    flash_type?: number;
+    ab_hash?: string;
+    ab_key?: string;
+    exp_cfg?: string;
+    lid?: string;
+    image_blob?: string;
+    audio_blob?: string;
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/registration.js b/node_modules/@whiskeysockets/baileys/lib/Socket/registration.js
new file mode 100644
index 0000000..77c9ec3
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/registration.js
@@ -0,0 +1,166 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.mobileRegisterFetch = exports.mobileRegisterEncrypt = exports.mobileRegister = exports.mobileRegisterExists = exports.mobileRegisterCode = exports.registrationParams = exports.makeRegistrationSocket = void 0;
+/* eslint-disable camelcase */
+const axios_1 = __importDefault(require("axios"));
+const Defaults_1 = require("../Defaults");
+const crypto_1 = require("../Utils/crypto");
+const WABinary_1 = require("../WABinary");
+const business_1 = require("./business");
+function urlencode(str) {
+    return str.replace(/-/g, '%2d').replace(/_/g, '%5f').replace(/~/g, '%7e');
+}
+const validRegistrationOptions = (config) => (config === null || config === void 0 ? void 0 : config.phoneNumberCountryCode) &&
+    config.phoneNumberNationalNumber &&
+    config.phoneNumberMobileCountryCode;
+const makeRegistrationSocket = (config) => {
+    const sock = (0, business_1.makeBusinessSocket)(config);
+    const register = async (code) => {
+        if (!validRegistrationOptions(config.auth.creds.registration)) {
+            throw new Error('please specify the registration options');
+        }
+        const result = await mobileRegister({ ...sock.authState.creds, ...sock.authState.creds.registration, code }, config.options);
+        sock.authState.creds.me = {
+            id: (0, WABinary_1.jidEncode)(result.login, 's.whatsapp.net'),
+            name: '~'
+        };
+        sock.authState.creds.registered = true;
+        sock.ev.emit('creds.update', sock.authState.creds);
+        return result;
+    };
+    const requestRegistrationCode = async (registrationOptions) => {
+        registrationOptions = registrationOptions || config.auth.creds.registration;
+        if (!validRegistrationOptions(registrationOptions)) {
+            throw new Error('Invalid registration options');
+        }
+        sock.authState.creds.registration = registrationOptions;
+        sock.ev.emit('creds.update', sock.authState.creds);
+        return mobileRegisterCode({ ...config.auth.creds, ...registrationOptions }, config.options);
+    };
+    return {
+        ...sock,
+        register,
+        requestRegistrationCode,
+    };
+};
+exports.makeRegistrationSocket = makeRegistrationSocket;
+function convertBufferToUrlHex(buffer) {
+    var id = '';
+    buffer.forEach((x) => {
+        // encode random identity_id buffer as percentage url encoding
+        id += `%${x.toString(16).padStart(2, '0').toLowerCase()}`;
+    });
+    return id;
+}
+function registrationParams(params) {
+    const e_regid = Buffer.alloc(4);
+    e_regid.writeInt32BE(params.registrationId);
+    const e_skey_id = Buffer.alloc(3);
+    e_skey_id.writeInt16BE(params.signedPreKey.keyId);
+    params.phoneNumberCountryCode = params.phoneNumberCountryCode.replace('+', '').trim();
+    params.phoneNumberNationalNumber = params.phoneNumberNationalNumber.replace(/[/-\s)(]/g, '').trim();
+    return {
+        cc: params.phoneNumberCountryCode,
+        in: params.phoneNumberNationalNumber,
+        Rc: '0',
+        lg: 'en',
+        lc: 'GB',
+        mistyped: '6',
+        authkey: Buffer.from(params.noiseKey.public).toString('base64url'),
+        e_regid: e_regid.toString('base64url'),
+        e_keytype: 'BQ',
+        e_ident: Buffer.from(params.signedIdentityKey.public).toString('base64url'),
+        // e_skey_id: e_skey_id.toString('base64url'),
+        e_skey_id: 'AAAA',
+        e_skey_val: Buffer.from(params.signedPreKey.keyPair.public).toString('base64url'),
+        e_skey_sig: Buffer.from(params.signedPreKey.signature).toString('base64url'),
+        fdid: params.phoneId,
+        network_ratio_type: '1',
+        expid: params.deviceId,
+        simnum: '1',
+        hasinrc: '1',
+        pid: Math.floor(Math.random() * 1000).toString(),
+        id: convertBufferToUrlHex(params.identityId),
+        backup_token: convertBufferToUrlHex(params.backupToken),
+        token: (0, crypto_1.md5)(Buffer.concat([Defaults_1.MOBILE_TOKEN, Buffer.from(params.phoneNumberNationalNumber)])).toString('hex'),
+        fraud_checkpoint_code: params.captcha,
+    };
+}
+exports.registrationParams = registrationParams;
+/**
+ * Requests a registration code for the given phone number.
+ */
+function mobileRegisterCode(params, fetchOptions) {
+    return mobileRegisterFetch('/code', {
+        params: {
+            ...registrationParams(params),
+            mcc: `${params.phoneNumberMobileCountryCode}`.padStart(3, '0'),
+            mnc: `${params.phoneNumberMobileNetworkCode || '001'}`.padStart(3, '0'),
+            sim_mcc: '000',
+            sim_mnc: '000',
+            method: (params === null || params === void 0 ? void 0 : params.method) || 'sms',
+            reason: '',
+            hasav: '1'
+        },
+        ...fetchOptions,
+    });
+}
+exports.mobileRegisterCode = mobileRegisterCode;
+function mobileRegisterExists(params, fetchOptions) {
+    return mobileRegisterFetch('/exist', {
+        params: registrationParams(params),
+        ...fetchOptions
+    });
+}
+exports.mobileRegisterExists = mobileRegisterExists;
+/**
+ * Registers the phone number on whatsapp with the received OTP code.
+ */
+async function mobileRegister(params, fetchOptions) {
+    //const result = await mobileRegisterFetch(`/reg_onboard_abprop?cc=${params.phoneNumberCountryCode}&in=${params.phoneNumberNationalNumber}&rc=0`)
+    return mobileRegisterFetch('/register', {
+        params: { ...registrationParams(params), code: params.code.replace('-', '') },
+        ...fetchOptions,
+    });
+}
+exports.mobileRegister = mobileRegister;
+/**
+ * Encrypts the given string as AEAD aes-256-gcm with the public whatsapp key and a random keypair.
+ */
+function mobileRegisterEncrypt(data) {
+    const keypair = crypto_1.Curve.generateKeyPair();
+    const key = crypto_1.Curve.sharedKey(keypair.private, Defaults_1.REGISTRATION_PUBLIC_KEY);
+    const buffer = (0, crypto_1.aesEncryptGCM)(Buffer.from(data), new Uint8Array(key), Buffer.alloc(12), Buffer.alloc(0));
+    return Buffer.concat([Buffer.from(keypair.public), buffer]).toString('base64url');
+}
+exports.mobileRegisterEncrypt = mobileRegisterEncrypt;
+async function mobileRegisterFetch(path, opts = {}) {
+    let url = `${Defaults_1.MOBILE_REGISTRATION_ENDPOINT}${path}`;
+    if (opts.params) {
+        const parameter = [];
+        for (const param in opts.params) {
+            if (opts.params[param] !== null && opts.params[param] !== undefined) {
+                parameter.push(param + '=' + urlencode(opts.params[param]));
+            }
+        }
+        url += `?${parameter.join('&')}`;
+        delete opts.params;
+    }
+    if (!opts.headers) {
+        opts.headers = {};
+    }
+    opts.headers['User-Agent'] = Defaults_1.MOBILE_USERAGENT;
+    const response = await (0, axios_1.default)(url, opts);
+    var json = response.data;
+    if (response.status > 300 || json.reason) {
+        throw json;
+    }
+    if (json.status && !['ok', 'sent'].includes(json.status)) {
+        throw json;
+    }
+    return json;
+}
+exports.mobileRegisterFetch = mobileRegisterFetch;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/socket.d.ts b/node_modules/@whiskeysockets/baileys/lib/Socket/socket.d.ts
new file mode 100644
index 0000000..9df897c
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/socket.d.ts
@@ -0,0 +1,43 @@
+/// <reference types="node" />
+import { Boom } from '@hapi/boom';
+import { SocketConfig } from '../Types';
+import { BinaryNode } from '../WABinary';
+/**
+ * Connects to WA servers and performs:
+ * - simple queries (no retry mechanism, wait for connection establishment)
+ * - listen to messages and emit events
+ * - query phone connection
+ */
+export declare const makeSocket: (config: SocketConfig) => {
+    type: "md";
+    ws: any;
+    ev: import("../Types").BaileysEventEmitter & {
+        process(handler: (events: Partial<import("../Types").BaileysEventMap>) => void | Promise<void>): () => void;
+        buffer(): void;
+        createBufferedFunction<A extends any[], T>(work: (...args: A) => Promise<T>): (...args: A) => Promise<T>;
+        flush(force?: boolean | undefined): boolean;
+        isBuffering(): boolean;
+    };
+    authState: {
+        creds: import("../Types").AuthenticationCreds;
+        keys: import("../Types").SignalKeyStoreWithTransaction;
+    };
+    signalRepository: import("../Types").SignalRepository;
+    readonly user: import("../Types").Contact | undefined;
+    generateMessageTag: () => string;
+    query: (node: BinaryNode, timeoutMs?: number) => Promise<BinaryNode>;
+    waitForMessage: <T_1>(msgId: string, timeoutMs?: number | undefined) => Promise<T_1>;
+    waitForSocketOpen: () => Promise<void>;
+    sendRawMessage: (data: Uint8Array | Buffer) => Promise<void>;
+    sendNode: (frame: BinaryNode) => Promise<void>;
+    logout: (msg?: string) => Promise<void>;
+    end: (error: Error | undefined) => void;
+    onUnexpectedError: (err: Error | Boom, msg: string) => void;
+    uploadPreKeys: (count?: number) => Promise<void>;
+    uploadPreKeysToServerIfRequired: () => Promise<void>;
+    requestPairingCode: (phoneNumber: string) => Promise<string>;
+    /** Waits for the connection to WA to reach a state */
+    waitForConnectionUpdate: (check: (u: Partial<import("../Types").ConnectionState>) => boolean | undefined, timeoutMs?: number | undefined) => Promise<void>;
+    sendWAMBuffer: (wamBuffer: Buffer) => Promise<BinaryNode>;
+};
+export type Socket = ReturnType<typeof makeSocket>;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Socket/socket.js b/node_modules/@whiskeysockets/baileys/lib/Socket/socket.js
new file mode 100644
index 0000000..61dd239
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Socket/socket.js
@@ -0,0 +1,606 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.makeSocket = void 0;
+const boom_1 = require("@hapi/boom");
+const crypto_1 = require("crypto");
+const url_1 = require("url");
+const util_1 = require("util");
+const WAProto_1 = require("../../WAProto");
+const Defaults_1 = require("../Defaults");
+const Types_1 = require("../Types");
+const Utils_1 = require("../Utils");
+const WABinary_1 = require("../WABinary");
+const Client_1 = require("./Client");
+/**
+ * Connects to WA servers and performs:
+ * - simple queries (no retry mechanism, wait for connection establishment)
+ * - listen to messages and emit events
+ * - query phone connection
+ */
+const makeSocket = (config) => {
+    const { waWebSocketUrl, connectTimeoutMs, logger, keepAliveIntervalMs, browser, auth: authState, printQRInTerminal, defaultQueryTimeoutMs, transactionOpts, qrTimeout, makeSignalRepository, } = config;
+    let url = typeof waWebSocketUrl === 'string' ? new url_1.URL(waWebSocketUrl) : waWebSocketUrl;
+    config.mobile = config.mobile || url.protocol === 'tcp:';
+    if (config.mobile && url.protocol !== 'tcp:') {
+        url = new url_1.URL(`tcp://${Defaults_1.MOBILE_ENDPOINT}:${Defaults_1.MOBILE_PORT}`);
+    }
+    const ws = config.socket ? config.socket : config.mobile ? new Client_1.MobileSocketClient(url, config) : new Client_1.WebSocketClient(url, config);
+    ws.connect();
+    const ev = (0, Utils_1.makeEventBuffer)(logger);
+    /** ephemeral key pair used to encrypt/decrypt communication. Unique for each connection */
+    const ephemeralKeyPair = Utils_1.Curve.generateKeyPair();
+    /** WA noise protocol wrapper */
+    const noise = (0, Utils_1.makeNoiseHandler)({
+        keyPair: ephemeralKeyPair,
+        NOISE_HEADER: config.mobile ? Defaults_1.MOBILE_NOISE_HEADER : Defaults_1.NOISE_WA_HEADER,
+        mobile: config.mobile,
+        logger
+    });
+    const { creds } = authState;
+    // add transaction capability
+    const keys = (0, Utils_1.addTransactionCapability)(authState.keys, logger, transactionOpts);
+    const signalRepository = makeSignalRepository({ creds, keys });
+    let lastDateRecv;
+    let epoch = 1;
+    let keepAliveReq;
+    let qrTimer;
+    let closed = false;
+    const uqTagId = (0, Utils_1.generateMdTagPrefix)();
+    const generateMessageTag = () => `${uqTagId}${epoch++}`;
+    const sendPromise = (0, util_1.promisify)(ws.send);
+    /** send a raw buffer */
+    const sendRawMessage = async (data) => {
+        if (!ws.isOpen) {
+            throw new boom_1.Boom('Connection Closed', { statusCode: Types_1.DisconnectReason.connectionClosed });
+        }
+        const bytes = noise.encodeFrame(data);
+        await (0, Utils_1.promiseTimeout)(connectTimeoutMs, async (resolve, reject) => {
+            try {
+                await sendPromise.call(ws, bytes);
+                resolve();
+            }
+            catch (error) {
+                reject(error);
+            }
+        });
+    };
+    /** send a binary node */
+    const sendNode = (frame) => {
+        if (logger.level === 'trace') {
+            logger.trace({ xml: (0, WABinary_1.binaryNodeToString)(frame), msg: 'xml send' });
+        }
+        const buff = (0, WABinary_1.encodeBinaryNode)(frame);
+        return sendRawMessage(buff);
+    };
+    /** log & process any unexpected errors */
+    const onUnexpectedError = (err, msg) => {
+        logger.error({ err }, `unexpected error in '${msg}'`);
+    };
+    /** await the next incoming message */
+    const awaitNextMessage = async (sendMsg) => {
+        if (!ws.isOpen) {
+            throw new boom_1.Boom('Connection Closed', {
+                statusCode: Types_1.DisconnectReason.connectionClosed
+            });
+        }
+        let onOpen;
+        let onClose;
+        const result = (0, Utils_1.promiseTimeout)(connectTimeoutMs, (resolve, reject) => {
+            onOpen = resolve;
+            onClose = mapWebSocketError(reject);
+            ws.on('frame', onOpen);
+            ws.on('close', onClose);
+            ws.on('error', onClose);
+        })
+            .finally(() => {
+            ws.off('frame', onOpen);
+            ws.off('close', onClose);
+            ws.off('error', onClose);
+        });
+        if (sendMsg) {
+            sendRawMessage(sendMsg).catch(onClose);
+        }
+        return result;
+    };
+    /**
+     * Wait for a message with a certain tag to be received
+     * @param msgId the message tag to await
+     * @param timeoutMs timeout after which the promise will reject
+     */
+    const waitForMessage = async (msgId, timeoutMs = defaultQueryTimeoutMs) => {
+        let onRecv;
+        let onErr;
+        try {
+            return await (0, Utils_1.promiseTimeout)(timeoutMs, (resolve, reject) => {
+                onRecv = resolve;
+                onErr = err => {
+                    reject(err || new boom_1.Boom('Connection Closed', { statusCode: Types_1.DisconnectReason.connectionClosed }));
+                };
+                ws.on(`TAG:${msgId}`, onRecv);
+                ws.on('close', onErr); // if the socket closes, you'll never receive the message
+                ws.off('error', onErr);
+            });
+        }
+        finally {
+            ws.off(`TAG:${msgId}`, onRecv);
+            ws.off('close', onErr); // if the socket closes, you'll never receive the message
+            ws.off('error', onErr);
+        }
+    };
+    /** send a query, and wait for its response. auto-generates message ID if not provided */
+    const query = async (node, timeoutMs) => {
+        if (!node.attrs.id) {
+            node.attrs.id = generateMessageTag();
+        }
+        const msgId = node.attrs.id;
+        const wait = waitForMessage(msgId, timeoutMs);
+        await sendNode(node);
+        const result = await wait;
+        if ('tag' in result) {
+            (0, WABinary_1.assertNodeErrorFree)(result);
+        }
+        return result;
+    };
+    /** connection handshake */
+    const validateConnection = async () => {
+        let helloMsg = {
+            clientHello: { ephemeral: ephemeralKeyPair.public }
+        };
+        helloMsg = WAProto_1.proto.HandshakeMessage.fromObject(helloMsg);
+        logger.info({ browser, helloMsg }, 'connected to WA');
+        const init = WAProto_1.proto.HandshakeMessage.encode(helloMsg).finish();
+        const result = await awaitNextMessage(init);
+        const handshake = WAProto_1.proto.HandshakeMessage.decode(result);
+        logger.trace({ handshake }, 'handshake recv from WA');
+        const keyEnc = noise.processHandshake(handshake, creds.noiseKey);
+        let node;
+        if (config.mobile) {
+            node = (0, Utils_1.generateMobileNode)(config);
+        }
+        else if (!creds.me) {
+            node = (0, Utils_1.generateRegistrationNode)(creds, config);
+            logger.info({ node }, 'not logged in, attempting registration...');
+        }
+        else {
+            node = (0, Utils_1.generateLoginNode)(creds.me.id, config);
+            logger.info({ node }, 'logging in...');
+        }
+        const payloadEnc = noise.encrypt(WAProto_1.proto.ClientPayload.encode(node).finish());
+        await sendRawMessage(WAProto_1.proto.HandshakeMessage.encode({
+            clientFinish: {
+                static: keyEnc,
+                payload: payloadEnc,
+            },
+        }).finish());
+        noise.finishInit();
+        startKeepAliveRequest();
+    };
+    const getAvailablePreKeysOnServer = async () => {
+        const result = await query({
+            tag: 'iq',
+            attrs: {
+                id: generateMessageTag(),
+                xmlns: 'encrypt',
+                type: 'get',
+                to: WABinary_1.S_WHATSAPP_NET
+            },
+            content: [
+                { tag: 'count', attrs: {} }
+            ]
+        });
+        const countChild = (0, WABinary_1.getBinaryNodeChild)(result, 'count');
+        return +countChild.attrs.value;
+    };
+    /** generates and uploads a set of pre-keys to the server */
+    const uploadPreKeys = async (count = Defaults_1.INITIAL_PREKEY_COUNT) => {
+        await keys.transaction(async () => {
+            logger.info({ count }, 'uploading pre-keys');
+            const { update, node } = await (0, Utils_1.getNextPreKeysNode)({ creds, keys }, count);
+            await query(node);
+            ev.emit('creds.update', update);
+            logger.info({ count }, 'uploaded pre-keys');
+        });
+    };
+    const uploadPreKeysToServerIfRequired = async () => {
+        const preKeyCount = await getAvailablePreKeysOnServer();
+        logger.info(`${preKeyCount} pre-keys found on server`);
+        if (preKeyCount <= Defaults_1.MIN_PREKEY_COUNT) {
+            await uploadPreKeys();
+        }
+    };
+    const onMessageReceived = (data) => {
+        noise.decodeFrame(data, frame => {
+            var _a;
+            // reset ping timeout
+            lastDateRecv = new Date();
+            let anyTriggered = false;
+            anyTriggered = ws.emit('frame', frame);
+            // if it's a binary node
+            if (!(frame instanceof Uint8Array)) {
+                const msgId = frame.attrs.id;
+                if (logger.level === 'trace') {
+                    logger.trace({ xml: (0, WABinary_1.binaryNodeToString)(frame), msg: 'recv xml' });
+                }
+                /* Check if this is a response to a message we sent */
+                anyTriggered = ws.emit(`${Defaults_1.DEF_TAG_PREFIX}${msgId}`, frame) || anyTriggered;
+                /* Check if this is a response to a message we are expecting */
+                const l0 = frame.tag;
+                const l1 = frame.attrs || {};
+                const l2 = Array.isArray(frame.content) ? (_a = frame.content[0]) === null || _a === void 0 ? void 0 : _a.tag : '';
+                Object.keys(l1).forEach(key => {
+                    anyTriggered = ws.emit(`${Defaults_1.DEF_CALLBACK_PREFIX}${l0},${key}:${l1[key]},${l2}`, frame) || anyTriggered;
+                    anyTriggered = ws.emit(`${Defaults_1.DEF_CALLBACK_PREFIX}${l0},${key}:${l1[key]}`, frame) || anyTriggered;
+                    anyTriggered = ws.emit(`${Defaults_1.DEF_CALLBACK_PREFIX}${l0},${key}`, frame) || anyTriggered;
+                });
+                anyTriggered = ws.emit(`${Defaults_1.DEF_CALLBACK_PREFIX}${l0},,${l2}`, frame) || anyTriggered;
+                anyTriggered = ws.emit(`${Defaults_1.DEF_CALLBACK_PREFIX}${l0}`, frame) || anyTriggered;
+                if (!anyTriggered && logger.level === 'debug') {
+                    logger.debug({ unhandled: true, msgId, fromMe: false, frame }, 'communication recv');
+                }
+            }
+        });
+    };
+    const end = (error) => {
+        if (closed) {
+            logger.trace({ trace: error === null || error === void 0 ? void 0 : error.stack }, 'connection already closed');
+            return;
+        }
+        closed = true;
+        logger.info({ trace: error === null || error === void 0 ? void 0 : error.stack }, error ? 'connection errored' : 'connection closed');
+        clearInterval(keepAliveReq);
+        clearTimeout(qrTimer);
+        ws.removeAllListeners('close');
+        ws.removeAllListeners('error');
+        ws.removeAllListeners('open');
+        ws.removeAllListeners('message');
+        if (!ws.isClosed && !ws.isClosing) {
+            try {
+                ws.close();
+            }
+            catch (_a) { }
+        }
+        ev.emit('connection.update', {
+            connection: 'close',
+            lastDisconnect: {
+                error,
+                date: new Date()
+            }
+        });
+        ev.removeAllListeners('connection.update');
+    };
+    const waitForSocketOpen = async () => {
+        if (ws.isOpen) {
+            return;
+        }
+        if (ws.isClosed || ws.isClosing) {
+            throw new boom_1.Boom('Connection Closed', { statusCode: Types_1.DisconnectReason.connectionClosed });
+        }
+        let onOpen;
+        let onClose;
+        await new Promise((resolve, reject) => {
+            onOpen = () => resolve(undefined);
+            onClose = mapWebSocketError(reject);
+            ws.on('open', onOpen);
+            ws.on('close', onClose);
+            ws.on('error', onClose);
+        })
+            .finally(() => {
+            ws.off('open', onOpen);
+            ws.off('close', onClose);
+            ws.off('error', onClose);
+        });
+    };
+    const startKeepAliveRequest = () => (keepAliveReq = setInterval(() => {
+        if (!lastDateRecv) {
+            lastDateRecv = new Date();
+        }
+        const diff = Date.now() - lastDateRecv.getTime();
+        /*
+            check if it's been a suspicious amount of time since the server responded with our last seen
+            it could be that the network is down
+        */
+        if (diff > keepAliveIntervalMs + 5000) {
+            end(new boom_1.Boom('Connection was lost', { statusCode: Types_1.DisconnectReason.connectionLost }));
+        }
+        else if (ws.isOpen) {
+            // if its all good, send a keep alive request
+            query({
+                tag: 'iq',
+                attrs: {
+                    id: generateMessageTag(),
+                    to: WABinary_1.S_WHATSAPP_NET,
+                    type: 'get',
+                    xmlns: 'w:p',
+                },
+                content: [{ tag: 'ping', attrs: {} }]
+            })
+                .catch(err => {
+                logger.error({ trace: err.stack }, 'error in sending keep alive');
+            });
+        }
+        else {
+            logger.warn('keep alive called when WS not open');
+        }
+    }, keepAliveIntervalMs));
+    /** i have no idea why this exists. pls enlighten me */
+    const sendPassiveIq = (tag) => (query({
+        tag: 'iq',
+        attrs: {
+            to: WABinary_1.S_WHATSAPP_NET,
+            xmlns: 'passive',
+            type: 'set',
+        },
+        content: [
+            { tag, attrs: {} }
+        ]
+    }));
+    /** logout & invalidate connection */
+    const logout = async (msg) => {
+        var _a;
+        const jid = (_a = authState.creds.me) === null || _a === void 0 ? void 0 : _a.id;
+        if (jid) {
+            await sendNode({
+                tag: 'iq',
+                attrs: {
+                    to: WABinary_1.S_WHATSAPP_NET,
+                    type: 'set',
+                    id: generateMessageTag(),
+                    xmlns: 'md'
+                },
+                content: [
+                    {
+                        tag: 'remove-companion-device',
+                        attrs: {
+                            jid,
+                            reason: 'user_initiated'
+                        }
+                    }
+                ]
+            });
+        }
+        end(new boom_1.Boom(msg || 'Intentional Logout', { statusCode: Types_1.DisconnectReason.loggedOut }));
+    };
+    const requestPairingCode = async (phoneNumber) => {
+        authState.creds.pairingCode = (0, Utils_1.bytesToCrockford)((0, crypto_1.randomBytes)(5));
+        authState.creds.me = {
+            id: (0, WABinary_1.jidEncode)(phoneNumber, 's.whatsapp.net'),
+            name: '~'
+        };
+        ev.emit('creds.update', authState.creds);
+        await sendNode({
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'set',
+                id: generateMessageTag(),
+                xmlns: 'md'
+            },
+            content: [
+                {
+                    tag: 'link_code_companion_reg',
+                    attrs: {
+                        jid: authState.creds.me.id,
+                        stage: 'companion_hello',
+                        // eslint-disable-next-line camelcase
+                        should_show_push_notification: 'true'
+                    },
+                    content: [
+                        {
+                            tag: 'link_code_pairing_wrapped_companion_ephemeral_pub',
+                            attrs: {},
+                            content: await generatePairingKey()
+                        },
+                        {
+                            tag: 'companion_server_auth_key_pub',
+                            attrs: {},
+                            content: authState.creds.noiseKey.public
+                        },
+                        {
+                            tag: 'companion_platform_id',
+                            attrs: {},
+                            content: '49' // Chrome
+                        },
+                        {
+                            tag: 'companion_platform_display',
+                            attrs: {},
+                            content: `${browser[1]} (${browser[0]})`
+                        },
+                        {
+                            tag: 'link_code_pairing_nonce',
+                            attrs: {},
+                            content: '0'
+                        }
+                    ]
+                }
+            ]
+        });
+        return authState.creds.pairingCode;
+    };
+    async function generatePairingKey() {
+        const salt = (0, crypto_1.randomBytes)(32);
+        const randomIv = (0, crypto_1.randomBytes)(16);
+        const key = (0, Utils_1.derivePairingCodeKey)(authState.creds.pairingCode, salt);
+        const ciphered = (0, Utils_1.aesEncryptCTR)(authState.creds.pairingEphemeralKeyPair.public, key, randomIv);
+        return Buffer.concat([salt, randomIv, ciphered]);
+    }
+    const sendWAMBuffer = (wamBuffer) => {
+        return query({
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                id: generateMessageTag(),
+                xmlns: 'w:stats'
+            },
+            content: [
+                {
+                    tag: 'add',
+                    attrs: {},
+                    content: wamBuffer
+                }
+            ]
+        });
+    };
+    ws.on('message', onMessageReceived);
+    ws.on('open', async () => {
+        try {
+            await validateConnection();
+        }
+        catch (err) {
+            logger.error({ err }, 'error in validating connection');
+            end(err);
+        }
+    });
+    ws.on('error', mapWebSocketError(end));
+    ws.on('close', () => end(new boom_1.Boom('Connection Terminated', { statusCode: Types_1.DisconnectReason.connectionClosed })));
+    // the server terminated the connection
+    ws.on('CB:xmlstreamend', () => end(new boom_1.Boom('Connection Terminated by Server', { statusCode: Types_1.DisconnectReason.connectionClosed })));
+    // QR gen
+    ws.on('CB:iq,type:set,pair-device', async (stanza) => {
+        const iq = {
+            tag: 'iq',
+            attrs: {
+                to: WABinary_1.S_WHATSAPP_NET,
+                type: 'result',
+                id: stanza.attrs.id,
+            }
+        };
+        await sendNode(iq);
+        const pairDeviceNode = (0, WABinary_1.getBinaryNodeChild)(stanza, 'pair-device');
+        const refNodes = (0, WABinary_1.getBinaryNodeChildren)(pairDeviceNode, 'ref');
+        const noiseKeyB64 = Buffer.from(creds.noiseKey.public).toString('base64');
+        const identityKeyB64 = Buffer.from(creds.signedIdentityKey.public).toString('base64');
+        const advB64 = creds.advSecretKey;
+        let qrMs = qrTimeout || 60000; // time to let a QR live
+        const genPairQR = () => {
+            if (!ws.isOpen) {
+                return;
+            }
+            const refNode = refNodes.shift();
+            if (!refNode) {
+                end(new boom_1.Boom('QR refs attempts ended', { statusCode: Types_1.DisconnectReason.timedOut }));
+                return;
+            }
+            const ref = refNode.content.toString('utf-8');
+            const qr = [ref, noiseKeyB64, identityKeyB64, advB64].join(',');
+            ev.emit('connection.update', { qr });
+            qrTimer = setTimeout(genPairQR, qrMs);
+            qrMs = qrTimeout || 20000; // shorter subsequent qrs
+        };
+        genPairQR();
+    });
+    // device paired for the first time
+    // if device pairs successfully, the server asks to restart the connection
+    ws.on('CB:iq,,pair-success', async (stanza) => {
+        logger.debug('pair success recv');
+        try {
+            const { reply, creds: updatedCreds } = (0, Utils_1.configureSuccessfulPairing)(stanza, creds);
+            logger.info({ me: updatedCreds.me, platform: updatedCreds.platform }, 'pairing configured successfully, expect to restart the connection...');
+            ev.emit('creds.update', updatedCreds);
+            ev.emit('connection.update', { isNewLogin: true, qr: undefined });
+            await sendNode(reply);
+        }
+        catch (error) {
+            logger.info({ trace: error.stack }, 'error in pairing');
+            end(error);
+        }
+    });
+    // login complete
+    ws.on('CB:success', async (node) => {
+        await uploadPreKeysToServerIfRequired();
+        await sendPassiveIq('active');
+        logger.info('opened connection to WA');
+        clearTimeout(qrTimer); // will never happen in all likelyhood -- but just in case WA sends success on first try
+        ev.emit('creds.update', { me: { ...authState.creds.me, lid: node.attrs.lid } });
+        ev.emit('connection.update', { connection: 'open' });
+    });
+    ws.on('CB:stream:error', (node) => {
+        logger.error({ node }, 'stream errored out');
+        const { reason, statusCode } = (0, Utils_1.getErrorCodeFromStreamError)(node);
+        end(new boom_1.Boom(`Stream Errored (${reason})`, { statusCode, data: node }));
+    });
+    // stream fail, possible logout
+    ws.on('CB:failure', (node) => {
+        const reason = +(node.attrs.reason || 500);
+        end(new boom_1.Boom('Connection Failure', { statusCode: reason, data: node.attrs }));
+    });
+    ws.on('CB:ib,,downgrade_webclient', () => {
+        end(new boom_1.Boom('Multi-device beta not joined', { statusCode: Types_1.DisconnectReason.multideviceMismatch }));
+    });
+    let didStartBuffer = false;
+    process.nextTick(() => {
+        var _a;
+        if ((_a = creds.me) === null || _a === void 0 ? void 0 : _a.id) {
+            // start buffering important events
+            // if we're logged in
+            ev.buffer();
+            didStartBuffer = true;
+        }
+        ev.emit('connection.update', { connection: 'connecting', receivedPendingNotifications: false, qr: undefined });
+    });
+    // called when all offline notifs are handled
+    ws.on('CB:ib,,offline', (node) => {
+        const child = (0, WABinary_1.getBinaryNodeChild)(node, 'offline');
+        const offlineNotifs = +((child === null || child === void 0 ? void 0 : child.attrs.count) || 0);
+        logger.info(`handled ${offlineNotifs} offline messages/notifications`);
+        if (didStartBuffer) {
+            ev.flush();
+            logger.trace('flushed events for initial buffer');
+        }
+        ev.emit('connection.update', { receivedPendingNotifications: true });
+    });
+    // update credentials when required
+    ev.on('creds.update', update => {
+        var _a, _b;
+        const name = (_a = update.me) === null || _a === void 0 ? void 0 : _a.name;
+        // if name has just been received
+        if (((_b = creds.me) === null || _b === void 0 ? void 0 : _b.name) !== name) {
+            logger.debug({ name }, 'updated pushName');
+            sendNode({
+                tag: 'presence',
+                attrs: { name: name }
+            })
+                .catch(err => {
+                logger.warn({ trace: err.stack }, 'error in sending presence update on name change');
+            });
+        }
+        Object.assign(creds, update);
+    });
+    if (printQRInTerminal) {
+        (0, Utils_1.printQRIfNecessaryListener)(ev, logger);
+    }
+    return {
+        type: 'md',
+        ws,
+        ev,
+        authState: { creds, keys },
+        signalRepository,
+        get user() {
+            return authState.creds.me;
+        },
+        generateMessageTag,
+        query,
+        waitForMessage,
+        waitForSocketOpen,
+        sendRawMessage,
+        sendNode,
+        logout,
+        end,
+        onUnexpectedError,
+        uploadPreKeys,
+        uploadPreKeysToServerIfRequired,
+        requestPairingCode,
+        /** Waits for the connection to WA to reach a state */
+        waitForConnectionUpdate: (0, Utils_1.bindWaitForConnectionUpdate)(ev),
+        sendWAMBuffer,
+    };
+};
+exports.makeSocket = makeSocket;
+/**
+ * map the websocket error to the right type
+ * so it can be retried by the caller
+ * */
+function mapWebSocketError(handler) {
+    return (error) => {
+        handler(new boom_1.Boom(`WebSocket Error (${error === null || error === void 0 ? void 0 : error.message})`, { statusCode: (0, Utils_1.getCodeFromWSError)(error), data: error }));
+    };
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/Store/index.d.ts b/node_modules/@whiskeysockets/baileys/lib/Store/index.d.ts
new file mode 100644
index 0000000..e3ae583
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Store/index.d.ts
@@ -0,0 +1,3 @@
+import makeCacheManagerAuthState from './make-cache-manager-store';
+import makeInMemoryStore from './make-in-memory-store';
+export { makeInMemoryStore, makeCacheManagerAuthState };
diff --git a/node_modules/@whiskeysockets/baileys/lib/Store/index.js b/node_modules/@whiskeysockets/baileys/lib/Store/index.js
new file mode 100644
index 0000000..f8bee33
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Store/index.js
@@ -0,0 +1,10 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.makeCacheManagerAuthState = exports.makeInMemoryStore = void 0;
+const make_cache_manager_store_1 = __importDefault(require("./make-cache-manager-store"));
+exports.makeCacheManagerAuthState = make_cache_manager_store_1.default;
+const make_in_memory_store_1 = __importDefault(require("./make-in-memory-store"));
+exports.makeInMemoryStore = make_in_memory_store_1.default;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Store/make-cache-manager-store.d.ts b/node_modules/@whiskeysockets/baileys/lib/Store/make-cache-manager-store.d.ts
new file mode 100644
index 0000000..e1d1542
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Store/make-cache-manager-store.d.ts
@@ -0,0 +1,13 @@
+import { AuthenticationCreds } from '../Types';
+declare const makeCacheManagerAuthState: (store: Storage, sessionKey: string) => Promise<{
+    clearState: () => Promise<void>;
+    saveCreds: () => Promise<void>;
+    state: {
+        creds: AuthenticationCreds;
+        keys: {
+            get: (type: string, ids: string[]) => Promise<{}>;
+            set: (data: any) => Promise<void>;
+        };
+    };
+}>;
+export default makeCacheManagerAuthState;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Store/make-cache-manager-store.js b/node_modules/@whiskeysockets/baileys/lib/Store/make-cache-manager-store.js
new file mode 100644
index 0000000..dd15652
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Store/make-cache-manager-store.js
@@ -0,0 +1,83 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const cache_manager_1 = require("cache-manager");
+const WAProto_1 = require("../../WAProto");
+const Utils_1 = require("../Utils");
+const logger_1 = __importDefault(require("../Utils/logger"));
+const makeCacheManagerAuthState = async (store, sessionKey) => {
+    const defaultKey = (file) => `${sessionKey}:${file}`;
+    const databaseConn = await (0, cache_manager_1.caching)(store);
+    const writeData = async (file, data) => {
+        let ttl = undefined;
+        if (file === 'creds') {
+            ttl = 63115200; // 2 years
+        }
+        await databaseConn.set(defaultKey(file), JSON.stringify(data, Utils_1.BufferJSON.replacer), ttl);
+    };
+    const readData = async (file) => {
+        try {
+            const data = await databaseConn.get(defaultKey(file));
+            if (data) {
+                return JSON.parse(data, Utils_1.BufferJSON.reviver);
+            }
+            return null;
+        }
+        catch (error) {
+            logger_1.default.error(error);
+            return null;
+        }
+    };
+    const removeData = async (file) => {
+        try {
+            return await databaseConn.del(defaultKey(file));
+        }
+        catch (_a) {
+            logger_1.default.error(`Error removing ${file} from session ${sessionKey}`);
+        }
+    };
+    const clearState = async () => {
+        try {
+            const result = await databaseConn.store.keys(`${sessionKey}*`);
+            await Promise.all(result.map(async (key) => await databaseConn.del(key)));
+        }
+        catch (err) {
+        }
+    };
+    const creds = (await readData('creds')) || (0, Utils_1.initAuthCreds)();
+    return {
+        clearState,
+        saveCreds: () => writeData('creds', creds),
+        state: {
+            creds,
+            keys: {
+                get: async (type, ids) => {
+                    const data = {};
+                    await Promise.all(ids.map(async (id) => {
+                        let value = await readData(`${type}-${id}`);
+                        if (type === 'app-state-sync-key' && value) {
+                            value = WAProto_1.proto.Message.AppStateSyncKeyData.fromObject(value);
+                        }
+                        data[id] = value;
+                    }));
+                    return data;
+                },
+                set: async (data) => {
+                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
+                    const tasks = [];
+                    for (const category in data) {
+                        for (const id in data[category]) {
+                            const value = data[category][id];
+                            const key = `${category}-${id}`;
+                            tasks.push(value ? writeData(key, value) : removeData(key));
+                        }
+                    }
+                    await Promise.all(tasks);
+                },
+            }
+        }
+    };
+};
+exports.default = makeCacheManagerAuthState;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Store/make-in-memory-store.d.ts b/node_modules/@whiskeysockets/baileys/lib/Store/make-in-memory-store.d.ts
new file mode 100644
index 0000000..9d2c220
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Store/make-in-memory-store.d.ts
@@ -0,0 +1,118 @@
+import type KeyedDB from '@adiwajshing/keyed-db';
+import type { Comparable } from '@adiwajshing/keyed-db/lib/Types';
+import type { Logger } from 'pino';
+import { proto } from '../../WAProto';
+import type makeMDSocket from '../Socket';
+import type { BaileysEventEmitter, Chat, ConnectionState, Contact, GroupMetadata, PresenceData, WAMessage, WAMessageCursor, WAMessageKey } from '../Types';
+import { Label } from '../Types/Label';
+import { LabelAssociation } from '../Types/LabelAssociation';
+import { ObjectRepository } from './object-repository';
+type WASocket = ReturnType<typeof makeMDSocket>;
+export declare const waChatKey: (pin: boolean) => {
+    key: (c: Chat) => string;
+    compare: (k1: string, k2: string) => number;
+};
+export declare const waMessageID: (m: WAMessage) => string;
+export declare const waLabelAssociationKey: Comparable<LabelAssociation, string>;
+export type BaileysInMemoryStoreConfig = {
+    chatKey?: Comparable<Chat, string>;
+    labelAssociationKey?: Comparable<LabelAssociation, string>;
+    logger: Logger;
+    socket?: WASocket;
+};
+declare const _default: ({ logger, chatKey, labelAssociationKey, socket }: BaileysInMemoryStoreConfig) => {
+    chats: KeyedDB<Chat, string>;
+    contacts: {
+        [_: string]: Contact;
+    };
+    messages: {
+        [_: string]: {
+            array: proto.IWebMessageInfo[];
+            get: (id: string) => proto.IWebMessageInfo | undefined;
+            upsert: (item: proto.IWebMessageInfo, mode: "append" | "prepend") => void;
+            update: (item: proto.IWebMessageInfo) => boolean;
+            remove: (item: proto.IWebMessageInfo) => boolean;
+            updateAssign: (id: string, update: Partial<proto.IWebMessageInfo>) => boolean;
+            clear: () => void;
+            filter: (contain: (item: proto.IWebMessageInfo) => boolean) => void;
+            toJSON: () => proto.IWebMessageInfo[];
+            fromJSON: (newItems: proto.IWebMessageInfo[]) => void;
+        };
+    };
+    groupMetadata: {
+        [_: string]: GroupMetadata;
+    };
+    state: ConnectionState;
+    presences: {
+        [id: string]: {
+            [participant: string]: PresenceData;
+        };
+    };
+    labels: ObjectRepository<Label>;
+    labelAssociations: KeyedDB<LabelAssociation, string>;
+    bind: (ev: BaileysEventEmitter) => void;
+    /** loads messages from the store, if not found -- uses the legacy connection */
+    loadMessages: (jid: string, count: number, cursor: WAMessageCursor) => Promise<proto.IWebMessageInfo[]>;
+    /**
+     * Get all available labels for profile
+     *
+     * Keep in mind that the list is formed from predefined tags and tags
+     * that were "caught" during their editing.
+     */
+    getLabels: () => ObjectRepository<Label>;
+    /**
+     * Get labels for chat
+     *
+     * @returns Label IDs
+     **/
+    getChatLabels: (chatId: string) => LabelAssociation[];
+    /**
+     * Get labels for message
+     *
+     * @returns Label IDs
+     **/
+    getMessageLabels: (messageId: string) => string[];
+    loadMessage: (jid: string, id: string) => Promise<proto.IWebMessageInfo | undefined>;
+    mostRecentMessage: (jid: string) => Promise<proto.IWebMessageInfo>;
+    fetchImageUrl: (jid: string, sock: WASocket | undefined) => Promise<string | null | undefined>;
+    fetchGroupMetadata: (jid: string, sock: WASocket | undefined) => Promise<GroupMetadata>;
+    fetchMessageReceipts: ({ remoteJid, id }: WAMessageKey) => Promise<proto.IUserReceipt[] | null | undefined>;
+    toJSON: () => {
+        chats: KeyedDB<Chat, string>;
+        contacts: {
+            [_: string]: Contact;
+        };
+        messages: {
+            [_: string]: {
+                array: proto.IWebMessageInfo[];
+                get: (id: string) => proto.IWebMessageInfo | undefined;
+                upsert: (item: proto.IWebMessageInfo, mode: "append" | "prepend") => void;
+                update: (item: proto.IWebMessageInfo) => boolean;
+                remove: (item: proto.IWebMessageInfo) => boolean;
+                updateAssign: (id: string, update: Partial<proto.IWebMessageInfo>) => boolean;
+                clear: () => void;
+                filter: (contain: (item: proto.IWebMessageInfo) => boolean) => void;
+                toJSON: () => proto.IWebMessageInfo[];
+                fromJSON: (newItems: proto.IWebMessageInfo[]) => void;
+            };
+        };
+        labels: ObjectRepository<Label>;
+        labelAssociations: KeyedDB<LabelAssociation, string>;
+    };
+    fromJSON: (json: {
+        chats: Chat[];
+        contacts: {
+            [id: string]: Contact;
+        };
+        messages: {
+            [id: string]: proto.IWebMessageInfo[];
+        };
+        labels: {
+            [labelId: string]: Label;
+        };
+        labelAssociations: LabelAssociation[];
+    }) => void;
+    writeToFile: (path: string) => void;
+    readFromFile: (path: string) => void;
+};
+export default _default;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Store/make-in-memory-store.js b/node_modules/@whiskeysockets/baileys/lib/Store/make-in-memory-store.js
new file mode 100644
index 0000000..24ecdfb
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Store/make-in-memory-store.js
@@ -0,0 +1,455 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.waLabelAssociationKey = exports.waMessageID = exports.waChatKey = void 0;
+const WAProto_1 = require("../../WAProto");
+const Defaults_1 = require("../Defaults");
+const LabelAssociation_1 = require("../Types/LabelAssociation");
+const Utils_1 = require("../Utils");
+const WABinary_1 = require("../WABinary");
+const make_ordered_dictionary_1 = __importDefault(require("./make-ordered-dictionary"));
+const object_repository_1 = require("./object-repository");
+const waChatKey = (pin) => ({
+    key: (c) => (pin ? (c.pinned ? '1' : '0') : '') + (c.archived ? '0' : '1') + (c.conversationTimestamp ? c.conversationTimestamp.toString(16).padStart(8, '0') : '') + c.id,
+    compare: (k1, k2) => k2.localeCompare(k1)
+});
+exports.waChatKey = waChatKey;
+const waMessageID = (m) => m.key.id || '';
+exports.waMessageID = waMessageID;
+exports.waLabelAssociationKey = {
+    key: (la) => (la.type === LabelAssociation_1.LabelAssociationType.Chat ? la.chatId + la.labelId : la.chatId + la.messageId + la.labelId),
+    compare: (k1, k2) => k2.localeCompare(k1)
+};
+const makeMessagesDictionary = () => (0, make_ordered_dictionary_1.default)(exports.waMessageID);
+const predefinedLabels = Object.freeze({
+    '1': {
+        id: '1',
+        name: 'New customer',
+        predefinedId: '1',
+        color: 1,
+        deleted: false
+    },
+    '2': {
+        id: '2',
+        name: 'New order',
+        predefinedId: '2',
+        color: 2,
+        deleted: false
+    },
+    '3': {
+        id: '3',
+        name: 'Pending payment',
+        predefinedId: '3',
+        color: 3,
+        deleted: false
+    },
+    '4': {
+        id: '4',
+        name: 'Paid',
+        predefinedId: '4',
+        color: 4,
+        deleted: false
+    },
+    '5': {
+        id: '5',
+        name: 'Order completed',
+        predefinedId: '5',
+        color: 5,
+        deleted: false
+    }
+});
+exports.default = ({ logger, chatKey, labelAssociationKey, socket }) => {
+    // const logger = _logger || DEFAULT_CONNECTION_CONFIG.logger.child({ stream: 'in-mem-store' })
+    chatKey = chatKey || (0, exports.waChatKey)(true);
+    labelAssociationKey = labelAssociationKey || exports.waLabelAssociationKey;
+    logger = logger || Defaults_1.DEFAULT_CONNECTION_CONFIG.logger.child({ stream: 'in-mem-store' });
+    const KeyedDB = require('@adiwajshing/keyed-db').default;
+    const chats = new KeyedDB(chatKey, c => c.id);
+    const messages = {};
+    const contacts = {};
+    const groupMetadata = {};
+    const presences = {};
+    const state = { connection: 'close' };
+    const labels = new object_repository_1.ObjectRepository(predefinedLabels);
+    const labelAssociations = new KeyedDB(labelAssociationKey, labelAssociationKey.key);
+    const assertMessageList = (jid) => {
+        if (!messages[jid]) {
+            messages[jid] = makeMessagesDictionary();
+        }
+        return messages[jid];
+    };
+    const contactsUpsert = (newContacts) => {
+        const oldContacts = new Set(Object.keys(contacts));
+        for (const contact of newContacts) {
+            oldContacts.delete(contact.id);
+            contacts[contact.id] = Object.assign(contacts[contact.id] || {}, contact);
+        }
+        return oldContacts;
+    };
+    const labelsUpsert = (newLabels) => {
+        for (const label of newLabels) {
+            labels.upsertById(label.id, label);
+        }
+    };
+    /**
+     * binds to a BaileysEventEmitter.
+     * It listens to all events and constructs a state that you can query accurate data from.
+     * Eg. can use the store to fetch chats, contacts, messages etc.
+     * @param ev typically the event emitter from the socket connection
+     */
+    const bind = (ev) => {
+        ev.on('connection.update', update => {
+            Object.assign(state, update);
+        });
+        ev.on('messaging-history.set', ({ chats: newChats, contacts: newContacts, messages: newMessages, isLatest }) => {
+            if (isLatest) {
+                chats.clear();
+                for (const id in messages) {
+                    delete messages[id];
+                }
+            }
+            const chatsAdded = chats.insertIfAbsent(...newChats).length;
+            logger.debug({ chatsAdded }, 'synced chats');
+            const oldContacts = contactsUpsert(newContacts);
+            if (isLatest) {
+                for (const jid of oldContacts) {
+                    delete contacts[jid];
+                }
+            }
+            logger.debug({ deletedContacts: isLatest ? oldContacts.size : 0, newContacts }, 'synced contacts');
+            for (const msg of newMessages) {
+                const jid = msg.key.remoteJid;
+                const list = assertMessageList(jid);
+                list.upsert(msg, 'prepend');
+            }
+            logger.debug({ messages: newMessages.length }, 'synced messages');
+        });
+        ev.on('contacts.upsert', contacts => {
+            contactsUpsert(contacts);
+        });
+        ev.on('contacts.update', async (updates) => {
+            var _a;
+            for (const update of updates) {
+                let contact;
+                if (contacts[update.id]) {
+                    contact = contacts[update.id];
+                }
+                else {
+                    const contactHashes = await Promise.all(Object.keys(contacts).map(async (contactId) => {
+                        const { user } = (0, WABinary_1.jidDecode)(contactId);
+                        return [contactId, (await (0, Utils_1.md5)(Buffer.from(user + 'WA_ADD_NOTIF', 'utf8'))).toString('base64').slice(0, 3)];
+                    }));
+                    contact = contacts[((_a = contactHashes.find(([, b]) => b === update.id)) === null || _a === void 0 ? void 0 : _a[0]) || '']; // find contact by attrs.hash, when user is not saved as a contact
+                }
+                if (contact) {
+                    if (update.imgUrl === 'changed') {
+                        contact.imgUrl = socket ? await (socket === null || socket === void 0 ? void 0 : socket.profilePictureUrl(contact.id)) : undefined;
+                    }
+                    else if (update.imgUrl === 'removed') {
+                        delete contact.imgUrl;
+                    }
+                }
+                else {
+                    return logger.debug({ update }, 'got update for non-existant contact');
+                }
+                Object.assign(contacts[contact.id], contact);
+            }
+        });
+        ev.on('chats.upsert', newChats => {
+            chats.upsert(...newChats);
+        });
+        ev.on('chats.update', updates => {
+            for (let update of updates) {
+                const result = chats.update(update.id, chat => {
+                    if (update.unreadCount > 0) {
+                        update = { ...update };
+                        update.unreadCount = (chat.unreadCount || 0) + update.unreadCount;
+                    }
+                    Object.assign(chat, update);
+                });
+                if (!result) {
+                    logger.debug({ update }, 'got update for non-existant chat');
+                }
+            }
+        });
+        ev.on('labels.edit', (label) => {
+            if (label.deleted) {
+                return labels.deleteById(label.id);
+            }
+            // WhatsApp can store only up to 20 labels
+            if (labels.count() < 20) {
+                return labels.upsertById(label.id, label);
+            }
+            logger.error('Labels count exceed');
+        });
+        ev.on('labels.association', ({ type, association }) => {
+            switch (type) {
+                case 'add':
+                    labelAssociations.upsert(association);
+                    break;
+                case 'remove':
+                    labelAssociations.delete(association);
+                    break;
+                default:
+                    console.error(`unknown operation type [${type}]`);
+            }
+        });
+        ev.on('presence.update', ({ id, presences: update }) => {
+            presences[id] = presences[id] || {};
+            Object.assign(presences[id], update);
+        });
+        ev.on('chats.delete', deletions => {
+            for (const item of deletions) {
+                if (chats.get(item)) {
+                    chats.deleteById(item);
+                }
+            }
+        });
+        ev.on('messages.upsert', ({ messages: newMessages, type }) => {
+            switch (type) {
+                case 'append':
+                case 'notify':
+                    for (const msg of newMessages) {
+                        const jid = (0, WABinary_1.jidNormalizedUser)(msg.key.remoteJid);
+                        const list = assertMessageList(jid);
+                        list.upsert(msg, 'append');
+                        if (type === 'notify') {
+                            if (!chats.get(jid)) {
+                                ev.emit('chats.upsert', [
+                                    {
+                                        id: jid,
+                                        conversationTimestamp: (0, Utils_1.toNumber)(msg.messageTimestamp),
+                                        unreadCount: 1
+                                    }
+                                ]);
+                            }
+                        }
+                    }
+                    break;
+            }
+        });
+        ev.on('messages.update', updates => {
+            var _a;
+            for (const { update, key } of updates) {
+                const list = assertMessageList((0, WABinary_1.jidNormalizedUser)(key.remoteJid));
+                if (update === null || update === void 0 ? void 0 : update.status) {
+                    const listStatus = (_a = list.get(key.id)) === null || _a === void 0 ? void 0 : _a.status;
+                    if (listStatus && (update === null || update === void 0 ? void 0 : update.status) <= listStatus) {
+                        logger.debug({ update, storedStatus: listStatus }, 'status stored newer then update');
+                        delete update.status;
+                        logger.debug({ update }, 'new update object');
+                    }
+                }
+                const result = list.updateAssign(key.id, update);
+                if (!result) {
+                    logger.debug({ update }, 'got update for non-existent message');
+                }
+            }
+        });
+        ev.on('messages.delete', item => {
+            if ('all' in item) {
+                const list = messages[item.jid];
+                list === null || list === void 0 ? void 0 : list.clear();
+            }
+            else {
+                const jid = item.keys[0].remoteJid;
+                const list = messages[jid];
+                if (list) {
+                    const idSet = new Set(item.keys.map(k => k.id));
+                    list.filter(m => !idSet.has(m.key.id));
+                }
+            }
+        });
+        ev.on('groups.update', updates => {
+            for (const update of updates) {
+                const id = update.id;
+                if (groupMetadata[id]) {
+                    Object.assign(groupMetadata[id], update);
+                }
+                else {
+                    logger.debug({ update }, 'got update for non-existant group metadata');
+                }
+            }
+        });
+        ev.on('group-participants.update', ({ id, participants, action }) => {
+            const metadata = groupMetadata[id];
+            if (metadata) {
+                switch (action) {
+                    case 'add':
+                        metadata.participants.push(...participants.map(id => ({ id, isAdmin: false, isSuperAdmin: false })));
+                        break;
+                    case 'demote':
+                    case 'promote':
+                        for (const participant of metadata.participants) {
+                            if (participants.includes(participant.id)) {
+                                participant.isAdmin = action === 'promote';
+                            }
+                        }
+                        break;
+                    case 'remove':
+                        metadata.participants = metadata.participants.filter(p => !participants.includes(p.id));
+                        break;
+                }
+            }
+        });
+        ev.on('message-receipt.update', updates => {
+            for (const { key, receipt } of updates) {
+                const obj = messages[key.remoteJid];
+                const msg = obj === null || obj === void 0 ? void 0 : obj.get(key.id);
+                if (msg) {
+                    (0, Utils_1.updateMessageWithReceipt)(msg, receipt);
+                }
+            }
+        });
+        ev.on('messages.reaction', (reactions) => {
+            for (const { key, reaction } of reactions) {
+                const obj = messages[key.remoteJid];
+                const msg = obj === null || obj === void 0 ? void 0 : obj.get(key.id);
+                if (msg) {
+                    (0, Utils_1.updateMessageWithReaction)(msg, reaction);
+                }
+            }
+        });
+    };
+    const toJSON = () => ({
+        chats,
+        contacts,
+        messages,
+        labels,
+        labelAssociations
+    });
+    const fromJSON = (json) => {
+        chats.upsert(...json.chats);
+        labelAssociations.upsert(...json.labelAssociations || []);
+        contactsUpsert(Object.values(json.contacts));
+        labelsUpsert(Object.values(json.labels || {}));
+        for (const jid in json.messages) {
+            const list = assertMessageList(jid);
+            for (const msg of json.messages[jid]) {
+                list.upsert(WAProto_1.proto.WebMessageInfo.fromObject(msg), 'append');
+            }
+        }
+    };
+    return {
+        chats,
+        contacts,
+        messages,
+        groupMetadata,
+        state,
+        presences,
+        labels,
+        labelAssociations,
+        bind,
+        /** loads messages from the store, if not found -- uses the legacy connection */
+        loadMessages: async (jid, count, cursor) => {
+            const list = assertMessageList(jid);
+            const mode = !cursor || 'before' in cursor ? 'before' : 'after';
+            const cursorKey = !!cursor ? ('before' in cursor ? cursor.before : cursor.after) : undefined;
+            const cursorValue = cursorKey ? list.get(cursorKey.id) : undefined;
+            let messages;
+            if (list && mode === 'before' && (!cursorKey || cursorValue)) {
+                if (cursorValue) {
+                    const msgIdx = list.array.findIndex(m => m.key.id === (cursorKey === null || cursorKey === void 0 ? void 0 : cursorKey.id));
+                    messages = list.array.slice(0, msgIdx);
+                }
+                else {
+                    messages = list.array;
+                }
+                const diff = count - messages.length;
+                if (diff < 0) {
+                    messages = messages.slice(-count); // get the last X messages
+                }
+            }
+            else {
+                messages = [];
+            }
+            return messages;
+        },
+        /**
+         * Get all available labels for profile
+         *
+         * Keep in mind that the list is formed from predefined tags and tags
+         * that were "caught" during their editing.
+         */
+        getLabels: () => {
+            return labels;
+        },
+        /**
+         * Get labels for chat
+         *
+         * @returns Label IDs
+         **/
+        getChatLabels: (chatId) => {
+            return labelAssociations.filter((la) => la.chatId === chatId).all();
+        },
+        /**
+         * Get labels for message
+         *
+         * @returns Label IDs
+         **/
+        getMessageLabels: (messageId) => {
+            const associations = labelAssociations
+                .filter((la) => la.messageId === messageId)
+                .all();
+            return associations.map(({ labelId }) => labelId);
+        },
+        loadMessage: async (jid, id) => { var _a; return (_a = messages[jid]) === null || _a === void 0 ? void 0 : _a.get(id); },
+        mostRecentMessage: async (jid) => {
+            var _a;
+            const message = (_a = messages[jid]) === null || _a === void 0 ? void 0 : _a.array.slice(-1)[0];
+            return message;
+        },
+        fetchImageUrl: async (jid, sock) => {
+            const contact = contacts[jid];
+            if (!contact) {
+                return sock === null || sock === void 0 ? void 0 : sock.profilePictureUrl(jid);
+            }
+            if (typeof contact.imgUrl === 'undefined') {
+                contact.imgUrl = await (sock === null || sock === void 0 ? void 0 : sock.profilePictureUrl(jid));
+            }
+            return contact.imgUrl;
+        },
+        fetchGroupMetadata: async (jid, sock) => {
+            if (!groupMetadata[jid]) {
+                const metadata = await (sock === null || sock === void 0 ? void 0 : sock.groupMetadata(jid));
+                if (metadata) {
+                    groupMetadata[jid] = metadata;
+                }
+            }
+            return groupMetadata[jid];
+        },
+        // fetchBroadcastListInfo: async(jid: string, sock: WASocket | undefined) => {
+        // 	if(!groupMetadata[jid]) {
+        // 		const metadata = await sock?.getBroadcastListInfo(jid)
+        // 		if(metadata) {
+        // 			groupMetadata[jid] = metadata
+        // 		}
+        // 	}
+        // 	return groupMetadata[jid]
+        // },
+        fetchMessageReceipts: async ({ remoteJid, id }) => {
+            const list = messages[remoteJid];
+            const msg = list === null || list === void 0 ? void 0 : list.get(id);
+            return msg === null || msg === void 0 ? void 0 : msg.userReceipt;
+        },
+        toJSON,
+        fromJSON,
+        writeToFile: (path) => {
+            // require fs here so that in case "fs" is not available -- the app does not crash
+            const { writeFileSync } = require('fs');
+            writeFileSync(path, JSON.stringify(toJSON()));
+        },
+        readFromFile: (path) => {
+            // require fs here so that in case "fs" is not available -- the app does not crash
+            const { readFileSync, existsSync } = require('fs');
+            if (existsSync(path)) {
+                logger.debug({ path }, 'reading from file');
+                const jsonStr = readFileSync(path, { encoding: 'utf-8' });
+                const json = JSON.parse(jsonStr);
+                fromJSON(json);
+            }
+        }
+    };
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Store/make-ordered-dictionary.d.ts b/node_modules/@whiskeysockets/baileys/lib/Store/make-ordered-dictionary.d.ts
new file mode 100644
index 0000000..e75b6d5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Store/make-ordered-dictionary.d.ts
@@ -0,0 +1,13 @@
+declare function makeOrderedDictionary<T>(idGetter: (item: T) => string): {
+    array: T[];
+    get: (id: string) => T | undefined;
+    upsert: (item: T, mode: 'append' | 'prepend') => void;
+    update: (item: T) => boolean;
+    remove: (item: T) => boolean;
+    updateAssign: (id: string, update: Partial<T>) => boolean;
+    clear: () => void;
+    filter: (contain: (item: T) => boolean) => void;
+    toJSON: () => T[];
+    fromJSON: (newItems: T[]) => void;
+};
+export default makeOrderedDictionary;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Store/make-ordered-dictionary.js b/node_modules/@whiskeysockets/baileys/lib/Store/make-ordered-dictionary.js
new file mode 100644
index 0000000..afa70af
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Store/make-ordered-dictionary.js
@@ -0,0 +1,81 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+function makeOrderedDictionary(idGetter) {
+    const array = [];
+    const dict = {};
+    const get = (id) => dict[id];
+    const update = (item) => {
+        const id = idGetter(item);
+        const idx = array.findIndex(i => idGetter(i) === id);
+        if (idx >= 0) {
+            array[idx] = item;
+            dict[id] = item;
+        }
+        return false;
+    };
+    const upsert = (item, mode) => {
+        const id = idGetter(item);
+        if (get(id)) {
+            update(item);
+        }
+        else {
+            if (mode === 'append') {
+                array.push(item);
+            }
+            else {
+                array.splice(0, 0, item);
+            }
+            dict[id] = item;
+        }
+    };
+    const remove = (item) => {
+        const id = idGetter(item);
+        const idx = array.findIndex(i => idGetter(i) === id);
+        if (idx >= 0) {
+            array.splice(idx, 1);
+            delete dict[id];
+            return true;
+        }
+        return false;
+    };
+    return {
+        array,
+        get,
+        upsert,
+        update,
+        remove,
+        updateAssign: (id, update) => {
+            const item = get(id);
+            if (item) {
+                Object.assign(item, update);
+                delete dict[id];
+                dict[idGetter(item)] = item;
+                return true;
+            }
+            return false;
+        },
+        clear: () => {
+            array.splice(0, array.length);
+            Object.keys(dict).forEach(key => {
+                delete dict[key];
+            });
+        },
+        filter: (contain) => {
+            let i = 0;
+            while (i < array.length) {
+                if (!contain(array[i])) {
+                    delete dict[idGetter(array[i])];
+                    array.splice(i, 1);
+                }
+                else {
+                    i += 1;
+                }
+            }
+        },
+        toJSON: () => array,
+        fromJSON: (newItems) => {
+            array.splice(0, array.length, ...newItems);
+        }
+    };
+}
+exports.default = makeOrderedDictionary;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Store/object-repository.d.ts b/node_modules/@whiskeysockets/baileys/lib/Store/object-repository.d.ts
new file mode 100644
index 0000000..8533200
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Store/object-repository.d.ts
@@ -0,0 +1,10 @@
+export declare class ObjectRepository<T extends object> {
+    readonly entityMap: Map<string, T>;
+    constructor(entities?: Record<string, T>);
+    findById(id: string): T | undefined;
+    findAll(): T[];
+    upsertById(id: string, entity: T): Map<string, T>;
+    deleteById(id: string): boolean;
+    count(): number;
+    toJSON(): T[];
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/Store/object-repository.js b/node_modules/@whiskeysockets/baileys/lib/Store/object-repository.js
new file mode 100644
index 0000000..e849f25
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Store/object-repository.js
@@ -0,0 +1,27 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.ObjectRepository = void 0;
+class ObjectRepository {
+    constructor(entities = {}) {
+        this.entityMap = new Map(Object.entries(entities));
+    }
+    findById(id) {
+        return this.entityMap.get(id);
+    }
+    findAll() {
+        return Array.from(this.entityMap.values());
+    }
+    upsertById(id, entity) {
+        return this.entityMap.set(id, { ...entity });
+    }
+    deleteById(id) {
+        return this.entityMap.delete(id);
+    }
+    count() {
+        return this.entityMap.size;
+    }
+    toJSON() {
+        return this.findAll();
+    }
+}
+exports.ObjectRepository = ObjectRepository;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Auth.d.ts b/node_modules/@whiskeysockets/baileys/lib/Types/Auth.d.ts
new file mode 100644
index 0000000..73c168b
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Auth.d.ts
@@ -0,0 +1,109 @@
+/// <reference types="node" />
+import type { proto } from '../../WAProto';
+import { RegistrationOptions } from '../Socket/registration';
+import type { Contact } from './Contact';
+import type { MinimalMessage } from './Message';
+export type KeyPair = {
+    public: Uint8Array;
+    private: Uint8Array;
+};
+export type SignedKeyPair = {
+    keyPair: KeyPair;
+    signature: Uint8Array;
+    keyId: number;
+    timestampS?: number;
+};
+export type ProtocolAddress = {
+    name: string;
+    deviceId: number;
+};
+export type SignalIdentity = {
+    identifier: ProtocolAddress;
+    identifierKey: Uint8Array;
+};
+export type LTHashState = {
+    version: number;
+    hash: Buffer;
+    indexValueMap: {
+        [indexMacBase64: string]: {
+            valueMac: Uint8Array | Buffer;
+        };
+    };
+};
+export type SignalCreds = {
+    readonly signedIdentityKey: KeyPair;
+    readonly signedPreKey: SignedKeyPair;
+    readonly registrationId: number;
+};
+export type AccountSettings = {
+    /** unarchive chats when a new message is received */
+    unarchiveChats: boolean;
+    /** the default mode to start new conversations with */
+    defaultDisappearingMode?: Pick<proto.IConversation, 'ephemeralExpiration' | 'ephemeralSettingTimestamp'>;
+};
+export type AuthenticationCreds = SignalCreds & {
+    readonly noiseKey: KeyPair;
+    readonly pairingEphemeralKeyPair: KeyPair;
+    advSecretKey: string;
+    me?: Contact;
+    account?: proto.IADVSignedDeviceIdentity;
+    signalIdentities?: SignalIdentity[];
+    myAppStateKeyId?: string;
+    firstUnuploadedPreKeyId: number;
+    nextPreKeyId: number;
+    lastAccountSyncTimestamp?: number;
+    platform?: string;
+    processedHistoryMessages: MinimalMessage[];
+    /** number of times history & app state has been synced */
+    accountSyncCounter: number;
+    accountSettings: AccountSettings;
+    deviceId: string;
+    phoneId: string;
+    identityId: Buffer;
+    registered: boolean;
+    backupToken: Buffer;
+    registration: RegistrationOptions;
+    pairingCode: string | undefined;
+    lastPropHash: string | undefined;
+};
+export type SignalDataTypeMap = {
+    'pre-key': KeyPair;
+    'session': Uint8Array;
+    'sender-key': Uint8Array;
+    'sender-key-memory': {
+        [jid: string]: boolean;
+    };
+    'app-state-sync-key': proto.Message.IAppStateSyncKeyData;
+    'app-state-sync-version': LTHashState;
+};
+export type SignalDataSet = {
+    [T in keyof SignalDataTypeMap]?: {
+        [id: string]: SignalDataTypeMap[T] | null;
+    };
+};
+type Awaitable<T> = T | Promise<T>;
+export type SignalKeyStore = {
+    get<T extends keyof SignalDataTypeMap>(type: T, ids: string[]): Awaitable<{
+        [id: string]: SignalDataTypeMap[T];
+    }>;
+    set(data: SignalDataSet): Awaitable<void>;
+    /** clear all the data in the store */
+    clear?(): Awaitable<void>;
+};
+export type SignalKeyStoreWithTransaction = SignalKeyStore & {
+    isInTransaction: () => boolean;
+    transaction<T>(exec: () => Promise<T>): Promise<T>;
+};
+export type TransactionCapabilityOptions = {
+    maxCommitRetries: number;
+    delayBetweenTriesMs: number;
+};
+export type SignalAuthState = {
+    creds: SignalCreds;
+    keys: SignalKeyStore | SignalKeyStoreWithTransaction;
+};
+export type AuthenticationState = {
+    creds: AuthenticationCreds;
+    keys: SignalKeyStore;
+};
+export {};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Auth.js b/node_modules/@whiskeysockets/baileys/lib/Types/Auth.js
new file mode 100644
index 0000000..c8ad2e5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Auth.js
@@ -0,0 +1,2 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Call.d.ts b/node_modules/@whiskeysockets/baileys/lib/Types/Call.d.ts
new file mode 100644
index 0000000..efca1dc
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Call.d.ts
@@ -0,0 +1,13 @@
+export type WACallUpdateType = 'offer' | 'ringing' | 'timeout' | 'reject' | 'accept';
+export type WACallEvent = {
+    chatId: string;
+    from: string;
+    isGroup?: boolean;
+    groupJid?: string;
+    id: string;
+    date: Date;
+    isVideo?: boolean;
+    status: WACallUpdateType;
+    offline: boolean;
+    latencyMs?: number;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Call.js b/node_modules/@whiskeysockets/baileys/lib/Types/Call.js
new file mode 100644
index 0000000..c8ad2e5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Call.js
@@ -0,0 +1,2 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Chat.d.ts b/node_modules/@whiskeysockets/baileys/lib/Types/Chat.d.ts
new file mode 100644
index 0000000..1ac38c8
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Chat.d.ts
@@ -0,0 +1,102 @@
+import type { proto } from '../../WAProto';
+import type { AccountSettings } from './Auth';
+import type { BufferedEventData } from './Events';
+import type { ChatLabelAssociationActionBody } from './LabelAssociation';
+import type { MessageLabelAssociationActionBody } from './LabelAssociation';
+import type { MinimalMessage } from './Message';
+/** privacy settings in WhatsApp Web */
+export type WAPrivacyValue = 'all' | 'contacts' | 'contact_blacklist' | 'none';
+export type WAPrivacyOnlineValue = 'all' | 'match_last_seen';
+export type WAReadReceiptsValue = 'all' | 'none';
+/** set of statuses visible to other people; see updatePresence() in WhatsAppWeb.Send */
+export type WAPresence = 'unavailable' | 'available' | 'composing' | 'recording' | 'paused';
+export declare const ALL_WA_PATCH_NAMES: readonly ["critical_block", "critical_unblock_low", "regular_high", "regular_low", "regular"];
+export type WAPatchName = typeof ALL_WA_PATCH_NAMES[number];
+export interface PresenceData {
+    lastKnownPresence: WAPresence;
+    lastSeen?: number;
+}
+export type ChatMutation = {
+    syncAction: proto.ISyncActionData;
+    index: string[];
+};
+export type WAPatchCreate = {
+    syncAction: proto.ISyncActionValue;
+    index: string[];
+    type: WAPatchName;
+    apiVersion: number;
+    operation: proto.SyncdMutation.SyncdOperation;
+};
+export type Chat = proto.IConversation & {
+    /** unix timestamp of when the last message was received in the chat */
+    lastMessageRecvTimestamp?: number;
+};
+export type ChatUpdate = Partial<Chat & {
+    /**
+     * if specified in the update,
+     * the EV buffer will check if the condition gets fulfilled before applying the update
+     * Right now, used to determine when to release an app state sync event
+     *
+     * @returns true, if the update should be applied;
+     * false if it can be discarded;
+     * undefined if the condition is not yet fulfilled
+     * */
+    conditional: (bufferedData: BufferedEventData) => boolean | undefined;
+}>;
+/**
+ * the last messages in a chat, sorted reverse-chronologically. That is, the latest message should be first in the chat
+ * for MD modifications, the last message in the array (i.e. the earlist message) must be the last message recv in the chat
+ * */
+export type LastMessageList = MinimalMessage[] | proto.SyncActionValue.ISyncActionMessageRange;
+export type ChatModification = {
+    archive: boolean;
+    lastMessages: LastMessageList;
+} | {
+    pushNameSetting: string;
+} | {
+    pin: boolean;
+} | {
+    /** mute for duration, or provide timestamp of mute to remove*/
+    mute: number | null;
+} | {
+    clear: 'all' | {
+        messages: {
+            id: string;
+            fromMe?: boolean;
+            timestamp: number;
+        }[];
+    };
+} | {
+    star: {
+        messages: {
+            id: string;
+            fromMe?: boolean;
+        }[];
+        star: boolean;
+    };
+} | {
+    markRead: boolean;
+    lastMessages: LastMessageList;
+} | {
+    delete: true;
+    lastMessages: LastMessageList;
+} | {
+    addChatLabel: ChatLabelAssociationActionBody;
+} | {
+    removeChatLabel: ChatLabelAssociationActionBody;
+} | {
+    addMessageLabel: MessageLabelAssociationActionBody;
+} | {
+    removeMessageLabel: MessageLabelAssociationActionBody;
+};
+export type InitialReceivedChatsState = {
+    [jid: string]: {
+        /** the last message received from the other party */
+        lastMsgRecvTimestamp?: number;
+        /** the absolute last message in the chat */
+        lastMsgTimestamp: number;
+    };
+};
+export type InitialAppStateSyncOptions = {
+    accountSettings: AccountSettings;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Chat.js b/node_modules/@whiskeysockets/baileys/lib/Types/Chat.js
new file mode 100644
index 0000000..4ce92b0
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Chat.js
@@ -0,0 +1,4 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.ALL_WA_PATCH_NAMES = void 0;
+exports.ALL_WA_PATCH_NAMES = ['critical_block', 'critical_unblock_low', 'regular_high', 'regular_low', 'regular'];
diff --git a/node_modules/@whiskeysockets/baileys/src/Types/Contact.ts b/node_modules/@whiskeysockets/baileys/lib/Types/Contact.d.ts
similarity index 71%
rename from node_modules/@whiskeysockets/baileys/src/Types/Contact.ts
rename to node_modules/@whiskeysockets/baileys/lib/Types/Contact.d.ts
index 0dd51f1..603a298 100644
--- a/node_modules/@whiskeysockets/baileys/src/Types/Contact.ts
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Contact.d.ts
@@ -1,13 +1,12 @@
 export interface Contact {
-    id: string
-    lid?: string
+    id: string;
+    lid?: string;
     /** name of the contact, you have saved on your WA */
-    name?: string
+    name?: string;
     /** name of the contact, the contact has set on their own on WA */
-    notify?: string
+    notify?: string;
     /** I have no idea */
-    verifiedName?: string
-    // Baileys Added
+    verifiedName?: string;
     /**
      * Url of the profile picture of the contact
      *
@@ -15,6 +14,6 @@ export interface Contact {
      * null => if the profile picture has not been set (default profile picture)
      * any other string => url of the profile picture
      */
-    imgUrl?: string | null | 'changed'
-    status?: string
+    imgUrl?: string | null | 'changed';
+    status?: string;
 }
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Contact.js b/node_modules/@whiskeysockets/baileys/lib/Types/Contact.js
new file mode 100644
index 0000000..c8ad2e5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Contact.js
@@ -0,0 +1,2 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Events.d.ts b/node_modules/@whiskeysockets/baileys/lib/Types/Events.d.ts
new file mode 100644
index 0000000..e9242a9
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Events.d.ts
@@ -0,0 +1,157 @@
+import type { Boom } from '@hapi/boom';
+import { proto } from '../../WAProto';
+import { AuthenticationCreds } from './Auth';
+import { WACallEvent } from './Call';
+import { Chat, ChatUpdate, PresenceData } from './Chat';
+import { Contact } from './Contact';
+import { GroupMetadata, ParticipantAction } from './GroupMetadata';
+import { Label } from './Label';
+import { LabelAssociation } from './LabelAssociation';
+import { MessageUpsertType, MessageUserReceiptUpdate, WAMessage, WAMessageKey, WAMessageUpdate } from './Message';
+import { ConnectionState } from './State';
+export type BaileysEventMap = {
+    /** connection state has been updated -- WS closed, opened, connecting etc. */
+    'connection.update': Partial<ConnectionState>;
+    /** credentials updated -- some metadata, keys or something */
+    'creds.update': Partial<AuthenticationCreds>;
+    /** set chats (history sync), everything is reverse chronologically sorted */
+    'messaging-history.set': {
+        chats: Chat[];
+        contacts: Contact[];
+        messages: WAMessage[];
+        isLatest: boolean;
+    };
+    /** upsert chats */
+    'chats.upsert': Chat[];
+    /** update the given chats */
+    'chats.update': ChatUpdate[];
+    'chats.phoneNumberShare': {
+        lid: string;
+        jid: string;
+    };
+    /** delete chats with given ID */
+    'chats.delete': string[];
+    /** presence of contact in a chat updated */
+    'presence.update': {
+        id: string;
+        presences: {
+            [participant: string]: PresenceData;
+        };
+    };
+    'contacts.upsert': Contact[];
+    'contacts.update': Partial<Contact>[];
+    'messages.delete': {
+        keys: WAMessageKey[];
+    } | {
+        jid: string;
+        all: true;
+    };
+    'messages.update': WAMessageUpdate[];
+    'messages.media-update': {
+        key: WAMessageKey;
+        media?: {
+            ciphertext: Uint8Array;
+            iv: Uint8Array;
+        };
+        error?: Boom;
+    }[];
+    /**
+     * add/update the given messages. If they were received while the connection was online,
+     * the update will have type: "notify"
+     *  */
+    'messages.upsert': {
+        messages: WAMessage[];
+        type: MessageUpsertType;
+    };
+    /** message was reacted to. If reaction was removed -- then "reaction.text" will be falsey */
+    'messages.reaction': {
+        key: WAMessageKey;
+        reaction: proto.IReaction;
+    }[];
+    'message-receipt.update': MessageUserReceiptUpdate[];
+    'groups.upsert': GroupMetadata[];
+    'groups.update': Partial<GroupMetadata>[];
+    /** apply an action to participants in a group */
+    'group-participants.update': {
+        id: string;
+        author: string;
+        participants: string[];
+        action: ParticipantAction;
+    };
+    'blocklist.set': {
+        blocklist: string[];
+    };
+    'blocklist.update': {
+        blocklist: string[];
+        type: 'add' | 'remove';
+    };
+    /** Receive an update on a call, including when the call was received, rejected, accepted */
+    'call': WACallEvent[];
+    'labels.edit': Label;
+    'labels.association': {
+        association: LabelAssociation;
+        type: 'add' | 'remove';
+    };
+};
+export type BufferedEventData = {
+    historySets: {
+        chats: {
+            [jid: string]: Chat;
+        };
+        contacts: {
+            [jid: string]: Contact;
+        };
+        messages: {
+            [uqId: string]: WAMessage;
+        };
+        empty: boolean;
+        isLatest: boolean;
+    };
+    chatUpserts: {
+        [jid: string]: Chat;
+    };
+    chatUpdates: {
+        [jid: string]: ChatUpdate;
+    };
+    chatDeletes: Set<string>;
+    contactUpserts: {
+        [jid: string]: Contact;
+    };
+    contactUpdates: {
+        [jid: string]: Partial<Contact>;
+    };
+    messageUpserts: {
+        [key: string]: {
+            type: MessageUpsertType;
+            message: WAMessage;
+        };
+    };
+    messageUpdates: {
+        [key: string]: WAMessageUpdate;
+    };
+    messageDeletes: {
+        [key: string]: WAMessageKey;
+    };
+    messageReactions: {
+        [key: string]: {
+            key: WAMessageKey;
+            reactions: proto.IReaction[];
+        };
+    };
+    messageReceipts: {
+        [key: string]: {
+            key: WAMessageKey;
+            userReceipt: proto.IUserReceipt[];
+        };
+    };
+    groupUpdates: {
+        [jid: string]: Partial<GroupMetadata>;
+    };
+};
+export type BaileysEvent = keyof BaileysEventMap;
+export interface BaileysEventEmitter {
+    on<T extends keyof BaileysEventMap>(event: T, listener: (arg: BaileysEventMap[T]) => void): void;
+    off<T extends keyof BaileysEventMap>(event: T, listener: (arg: BaileysEventMap[T]) => void): void;
+    removeAllListeners<T extends keyof BaileysEventMap>(event: T): void;
+    emit<T extends keyof BaileysEventMap>(event: T, arg: BaileysEventMap[T]): boolean;
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Events.js b/node_modules/@whiskeysockets/baileys/lib/Types/Events.js
new file mode 100644
index 0000000..c8ad2e5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Events.js
@@ -0,0 +1,2 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/GroupMetadata.d.ts b/node_modules/@whiskeysockets/baileys/lib/Types/GroupMetadata.d.ts
new file mode 100644
index 0000000..e82573a
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/GroupMetadata.d.ts
@@ -0,0 +1,54 @@
+import { Contact } from './Contact';
+export type GroupParticipant = (Contact & {
+    isAdmin?: boolean;
+    isSuperAdmin?: boolean;
+    admin?: 'admin' | 'superadmin' | null;
+});
+export type ParticipantAction = 'add' | 'remove' | 'promote' | 'demote';
+export interface GroupMetadata {
+    id: string;
+    owner: string | undefined;
+    subject: string;
+    /** group subject owner */
+    subjectOwner?: string;
+    /** group subject modification date */
+    subjectTime?: number;
+    creation?: number;
+    desc?: string;
+    descOwner?: string;
+    descId?: string;
+    /** if this group is part of a community, it returns the jid of the community to which it belongs */
+    linkedParent?: string;
+    /** is set when the group only allows admins to change group settings */
+    restrict?: boolean;
+    /** is set when the group only allows admins to write messages */
+    announce?: boolean;
+    /** is set when the group also allows members to add participants */
+    memberAddMode?: boolean;
+    /** Request approval to join the group */
+    joinApprovalMode?: boolean;
+    /** is this a community */
+    isCommunity?: boolean;
+    /** is this the announce of a community */
+    isCommunityAnnounce?: boolean;
+    /** number of group participants */
+    size?: number;
+    participants: GroupParticipant[];
+    ephemeralDuration?: number;
+    inviteCode?: string;
+    /** the person who added you to group or changed some setting in group */
+    author?: string;
+}
+export interface WAGroupCreateResponse {
+    status: number;
+    gid?: string;
+    participants?: [{
+        [key: string]: {};
+    }];
+}
+export interface GroupModificationResponse {
+    status: number;
+    participants?: {
+        [key: string]: {};
+    };
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/GroupMetadata.js b/node_modules/@whiskeysockets/baileys/lib/Types/GroupMetadata.js
new file mode 100644
index 0000000..c8ad2e5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/GroupMetadata.js
@@ -0,0 +1,2 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Label.d.ts b/node_modules/@whiskeysockets/baileys/lib/Types/Label.d.ts
new file mode 100644
index 0000000..7e5f351
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Label.d.ts
@@ -0,0 +1,35 @@
+export interface Label {
+    /** Label uniq ID */
+    id: string;
+    /** Label name */
+    name: string;
+    /** Label color ID */
+    color: number;
+    /** Is label has been deleted */
+    deleted: boolean;
+    /** WhatsApp has 5 predefined labels (New customer, New order & etc) */
+    predefinedId?: string;
+}
+/** WhatsApp has 20 predefined colors */
+export declare enum LabelColor {
+    Color1 = 0,
+    Color2 = 1,
+    Color3 = 2,
+    Color4 = 3,
+    Color5 = 4,
+    Color6 = 5,
+    Color7 = 6,
+    Color8 = 7,
+    Color9 = 8,
+    Color10 = 9,
+    Color11 = 10,
+    Color12 = 11,
+    Color13 = 12,
+    Color14 = 13,
+    Color15 = 14,
+    Color16 = 15,
+    Color17 = 16,
+    Color18 = 17,
+    Color19 = 18,
+    Color20 = 19
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Label.js b/node_modules/@whiskeysockets/baileys/lib/Types/Label.js
new file mode 100644
index 0000000..1621be3
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Label.js
@@ -0,0 +1,27 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.LabelColor = void 0;
+/** WhatsApp has 20 predefined colors */
+var LabelColor;
+(function (LabelColor) {
+    LabelColor[LabelColor["Color1"] = 0] = "Color1";
+    LabelColor[LabelColor["Color2"] = 1] = "Color2";
+    LabelColor[LabelColor["Color3"] = 2] = "Color3";
+    LabelColor[LabelColor["Color4"] = 3] = "Color4";
+    LabelColor[LabelColor["Color5"] = 4] = "Color5";
+    LabelColor[LabelColor["Color6"] = 5] = "Color6";
+    LabelColor[LabelColor["Color7"] = 6] = "Color7";
+    LabelColor[LabelColor["Color8"] = 7] = "Color8";
+    LabelColor[LabelColor["Color9"] = 8] = "Color9";
+    LabelColor[LabelColor["Color10"] = 9] = "Color10";
+    LabelColor[LabelColor["Color11"] = 10] = "Color11";
+    LabelColor[LabelColor["Color12"] = 11] = "Color12";
+    LabelColor[LabelColor["Color13"] = 12] = "Color13";
+    LabelColor[LabelColor["Color14"] = 13] = "Color14";
+    LabelColor[LabelColor["Color15"] = 14] = "Color15";
+    LabelColor[LabelColor["Color16"] = 15] = "Color16";
+    LabelColor[LabelColor["Color17"] = 16] = "Color17";
+    LabelColor[LabelColor["Color18"] = 17] = "Color18";
+    LabelColor[LabelColor["Color19"] = 18] = "Color19";
+    LabelColor[LabelColor["Color20"] = 19] = "Color20";
+})(LabelColor = exports.LabelColor || (exports.LabelColor = {}));
diff --git a/node_modules/@whiskeysockets/baileys/src/Types/LabelAssociation.ts b/node_modules/@whiskeysockets/baileys/lib/Types/LabelAssociation.d.ts
similarity index 51%
rename from node_modules/@whiskeysockets/baileys/src/Types/LabelAssociation.ts
rename to node_modules/@whiskeysockets/baileys/lib/Types/LabelAssociation.d.ts
index 8c17cf5..cf5b594 100644
--- a/node_modules/@whiskeysockets/baileys/src/Types/LabelAssociation.ts
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/LabelAssociation.d.ts
@@ -1,35 +1,29 @@
 /** Association type */
-export enum LabelAssociationType {
-  Chat = 'label_jid',
-  Message = 'label_message'
+export declare enum LabelAssociationType {
+    Chat = "label_jid",
+    Message = "label_message"
 }
-
-export type LabelAssociationTypes = `${LabelAssociationType}`
-
+export type LabelAssociationTypes = `${LabelAssociationType}`;
 /** Association for chat */
 export interface ChatLabelAssociation {
-  type: LabelAssociationType.Chat
-  chatId: string
-  labelId: string
+    type: LabelAssociationType.Chat;
+    chatId: string;
+    labelId: string;
 }
-
 /** Association for message */
 export interface MessageLabelAssociation {
-  type: LabelAssociationType.Message
-  chatId: string
-  messageId: string
-  labelId: string
+    type: LabelAssociationType.Message;
+    chatId: string;
+    messageId: string;
+    labelId: string;
 }
-
-export type LabelAssociation = ChatLabelAssociation | MessageLabelAssociation
-
+export type LabelAssociation = ChatLabelAssociation | MessageLabelAssociation;
 /** Body for add/remove chat label association action */
 export interface ChatLabelAssociationActionBody {
-  labelId: string
+    labelId: string;
 }
-
 /** body for add/remove message label association action */
 export interface MessageLabelAssociationActionBody {
-  labelId: string
-  messageId: string
+    labelId: string;
+    messageId: string;
 }
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/LabelAssociation.js b/node_modules/@whiskeysockets/baileys/lib/Types/LabelAssociation.js
new file mode 100644
index 0000000..2af12dd
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/LabelAssociation.js
@@ -0,0 +1,9 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.LabelAssociationType = void 0;
+/** Association type */
+var LabelAssociationType;
+(function (LabelAssociationType) {
+    LabelAssociationType["Chat"] = "label_jid";
+    LabelAssociationType["Message"] = "label_message";
+})(LabelAssociationType = exports.LabelAssociationType || (exports.LabelAssociationType = {}));
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Message.d.ts b/node_modules/@whiskeysockets/baileys/lib/Types/Message.d.ts
new file mode 100644
index 0000000..36d6c27
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Message.d.ts
@@ -0,0 +1,265 @@
+/// <reference types="node" />
+/// <reference types="node" />
+/// <reference types="node" />
+import { AxiosRequestConfig } from 'axios';
+import type { Logger } from 'pino';
+import type { Readable } from 'stream';
+import type { URL } from 'url';
+import { proto } from '../../WAProto';
+import { MEDIA_HKDF_KEY_MAPPING } from '../Defaults';
+import type { GroupMetadata } from './GroupMetadata';
+import { CacheStore } from './Socket';
+export { proto as WAProto };
+export type WAMessage = proto.IWebMessageInfo;
+export type WAMessageContent = proto.IMessage;
+export type WAContactMessage = proto.Message.IContactMessage;
+export type WAContactsArrayMessage = proto.Message.IContactsArrayMessage;
+export type WAMessageKey = proto.IMessageKey;
+export type WATextMessage = proto.Message.IExtendedTextMessage;
+export type WAContextInfo = proto.IContextInfo;
+export type WALocationMessage = proto.Message.ILocationMessage;
+export type WAGenericMediaMessage = proto.Message.IVideoMessage | proto.Message.IImageMessage | proto.Message.IAudioMessage | proto.Message.IDocumentMessage | proto.Message.IStickerMessage;
+export import WAMessageStubType = proto.WebMessageInfo.StubType;
+export import WAMessageStatus = proto.WebMessageInfo.Status;
+export type WAMediaUpload = Buffer | {
+    url: URL | string;
+} | {
+    stream: Readable;
+};
+/** Set of message types that are supported by the library */
+export type MessageType = keyof proto.Message;
+export type DownloadableMessage = {
+    mediaKey?: Uint8Array | null;
+    directPath?: string | null;
+    url?: string | null;
+};
+export type MessageReceiptType = 'read' | 'read-self' | 'hist_sync' | 'peer_msg' | 'sender' | 'inactive' | 'played' | undefined;
+export type MediaConnInfo = {
+    auth: string;
+    ttl: number;
+    hosts: {
+        hostname: string;
+        maxContentLengthBytes: number;
+    }[];
+    fetchDate: Date;
+};
+export interface WAUrlInfo {
+    'canonical-url': string;
+    'matched-text': string;
+    title: string;
+    description?: string;
+    jpegThumbnail?: Buffer;
+    highQualityThumbnail?: proto.Message.IImageMessage;
+    originalThumbnailUrl?: string;
+}
+type Mentionable = {
+    /** list of jids that are mentioned in the accompanying text */
+    mentions?: string[];
+};
+type Contextable = {
+    /** add contextInfo to the message */
+    contextInfo?: proto.IContextInfo;
+};
+type ViewOnce = {
+    viewOnce?: boolean;
+};
+type Buttonable = {
+    /** add buttons to the message  */
+    buttons?: proto.Message.ButtonsMessage.IButton[];
+};
+type Templatable = {
+    /** add buttons to the message (conflicts with normal buttons)*/
+    templateButtons?: proto.IHydratedTemplateButton[];
+    footer?: string;
+};
+type Editable = {
+    edit?: WAMessageKey;
+};
+type Listable = {
+    /** Sections of the List */
+    sections?: proto.Message.ListMessage.ISection[];
+    /** Title of a List Message only */
+    title?: string;
+    /** Text of the bnutton on the list (required) */
+    buttonText?: string;
+};
+type WithDimensions = {
+    width?: number;
+    height?: number;
+};
+export type PollMessageOptions = {
+    name: string;
+    selectableCount?: number;
+    values: string[];
+    /** 32 byte message secret to encrypt poll selections */
+    messageSecret?: Uint8Array;
+};
+type SharePhoneNumber = {
+    sharePhoneNumber: boolean;
+};
+type RequestPhoneNumber = {
+    requestPhoneNumber: boolean;
+};
+export type MediaType = keyof typeof MEDIA_HKDF_KEY_MAPPING;
+export type AnyMediaMessageContent = (({
+    image: WAMediaUpload;
+    caption?: string;
+    jpegThumbnail?: string;
+} & Mentionable & Contextable & Buttonable & Templatable & WithDimensions) | ({
+    video: WAMediaUpload;
+    caption?: string;
+    gifPlayback?: boolean;
+    jpegThumbnail?: string;
+    /** if set to true, will send as a `video note` */
+    ptv?: boolean;
+} & Mentionable & Contextable & Buttonable & Templatable & WithDimensions) | {
+    audio: WAMediaUpload;
+    /** if set to true, will send as a `voice note` */
+    ptt?: boolean;
+    /** optionally tell the duration of the audio */
+    seconds?: number;
+} | ({
+    sticker: WAMediaUpload;
+    isAnimated?: boolean;
+} & WithDimensions) | ({
+    document: WAMediaUpload;
+    mimetype: string;
+    fileName?: string;
+    caption?: string;
+} & Contextable & Buttonable & Templatable)) & {
+    mimetype?: string;
+} & Editable;
+export type ButtonReplyInfo = {
+    displayText: string;
+    id: string;
+    index: number;
+};
+export type WASendableProduct = Omit<proto.Message.ProductMessage.IProductSnapshot, 'productImage'> & {
+    productImage: WAMediaUpload;
+};
+export type AnyRegularMessageContent = (({
+    text: string;
+    linkPreview?: WAUrlInfo | null;
+} & Mentionable & Contextable & Buttonable & Templatable & Listable & Editable) | AnyMediaMessageContent | ({
+    poll: PollMessageOptions;
+} & Mentionable & Contextable & Buttonable & Templatable & Editable) | {
+    contacts: {
+        displayName?: string;
+        contacts: proto.Message.IContactMessage[];
+    };
+} | {
+    location: WALocationMessage;
+} | {
+    react: proto.Message.IReactionMessage;
+} | {
+    buttonReply: ButtonReplyInfo;
+    type: 'template' | 'plain';
+} | {
+    listReply: Omit<proto.Message.IListResponseMessage, 'contextInfo'>;
+} | {
+    product: WASendableProduct;
+    businessOwnerJid?: string;
+    body?: string;
+    footer?: string;
+} | SharePhoneNumber | RequestPhoneNumber) & ViewOnce;
+export type AnyMessageContent = AnyRegularMessageContent | {
+    forward: WAMessage;
+    force?: boolean;
+} | {
+    /** Delete your message or anyone's message in a group (admin required) */
+    delete: WAMessageKey;
+} | {
+    disappearingMessagesInChat: boolean | number;
+};
+export type GroupMetadataParticipants = Pick<GroupMetadata, 'participants'>;
+type MinimalRelayOptions = {
+    /** override the message ID with a custom provided string */
+    messageId?: string;
+    /** cached group metadata, use to prevent redundant requests to WA & speed up msg sending */
+    cachedGroupMetadata?: (jid: string) => Promise<GroupMetadataParticipants | undefined>;
+};
+export type MessageRelayOptions = MinimalRelayOptions & {
+    /** only send to a specific participant; used when a message decryption fails for a single user */
+    participant?: {
+        jid: string;
+        count: number;
+    };
+    /** additional attributes to add to the WA binary node */
+    additionalAttributes?: {
+        [_: string]: string;
+    };
+    /** should we use the devices cache, or fetch afresh from the server; default assumed to be "true" */
+    useUserDevicesCache?: boolean;
+    /** jid list of participants for status@broadcast */
+    statusJidList?: string[];
+};
+export type MiscMessageGenerationOptions = MinimalRelayOptions & {
+    /** optional, if you want to manually set the timestamp of the message */
+    timestamp?: Date;
+    /** the message you want to quote */
+    quoted?: WAMessage;
+    /** disappearing messages settings */
+    ephemeralExpiration?: number | string;
+    /** timeout for media upload to WA server */
+    mediaUploadTimeoutMs?: number;
+    /** jid list of participants for status@broadcast */
+    statusJidList?: string[];
+    /** backgroundcolor for status */
+    backgroundColor?: string;
+    /** font type for status */
+    font?: number;
+    /** if it is broadcast */
+    broadcast?: boolean;
+};
+export type MessageGenerationOptionsFromContent = MiscMessageGenerationOptions & {
+    userJid: string;
+};
+export type WAMediaUploadFunction = (readStream: Readable, opts: {
+    fileEncSha256B64: string;
+    mediaType: MediaType;
+    timeoutMs?: number;
+}) => Promise<{
+    mediaUrl: string;
+    directPath: string;
+}>;
+export type MediaGenerationOptions = {
+    logger?: Logger;
+    mediaTypeOverride?: MediaType;
+    upload: WAMediaUploadFunction;
+    /** cache media so it does not have to be uploaded again */
+    mediaCache?: CacheStore;
+    mediaUploadTimeoutMs?: number;
+    options?: AxiosRequestConfig;
+    backgroundColor?: string;
+    font?: number;
+};
+export type MessageContentGenerationOptions = MediaGenerationOptions & {
+    getUrlInfo?: (text: string) => Promise<WAUrlInfo | undefined>;
+};
+export type MessageGenerationOptions = MessageContentGenerationOptions & MessageGenerationOptionsFromContent;
+/**
+ * Type of message upsert
+ * 1. notify => notify the user, this message was just received
+ * 2. append => append the message to the chat history, no notification required
+ */
+export type MessageUpsertType = 'append' | 'notify';
+export type MessageUserReceipt = proto.IUserReceipt;
+export type WAMessageUpdate = {
+    update: Partial<WAMessage>;
+    key: proto.IMessageKey;
+};
+export type WAMessageCursor = {
+    before: WAMessageKey | undefined;
+} | {
+    after: WAMessageKey | undefined;
+};
+export type MessageUserReceiptUpdate = {
+    key: proto.IMessageKey;
+    receipt: MessageUserReceipt;
+};
+export type MediaDecryptionKeyInfo = {
+    iv: Buffer;
+    cipherKey: Buffer;
+    macKey?: Buffer;
+};
+export type MinimalMessage = Pick<proto.IWebMessageInfo, 'key' | 'messageTimestamp'>;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Message.js b/node_modules/@whiskeysockets/baileys/lib/Types/Message.js
new file mode 100644
index 0000000..abf68b4
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Message.js
@@ -0,0 +1,9 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.WAMessageStatus = exports.WAMessageStubType = exports.WAProto = void 0;
+const WAProto_1 = require("../../WAProto");
+Object.defineProperty(exports, "WAProto", { enumerable: true, get: function () { return WAProto_1.proto; } });
+// eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars
+exports.WAMessageStubType = WAProto_1.proto.WebMessageInfo.StubType;
+// eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars
+exports.WAMessageStatus = WAProto_1.proto.WebMessageInfo.Status;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Product.d.ts b/node_modules/@whiskeysockets/baileys/lib/Types/Product.d.ts
new file mode 100644
index 0000000..715e72c
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Product.d.ts
@@ -0,0 +1,78 @@
+import { WAMediaUpload } from './Message';
+export type CatalogResult = {
+    data: {
+        paging: {
+            cursors: {
+                before: string;
+                after: string;
+            };
+        };
+        data: any[];
+    };
+};
+export type ProductCreateResult = {
+    data: {
+        product: {};
+    };
+};
+export type CatalogStatus = {
+    status: string;
+    canAppeal: boolean;
+};
+export type CatalogCollection = {
+    id: string;
+    name: string;
+    products: Product[];
+    status: CatalogStatus;
+};
+export type ProductAvailability = 'in stock';
+export type ProductBase = {
+    name: string;
+    retailerId?: string;
+    url?: string;
+    description: string;
+    price: number;
+    currency: string;
+    isHidden?: boolean;
+};
+export type ProductCreate = ProductBase & {
+    /** ISO country code for product origin. Set to undefined for no country */
+    originCountryCode: string | undefined;
+    /** images of the product */
+    images: WAMediaUpload[];
+};
+export type ProductUpdate = Omit<ProductCreate, 'originCountryCode'>;
+export type Product = ProductBase & {
+    id: string;
+    imageUrls: {
+        [_: string]: string;
+    };
+    reviewStatus: {
+        [_: string]: string;
+    };
+    availability: ProductAvailability;
+};
+export type OrderPrice = {
+    currency: string;
+    total: number;
+};
+export type OrderProduct = {
+    id: string;
+    imageUrl: string;
+    name: string;
+    quantity: number;
+    currency: string;
+    price: number;
+};
+export type OrderDetails = {
+    price: OrderPrice;
+    products: OrderProduct[];
+};
+export type CatalogCursor = string;
+export type GetCatalogOptions = {
+    /** cursor to start from */
+    cursor?: CatalogCursor;
+    /** number of products to fetch */
+    limit?: number;
+    jid?: string;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Product.js b/node_modules/@whiskeysockets/baileys/lib/Types/Product.js
new file mode 100644
index 0000000..c8ad2e5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Product.js
@@ -0,0 +1,2 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Signal.d.ts b/node_modules/@whiskeysockets/baileys/lib/Types/Signal.d.ts
new file mode 100644
index 0000000..a427798
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Signal.d.ts
@@ -0,0 +1,57 @@
+import { proto } from '../../WAProto';
+type DecryptGroupSignalOpts = {
+    group: string;
+    authorJid: string;
+    msg: Uint8Array;
+};
+type ProcessSenderKeyDistributionMessageOpts = {
+    item: proto.Message.ISenderKeyDistributionMessage;
+    authorJid: string;
+};
+type DecryptSignalProtoOpts = {
+    jid: string;
+    type: 'pkmsg' | 'msg';
+    ciphertext: Uint8Array;
+};
+type EncryptMessageOpts = {
+    jid: string;
+    data: Uint8Array;
+};
+type EncryptGroupMessageOpts = {
+    group: string;
+    data: Uint8Array;
+    meId: string;
+};
+type PreKey = {
+    keyId: number;
+    publicKey: Uint8Array;
+};
+type SignedPreKey = PreKey & {
+    signature: Uint8Array;
+};
+type E2ESession = {
+    registrationId: number;
+    identityKey: Uint8Array;
+    signedPreKey: SignedPreKey;
+    preKey: PreKey;
+};
+type E2ESessionOpts = {
+    jid: string;
+    session: E2ESession;
+};
+export type SignalRepository = {
+    decryptGroupMessage(opts: DecryptGroupSignalOpts): Promise<Uint8Array>;
+    processSenderKeyDistributionMessage(opts: ProcessSenderKeyDistributionMessageOpts): Promise<void>;
+    decryptMessage(opts: DecryptSignalProtoOpts): Promise<Uint8Array>;
+    encryptMessage(opts: EncryptMessageOpts): Promise<{
+        type: 'pkmsg' | 'msg';
+        ciphertext: Uint8Array;
+    }>;
+    encryptGroupMessage(opts: EncryptGroupMessageOpts): Promise<{
+        senderKeyDistributionMessage: Uint8Array;
+        ciphertext: Uint8Array;
+    }>;
+    injectE2ESession(opts: E2ESessionOpts): Promise<void>;
+    jidToSignalProtocolAddress(jid: string): string;
+};
+export {};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Signal.js b/node_modules/@whiskeysockets/baileys/lib/Types/Signal.js
new file mode 100644
index 0000000..c8ad2e5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Signal.js
@@ -0,0 +1,2 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@whiskeysockets/baileys/src/Types/Socket.ts b/node_modules/@whiskeysockets/baileys/lib/Types/Socket.d.ts
similarity index 58%
rename from node_modules/@whiskeysockets/baileys/src/Types/Socket.ts
rename to node_modules/@whiskeysockets/baileys/lib/Types/Socket.d.ts
index ab41b4a..be7e879 100644
--- a/node_modules/@whiskeysockets/baileys/src/Types/Socket.ts
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Socket.d.ts
@@ -1,123 +1,111 @@
-
-import { AxiosRequestConfig } from 'axios'
-import type { Agent } from 'https'
-import type { Logger } from 'pino'
-import type { URL } from 'url'
-import { proto } from '../../WAProto'
-import { AuthenticationState, SignalAuthState, TransactionCapabilityOptions } from './Auth'
-import { MediaConnInfo } from './Message'
-import { SignalRepository } from './Signal'
-
-export type WAVersion = [number, number, number]
-export type WABrowserDescription = [string, string, string]
-
+/// <reference types="node" />
+/// <reference types="node" />
+import { AxiosRequestConfig } from 'axios';
+import type { Agent } from 'https';
+import type { Logger } from 'pino';
+import type { URL } from 'url';
+import { proto } from '../../WAProto';
+import { AuthenticationState, SignalAuthState, TransactionCapabilityOptions } from './Auth';
+import { MediaConnInfo } from './Message';
+import { SignalRepository } from './Signal';
+export type WAVersion = [number, number, number];
+export type WABrowserDescription = [string, string, string];
 export type CacheStore = {
     /** get a cached key and change the stats */
-    get<T>(key: string): T | undefined
+    get<T>(key: string): T | undefined;
     /** set a key in the cache */
-    set<T>(key: string, value: T): void
+    set<T>(key: string, value: T): void;
     /** delete a key from the cache */
-    del(key: string): void
+    del(key: string): void;
     /** flush all data */
-    flushAll(): void
-}
-
+    flushAll(): void;
+};
 export type SocketConfig = {
     /** the WS url to connect to WA */
-    waWebSocketUrl: string | URL
+    waWebSocketUrl: string | URL;
     /** Fails the connection if the socket times out in this interval */
-    connectTimeoutMs: number
+    connectTimeoutMs: number;
     /** Default timeout for queries, undefined for no timeout */
-    defaultQueryTimeoutMs: number | undefined
+    defaultQueryTimeoutMs: number | undefined;
     /** ping-pong interval for WS connection */
-    keepAliveIntervalMs: number
-	/** should baileys use the mobile api instead of the multi device api */
-	mobile?: boolean
+    keepAliveIntervalMs: number;
+    /** should baileys use the mobile api instead of the multi device api */
+    mobile?: boolean;
     /** proxy agent */
-    agent?: Agent
+    agent?: Agent;
     /** pino logger */
-    logger: Logger
+    logger: Logger;
     /** version to connect with */
-    version: WAVersion
+    version: WAVersion;
     /** override browser config */
-    browser: WABrowserDescription
+    browser: WABrowserDescription;
     /** agent used for fetch requests -- uploading/downloading media */
-    fetchAgent?: Agent
+    fetchAgent?: Agent;
     /** should the QR be printed in the terminal */
-    printQRInTerminal: boolean
+    printQRInTerminal: boolean;
     /** should events be emitted for actions done by this socket connection */
-    emitOwnEvents: boolean
+    emitOwnEvents: boolean;
     /** custom upload hosts to upload media to */
-    customUploadHosts: MediaConnInfo['hosts']
+    customUploadHosts: MediaConnInfo['hosts'];
     /** time to wait between sending new retry requests */
-    retryRequestDelayMs: number
+    retryRequestDelayMs: number;
     /** max retry count */
-    maxMsgRetryCount: number
+    maxMsgRetryCount: number;
     /** time to wait for the generation of the next QR in ms */
-    qrTimeout?: number
+    qrTimeout?: number;
     /** provide an auth state object to maintain the auth state */
-    auth: AuthenticationState
+    auth: AuthenticationState;
     /** manage history processing with this control; by default will sync up everything */
-    shouldSyncHistoryMessage: (msg: proto.Message.IHistorySyncNotification) => boolean
+    shouldSyncHistoryMessage: (msg: proto.Message.IHistorySyncNotification) => boolean;
     /** transaction capability options for SignalKeyStore */
-    transactionOpts: TransactionCapabilityOptions
+    transactionOpts: TransactionCapabilityOptions;
     /** marks the client as online whenever the socket successfully connects */
-    markOnlineOnConnect: boolean
-
+    markOnlineOnConnect: boolean;
     /** provide a cache to store media, so does not have to be re-uploaded */
-    mediaCache?: CacheStore
+    mediaCache?: CacheStore;
     /**
      * map to store the retry counts for failed messages;
      * used to determine whether to retry a message or not */
-    msgRetryCounterCache?: CacheStore
+    msgRetryCounterCache?: CacheStore;
     /** provide a cache to store a user's device list */
-    userDevicesCache?: CacheStore
+    userDevicesCache?: CacheStore;
     /** cache to store call offers */
-    callOfferCache?: CacheStore
+    callOfferCache?: CacheStore;
     /** width for link preview images */
-    linkPreviewImageThumbnailWidth: number
+    linkPreviewImageThumbnailWidth: number;
     /** Should Baileys ask the phone for full history, will be received async */
-    syncFullHistory: boolean
+    syncFullHistory: boolean;
     /** Should baileys fire init queries automatically, default true */
-    fireInitQueries: boolean
+    fireInitQueries: boolean;
     /**
      * generate a high quality link preview,
      * entails uploading the jpegThumbnail to WA
      * */
-    generateHighQualityLinkPreview: boolean
-
+    generateHighQualityLinkPreview: boolean;
     /**
      * Returns if a jid should be ignored,
      * no event for that jid will be triggered.
      * Messages from that jid will also not be decrypted
      * */
-    shouldIgnoreJid: (jid: string) => boolean | undefined
-
+    shouldIgnoreJid: (jid: string) => boolean | undefined;
     /**
      * Optionally patch the message before sending out
      * */
-    patchMessageBeforeSending: (
-        msg: proto.IMessage,
-        recipientJids: string[],
-    ) => Promise<proto.IMessage> | proto.IMessage
-
+    patchMessageBeforeSending: (msg: proto.IMessage, recipientJids: string[]) => Promise<proto.IMessage> | proto.IMessage;
     /** verify app state MACs */
     appStateMacVerification: {
-        patch: boolean
-        snapshot: boolean
-    }
-
+        patch: boolean;
+        snapshot: boolean;
+    };
     /** options for axios */
-    options: AxiosRequestConfig<{}>
+    options: AxiosRequestConfig<{}>;
     /**
      * fetch a message from your store
      * implement this so that messages failed to send
      * (solves the "this message can take a while" issue) can be retried
      * */
-    getMessage: (key: proto.IMessageKey) => Promise<proto.IMessage | undefined>
-
-    makeSignalRepository: (auth: SignalAuthState) => SignalRepository
-
+    getMessage: (key: proto.IMessageKey) => Promise<proto.IMessage | undefined>;
+    makeSignalRepository: (auth: SignalAuthState) => SignalRepository;
     /** Socket passthrough */
-    socket?: any
-}
+    socket?: any;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/Socket.js b/node_modules/@whiskeysockets/baileys/lib/Types/Socket.js
new file mode 100644
index 0000000..c8ad2e5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/Socket.js
@@ -0,0 +1,2 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/State.d.ts b/node_modules/@whiskeysockets/baileys/lib/Types/State.d.ts
new file mode 100644
index 0000000..b3fb782
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/State.d.ts
@@ -0,0 +1,27 @@
+import { Contact } from './Contact';
+export type WAConnectionState = 'open' | 'connecting' | 'close';
+export type ConnectionState = {
+    /** connection is now open, connecting or closed */
+    connection: WAConnectionState;
+    /** the error that caused the connection to close */
+    lastDisconnect?: {
+        error: Error | undefined;
+        date: Date;
+    };
+    /** is this a new login */
+    isNewLogin?: boolean;
+    /** the current QR code */
+    qr?: string;
+    /** has the device received all pending notifications while it was offline */
+    receivedPendingNotifications?: boolean;
+    /** legacy connection options */
+    legacy?: {
+        phoneConnected: boolean;
+        user?: Contact;
+    };
+    /**
+     * if the client is shown as an active, online client.
+     * If this is false, the primary phone and other devices will receive notifs
+     * */
+    isOnline?: boolean;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/State.js b/node_modules/@whiskeysockets/baileys/lib/Types/State.js
new file mode 100644
index 0000000..c8ad2e5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/State.js
@@ -0,0 +1,2 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/index.d.ts b/node_modules/@whiskeysockets/baileys/lib/Types/index.d.ts
new file mode 100644
index 0000000..28415d3
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/index.d.ts
@@ -0,0 +1,56 @@
+export * from './Auth';
+export * from './GroupMetadata';
+export * from './Chat';
+export * from './Contact';
+export * from './State';
+export * from './Message';
+export * from './Socket';
+export * from './Events';
+export * from './Product';
+export * from './Call';
+export * from './Signal';
+import { AuthenticationState } from './Auth';
+import { SocketConfig } from './Socket';
+export type UserFacingSocketConfig = Partial<SocketConfig> & {
+    auth: AuthenticationState;
+};
+export declare enum DisconnectReason {
+    connectionClosed = 428,
+    connectionLost = 408,
+    connectionReplaced = 440,
+    timedOut = 408,
+    loggedOut = 401,
+    badSession = 500,
+    restartRequired = 515,
+    multideviceMismatch = 411,
+    forbidden = 403,
+    unavailableService = 503
+}
+export type WAInitResponse = {
+    ref: string;
+    ttl: number;
+    status: 200;
+};
+export type WABusinessHoursConfig = {
+    day_of_week: string;
+    mode: string;
+    open_time?: number;
+    close_time?: number;
+};
+export type WABusinessProfile = {
+    description: string;
+    email: string | undefined;
+    business_hours: {
+        timezone?: string;
+        config?: WABusinessHoursConfig[];
+        business_config?: WABusinessHoursConfig[];
+    };
+    website: string[];
+    category?: string;
+    wid?: string;
+    address?: string;
+};
+export type CurveKeyPair = {
+    private: Uint8Array;
+    public: Uint8Array;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Types/index.js b/node_modules/@whiskeysockets/baileys/lib/Types/index.js
new file mode 100644
index 0000000..4474dd7
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Types/index.js
@@ -0,0 +1,41 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __exportStar = (this && this.__exportStar) || function(m, exports) {
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.DisconnectReason = void 0;
+__exportStar(require("./Auth"), exports);
+__exportStar(require("./GroupMetadata"), exports);
+__exportStar(require("./Chat"), exports);
+__exportStar(require("./Contact"), exports);
+__exportStar(require("./State"), exports);
+__exportStar(require("./Message"), exports);
+__exportStar(require("./Socket"), exports);
+__exportStar(require("./Events"), exports);
+__exportStar(require("./Product"), exports);
+__exportStar(require("./Call"), exports);
+__exportStar(require("./Signal"), exports);
+var DisconnectReason;
+(function (DisconnectReason) {
+    DisconnectReason[DisconnectReason["connectionClosed"] = 428] = "connectionClosed";
+    DisconnectReason[DisconnectReason["connectionLost"] = 408] = "connectionLost";
+    DisconnectReason[DisconnectReason["connectionReplaced"] = 440] = "connectionReplaced";
+    DisconnectReason[DisconnectReason["timedOut"] = 408] = "timedOut";
+    DisconnectReason[DisconnectReason["loggedOut"] = 401] = "loggedOut";
+    DisconnectReason[DisconnectReason["badSession"] = 500] = "badSession";
+    DisconnectReason[DisconnectReason["restartRequired"] = 515] = "restartRequired";
+    DisconnectReason[DisconnectReason["multideviceMismatch"] = 411] = "multideviceMismatch";
+    DisconnectReason[DisconnectReason["forbidden"] = 403] = "forbidden";
+    DisconnectReason[DisconnectReason["unavailableService"] = 503] = "unavailableService";
+})(DisconnectReason = exports.DisconnectReason || (exports.DisconnectReason = {}));
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/auth-utils.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/auth-utils.d.ts
new file mode 100644
index 0000000..298bdac
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/auth-utils.d.ts
@@ -0,0 +1,18 @@
+import type { Logger } from 'pino';
+import type { AuthenticationCreds, CacheStore, SignalKeyStore, SignalKeyStoreWithTransaction, TransactionCapabilityOptions } from '../Types';
+/**
+ * Adds caching capability to a SignalKeyStore
+ * @param store the store to add caching to
+ * @param logger to log trace events
+ * @param _cache cache store to use
+ */
+export declare function makeCacheableSignalKeyStore(store: SignalKeyStore, logger: Logger, _cache?: CacheStore): SignalKeyStore;
+/**
+ * Adds DB like transaction capability (https://en.wikipedia.org/wiki/Database_transaction) to the SignalKeyStore,
+ * this allows batch read & write operations & improves the performance of the lib
+ * @param state the key store to apply this capability to
+ * @param logger logger to log events
+ * @returns SignalKeyStore with transaction capability
+ */
+export declare const addTransactionCapability: (state: SignalKeyStore, logger: Logger, { maxCommitRetries, delayBetweenTriesMs }: TransactionCapabilityOptions) => SignalKeyStoreWithTransaction;
+export declare const initAuthCreds: () => AuthenticationCreds;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/auth-utils.js b/node_modules/@whiskeysockets/baileys/lib/Utils/auth-utils.js
new file mode 100644
index 0000000..497b170
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/auth-utils.js
@@ -0,0 +1,205 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.initAuthCreds = exports.addTransactionCapability = exports.makeCacheableSignalKeyStore = void 0;
+const crypto_1 = require("crypto");
+const node_cache_1 = __importDefault(require("node-cache"));
+const uuid_1 = require("uuid");
+const Defaults_1 = require("../Defaults");
+const crypto_2 = require("./crypto");
+const generics_1 = require("./generics");
+/**
+ * Adds caching capability to a SignalKeyStore
+ * @param store the store to add caching to
+ * @param logger to log trace events
+ * @param _cache cache store to use
+ */
+function makeCacheableSignalKeyStore(store, logger, _cache) {
+    const cache = _cache || new node_cache_1.default({
+        stdTTL: Defaults_1.DEFAULT_CACHE_TTLS.SIGNAL_STORE,
+        useClones: false,
+        deleteOnExpire: true,
+    });
+    function getUniqueId(type, id) {
+        return `${type}.${id}`;
+    }
+    return {
+        async get(type, ids) {
+            const data = {};
+            const idsToFetch = [];
+            for (const id of ids) {
+                const item = cache.get(getUniqueId(type, id));
+                if (typeof item !== 'undefined') {
+                    data[id] = item;
+                }
+                else {
+                    idsToFetch.push(id);
+                }
+            }
+            if (idsToFetch.length) {
+                logger.trace({ items: idsToFetch.length }, 'loading from store');
+                const fetched = await store.get(type, idsToFetch);
+                for (const id of idsToFetch) {
+                    const item = fetched[id];
+                    if (item) {
+                        data[id] = item;
+                        cache.set(getUniqueId(type, id), item);
+                    }
+                }
+            }
+            return data;
+        },
+        async set(data) {
+            let keys = 0;
+            for (const type in data) {
+                for (const id in data[type]) {
+                    cache.set(getUniqueId(type, id), data[type][id]);
+                    keys += 1;
+                }
+            }
+            logger.trace({ keys }, 'updated cache');
+            await store.set(data);
+        },
+        async clear() {
+            var _a;
+            cache.flushAll();
+            await ((_a = store.clear) === null || _a === void 0 ? void 0 : _a.call(store));
+        }
+    };
+}
+exports.makeCacheableSignalKeyStore = makeCacheableSignalKeyStore;
+/**
+ * Adds DB like transaction capability (https://en.wikipedia.org/wiki/Database_transaction) to the SignalKeyStore,
+ * this allows batch read & write operations & improves the performance of the lib
+ * @param state the key store to apply this capability to
+ * @param logger logger to log events
+ * @returns SignalKeyStore with transaction capability
+ */
+const addTransactionCapability = (state, logger, { maxCommitRetries, delayBetweenTriesMs }) => {
+    // number of queries made to the DB during the transaction
+    // only there for logging purposes
+    let dbQueriesInTransaction = 0;
+    let transactionCache = {};
+    let mutations = {};
+    let transactionsInProgress = 0;
+    return {
+        get: async (type, ids) => {
+            if (isInTransaction()) {
+                const dict = transactionCache[type];
+                const idsRequiringFetch = dict
+                    ? ids.filter(item => typeof dict[item] === 'undefined')
+                    : ids;
+                // only fetch if there are any items to fetch
+                if (idsRequiringFetch.length) {
+                    dbQueriesInTransaction += 1;
+                    const result = await state.get(type, idsRequiringFetch);
+                    transactionCache[type] || (transactionCache[type] = {});
+                    Object.assign(transactionCache[type], result);
+                }
+                return ids.reduce((dict, id) => {
+                    var _a;
+                    const value = (_a = transactionCache[type]) === null || _a === void 0 ? void 0 : _a[id];
+                    if (value) {
+                        dict[id] = value;
+                    }
+                    return dict;
+                }, {});
+            }
+            else {
+                return state.get(type, ids);
+            }
+        },
+        set: data => {
+            if (isInTransaction()) {
+                logger.trace({ types: Object.keys(data) }, 'caching in transaction');
+                for (const key in data) {
+                    transactionCache[key] = transactionCache[key] || {};
+                    Object.assign(transactionCache[key], data[key]);
+                    mutations[key] = mutations[key] || {};
+                    Object.assign(mutations[key], data[key]);
+                }
+            }
+            else {
+                return state.set(data);
+            }
+        },
+        isInTransaction,
+        async transaction(work) {
+            let result;
+            transactionsInProgress += 1;
+            if (transactionsInProgress === 1) {
+                logger.trace('entering transaction');
+            }
+            try {
+                result = await work();
+                // commit if this is the outermost transaction
+                if (transactionsInProgress === 1) {
+                    if (Object.keys(mutations).length) {
+                        logger.trace('committing transaction');
+                        // retry mechanism to ensure we've some recovery
+                        // in case a transaction fails in the first attempt
+                        let tries = maxCommitRetries;
+                        while (tries) {
+                            tries -= 1;
+                            try {
+                                await state.set(mutations);
+                                logger.trace({ dbQueriesInTransaction }, 'committed transaction');
+                                break;
+                            }
+                            catch (error) {
+                                logger.warn(`failed to commit ${Object.keys(mutations).length} mutations, tries left=${tries}`);
+                                await (0, generics_1.delay)(delayBetweenTriesMs);
+                            }
+                        }
+                    }
+                    else {
+                        logger.trace('no mutations in transaction');
+                    }
+                }
+            }
+            finally {
+                transactionsInProgress -= 1;
+                if (transactionsInProgress === 0) {
+                    transactionCache = {};
+                    mutations = {};
+                    dbQueriesInTransaction = 0;
+                }
+            }
+            return result;
+        }
+    };
+    function isInTransaction() {
+        return transactionsInProgress > 0;
+    }
+};
+exports.addTransactionCapability = addTransactionCapability;
+const initAuthCreds = () => {
+    const identityKey = crypto_2.Curve.generateKeyPair();
+    return {
+        noiseKey: crypto_2.Curve.generateKeyPair(),
+        pairingEphemeralKeyPair: crypto_2.Curve.generateKeyPair(),
+        signedIdentityKey: identityKey,
+        signedPreKey: (0, crypto_2.signedKeyPair)(identityKey, 1),
+        registrationId: (0, generics_1.generateRegistrationId)(),
+        advSecretKey: (0, crypto_1.randomBytes)(32).toString('base64'),
+        processedHistoryMessages: [],
+        nextPreKeyId: 1,
+        firstUnuploadedPreKeyId: 1,
+        accountSyncCounter: 0,
+        accountSettings: {
+            unarchiveChats: false
+        },
+        // mobile creds
+        deviceId: Buffer.from((0, uuid_1.v4)().replace(/-/g, ''), 'hex').toString('base64url'),
+        phoneId: (0, uuid_1.v4)(),
+        identityId: (0, crypto_1.randomBytes)(20),
+        registered: false,
+        backupToken: (0, crypto_1.randomBytes)(20),
+        registration: {},
+        pairingCode: undefined,
+        lastPropHash: undefined,
+    };
+};
+exports.initAuthCreds = initAuthCreds;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/baileys-event-stream.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/baileys-event-stream.d.ts
new file mode 100644
index 0000000..d801f42
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/baileys-event-stream.d.ts
@@ -0,0 +1,16 @@
+import type { BaileysEventEmitter } from '../Types';
+/**
+ * Captures events from a baileys event emitter & stores them in a file
+ * @param ev The event emitter to read events from
+ * @param filename File to save to
+ */
+export declare const captureEventStream: (ev: BaileysEventEmitter, filename: string) => void;
+/**
+ * Read event file and emit events from there
+ * @param filename filename containing event data
+ * @param delayIntervalMs delay between each event emit
+ */
+export declare const readAndEmitEventStream: (filename: string, delayIntervalMs?: number) => {
+    ev: BaileysEventEmitter;
+    task: Promise<void>;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/baileys-event-stream.js b/node_modules/@whiskeysockets/baileys/lib/Utils/baileys-event-stream.js
new file mode 100644
index 0000000..ac5c4af
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/baileys-event-stream.js
@@ -0,0 +1,63 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.readAndEmitEventStream = exports.captureEventStream = void 0;
+const events_1 = __importDefault(require("events"));
+const fs_1 = require("fs");
+const promises_1 = require("fs/promises");
+const readline_1 = require("readline");
+const generics_1 = require("./generics");
+const make_mutex_1 = require("./make-mutex");
+/**
+ * Captures events from a baileys event emitter & stores them in a file
+ * @param ev The event emitter to read events from
+ * @param filename File to save to
+ */
+const captureEventStream = (ev, filename) => {
+    const oldEmit = ev.emit;
+    // write mutex so data is appended in order
+    const writeMutex = (0, make_mutex_1.makeMutex)();
+    // monkey patch eventemitter to capture all events
+    ev.emit = function (...args) {
+        const content = JSON.stringify({ timestamp: Date.now(), event: args[0], data: args[1] }) + '\n';
+        const result = oldEmit.apply(ev, args);
+        writeMutex.mutex(async () => {
+            await (0, promises_1.writeFile)(filename, content, { flag: 'a' });
+        });
+        return result;
+    };
+};
+exports.captureEventStream = captureEventStream;
+/**
+ * Read event file and emit events from there
+ * @param filename filename containing event data
+ * @param delayIntervalMs delay between each event emit
+ */
+const readAndEmitEventStream = (filename, delayIntervalMs = 0) => {
+    const ev = new events_1.default();
+    const fireEvents = async () => {
+        // from: https://stackoverflow.com/questions/6156501/read-a-file-one-line-at-a-time-in-node-js
+        const fileStream = (0, fs_1.createReadStream)(filename);
+        const rl = (0, readline_1.createInterface)({
+            input: fileStream,
+            crlfDelay: Infinity
+        });
+        // Note: we use the crlfDelay option to recognize all instances of CR LF
+        // ('\r\n') in input.txt as a single line break.
+        for await (const line of rl) {
+            if (line) {
+                const { event, data } = JSON.parse(line);
+                ev.emit(event, data);
+                delayIntervalMs && await (0, generics_1.delay)(delayIntervalMs);
+            }
+        }
+        fileStream.close();
+    };
+    return {
+        ev,
+        task: fireEvents()
+    };
+};
+exports.readAndEmitEventStream = readAndEmitEventStream;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/business.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/business.d.ts
new file mode 100644
index 0000000..67f1f71
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/business.d.ts
@@ -0,0 +1,22 @@
+import { CatalogCollection, OrderDetails, Product, ProductCreate, ProductUpdate, WAMediaUpload, WAMediaUploadFunction } from '../Types';
+import { BinaryNode } from '../WABinary';
+export declare const parseCatalogNode: (node: BinaryNode) => {
+    products: Product[];
+    nextPageCursor: string | undefined;
+};
+export declare const parseCollectionsNode: (node: BinaryNode) => {
+    collections: CatalogCollection[];
+};
+export declare const parseOrderDetailsNode: (node: BinaryNode) => OrderDetails;
+export declare const toProductNode: (productId: string | undefined, product: ProductCreate | ProductUpdate) => BinaryNode;
+export declare const parseProductNode: (productNode: BinaryNode) => Product;
+/**
+ * Uploads images not already uploaded to WA's servers
+ */
+export declare function uploadingNecessaryImagesOfProduct<T extends ProductUpdate | ProductCreate>(product: T, waUploadToServer: WAMediaUploadFunction, timeoutMs?: number): Promise<T>;
+/**
+ * Uploads images not already uploaded to WA's servers
+ */
+export declare const uploadingNecessaryImages: (images: WAMediaUpload[], waUploadToServer: WAMediaUploadFunction, timeoutMs?: number) => Promise<{
+    url: string;
+}[]>;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/business.js b/node_modules/@whiskeysockets/baileys/lib/Utils/business.js
new file mode 100644
index 0000000..9813214
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/business.js
@@ -0,0 +1,234 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.uploadingNecessaryImages = exports.uploadingNecessaryImagesOfProduct = exports.parseProductNode = exports.toProductNode = exports.parseOrderDetailsNode = exports.parseCollectionsNode = exports.parseCatalogNode = void 0;
+const boom_1 = require("@hapi/boom");
+const crypto_1 = require("crypto");
+const WABinary_1 = require("../WABinary");
+const messages_media_1 = require("./messages-media");
+const parseCatalogNode = (node) => {
+    const catalogNode = (0, WABinary_1.getBinaryNodeChild)(node, 'product_catalog');
+    const products = (0, WABinary_1.getBinaryNodeChildren)(catalogNode, 'product').map(exports.parseProductNode);
+    const paging = (0, WABinary_1.getBinaryNodeChild)(catalogNode, 'paging');
+    return {
+        products,
+        nextPageCursor: paging
+            ? (0, WABinary_1.getBinaryNodeChildString)(paging, 'after')
+            : undefined
+    };
+};
+exports.parseCatalogNode = parseCatalogNode;
+const parseCollectionsNode = (node) => {
+    const collectionsNode = (0, WABinary_1.getBinaryNodeChild)(node, 'collections');
+    const collections = (0, WABinary_1.getBinaryNodeChildren)(collectionsNode, 'collection').map(collectionNode => {
+        const id = (0, WABinary_1.getBinaryNodeChildString)(collectionNode, 'id');
+        const name = (0, WABinary_1.getBinaryNodeChildString)(collectionNode, 'name');
+        const products = (0, WABinary_1.getBinaryNodeChildren)(collectionNode, 'product').map(exports.parseProductNode);
+        return {
+            id,
+            name,
+            products,
+            status: parseStatusInfo(collectionNode)
+        };
+    });
+    return {
+        collections
+    };
+};
+exports.parseCollectionsNode = parseCollectionsNode;
+const parseOrderDetailsNode = (node) => {
+    const orderNode = (0, WABinary_1.getBinaryNodeChild)(node, 'order');
+    const products = (0, WABinary_1.getBinaryNodeChildren)(orderNode, 'product').map(productNode => {
+        const imageNode = (0, WABinary_1.getBinaryNodeChild)(productNode, 'image');
+        return {
+            id: (0, WABinary_1.getBinaryNodeChildString)(productNode, 'id'),
+            name: (0, WABinary_1.getBinaryNodeChildString)(productNode, 'name'),
+            imageUrl: (0, WABinary_1.getBinaryNodeChildString)(imageNode, 'url'),
+            price: +(0, WABinary_1.getBinaryNodeChildString)(productNode, 'price'),
+            currency: (0, WABinary_1.getBinaryNodeChildString)(productNode, 'currency'),
+            quantity: +(0, WABinary_1.getBinaryNodeChildString)(productNode, 'quantity')
+        };
+    });
+    const priceNode = (0, WABinary_1.getBinaryNodeChild)(orderNode, 'price');
+    const orderDetails = {
+        price: {
+            total: +(0, WABinary_1.getBinaryNodeChildString)(priceNode, 'total'),
+            currency: (0, WABinary_1.getBinaryNodeChildString)(priceNode, 'currency'),
+        },
+        products
+    };
+    return orderDetails;
+};
+exports.parseOrderDetailsNode = parseOrderDetailsNode;
+const toProductNode = (productId, product) => {
+    const attrs = {};
+    const content = [];
+    if (typeof productId !== 'undefined') {
+        content.push({
+            tag: 'id',
+            attrs: {},
+            content: Buffer.from(productId)
+        });
+    }
+    if (typeof product.name !== 'undefined') {
+        content.push({
+            tag: 'name',
+            attrs: {},
+            content: Buffer.from(product.name)
+        });
+    }
+    if (typeof product.description !== 'undefined') {
+        content.push({
+            tag: 'description',
+            attrs: {},
+            content: Buffer.from(product.description)
+        });
+    }
+    if (typeof product.retailerId !== 'undefined') {
+        content.push({
+            tag: 'retailer_id',
+            attrs: {},
+            content: Buffer.from(product.retailerId)
+        });
+    }
+    if (product.images.length) {
+        content.push({
+            tag: 'media',
+            attrs: {},
+            content: product.images.map(img => {
+                if (!('url' in img)) {
+                    throw new boom_1.Boom('Expected img for product to already be uploaded', { statusCode: 400 });
+                }
+                return {
+                    tag: 'image',
+                    attrs: {},
+                    content: [
+                        {
+                            tag: 'url',
+                            attrs: {},
+                            content: Buffer.from(img.url.toString())
+                        }
+                    ]
+                };
+            })
+        });
+    }
+    if (typeof product.price !== 'undefined') {
+        content.push({
+            tag: 'price',
+            attrs: {},
+            content: Buffer.from(product.price.toString())
+        });
+    }
+    if (typeof product.currency !== 'undefined') {
+        content.push({
+            tag: 'currency',
+            attrs: {},
+            content: Buffer.from(product.currency)
+        });
+    }
+    if ('originCountryCode' in product) {
+        if (typeof product.originCountryCode === 'undefined') {
+            attrs['compliance_category'] = 'COUNTRY_ORIGIN_EXEMPT';
+        }
+        else {
+            content.push({
+                tag: 'compliance_info',
+                attrs: {},
+                content: [
+                    {
+                        tag: 'country_code_origin',
+                        attrs: {},
+                        content: Buffer.from(product.originCountryCode)
+                    }
+                ]
+            });
+        }
+    }
+    if (typeof product.isHidden !== 'undefined') {
+        attrs['is_hidden'] = product.isHidden.toString();
+    }
+    const node = {
+        tag: 'product',
+        attrs,
+        content
+    };
+    return node;
+};
+exports.toProductNode = toProductNode;
+const parseProductNode = (productNode) => {
+    const isHidden = productNode.attrs.is_hidden === 'true';
+    const id = (0, WABinary_1.getBinaryNodeChildString)(productNode, 'id');
+    const mediaNode = (0, WABinary_1.getBinaryNodeChild)(productNode, 'media');
+    const statusInfoNode = (0, WABinary_1.getBinaryNodeChild)(productNode, 'status_info');
+    const product = {
+        id,
+        imageUrls: parseImageUrls(mediaNode),
+        reviewStatus: {
+            whatsapp: (0, WABinary_1.getBinaryNodeChildString)(statusInfoNode, 'status'),
+        },
+        availability: 'in stock',
+        name: (0, WABinary_1.getBinaryNodeChildString)(productNode, 'name'),
+        retailerId: (0, WABinary_1.getBinaryNodeChildString)(productNode, 'retailer_id'),
+        url: (0, WABinary_1.getBinaryNodeChildString)(productNode, 'url'),
+        description: (0, WABinary_1.getBinaryNodeChildString)(productNode, 'description'),
+        price: +(0, WABinary_1.getBinaryNodeChildString)(productNode, 'price'),
+        currency: (0, WABinary_1.getBinaryNodeChildString)(productNode, 'currency'),
+        isHidden,
+    };
+    return product;
+};
+exports.parseProductNode = parseProductNode;
+/**
+ * Uploads images not already uploaded to WA's servers
+ */
+async function uploadingNecessaryImagesOfProduct(product, waUploadToServer, timeoutMs = 30000) {
+    product = {
+        ...product,
+        images: product.images ? await (0, exports.uploadingNecessaryImages)(product.images, waUploadToServer, timeoutMs) : product.images
+    };
+    return product;
+}
+exports.uploadingNecessaryImagesOfProduct = uploadingNecessaryImagesOfProduct;
+/**
+ * Uploads images not already uploaded to WA's servers
+ */
+const uploadingNecessaryImages = async (images, waUploadToServer, timeoutMs = 30000) => {
+    const results = await Promise.all(images.map(async (img) => {
+        if ('url' in img) {
+            const url = img.url.toString();
+            if (url.includes('.whatsapp.net')) {
+                return { url };
+            }
+        }
+        const { stream } = await (0, messages_media_1.getStream)(img);
+        const hasher = (0, crypto_1.createHash)('sha256');
+        const contentBlocks = [];
+        for await (const block of stream) {
+            hasher.update(block);
+            contentBlocks.push(block);
+        }
+        const sha = hasher.digest('base64');
+        const { directPath } = await waUploadToServer((0, messages_media_1.toReadable)(Buffer.concat(contentBlocks)), {
+            mediaType: 'product-catalog-image',
+            fileEncSha256B64: sha,
+            timeoutMs
+        });
+        return { url: (0, messages_media_1.getUrlFromDirectPath)(directPath) };
+    }));
+    return results;
+};
+exports.uploadingNecessaryImages = uploadingNecessaryImages;
+const parseImageUrls = (mediaNode) => {
+    const imgNode = (0, WABinary_1.getBinaryNodeChild)(mediaNode, 'image');
+    return {
+        requested: (0, WABinary_1.getBinaryNodeChildString)(imgNode, 'request_image_url'),
+        original: (0, WABinary_1.getBinaryNodeChildString)(imgNode, 'original_image_url')
+    };
+};
+const parseStatusInfo = (mediaNode) => {
+    const node = (0, WABinary_1.getBinaryNodeChild)(mediaNode, 'status_info');
+    return {
+        status: (0, WABinary_1.getBinaryNodeChildString)(node, 'status'),
+        canAppeal: (0, WABinary_1.getBinaryNodeChildString)(node, 'can_appeal') === 'true',
+    };
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/chat-utils.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/chat-utils.d.ts
new file mode 100644
index 0000000..b4911e2
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/chat-utils.d.ts
@@ -0,0 +1,71 @@
+/// <reference types="node" />
+import { AxiosRequestConfig } from 'axios';
+import type { Logger } from 'pino';
+import { proto } from '../../WAProto';
+import { BaileysEventEmitter, ChatModification, ChatMutation, Contact, InitialAppStateSyncOptions, LTHashState, WAPatchCreate, WAPatchName } from '../Types';
+import { BinaryNode } from '../WABinary';
+type FetchAppStateSyncKey = (keyId: string) => Promise<proto.Message.IAppStateSyncKeyData | null | undefined>;
+export type ChatMutationMap = {
+    [index: string]: ChatMutation;
+};
+export declare const newLTHashState: () => LTHashState;
+export declare const encodeSyncdPatch: ({ type, index, syncAction, apiVersion, operation }: WAPatchCreate, myAppStateKeyId: string, state: LTHashState, getAppStateSyncKey: FetchAppStateSyncKey) => Promise<{
+    patch: proto.ISyncdPatch;
+    state: LTHashState;
+}>;
+export declare const decodeSyncdMutations: (msgMutations: (proto.ISyncdMutation | proto.ISyncdRecord)[], initialState: LTHashState, getAppStateSyncKey: FetchAppStateSyncKey, onMutation: (mutation: ChatMutation) => void, validateMacs: boolean) => Promise<{
+    hash: Buffer;
+    indexValueMap: {
+        [indexMacBase64: string]: {
+            valueMac: Uint8Array | Buffer;
+        };
+    };
+}>;
+export declare const decodeSyncdPatch: (msg: proto.ISyncdPatch, name: WAPatchName, initialState: LTHashState, getAppStateSyncKey: FetchAppStateSyncKey, onMutation: (mutation: ChatMutation) => void, validateMacs: boolean) => Promise<{
+    hash: Buffer;
+    indexValueMap: {
+        [indexMacBase64: string]: {
+            valueMac: Uint8Array | Buffer;
+        };
+    };
+}>;
+export declare const extractSyncdPatches: (result: BinaryNode, options: AxiosRequestConfig<any>) => Promise<{
+    critical_block: {
+        patches: proto.ISyncdPatch[];
+        hasMorePatches: boolean;
+        snapshot?: proto.ISyncdSnapshot | undefined;
+    };
+    critical_unblock_low: {
+        patches: proto.ISyncdPatch[];
+        hasMorePatches: boolean;
+        snapshot?: proto.ISyncdSnapshot | undefined;
+    };
+    regular_high: {
+        patches: proto.ISyncdPatch[];
+        hasMorePatches: boolean;
+        snapshot?: proto.ISyncdSnapshot | undefined;
+    };
+    regular_low: {
+        patches: proto.ISyncdPatch[];
+        hasMorePatches: boolean;
+        snapshot?: proto.ISyncdSnapshot | undefined;
+    };
+    regular: {
+        patches: proto.ISyncdPatch[];
+        hasMorePatches: boolean;
+        snapshot?: proto.ISyncdSnapshot | undefined;
+    };
+}>;
+export declare const downloadExternalBlob: (blob: proto.IExternalBlobReference, options: AxiosRequestConfig<any>) => Promise<Buffer>;
+export declare const downloadExternalPatch: (blob: proto.IExternalBlobReference, options: AxiosRequestConfig<any>) => Promise<proto.SyncdMutations>;
+export declare const decodeSyncdSnapshot: (name: WAPatchName, snapshot: proto.ISyncdSnapshot, getAppStateSyncKey: FetchAppStateSyncKey, minimumVersionNumber: number | undefined, validateMacs?: boolean) => Promise<{
+    state: LTHashState;
+    mutationMap: ChatMutationMap;
+}>;
+export declare const decodePatches: (name: WAPatchName, syncds: proto.ISyncdPatch[], initial: LTHashState, getAppStateSyncKey: FetchAppStateSyncKey, options: AxiosRequestConfig<any>, minimumVersionNumber?: number, logger?: Logger, validateMacs?: boolean) => Promise<{
+    state: LTHashState;
+    mutationMap: ChatMutationMap;
+}>;
+export declare const chatModificationToAppPatch: (mod: ChatModification, jid: string) => WAPatchCreate;
+export declare const processSyncAction: (syncAction: ChatMutation, ev: BaileysEventEmitter, me: Contact, initialSyncOpts?: InitialAppStateSyncOptions, logger?: Logger) => void;
+export {};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/chat-utils.js b/node_modules/@whiskeysockets/baileys/lib/Utils/chat-utils.js
new file mode 100644
index 0000000..ee12307
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/chat-utils.js
@@ -0,0 +1,724 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.processSyncAction = exports.chatModificationToAppPatch = exports.decodePatches = exports.decodeSyncdSnapshot = exports.downloadExternalPatch = exports.downloadExternalBlob = exports.extractSyncdPatches = exports.decodeSyncdPatch = exports.decodeSyncdMutations = exports.encodeSyncdPatch = exports.newLTHashState = void 0;
+const boom_1 = require("@hapi/boom");
+const WAProto_1 = require("../../WAProto");
+const LabelAssociation_1 = require("../Types/LabelAssociation");
+const WABinary_1 = require("../WABinary");
+const crypto_1 = require("./crypto");
+const generics_1 = require("./generics");
+const lt_hash_1 = require("./lt-hash");
+const messages_media_1 = require("./messages-media");
+const mutationKeys = (keydata) => {
+    const expanded = (0, crypto_1.hkdf)(keydata, 160, { info: 'WhatsApp Mutation Keys' });
+    return {
+        indexKey: expanded.slice(0, 32),
+        valueEncryptionKey: expanded.slice(32, 64),
+        valueMacKey: expanded.slice(64, 96),
+        snapshotMacKey: expanded.slice(96, 128),
+        patchMacKey: expanded.slice(128, 160)
+    };
+};
+const generateMac = (operation, data, keyId, key) => {
+    const getKeyData = () => {
+        let r;
+        switch (operation) {
+            case WAProto_1.proto.SyncdMutation.SyncdOperation.SET:
+                r = 0x01;
+                break;
+            case WAProto_1.proto.SyncdMutation.SyncdOperation.REMOVE:
+                r = 0x02;
+                break;
+        }
+        const buff = Buffer.from([r]);
+        return Buffer.concat([buff, Buffer.from(keyId, 'base64')]);
+    };
+    const keyData = getKeyData();
+    const last = Buffer.alloc(8); // 8 bytes
+    last.set([keyData.length], last.length - 1);
+    const total = Buffer.concat([keyData, data, last]);
+    const hmac = (0, crypto_1.hmacSign)(total, key, 'sha512');
+    return hmac.slice(0, 32);
+};
+const to64BitNetworkOrder = (e) => {
+    const buff = Buffer.alloc(8);
+    buff.writeUint32BE(e, 4);
+    return buff;
+};
+const makeLtHashGenerator = ({ indexValueMap, hash }) => {
+    indexValueMap = { ...indexValueMap };
+    const addBuffs = [];
+    const subBuffs = [];
+    return {
+        mix: ({ indexMac, valueMac, operation }) => {
+            const indexMacBase64 = Buffer.from(indexMac).toString('base64');
+            const prevOp = indexValueMap[indexMacBase64];
+            if (operation === WAProto_1.proto.SyncdMutation.SyncdOperation.REMOVE) {
+                if (!prevOp) {
+                    throw new boom_1.Boom('tried remove, but no previous op', { data: { indexMac, valueMac } });
+                }
+                // remove from index value mac, since this mutation is erased
+                delete indexValueMap[indexMacBase64];
+            }
+            else {
+                addBuffs.push(new Uint8Array(valueMac).buffer);
+                // add this index into the history map
+                indexValueMap[indexMacBase64] = { valueMac };
+            }
+            if (prevOp) {
+                subBuffs.push(new Uint8Array(prevOp.valueMac).buffer);
+            }
+        },
+        finish: () => {
+            const hashArrayBuffer = new Uint8Array(hash).buffer;
+            const result = lt_hash_1.LT_HASH_ANTI_TAMPERING.subtractThenAdd(hashArrayBuffer, addBuffs, subBuffs);
+            const buffer = Buffer.from(result);
+            return {
+                hash: buffer,
+                indexValueMap
+            };
+        }
+    };
+};
+const generateSnapshotMac = (lthash, version, name, key) => {
+    const total = Buffer.concat([
+        lthash,
+        to64BitNetworkOrder(version),
+        Buffer.from(name, 'utf-8')
+    ]);
+    return (0, crypto_1.hmacSign)(total, key, 'sha256');
+};
+const generatePatchMac = (snapshotMac, valueMacs, version, type, key) => {
+    const total = Buffer.concat([
+        snapshotMac,
+        ...valueMacs,
+        to64BitNetworkOrder(version),
+        Buffer.from(type, 'utf-8')
+    ]);
+    return (0, crypto_1.hmacSign)(total, key);
+};
+const newLTHashState = () => ({ version: 0, hash: Buffer.alloc(128), indexValueMap: {} });
+exports.newLTHashState = newLTHashState;
+const encodeSyncdPatch = async ({ type, index, syncAction, apiVersion, operation }, myAppStateKeyId, state, getAppStateSyncKey) => {
+    const key = !!myAppStateKeyId ? await getAppStateSyncKey(myAppStateKeyId) : undefined;
+    if (!key) {
+        throw new boom_1.Boom(`myAppStateKey ("${myAppStateKeyId}") not present`, { statusCode: 404 });
+    }
+    const encKeyId = Buffer.from(myAppStateKeyId, 'base64');
+    state = { ...state, indexValueMap: { ...state.indexValueMap } };
+    const indexBuffer = Buffer.from(JSON.stringify(index));
+    const dataProto = WAProto_1.proto.SyncActionData.fromObject({
+        index: indexBuffer,
+        value: syncAction,
+        padding: new Uint8Array(0),
+        version: apiVersion
+    });
+    const encoded = WAProto_1.proto.SyncActionData.encode(dataProto).finish();
+    const keyValue = mutationKeys(key.keyData);
+    const encValue = (0, crypto_1.aesEncrypt)(encoded, keyValue.valueEncryptionKey);
+    const valueMac = generateMac(operation, encValue, encKeyId, keyValue.valueMacKey);
+    const indexMac = (0, crypto_1.hmacSign)(indexBuffer, keyValue.indexKey);
+    // update LT hash
+    const generator = makeLtHashGenerator(state);
+    generator.mix({ indexMac, valueMac, operation });
+    Object.assign(state, generator.finish());
+    state.version += 1;
+    const snapshotMac = generateSnapshotMac(state.hash, state.version, type, keyValue.snapshotMacKey);
+    const patch = {
+        patchMac: generatePatchMac(snapshotMac, [valueMac], state.version, type, keyValue.patchMacKey),
+        snapshotMac: snapshotMac,
+        keyId: { id: encKeyId },
+        mutations: [
+            {
+                operation: operation,
+                record: {
+                    index: {
+                        blob: indexMac
+                    },
+                    value: {
+                        blob: Buffer.concat([encValue, valueMac])
+                    },
+                    keyId: { id: encKeyId }
+                }
+            }
+        ]
+    };
+    const base64Index = indexMac.toString('base64');
+    state.indexValueMap[base64Index] = { valueMac };
+    return { patch, state };
+};
+exports.encodeSyncdPatch = encodeSyncdPatch;
+const decodeSyncdMutations = async (msgMutations, initialState, getAppStateSyncKey, onMutation, validateMacs) => {
+    const ltGenerator = makeLtHashGenerator(initialState);
+    // indexKey used to HMAC sign record.index.blob
+    // valueEncryptionKey used to AES-256-CBC encrypt record.value.blob[0:-32]
+    // the remaining record.value.blob[0:-32] is the mac, it the HMAC sign of key.keyId + decoded proto data + length of bytes in keyId
+    for (const msgMutation of msgMutations) {
+        // if it's a syncdmutation, get the operation property
+        // otherwise, if it's only a record -- it'll be a SET mutation
+        const operation = 'operation' in msgMutation ? msgMutation.operation : WAProto_1.proto.SyncdMutation.SyncdOperation.SET;
+        const record = ('record' in msgMutation && !!msgMutation.record) ? msgMutation.record : msgMutation;
+        const key = await getKey(record.keyId.id);
+        const content = Buffer.from(record.value.blob);
+        const encContent = content.slice(0, -32);
+        const ogValueMac = content.slice(-32);
+        if (validateMacs) {
+            const contentHmac = generateMac(operation, encContent, record.keyId.id, key.valueMacKey);
+            if (Buffer.compare(contentHmac, ogValueMac) !== 0) {
+                throw new boom_1.Boom('HMAC content verification failed');
+            }
+        }
+        const result = (0, crypto_1.aesDecrypt)(encContent, key.valueEncryptionKey);
+        const syncAction = WAProto_1.proto.SyncActionData.decode(result);
+        if (validateMacs) {
+            const hmac = (0, crypto_1.hmacSign)(syncAction.index, key.indexKey);
+            if (Buffer.compare(hmac, record.index.blob) !== 0) {
+                throw new boom_1.Boom('HMAC index verification failed');
+            }
+        }
+        const indexStr = Buffer.from(syncAction.index).toString();
+        onMutation({ syncAction, index: JSON.parse(indexStr) });
+        ltGenerator.mix({
+            indexMac: record.index.blob,
+            valueMac: ogValueMac,
+            operation: operation
+        });
+    }
+    return ltGenerator.finish();
+    async function getKey(keyId) {
+        const base64Key = Buffer.from(keyId).toString('base64');
+        const keyEnc = await getAppStateSyncKey(base64Key);
+        if (!keyEnc) {
+            throw new boom_1.Boom(`failed to find key "${base64Key}" to decode mutation`, { statusCode: 404, data: { msgMutations } });
+        }
+        return mutationKeys(keyEnc.keyData);
+    }
+};
+exports.decodeSyncdMutations = decodeSyncdMutations;
+const decodeSyncdPatch = async (msg, name, initialState, getAppStateSyncKey, onMutation, validateMacs) => {
+    if (validateMacs) {
+        const base64Key = Buffer.from(msg.keyId.id).toString('base64');
+        const mainKeyObj = await getAppStateSyncKey(base64Key);
+        if (!mainKeyObj) {
+            throw new boom_1.Boom(`failed to find key "${base64Key}" to decode patch`, { statusCode: 404, data: { msg } });
+        }
+        const mainKey = mutationKeys(mainKeyObj.keyData);
+        const mutationmacs = msg.mutations.map(mutation => mutation.record.value.blob.slice(-32));
+        const patchMac = generatePatchMac(msg.snapshotMac, mutationmacs, (0, generics_1.toNumber)(msg.version.version), name, mainKey.patchMacKey);
+        if (Buffer.compare(patchMac, msg.patchMac) !== 0) {
+            throw new boom_1.Boom('Invalid patch mac');
+        }
+    }
+    const result = await (0, exports.decodeSyncdMutations)(msg.mutations, initialState, getAppStateSyncKey, onMutation, validateMacs);
+    return result;
+};
+exports.decodeSyncdPatch = decodeSyncdPatch;
+const extractSyncdPatches = async (result, options) => {
+    const syncNode = (0, WABinary_1.getBinaryNodeChild)(result, 'sync');
+    const collectionNodes = (0, WABinary_1.getBinaryNodeChildren)(syncNode, 'collection');
+    const final = {};
+    await Promise.all(collectionNodes.map(async (collectionNode) => {
+        const patchesNode = (0, WABinary_1.getBinaryNodeChild)(collectionNode, 'patches');
+        const patches = (0, WABinary_1.getBinaryNodeChildren)(patchesNode || collectionNode, 'patch');
+        const snapshotNode = (0, WABinary_1.getBinaryNodeChild)(collectionNode, 'snapshot');
+        const syncds = [];
+        const name = collectionNode.attrs.name;
+        const hasMorePatches = collectionNode.attrs.has_more_patches === 'true';
+        let snapshot = undefined;
+        if (snapshotNode && !!snapshotNode.content) {
+            if (!Buffer.isBuffer(snapshotNode)) {
+                snapshotNode.content = Buffer.from(Object.values(snapshotNode.content));
+            }
+            const blobRef = WAProto_1.proto.ExternalBlobReference.decode(snapshotNode.content);
+            const data = await (0, exports.downloadExternalBlob)(blobRef, options);
+            snapshot = WAProto_1.proto.SyncdSnapshot.decode(data);
+        }
+        for (let { content } of patches) {
+            if (content) {
+                if (!Buffer.isBuffer(content)) {
+                    content = Buffer.from(Object.values(content));
+                }
+                const syncd = WAProto_1.proto.SyncdPatch.decode(content);
+                if (!syncd.version) {
+                    syncd.version = { version: +collectionNode.attrs.version + 1 };
+                }
+                syncds.push(syncd);
+            }
+        }
+        final[name] = { patches: syncds, hasMorePatches, snapshot };
+    }));
+    return final;
+};
+exports.extractSyncdPatches = extractSyncdPatches;
+const downloadExternalBlob = async (blob, options) => {
+    const stream = await (0, messages_media_1.downloadContentFromMessage)(blob, 'md-app-state', { options });
+    const bufferArray = [];
+    for await (const chunk of stream) {
+        bufferArray.push(chunk);
+    }
+    return Buffer.concat(bufferArray);
+};
+exports.downloadExternalBlob = downloadExternalBlob;
+const downloadExternalPatch = async (blob, options) => {
+    const buffer = await (0, exports.downloadExternalBlob)(blob, options);
+    const syncData = WAProto_1.proto.SyncdMutations.decode(buffer);
+    return syncData;
+};
+exports.downloadExternalPatch = downloadExternalPatch;
+const decodeSyncdSnapshot = async (name, snapshot, getAppStateSyncKey, minimumVersionNumber, validateMacs = true) => {
+    const newState = (0, exports.newLTHashState)();
+    newState.version = (0, generics_1.toNumber)(snapshot.version.version);
+    const mutationMap = {};
+    const areMutationsRequired = typeof minimumVersionNumber === 'undefined'
+        || newState.version > minimumVersionNumber;
+    const { hash, indexValueMap } = await (0, exports.decodeSyncdMutations)(snapshot.records, newState, getAppStateSyncKey, areMutationsRequired
+        ? (mutation) => {
+            var _a;
+            const index = (_a = mutation.syncAction.index) === null || _a === void 0 ? void 0 : _a.toString();
+            mutationMap[index] = mutation;
+        }
+        : () => { }, validateMacs);
+    newState.hash = hash;
+    newState.indexValueMap = indexValueMap;
+    if (validateMacs) {
+        const base64Key = Buffer.from(snapshot.keyId.id).toString('base64');
+        const keyEnc = await getAppStateSyncKey(base64Key);
+        if (!keyEnc) {
+            throw new boom_1.Boom(`failed to find key "${base64Key}" to decode mutation`);
+        }
+        const result = mutationKeys(keyEnc.keyData);
+        const computedSnapshotMac = generateSnapshotMac(newState.hash, newState.version, name, result.snapshotMacKey);
+        if (Buffer.compare(snapshot.mac, computedSnapshotMac) !== 0) {
+            throw new boom_1.Boom(`failed to verify LTHash at ${newState.version} of ${name} from snapshot`);
+        }
+    }
+    return {
+        state: newState,
+        mutationMap
+    };
+};
+exports.decodeSyncdSnapshot = decodeSyncdSnapshot;
+const decodePatches = async (name, syncds, initial, getAppStateSyncKey, options, minimumVersionNumber, logger, validateMacs = true) => {
+    var _a;
+    const newState = {
+        ...initial,
+        indexValueMap: { ...initial.indexValueMap }
+    };
+    const mutationMap = {};
+    for (let i = 0; i < syncds.length; i++) {
+        const syncd = syncds[i];
+        const { version, keyId, snapshotMac } = syncd;
+        if (syncd.externalMutations) {
+            logger === null || logger === void 0 ? void 0 : logger.trace({ name, version }, 'downloading external patch');
+            const ref = await (0, exports.downloadExternalPatch)(syncd.externalMutations, options);
+            logger === null || logger === void 0 ? void 0 : logger.debug({ name, version, mutations: ref.mutations.length }, 'downloaded external patch');
+            (_a = syncd.mutations) === null || _a === void 0 ? void 0 : _a.push(...ref.mutations);
+        }
+        const patchVersion = (0, generics_1.toNumber)(version.version);
+        newState.version = patchVersion;
+        const shouldMutate = typeof minimumVersionNumber === 'undefined' || patchVersion > minimumVersionNumber;
+        const decodeResult = await (0, exports.decodeSyncdPatch)(syncd, name, newState, getAppStateSyncKey, shouldMutate
+            ? mutation => {
+                var _a;
+                const index = (_a = mutation.syncAction.index) === null || _a === void 0 ? void 0 : _a.toString();
+                mutationMap[index] = mutation;
+            }
+            : (() => { }), true);
+        newState.hash = decodeResult.hash;
+        newState.indexValueMap = decodeResult.indexValueMap;
+        if (validateMacs) {
+            const base64Key = Buffer.from(keyId.id).toString('base64');
+            const keyEnc = await getAppStateSyncKey(base64Key);
+            if (!keyEnc) {
+                throw new boom_1.Boom(`failed to find key "${base64Key}" to decode mutation`);
+            }
+            const result = mutationKeys(keyEnc.keyData);
+            const computedSnapshotMac = generateSnapshotMac(newState.hash, newState.version, name, result.snapshotMacKey);
+            if (Buffer.compare(snapshotMac, computedSnapshotMac) !== 0) {
+                throw new boom_1.Boom(`failed to verify LTHash at ${newState.version} of ${name}`);
+            }
+        }
+        // clear memory used up by the mutations
+        syncd.mutations = [];
+    }
+    return { state: newState, mutationMap };
+};
+exports.decodePatches = decodePatches;
+const chatModificationToAppPatch = (mod, jid) => {
+    const OP = WAProto_1.proto.SyncdMutation.SyncdOperation;
+    const getMessageRange = (lastMessages) => {
+        let messageRange;
+        if (Array.isArray(lastMessages)) {
+            const lastMsg = lastMessages[lastMessages.length - 1];
+            messageRange = {
+                lastMessageTimestamp: lastMsg === null || lastMsg === void 0 ? void 0 : lastMsg.messageTimestamp,
+                messages: (lastMessages === null || lastMessages === void 0 ? void 0 : lastMessages.length) ? lastMessages.map(m => {
+                    var _a, _b;
+                    if (!((_a = m.key) === null || _a === void 0 ? void 0 : _a.id) || !((_b = m.key) === null || _b === void 0 ? void 0 : _b.remoteJid)) {
+                        throw new boom_1.Boom('Incomplete key', { statusCode: 400, data: m });
+                    }
+                    if ((0, WABinary_1.isJidGroup)(m.key.remoteJid) && !m.key.fromMe && !m.key.participant) {
+                        throw new boom_1.Boom('Expected not from me message to have participant', { statusCode: 400, data: m });
+                    }
+                    if (!m.messageTimestamp || !(0, generics_1.toNumber)(m.messageTimestamp)) {
+                        throw new boom_1.Boom('Missing timestamp in last message list', { statusCode: 400, data: m });
+                    }
+                    if (m.key.participant) {
+                        m.key.participant = (0, WABinary_1.jidNormalizedUser)(m.key.participant);
+                    }
+                    return m;
+                }) : undefined
+            };
+        }
+        else {
+            messageRange = lastMessages;
+        }
+        return messageRange;
+    };
+    let patch;
+    if ('mute' in mod) {
+        patch = {
+            syncAction: {
+                muteAction: {
+                    muted: !!mod.mute,
+                    muteEndTimestamp: mod.mute || undefined
+                }
+            },
+            index: ['mute', jid],
+            type: 'regular_high',
+            apiVersion: 2,
+            operation: OP.SET
+        };
+    }
+    else if ('archive' in mod) {
+        patch = {
+            syncAction: {
+                archiveChatAction: {
+                    archived: !!mod.archive,
+                    messageRange: getMessageRange(mod.lastMessages)
+                }
+            },
+            index: ['archive', jid],
+            type: 'regular_low',
+            apiVersion: 3,
+            operation: OP.SET
+        };
+    }
+    else if ('markRead' in mod) {
+        patch = {
+            syncAction: {
+                markChatAsReadAction: {
+                    read: mod.markRead,
+                    messageRange: getMessageRange(mod.lastMessages)
+                }
+            },
+            index: ['markChatAsRead', jid],
+            type: 'regular_low',
+            apiVersion: 3,
+            operation: OP.SET
+        };
+    }
+    else if ('clear' in mod) {
+        if (mod.clear === 'all') {
+            throw new boom_1.Boom('not supported');
+        }
+        else {
+            const key = mod.clear.messages[0];
+            patch = {
+                syncAction: {
+                    deleteMessageForMeAction: {
+                        deleteMedia: false,
+                        messageTimestamp: key.timestamp
+                    }
+                },
+                index: ['deleteMessageForMe', jid, key.id, key.fromMe ? '1' : '0', '0'],
+                type: 'regular_high',
+                apiVersion: 3,
+                operation: OP.SET
+            };
+        }
+    }
+    else if ('pin' in mod) {
+        patch = {
+            syncAction: {
+                pinAction: {
+                    pinned: !!mod.pin
+                }
+            },
+            index: ['pin_v1', jid],
+            type: 'regular_low',
+            apiVersion: 5,
+            operation: OP.SET
+        };
+    }
+    else if ('star' in mod) {
+        const key = mod.star.messages[0];
+        patch = {
+            syncAction: {
+                starAction: {
+                    starred: !!mod.star.star
+                }
+            },
+            index: ['star', jid, key.id, key.fromMe ? '1' : '0', '0'],
+            type: 'regular_low',
+            apiVersion: 2,
+            operation: OP.SET
+        };
+    }
+    else if ('delete' in mod) {
+        patch = {
+            syncAction: {
+                deleteChatAction: {
+                    messageRange: getMessageRange(mod.lastMessages),
+                }
+            },
+            index: ['deleteChat', jid, '1'],
+            type: 'regular_high',
+            apiVersion: 6,
+            operation: OP.SET
+        };
+    }
+    else if ('pushNameSetting' in mod) {
+        patch = {
+            syncAction: {
+                pushNameSetting: {
+                    name: mod.pushNameSetting
+                }
+            },
+            index: ['setting_pushName'],
+            type: 'critical_block',
+            apiVersion: 1,
+            operation: OP.SET,
+        };
+    }
+    else if ('addChatLabel' in mod) {
+        patch = {
+            syncAction: {
+                labelAssociationAction: {
+                    labeled: true,
+                }
+            },
+            index: [LabelAssociation_1.LabelAssociationType.Chat, mod.addChatLabel.labelId, jid],
+            type: 'regular',
+            apiVersion: 3,
+            operation: OP.SET,
+        };
+    }
+    else if ('removeChatLabel' in mod) {
+        patch = {
+            syncAction: {
+                labelAssociationAction: {
+                    labeled: false,
+                }
+            },
+            index: [LabelAssociation_1.LabelAssociationType.Chat, mod.removeChatLabel.labelId, jid],
+            type: 'regular',
+            apiVersion: 3,
+            operation: OP.SET,
+        };
+    }
+    else if ('addMessageLabel' in mod) {
+        patch = {
+            syncAction: {
+                labelAssociationAction: {
+                    labeled: true,
+                }
+            },
+            index: [
+                LabelAssociation_1.LabelAssociationType.Message,
+                mod.addMessageLabel.labelId,
+                jid,
+                mod.addMessageLabel.messageId,
+                '0',
+                '0'
+            ],
+            type: 'regular',
+            apiVersion: 3,
+            operation: OP.SET,
+        };
+    }
+    else if ('removeMessageLabel' in mod) {
+        patch = {
+            syncAction: {
+                labelAssociationAction: {
+                    labeled: false,
+                }
+            },
+            index: [
+                LabelAssociation_1.LabelAssociationType.Message,
+                mod.removeMessageLabel.labelId,
+                jid,
+                mod.removeMessageLabel.messageId,
+                '0',
+                '0'
+            ],
+            type: 'regular',
+            apiVersion: 3,
+            operation: OP.SET,
+        };
+    }
+    else {
+        throw new boom_1.Boom('not supported');
+    }
+    patch.syncAction.timestamp = Date.now();
+    return patch;
+};
+exports.chatModificationToAppPatch = chatModificationToAppPatch;
+const processSyncAction = (syncAction, ev, me, initialSyncOpts, logger) => {
+    var _a, _b, _c, _d;
+    const isInitialSync = !!initialSyncOpts;
+    const accountSettings = initialSyncOpts === null || initialSyncOpts === void 0 ? void 0 : initialSyncOpts.accountSettings;
+    logger === null || logger === void 0 ? void 0 : logger.trace({ syncAction, initialSync: !!initialSyncOpts }, 'processing sync action');
+    const { syncAction: { value: action }, index: [type, id, msgId, fromMe] } = syncAction;
+    if (action === null || action === void 0 ? void 0 : action.muteAction) {
+        ev.emit('chats.update', [
+            {
+                id,
+                muteEndTime: ((_a = action.muteAction) === null || _a === void 0 ? void 0 : _a.muted)
+                    ? (0, generics_1.toNumber)(action.muteAction.muteEndTimestamp)
+                    : null,
+                conditional: getChatUpdateConditional(id, undefined)
+            }
+        ]);
+    }
+    else if ((action === null || action === void 0 ? void 0 : action.archiveChatAction) || type === 'archive' || type === 'unarchive') {
+        // okay so we've to do some annoying computation here
+        // when we're initially syncing the app state
+        // there are a few cases we need to handle
+        // 1. if the account unarchiveChats setting is true
+        //   a. if the chat is archived, and no further messages have been received -- simple, keep archived
+        //   b. if the chat was archived, and the user received messages from the other person afterwards
+        //		then the chat should be marked unarchved --
+        //		we compare the timestamp of latest message from the other person to determine this
+        // 2. if the account unarchiveChats setting is false -- then it doesn't matter,
+        //	it'll always take an app state action to mark in unarchived -- which we'll get anyway
+        const archiveAction = action === null || action === void 0 ? void 0 : action.archiveChatAction;
+        const isArchived = archiveAction
+            ? archiveAction.archived
+            : type === 'archive';
+        // // basically we don't need to fire an "archive" update if the chat is being marked unarchvied
+        // // this only applies for the initial sync
+        // if(isInitialSync && !isArchived) {
+        // 	isArchived = false
+        // }
+        const msgRange = !(accountSettings === null || accountSettings === void 0 ? void 0 : accountSettings.unarchiveChats) ? undefined : archiveAction === null || archiveAction === void 0 ? void 0 : archiveAction.messageRange;
+        // logger?.debug({ chat: id, syncAction }, 'message range archive')
+        ev.emit('chats.update', [{
+                id,
+                archived: isArchived,
+                conditional: getChatUpdateConditional(id, msgRange)
+            }]);
+    }
+    else if (action === null || action === void 0 ? void 0 : action.markChatAsReadAction) {
+        const markReadAction = action.markChatAsReadAction;
+        // basically we don't need to fire an "read" update if the chat is being marked as read
+        // because the chat is read by default
+        // this only applies for the initial sync
+        const isNullUpdate = isInitialSync && markReadAction.read;
+        ev.emit('chats.update', [{
+                id,
+                unreadCount: isNullUpdate ? null : !!(markReadAction === null || markReadAction === void 0 ? void 0 : markReadAction.read) ? 0 : -1,
+                conditional: getChatUpdateConditional(id, markReadAction === null || markReadAction === void 0 ? void 0 : markReadAction.messageRange)
+            }]);
+    }
+    else if ((action === null || action === void 0 ? void 0 : action.deleteMessageForMeAction) || type === 'deleteMessageForMe') {
+        ev.emit('messages.delete', {
+            keys: [
+                {
+                    remoteJid: id,
+                    id: msgId,
+                    fromMe: fromMe === '1'
+                }
+            ]
+        });
+    }
+    else if (action === null || action === void 0 ? void 0 : action.contactAction) {
+        ev.emit('contacts.upsert', [{ id, name: action.contactAction.fullName }]);
+    }
+    else if (action === null || action === void 0 ? void 0 : action.pushNameSetting) {
+        const name = (_b = action === null || action === void 0 ? void 0 : action.pushNameSetting) === null || _b === void 0 ? void 0 : _b.name;
+        if (name && (me === null || me === void 0 ? void 0 : me.name) !== name) {
+            ev.emit('creds.update', { me: { ...me, name } });
+        }
+    }
+    else if (action === null || action === void 0 ? void 0 : action.pinAction) {
+        ev.emit('chats.update', [{
+                id,
+                pinned: ((_c = action.pinAction) === null || _c === void 0 ? void 0 : _c.pinned) ? (0, generics_1.toNumber)(action.timestamp) : null,
+                conditional: getChatUpdateConditional(id, undefined)
+            }]);
+    }
+    else if (action === null || action === void 0 ? void 0 : action.unarchiveChatsSetting) {
+        const unarchiveChats = !!action.unarchiveChatsSetting.unarchiveChats;
+        ev.emit('creds.update', { accountSettings: { unarchiveChats } });
+        logger === null || logger === void 0 ? void 0 : logger.info(`archive setting updated => '${action.unarchiveChatsSetting.unarchiveChats}'`);
+        if (accountSettings) {
+            accountSettings.unarchiveChats = unarchiveChats;
+        }
+    }
+    else if ((action === null || action === void 0 ? void 0 : action.starAction) || type === 'star') {
+        let starred = (_d = action === null || action === void 0 ? void 0 : action.starAction) === null || _d === void 0 ? void 0 : _d.starred;
+        if (typeof starred !== 'boolean') {
+            starred = syncAction.index[syncAction.index.length - 1] === '1';
+        }
+        ev.emit('messages.update', [
+            {
+                key: { remoteJid: id, id: msgId, fromMe: fromMe === '1' },
+                update: { starred }
+            }
+        ]);
+    }
+    else if ((action === null || action === void 0 ? void 0 : action.deleteChatAction) || type === 'deleteChat') {
+        if (!isInitialSync) {
+            ev.emit('chats.delete', [id]);
+        }
+    }
+    else if (action === null || action === void 0 ? void 0 : action.labelEditAction) {
+        const { name, color, deleted, predefinedId } = action.labelEditAction;
+        ev.emit('labels.edit', {
+            id,
+            name: name,
+            color: color,
+            deleted: deleted,
+            predefinedId: predefinedId ? String(predefinedId) : undefined
+        });
+    }
+    else if (action === null || action === void 0 ? void 0 : action.labelAssociationAction) {
+        ev.emit('labels.association', {
+            type: action.labelAssociationAction.labeled
+                ? 'add'
+                : 'remove',
+            association: type === LabelAssociation_1.LabelAssociationType.Chat
+                ? {
+                    type: LabelAssociation_1.LabelAssociationType.Chat,
+                    chatId: syncAction.index[2],
+                    labelId: syncAction.index[1]
+                }
+                : {
+                    type: LabelAssociation_1.LabelAssociationType.Message,
+                    chatId: syncAction.index[2],
+                    messageId: syncAction.index[3],
+                    labelId: syncAction.index[1]
+                }
+        });
+    }
+    else {
+        logger === null || logger === void 0 ? void 0 : logger.debug({ syncAction, id }, 'unprocessable update');
+    }
+    function getChatUpdateConditional(id, msgRange) {
+        return isInitialSync
+            ? (data) => {
+                const chat = data.historySets.chats[id] || data.chatUpserts[id];
+                if (chat) {
+                    return msgRange ? isValidPatchBasedOnMessageRange(chat, msgRange) : true;
+                }
+            }
+            : undefined;
+    }
+    function isValidPatchBasedOnMessageRange(chat, msgRange) {
+        const lastMsgTimestamp = Number((msgRange === null || msgRange === void 0 ? void 0 : msgRange.lastMessageTimestamp) || (msgRange === null || msgRange === void 0 ? void 0 : msgRange.lastSystemMessageTimestamp) || 0);
+        const chatLastMsgTimestamp = Number((chat === null || chat === void 0 ? void 0 : chat.lastMessageRecvTimestamp) || 0);
+        return lastMsgTimestamp >= chatLastMsgTimestamp;
+    }
+};
+exports.processSyncAction = processSyncAction;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/crypto.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/crypto.d.ts
new file mode 100644
index 0000000..a65fed5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/crypto.d.ts
@@ -0,0 +1,41 @@
+/// <reference types="node" />
+import { KeyPair } from '../Types';
+/** prefix version byte to the pub keys, required for some curve crypto functions */
+export declare const generateSignalPubKey: (pubKey: Uint8Array | Buffer) => Uint8Array | Buffer;
+export declare const Curve: {
+    generateKeyPair: () => KeyPair;
+    sharedKey: (privateKey: Uint8Array, publicKey: Uint8Array) => Buffer;
+    sign: (privateKey: Uint8Array, buf: Uint8Array) => any;
+    verify: (pubKey: Uint8Array, message: Uint8Array, signature: Uint8Array) => boolean;
+};
+export declare const signedKeyPair: (identityKeyPair: KeyPair, keyId: number) => {
+    keyPair: KeyPair;
+    signature: any;
+    keyId: number;
+};
+/**
+ * encrypt AES 256 GCM;
+ * where the tag tag is suffixed to the ciphertext
+ * */
+export declare function aesEncryptGCM(plaintext: Uint8Array, key: Uint8Array, iv: Uint8Array, additionalData: Uint8Array): Buffer;
+/**
+ * decrypt AES 256 GCM;
+ * where the auth tag is suffixed to the ciphertext
+ * */
+export declare function aesDecryptGCM(ciphertext: Uint8Array, key: Uint8Array, iv: Uint8Array, additionalData: Uint8Array): Buffer;
+export declare function aesEncryptCTR(plaintext: Uint8Array, key: Uint8Array, iv: Uint8Array): Buffer;
+export declare function aesDecryptCTR(ciphertext: Uint8Array, key: Uint8Array, iv: Uint8Array): Buffer;
+/** decrypt AES 256 CBC; where the IV is prefixed to the buffer */
+export declare function aesDecrypt(buffer: Buffer, key: Buffer): Buffer;
+/** decrypt AES 256 CBC */
+export declare function aesDecryptWithIV(buffer: Buffer, key: Buffer, IV: Buffer): Buffer;
+export declare function aesEncrypt(buffer: Buffer | Uint8Array, key: Buffer): Buffer;
+export declare function aesEncrypWithIV(buffer: Buffer, key: Buffer, IV: Buffer): Buffer;
+export declare function hmacSign(buffer: Buffer | Uint8Array, key: Buffer | Uint8Array, variant?: 'sha256' | 'sha512'): Buffer;
+export declare function sha256(buffer: Buffer): Buffer;
+export declare function md5(buffer: Buffer): Buffer;
+export declare function hkdf(buffer: Uint8Array | Buffer, expandedLength: number, info: {
+    salt?: Buffer;
+    info?: string;
+}): Buffer;
+export declare function derivePairingCodeKey(pairingCode: string, salt: Buffer): Buffer;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/crypto.js b/node_modules/@whiskeysockets/baileys/lib/Utils/crypto.js
new file mode 100644
index 0000000..b5a9e4c
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/crypto.js
@@ -0,0 +1,151 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
+var __importStar = (this && this.__importStar) || function (mod) {
+    if (mod && mod.__esModule) return mod;
+    var result = {};
+    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
+    return result;
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.derivePairingCodeKey = exports.hkdf = exports.md5 = exports.sha256 = exports.hmacSign = exports.aesEncrypWithIV = exports.aesEncrypt = exports.aesDecryptWithIV = exports.aesDecrypt = exports.aesDecryptCTR = exports.aesEncryptCTR = exports.aesDecryptGCM = exports.aesEncryptGCM = exports.signedKeyPair = exports.Curve = exports.generateSignalPubKey = void 0;
+const crypto_1 = require("crypto");
+const futoin_hkdf_1 = __importDefault(require("futoin-hkdf"));
+const libsignal = __importStar(require("libsignal"));
+const Defaults_1 = require("../Defaults");
+/** prefix version byte to the pub keys, required for some curve crypto functions */
+const generateSignalPubKey = (pubKey) => (pubKey.length === 33
+    ? pubKey
+    : Buffer.concat([Defaults_1.KEY_BUNDLE_TYPE, pubKey]));
+exports.generateSignalPubKey = generateSignalPubKey;
+exports.Curve = {
+    generateKeyPair: () => {
+        const { pubKey, privKey } = libsignal.curve.generateKeyPair();
+        return {
+            private: Buffer.from(privKey),
+            // remove version byte
+            public: Buffer.from(pubKey.slice(1))
+        };
+    },
+    sharedKey: (privateKey, publicKey) => {
+        const shared = libsignal.curve.calculateAgreement((0, exports.generateSignalPubKey)(publicKey), privateKey);
+        return Buffer.from(shared);
+    },
+    sign: (privateKey, buf) => (libsignal.curve.calculateSignature(privateKey, buf)),
+    verify: (pubKey, message, signature) => {
+        try {
+            libsignal.curve.verifySignature((0, exports.generateSignalPubKey)(pubKey), message, signature);
+            return true;
+        }
+        catch (error) {
+            return false;
+        }
+    }
+};
+const signedKeyPair = (identityKeyPair, keyId) => {
+    const preKey = exports.Curve.generateKeyPair();
+    const pubKey = (0, exports.generateSignalPubKey)(preKey.public);
+    const signature = exports.Curve.sign(identityKeyPair.private, pubKey);
+    return { keyPair: preKey, signature, keyId };
+};
+exports.signedKeyPair = signedKeyPair;
+const GCM_TAG_LENGTH = 128 >> 3;
+/**
+ * encrypt AES 256 GCM;
+ * where the tag tag is suffixed to the ciphertext
+ * */
+function aesEncryptGCM(plaintext, key, iv, additionalData) {
+    const cipher = (0, crypto_1.createCipheriv)('aes-256-gcm', key, iv);
+    cipher.setAAD(additionalData);
+    return Buffer.concat([cipher.update(plaintext), cipher.final(), cipher.getAuthTag()]);
+}
+exports.aesEncryptGCM = aesEncryptGCM;
+/**
+ * decrypt AES 256 GCM;
+ * where the auth tag is suffixed to the ciphertext
+ * */
+function aesDecryptGCM(ciphertext, key, iv, additionalData) {
+    const decipher = (0, crypto_1.createDecipheriv)('aes-256-gcm', key, iv);
+    // decrypt additional adata
+    const enc = ciphertext.slice(0, ciphertext.length - GCM_TAG_LENGTH);
+    const tag = ciphertext.slice(ciphertext.length - GCM_TAG_LENGTH);
+    // set additional data
+    decipher.setAAD(additionalData);
+    decipher.setAuthTag(tag);
+    return Buffer.concat([decipher.update(enc), decipher.final()]);
+}
+exports.aesDecryptGCM = aesDecryptGCM;
+function aesEncryptCTR(plaintext, key, iv) {
+    const cipher = (0, crypto_1.createCipheriv)('aes-256-ctr', key, iv);
+    return Buffer.concat([cipher.update(plaintext), cipher.final()]);
+}
+exports.aesEncryptCTR = aesEncryptCTR;
+function aesDecryptCTR(ciphertext, key, iv) {
+    const decipher = (0, crypto_1.createDecipheriv)('aes-256-ctr', key, iv);
+    return Buffer.concat([decipher.update(ciphertext), decipher.final()]);
+}
+exports.aesDecryptCTR = aesDecryptCTR;
+/** decrypt AES 256 CBC; where the IV is prefixed to the buffer */
+function aesDecrypt(buffer, key) {
+    return aesDecryptWithIV(buffer.slice(16, buffer.length), key, buffer.slice(0, 16));
+}
+exports.aesDecrypt = aesDecrypt;
+/** decrypt AES 256 CBC */
+function aesDecryptWithIV(buffer, key, IV) {
+    const aes = (0, crypto_1.createDecipheriv)('aes-256-cbc', key, IV);
+    return Buffer.concat([aes.update(buffer), aes.final()]);
+}
+exports.aesDecryptWithIV = aesDecryptWithIV;
+// encrypt AES 256 CBC; where a random IV is prefixed to the buffer
+function aesEncrypt(buffer, key) {
+    const IV = (0, crypto_1.randomBytes)(16);
+    const aes = (0, crypto_1.createCipheriv)('aes-256-cbc', key, IV);
+    return Buffer.concat([IV, aes.update(buffer), aes.final()]); // prefix IV to the buffer
+}
+exports.aesEncrypt = aesEncrypt;
+// encrypt AES 256 CBC with a given IV
+function aesEncrypWithIV(buffer, key, IV) {
+    const aes = (0, crypto_1.createCipheriv)('aes-256-cbc', key, IV);
+    return Buffer.concat([aes.update(buffer), aes.final()]); // prefix IV to the buffer
+}
+exports.aesEncrypWithIV = aesEncrypWithIV;
+// sign HMAC using SHA 256
+function hmacSign(buffer, key, variant = 'sha256') {
+    return (0, crypto_1.createHmac)(variant, key).update(buffer).digest();
+}
+exports.hmacSign = hmacSign;
+function sha256(buffer) {
+    return (0, crypto_1.createHash)('sha256').update(buffer).digest();
+}
+exports.sha256 = sha256;
+function md5(buffer) {
+    return (0, crypto_1.createHash)('md5').update(buffer).digest();
+}
+exports.md5 = md5;
+// HKDF key expansion
+function hkdf(buffer, expandedLength, info) {
+    return (0, futoin_hkdf_1.default)(!Buffer.isBuffer(buffer) ? Buffer.from(buffer) : buffer, expandedLength, info);
+}
+exports.hkdf = hkdf;
+function derivePairingCodeKey(pairingCode, salt) {
+    return (0, crypto_1.pbkdf2Sync)(pairingCode, salt, 2 << 16, 32, 'sha256');
+}
+exports.derivePairingCodeKey = derivePairingCodeKey;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/decode-wa-message.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/decode-wa-message.d.ts
new file mode 100644
index 0000000..e58c8f4
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/decode-wa-message.d.ts
@@ -0,0 +1,19 @@
+import { Logger } from 'pino';
+import { proto } from '../../WAProto';
+import { SignalRepository } from '../Types';
+import { BinaryNode } from '../WABinary';
+/**
+ * Decode the received node as a message.
+ * @note this will only parse the message, not decrypt it
+ */
+export declare function decodeMessageNode(stanza: BinaryNode, meId: string, meLid: string): {
+    fullMessage: proto.IWebMessageInfo;
+    author: string;
+    sender: string;
+};
+export declare const decryptMessageNode: (stanza: BinaryNode, meId: string, meLid: string, repository: SignalRepository, logger: Logger) => {
+    fullMessage: proto.IWebMessageInfo;
+    category: string;
+    author: string;
+    decrypt(): Promise<void>;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/decode-wa-message.js b/node_modules/@whiskeysockets/baileys/lib/Utils/decode-wa-message.js
new file mode 100644
index 0000000..bb02b7c
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/decode-wa-message.js
@@ -0,0 +1,179 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.decryptMessageNode = exports.decodeMessageNode = void 0;
+const boom_1 = require("@hapi/boom");
+const WAProto_1 = require("../../WAProto");
+const WABinary_1 = require("../WABinary");
+const generics_1 = require("./generics");
+const NO_MESSAGE_FOUND_ERROR_TEXT = 'Message absent from node';
+/**
+ * Decode the received node as a message.
+ * @note this will only parse the message, not decrypt it
+ */
+function decodeMessageNode(stanza, meId, meLid) {
+    let msgType;
+    let chatId;
+    let author;
+    const msgId = stanza.attrs.id;
+    const from = stanza.attrs.from;
+    const participant = stanza.attrs.participant;
+    const recipient = stanza.attrs.recipient;
+    const isMe = (jid) => (0, WABinary_1.areJidsSameUser)(jid, meId);
+    const isMeLid = (jid) => (0, WABinary_1.areJidsSameUser)(jid, meLid);
+    if ((0, WABinary_1.isJidUser)(from)) {
+        if (recipient) {
+            if (!isMe(from)) {
+                throw new boom_1.Boom('receipient present, but msg not from me', { data: stanza });
+            }
+            chatId = recipient;
+        }
+        else {
+            chatId = from;
+        }
+        msgType = 'chat';
+        author = from;
+    }
+    else if ((0, WABinary_1.isLidUser)(from)) {
+        if (recipient) {
+            if (!isMeLid(from)) {
+                throw new boom_1.Boom('receipient present, but msg not from me', { data: stanza });
+            }
+            chatId = recipient;
+        }
+        else {
+            chatId = from;
+        }
+        msgType = 'chat';
+        author = from;
+    }
+    else if ((0, WABinary_1.isJidGroup)(from)) {
+        if (!participant) {
+            throw new boom_1.Boom('No participant in group message');
+        }
+        msgType = 'group';
+        author = participant;
+        chatId = from;
+    }
+    else if ((0, WABinary_1.isJidBroadcast)(from)) {
+        if (!participant) {
+            throw new boom_1.Boom('No participant in group message');
+        }
+        const isParticipantMe = isMe(participant);
+        if ((0, WABinary_1.isJidStatusBroadcast)(from)) {
+            msgType = isParticipantMe ? 'direct_peer_status' : 'other_status';
+        }
+        else {
+            msgType = isParticipantMe ? 'peer_broadcast' : 'other_broadcast';
+        }
+        chatId = from;
+        author = participant;
+    }
+    else {
+        throw new boom_1.Boom('Unknown message type', { data: stanza });
+    }
+    const fromMe = ((0, WABinary_1.isLidUser)(from) ? isMeLid : isMe)(stanza.attrs.participant || stanza.attrs.from);
+    const pushname = stanza.attrs.notify;
+    const key = {
+        remoteJid: chatId,
+        fromMe,
+        id: msgId,
+        participant
+    };
+    const fullMessage = {
+        key,
+        messageTimestamp: +stanza.attrs.t,
+        pushName: pushname,
+        broadcast: (0, WABinary_1.isJidBroadcast)(from)
+    };
+    if (key.fromMe) {
+        fullMessage.status = WAProto_1.proto.WebMessageInfo.Status.SERVER_ACK;
+    }
+    return {
+        fullMessage,
+        author,
+        sender: msgType === 'chat' ? author : chatId
+    };
+}
+exports.decodeMessageNode = decodeMessageNode;
+const decryptMessageNode = (stanza, meId, meLid, repository, logger) => {
+    const { fullMessage, author, sender } = decodeMessageNode(stanza, meId, meLid);
+    return {
+        fullMessage,
+        category: stanza.attrs.category,
+        author,
+        async decrypt() {
+            var _a;
+            let decryptables = 0;
+            if (Array.isArray(stanza.content)) {
+                for (const { tag, attrs, content } of stanza.content) {
+                    if (tag === 'verified_name' && content instanceof Uint8Array) {
+                        const cert = WAProto_1.proto.VerifiedNameCertificate.decode(content);
+                        const details = WAProto_1.proto.VerifiedNameCertificate.Details.decode(cert.details);
+                        fullMessage.verifiedBizName = details.verifiedName;
+                    }
+                    if (tag !== 'enc') {
+                        continue;
+                    }
+                    if (!(content instanceof Uint8Array)) {
+                        continue;
+                    }
+                    decryptables += 1;
+                    let msgBuffer;
+                    try {
+                        const e2eType = attrs.type;
+                        switch (e2eType) {
+                            case 'skmsg':
+                                msgBuffer = await repository.decryptGroupMessage({
+                                    group: sender,
+                                    authorJid: author,
+                                    msg: content
+                                });
+                                break;
+                            case 'pkmsg':
+                            case 'msg':
+                                const user = (0, WABinary_1.isJidUser)(sender) ? sender : author;
+                                msgBuffer = await repository.decryptMessage({
+                                    jid: user,
+                                    type: e2eType,
+                                    ciphertext: content
+                                });
+                                break;
+                            default:
+                                throw new Error(`Unknown e2e type: ${e2eType}`);
+                        }
+                        let msg = WAProto_1.proto.Message.decode((0, generics_1.unpadRandomMax16)(msgBuffer));
+                        msg = ((_a = msg.deviceSentMessage) === null || _a === void 0 ? void 0 : _a.message) || msg;
+                        if (msg.senderKeyDistributionMessage) {
+                            try {
+                                await repository.processSenderKeyDistributionMessage({
+                                    authorJid: author,
+                                    item: msg.senderKeyDistributionMessage
+                                });
+                            }
+                            catch (err) {
+                                logger.error({ key: fullMessage.key, err }, 'failed to decrypt message');
+                            }
+                        }
+                        if (fullMessage.message) {
+                            Object.assign(fullMessage.message, msg);
+                        }
+                        else {
+                            fullMessage.message = msg;
+                        }
+                    }
+                    catch (err) {
+                        logger.error({ key: fullMessage.key, err }, 'failed to decrypt message');
+                        fullMessage.messageStubType = WAProto_1.proto.WebMessageInfo.StubType.CIPHERTEXT;
+                        fullMessage.messageStubParameters = [err.message];
+                    }
+                }
+            }
+            // if nothing was found to decrypt
+            if (!decryptables) {
+                fullMessage.messageStubType = WAProto_1.proto.WebMessageInfo.StubType.CIPHERTEXT;
+                fullMessage.messageStubParameters = [NO_MESSAGE_FOUND_ERROR_TEXT, JSON.stringify(stanza, generics_1.BufferJSON.replacer)];
+            }
+        }
+    };
+};
+exports.decryptMessageNode = decryptMessageNode;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/event-buffer.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/event-buffer.d.ts
new file mode 100644
index 0000000..04918d6
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/event-buffer.d.ts
@@ -0,0 +1,35 @@
+import { Logger } from 'pino';
+import { BaileysEventEmitter, BaileysEventMap } from '../Types';
+/**
+ * A map that contains a list of all events that have been triggered
+ *
+ * Note, this can contain different type of events
+ * this can make processing events extremely efficient -- since everything
+ * can be done in a single transaction
+ */
+type BaileysEventData = Partial<BaileysEventMap>;
+type BaileysBufferableEventEmitter = BaileysEventEmitter & {
+    /** Use to process events in a batch */
+    process(handler: (events: BaileysEventData) => void | Promise<void>): (() => void);
+    /**
+     * starts buffering events, call flush() to release them
+     * */
+    buffer(): void;
+    /** buffers all events till the promise completes */
+    createBufferedFunction<A extends any[], T>(work: (...args: A) => Promise<T>): ((...args: A) => Promise<T>);
+    /**
+     * flushes all buffered events
+     * @param force if true, will flush all data regardless of any pending buffers
+     * @returns returns true if the flush actually happened, otherwise false
+     */
+    flush(force?: boolean): boolean;
+    /** is there an ongoing buffer */
+    isBuffering(): boolean;
+};
+/**
+ * The event buffer logically consolidates different events into a single event
+ * making the data processing more efficient.
+ * @param ev the baileys event emitter
+ */
+export declare const makeEventBuffer: (logger: Logger) => BaileysBufferableEventEmitter;
+export {};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/event-buffer.js b/node_modules/@whiskeysockets/baileys/lib/Utils/event-buffer.js
new file mode 100644
index 0000000..c21c2a1
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/event-buffer.js
@@ -0,0 +1,514 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.makeEventBuffer = void 0;
+const events_1 = __importDefault(require("events"));
+const Types_1 = require("../Types");
+const generics_1 = require("./generics");
+const messages_1 = require("./messages");
+const process_message_1 = require("./process-message");
+const BUFFERABLE_EVENT = [
+    'messaging-history.set',
+    'chats.upsert',
+    'chats.update',
+    'chats.delete',
+    'contacts.upsert',
+    'contacts.update',
+    'messages.upsert',
+    'messages.update',
+    'messages.delete',
+    'messages.reaction',
+    'message-receipt.update',
+    'groups.update',
+];
+const BUFFERABLE_EVENT_SET = new Set(BUFFERABLE_EVENT);
+/**
+ * The event buffer logically consolidates different events into a single event
+ * making the data processing more efficient.
+ * @param ev the baileys event emitter
+ */
+const makeEventBuffer = (logger) => {
+    const ev = new events_1.default();
+    const historyCache = new Set();
+    let data = makeBufferData();
+    let buffersInProgress = 0;
+    // take the generic event and fire it as a baileys event
+    ev.on('event', (map) => {
+        for (const event in map) {
+            ev.emit(event, map[event]);
+        }
+    });
+    function buffer() {
+        buffersInProgress += 1;
+    }
+    function flush(force = false) {
+        // no buffer going on
+        if (!buffersInProgress) {
+            return false;
+        }
+        if (!force) {
+            // reduce the number of buffers in progress
+            buffersInProgress -= 1;
+            // if there are still some buffers going on
+            // then we don't flush now
+            if (buffersInProgress) {
+                return false;
+            }
+        }
+        const newData = makeBufferData();
+        const chatUpdates = Object.values(data.chatUpdates);
+        // gather the remaining conditional events so we re-queue them
+        let conditionalChatUpdatesLeft = 0;
+        for (const update of chatUpdates) {
+            if (update.conditional) {
+                conditionalChatUpdatesLeft += 1;
+                newData.chatUpdates[update.id] = update;
+                delete data.chatUpdates[update.id];
+            }
+        }
+        const consolidatedData = consolidateEvents(data);
+        if (Object.keys(consolidatedData).length) {
+            ev.emit('event', consolidatedData);
+        }
+        data = newData;
+        logger.trace({ conditionalChatUpdatesLeft }, 'released buffered events');
+        return true;
+    }
+    return {
+        process(handler) {
+            const listener = (map) => {
+                handler(map);
+            };
+            ev.on('event', listener);
+            return () => {
+                ev.off('event', listener);
+            };
+        },
+        emit(event, evData) {
+            if (buffersInProgress && BUFFERABLE_EVENT_SET.has(event)) {
+                append(data, historyCache, event, evData, logger);
+                return true;
+            }
+            return ev.emit('event', { [event]: evData });
+        },
+        isBuffering() {
+            return buffersInProgress > 0;
+        },
+        buffer,
+        flush,
+        createBufferedFunction(work) {
+            return async (...args) => {
+                buffer();
+                try {
+                    const result = await work(...args);
+                    return result;
+                }
+                finally {
+                    flush();
+                }
+            };
+        },
+        on: (...args) => ev.on(...args),
+        off: (...args) => ev.off(...args),
+        removeAllListeners: (...args) => ev.removeAllListeners(...args),
+    };
+};
+exports.makeEventBuffer = makeEventBuffer;
+const makeBufferData = () => {
+    return {
+        historySets: {
+            chats: {},
+            messages: {},
+            contacts: {},
+            isLatest: false,
+            empty: true
+        },
+        chatUpserts: {},
+        chatUpdates: {},
+        chatDeletes: new Set(),
+        contactUpserts: {},
+        contactUpdates: {},
+        messageUpserts: {},
+        messageUpdates: {},
+        messageReactions: {},
+        messageDeletes: {},
+        messageReceipts: {},
+        groupUpdates: {}
+    };
+};
+function append(data, historyCache, event, eventData, logger) {
+    var _a, _b, _c;
+    switch (event) {
+        case 'messaging-history.set':
+            for (const chat of eventData.chats) {
+                const existingChat = data.historySets.chats[chat.id];
+                if (existingChat) {
+                    existingChat.endOfHistoryTransferType = chat.endOfHistoryTransferType;
+                }
+                if (!existingChat && !historyCache.has(chat.id)) {
+                    data.historySets.chats[chat.id] = chat;
+                    historyCache.add(chat.id);
+                    absorbingChatUpdate(chat);
+                }
+            }
+            for (const contact of eventData.contacts) {
+                const existingContact = data.historySets.contacts[contact.id];
+                if (existingContact) {
+                    Object.assign(existingContact, (0, generics_1.trimUndefined)(contact));
+                }
+                else {
+                    const historyContactId = `c:${contact.id}`;
+                    const hasAnyName = contact.notify || contact.name || contact.verifiedName;
+                    if (!historyCache.has(historyContactId) || hasAnyName) {
+                        data.historySets.contacts[contact.id] = contact;
+                        historyCache.add(historyContactId);
+                    }
+                }
+            }
+            for (const message of eventData.messages) {
+                const key = stringifyMessageKey(message.key);
+                const existingMsg = data.historySets.messages[key];
+                if (!existingMsg && !historyCache.has(key)) {
+                    data.historySets.messages[key] = message;
+                    historyCache.add(key);
+                }
+            }
+            data.historySets.empty = false;
+            data.historySets.isLatest = eventData.isLatest || data.historySets.isLatest;
+            break;
+        case 'chats.upsert':
+            for (const chat of eventData) {
+                let upsert = data.chatUpserts[chat.id];
+                if (!upsert) {
+                    upsert = data.historySets[chat.id];
+                    if (upsert) {
+                        logger.debug({ chatId: chat.id }, 'absorbed chat upsert in chat set');
+                    }
+                }
+                if (upsert) {
+                    upsert = concatChats(upsert, chat);
+                }
+                else {
+                    upsert = chat;
+                    data.chatUpserts[chat.id] = upsert;
+                }
+                absorbingChatUpdate(upsert);
+                if (data.chatDeletes.has(chat.id)) {
+                    data.chatDeletes.delete(chat.id);
+                }
+            }
+            break;
+        case 'chats.update':
+            for (const update of eventData) {
+                const chatId = update.id;
+                const conditionMatches = update.conditional ? update.conditional(data) : true;
+                if (conditionMatches) {
+                    delete update.conditional;
+                    // if there is an existing upsert, merge the update into it
+                    const upsert = data.historySets.chats[chatId] || data.chatUpserts[chatId];
+                    if (upsert) {
+                        concatChats(upsert, update);
+                    }
+                    else {
+                        // merge the update into the existing update
+                        const chatUpdate = data.chatUpdates[chatId] || {};
+                        data.chatUpdates[chatId] = concatChats(chatUpdate, update);
+                    }
+                }
+                else if (conditionMatches === undefined) {
+                    // condition yet to be fulfilled
+                    data.chatUpdates[chatId] = update;
+                }
+                // otherwise -- condition not met, update is invalid
+                // if the chat has been updated
+                // ignore any existing chat delete
+                if (data.chatDeletes.has(chatId)) {
+                    data.chatDeletes.delete(chatId);
+                }
+            }
+            break;
+        case 'chats.delete':
+            for (const chatId of eventData) {
+                if (!data.chatDeletes.has(chatId)) {
+                    data.chatDeletes.add(chatId);
+                }
+                // remove any prior updates & upserts
+                if (data.chatUpdates[chatId]) {
+                    delete data.chatUpdates[chatId];
+                }
+                if (data.chatUpserts[chatId]) {
+                    delete data.chatUpserts[chatId];
+                }
+                if (data.historySets.chats[chatId]) {
+                    delete data.historySets.chats[chatId];
+                }
+            }
+            break;
+        case 'contacts.upsert':
+            for (const contact of eventData) {
+                let upsert = data.contactUpserts[contact.id];
+                if (!upsert) {
+                    upsert = data.historySets.contacts[contact.id];
+                    if (upsert) {
+                        logger.debug({ contactId: contact.id }, 'absorbed contact upsert in contact set');
+                    }
+                }
+                if (upsert) {
+                    upsert = Object.assign(upsert, (0, generics_1.trimUndefined)(contact));
+                }
+                else {
+                    upsert = contact;
+                    data.contactUpserts[contact.id] = upsert;
+                }
+                if (data.contactUpdates[contact.id]) {
+                    upsert = Object.assign(data.contactUpdates[contact.id], (0, generics_1.trimUndefined)(contact));
+                    delete data.contactUpdates[contact.id];
+                }
+            }
+            break;
+        case 'contacts.update':
+            const contactUpdates = eventData;
+            for (const update of contactUpdates) {
+                const id = update.id;
+                // merge into prior upsert
+                const upsert = data.historySets.contacts[id] || data.contactUpserts[id];
+                if (upsert) {
+                    Object.assign(upsert, update);
+                }
+                else {
+                    // merge into prior update
+                    const contactUpdate = data.contactUpdates[id] || {};
+                    data.contactUpdates[id] = Object.assign(contactUpdate, update);
+                }
+            }
+            break;
+        case 'messages.upsert':
+            const { messages, type } = eventData;
+            for (const message of messages) {
+                const key = stringifyMessageKey(message.key);
+                let existing = (_a = data.messageUpserts[key]) === null || _a === void 0 ? void 0 : _a.message;
+                if (!existing) {
+                    existing = data.historySets.messages[key];
+                    if (existing) {
+                        logger.debug({ messageId: key }, 'absorbed message upsert in message set');
+                    }
+                }
+                if (existing) {
+                    message.messageTimestamp = existing.messageTimestamp;
+                }
+                if (data.messageUpdates[key]) {
+                    logger.debug('absorbed prior message update in message upsert');
+                    Object.assign(message, data.messageUpdates[key].update);
+                    delete data.messageUpdates[key];
+                }
+                if (data.historySets.messages[key]) {
+                    data.historySets.messages[key] = message;
+                }
+                else {
+                    data.messageUpserts[key] = {
+                        message,
+                        type: type === 'notify' || ((_b = data.messageUpserts[key]) === null || _b === void 0 ? void 0 : _b.type) === 'notify'
+                            ? 'notify'
+                            : type
+                    };
+                }
+            }
+            break;
+        case 'messages.update':
+            const msgUpdates = eventData;
+            for (const { key, update } of msgUpdates) {
+                const keyStr = stringifyMessageKey(key);
+                const existing = data.historySets.messages[keyStr] || ((_c = data.messageUpserts[keyStr]) === null || _c === void 0 ? void 0 : _c.message);
+                if (existing) {
+                    Object.assign(existing, update);
+                    // if the message was received & read by us
+                    // the chat counter must have been incremented
+                    // so we need to decrement it
+                    if (update.status === Types_1.WAMessageStatus.READ && !key.fromMe) {
+                        decrementChatReadCounterIfMsgDidUnread(existing);
+                    }
+                }
+                else {
+                    const msgUpdate = data.messageUpdates[keyStr] || { key, update: {} };
+                    Object.assign(msgUpdate.update, update);
+                    data.messageUpdates[keyStr] = msgUpdate;
+                }
+            }
+            break;
+        case 'messages.delete':
+            const deleteData = eventData;
+            if ('keys' in deleteData) {
+                const { keys } = deleteData;
+                for (const key of keys) {
+                    const keyStr = stringifyMessageKey(key);
+                    if (!data.messageDeletes[keyStr]) {
+                        data.messageDeletes[keyStr] = key;
+                    }
+                    if (data.messageUpserts[keyStr]) {
+                        delete data.messageUpserts[keyStr];
+                    }
+                    if (data.messageUpdates[keyStr]) {
+                        delete data.messageUpdates[keyStr];
+                    }
+                }
+            }
+            else {
+                // TODO: add support
+            }
+            break;
+        case 'messages.reaction':
+            const reactions = eventData;
+            for (const { key, reaction } of reactions) {
+                const keyStr = stringifyMessageKey(key);
+                const existing = data.messageUpserts[keyStr];
+                if (existing) {
+                    (0, messages_1.updateMessageWithReaction)(existing.message, reaction);
+                }
+                else {
+                    data.messageReactions[keyStr] = data.messageReactions[keyStr]
+                        || { key, reactions: [] };
+                    (0, messages_1.updateMessageWithReaction)(data.messageReactions[keyStr], reaction);
+                }
+            }
+            break;
+        case 'message-receipt.update':
+            const receipts = eventData;
+            for (const { key, receipt } of receipts) {
+                const keyStr = stringifyMessageKey(key);
+                const existing = data.messageUpserts[keyStr];
+                if (existing) {
+                    (0, messages_1.updateMessageWithReceipt)(existing.message, receipt);
+                }
+                else {
+                    data.messageReceipts[keyStr] = data.messageReceipts[keyStr]
+                        || { key, userReceipt: [] };
+                    (0, messages_1.updateMessageWithReceipt)(data.messageReceipts[keyStr], receipt);
+                }
+            }
+            break;
+        case 'groups.update':
+            const groupUpdates = eventData;
+            for (const update of groupUpdates) {
+                const id = update.id;
+                const groupUpdate = data.groupUpdates[id] || {};
+                if (!data.groupUpdates[id]) {
+                    data.groupUpdates[id] = Object.assign(groupUpdate, update);
+                }
+            }
+            break;
+        default:
+            throw new Error(`"${event}" cannot be buffered`);
+    }
+    function absorbingChatUpdate(existing) {
+        const chatId = existing.id;
+        const update = data.chatUpdates[chatId];
+        if (update) {
+            const conditionMatches = update.conditional ? update.conditional(data) : true;
+            if (conditionMatches) {
+                delete update.conditional;
+                logger.debug({ chatId }, 'absorbed chat update in existing chat');
+                Object.assign(existing, concatChats(update, existing));
+                delete data.chatUpdates[chatId];
+            }
+            else if (conditionMatches === false) {
+                logger.debug({ chatId }, 'chat update condition fail, removing');
+                delete data.chatUpdates[chatId];
+            }
+        }
+    }
+    function decrementChatReadCounterIfMsgDidUnread(message) {
+        // decrement chat unread counter
+        // if the message has already been marked read by us
+        const chatId = message.key.remoteJid;
+        const chat = data.chatUpdates[chatId] || data.chatUpserts[chatId];
+        if ((0, process_message_1.isRealMessage)(message, '')
+            && (0, process_message_1.shouldIncrementChatUnread)(message)
+            && typeof (chat === null || chat === void 0 ? void 0 : chat.unreadCount) === 'number'
+            && chat.unreadCount > 0) {
+            logger.debug({ chatId: chat.id }, 'decrementing chat counter');
+            chat.unreadCount -= 1;
+            if (chat.unreadCount === 0) {
+                delete chat.unreadCount;
+            }
+        }
+    }
+}
+function consolidateEvents(data) {
+    const map = {};
+    if (!data.historySets.empty) {
+        map['messaging-history.set'] = {
+            chats: Object.values(data.historySets.chats),
+            messages: Object.values(data.historySets.messages),
+            contacts: Object.values(data.historySets.contacts),
+            isLatest: data.historySets.isLatest
+        };
+    }
+    const chatUpsertList = Object.values(data.chatUpserts);
+    if (chatUpsertList.length) {
+        map['chats.upsert'] = chatUpsertList;
+    }
+    const chatUpdateList = Object.values(data.chatUpdates);
+    if (chatUpdateList.length) {
+        map['chats.update'] = chatUpdateList;
+    }
+    const chatDeleteList = Array.from(data.chatDeletes);
+    if (chatDeleteList.length) {
+        map['chats.delete'] = chatDeleteList;
+    }
+    const messageUpsertList = Object.values(data.messageUpserts);
+    if (messageUpsertList.length) {
+        const type = messageUpsertList[0].type;
+        map['messages.upsert'] = {
+            messages: messageUpsertList.map(m => m.message),
+            type
+        };
+    }
+    const messageUpdateList = Object.values(data.messageUpdates);
+    if (messageUpdateList.length) {
+        map['messages.update'] = messageUpdateList;
+    }
+    const messageDeleteList = Object.values(data.messageDeletes);
+    if (messageDeleteList.length) {
+        map['messages.delete'] = { keys: messageDeleteList };
+    }
+    const messageReactionList = Object.values(data.messageReactions).flatMap(({ key, reactions }) => reactions.flatMap(reaction => ({ key, reaction })));
+    if (messageReactionList.length) {
+        map['messages.reaction'] = messageReactionList;
+    }
+    const messageReceiptList = Object.values(data.messageReceipts).flatMap(({ key, userReceipt }) => userReceipt.flatMap(receipt => ({ key, receipt })));
+    if (messageReceiptList.length) {
+        map['message-receipt.update'] = messageReceiptList;
+    }
+    const contactUpsertList = Object.values(data.contactUpserts);
+    if (contactUpsertList.length) {
+        map['contacts.upsert'] = contactUpsertList;
+    }
+    const contactUpdateList = Object.values(data.contactUpdates);
+    if (contactUpdateList.length) {
+        map['contacts.update'] = contactUpdateList;
+    }
+    const groupUpdateList = Object.values(data.groupUpdates);
+    if (groupUpdateList.length) {
+        map['groups.update'] = groupUpdateList;
+    }
+    return map;
+}
+function concatChats(a, b) {
+    if (b.unreadCount === null) {
+        // neutralize unread counter
+        if (a.unreadCount < 0) {
+            a.unreadCount = undefined;
+            b.unreadCount = undefined;
+        }
+    }
+    if (typeof a.unreadCount === 'number' && typeof b.unreadCount === 'number') {
+        b = { ...b };
+        if (b.unreadCount >= 0) {
+            b.unreadCount = Math.max(b.unreadCount, 0) + Math.max(a.unreadCount, 0);
+        }
+    }
+    return Object.assign(a, b);
+}
+const stringifyMessageKey = (key) => `${key.remoteJid},${key.id},${key.fromMe ? '1' : '0'}`;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/generics.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/generics.d.ts
new file mode 100644
index 0000000..3803aeb
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/generics.d.ts
@@ -0,0 +1,94 @@
+/// <reference types="node" />
+import { AxiosRequestConfig } from 'axios';
+import { Logger } from 'pino';
+import { proto } from '../../WAProto';
+import { BaileysEventEmitter, BaileysEventMap, WACallUpdateType, WAVersion } from '../Types';
+import { BinaryNode } from '../WABinary';
+export declare const Browsers: {
+    ubuntu: (browser: any) => [string, string, string];
+    macOS: (browser: any) => [string, string, string];
+    baileys: (browser: any) => [string, string, string];
+    windows: (browser: any) => [string, string, string];
+    /** The appropriate browser based on your OS & release */
+    appropriate: (browser: any) => [string, string, string];
+};
+export declare const BufferJSON: {
+    replacer: (k: any, value: any) => any;
+    reviver: (_: any, value: any) => any;
+};
+export declare const getKeyAuthor: (key: proto.IMessageKey | undefined | null, meId?: string) => string;
+export declare const writeRandomPadMax16: (msg: Uint8Array) => Buffer;
+export declare const unpadRandomMax16: (e: Uint8Array | Buffer) => Uint8Array;
+export declare const encodeWAMessage: (message: proto.IMessage) => Buffer;
+export declare const generateRegistrationId: () => number;
+export declare const encodeBigEndian: (e: number, t?: number) => Uint8Array;
+export declare const toNumber: (t: Long | number | null | undefined) => number;
+/** unix timestamp of a date in seconds */
+export declare const unixTimestampSeconds: (date?: Date) => number;
+export type DebouncedTimeout = ReturnType<typeof debouncedTimeout>;
+export declare const debouncedTimeout: (intervalMs?: number, task?: () => void) => {
+    start: (newIntervalMs?: number, newTask?: () => void) => void;
+    cancel: () => void;
+    setTask: (newTask: () => void) => () => void;
+    setInterval: (newInterval: number) => number;
+};
+export declare const delay: (ms: number) => Promise<void>;
+export declare const delayCancellable: (ms: number) => {
+    delay: Promise<void>;
+    cancel: () => void;
+};
+export declare function promiseTimeout<T>(ms: number | undefined, promise: (resolve: (v: T) => void, reject: (error: any) => void) => void): Promise<T>;
+export declare const generateMessageID: () => string;
+export declare function bindWaitForEvent<T extends keyof BaileysEventMap>(ev: BaileysEventEmitter, event: T): (check: (u: BaileysEventMap[T]) => boolean | undefined, timeoutMs?: number) => Promise<void>;
+export declare const bindWaitForConnectionUpdate: (ev: BaileysEventEmitter) => (check: (u: Partial<import("../Types").ConnectionState>) => boolean | undefined, timeoutMs?: number) => Promise<void>;
+export declare const printQRIfNecessaryListener: (ev: BaileysEventEmitter, logger: Logger) => void;
+/**
+ * utility that fetches latest baileys version from the master branch.
+ * Use to ensure your WA connection is always on the latest version
+ */
+export declare const fetchLatestBaileysVersion: (options?: AxiosRequestConfig<any>) => Promise<{
+    version: WAVersion;
+    isLatest: boolean;
+    error?: undefined;
+} | {
+    version: WAVersion;
+    isLatest: boolean;
+    error: any;
+}>;
+/**
+ * A utility that fetches the latest web version of whatsapp.
+ * Use to ensure your WA connection is always on the latest version
+ */
+export declare const fetchLatestWaWebVersion: (options: AxiosRequestConfig<any>) => Promise<{
+    version: WAVersion;
+    isLatest: boolean;
+    error?: undefined;
+} | {
+    version: WAVersion;
+    isLatest: boolean;
+    error: any;
+}>;
+/** unique message tag prefix for MD clients */
+export declare const generateMdTagPrefix: () => string;
+/**
+ * Given a type of receipt, returns what the new status of the message should be
+ * @param type type from receipt
+ */
+export declare const getStatusFromReceiptType: (type: string | undefined) => proto.WebMessageInfo.Status;
+/**
+ * Stream errors generally provide a reason, map that to a baileys DisconnectReason
+ * @param reason the string reason given, eg. "conflict"
+ */
+export declare const getErrorCodeFromStreamError: (node: BinaryNode) => {
+    reason: string;
+    statusCode: number;
+};
+export declare const getCallStatusFromNode: ({ tag, attrs }: BinaryNode) => WACallUpdateType;
+export declare const getCodeFromWSError: (error: Error) => number;
+/**
+ * Is the given platform WA business
+ * @param platform AuthenticationCreds.platform
+ */
+export declare const isWABusinessPlatform: (platform: string) => boolean;
+export declare function trimUndefined(obj: any): any;
+export declare function bytesToCrockford(buffer: Buffer): string;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/generics.js b/node_modules/@whiskeysockets/baileys/lib/Utils/generics.js
new file mode 100644
index 0000000..28c97ad
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/generics.js
@@ -0,0 +1,367 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.bytesToCrockford = exports.trimUndefined = exports.isWABusinessPlatform = exports.getCodeFromWSError = exports.getCallStatusFromNode = exports.getErrorCodeFromStreamError = exports.getStatusFromReceiptType = exports.generateMdTagPrefix = exports.fetchLatestWaWebVersion = exports.fetchLatestBaileysVersion = exports.printQRIfNecessaryListener = exports.bindWaitForConnectionUpdate = exports.bindWaitForEvent = exports.generateMessageID = exports.promiseTimeout = exports.delayCancellable = exports.delay = exports.debouncedTimeout = exports.unixTimestampSeconds = exports.toNumber = exports.encodeBigEndian = exports.generateRegistrationId = exports.encodeWAMessage = exports.unpadRandomMax16 = exports.writeRandomPadMax16 = exports.getKeyAuthor = exports.BufferJSON = exports.Browsers = void 0;
+const boom_1 = require("@hapi/boom");
+const axios_1 = __importDefault(require("axios"));
+const crypto_1 = require("crypto");
+const os_1 = require("os");
+const WAProto_1 = require("../../WAProto");
+const baileys_version_json_1 = require("../Defaults/baileys-version.json");
+const Types_1 = require("../Types");
+const WABinary_1 = require("../WABinary");
+const PLATFORM_MAP = {
+    'aix': 'AIX',
+    'darwin': 'Mac OS',
+    'win32': 'Windows',
+    'android': 'Android'
+};
+exports.Browsers = {
+    ubuntu: browser => ['Ubuntu', browser, '20.0.04'],
+    macOS: browser => ['Mac OS', browser, '10.15.7'],
+    baileys: browser => ['Baileys', browser, '4.0.0'],
+    windows: browser => ['Windows', browser, '10.0.22621'],
+    /** The appropriate browser based on your OS & release */
+    appropriate: browser => [PLATFORM_MAP[(0, os_1.platform)()] || 'Ubuntu', browser, (0, os_1.release)()]
+};
+exports.BufferJSON = {
+    replacer: (k, value) => {
+        if (Buffer.isBuffer(value) || value instanceof Uint8Array || (value === null || value === void 0 ? void 0 : value.type) === 'Buffer') {
+            return { type: 'Buffer', data: Buffer.from((value === null || value === void 0 ? void 0 : value.data) || value).toString('base64') };
+        }
+        return value;
+    },
+    reviver: (_, value) => {
+        if (typeof value === 'object' && !!value && (value.buffer === true || value.type === 'Buffer')) {
+            const val = value.data || value.value;
+            return typeof val === 'string' ? Buffer.from(val, 'base64') : Buffer.from(val || []);
+        }
+        return value;
+    }
+};
+const getKeyAuthor = (key, meId = 'me') => (((key === null || key === void 0 ? void 0 : key.fromMe) ? meId : (key === null || key === void 0 ? void 0 : key.participant) || (key === null || key === void 0 ? void 0 : key.remoteJid)) || '');
+exports.getKeyAuthor = getKeyAuthor;
+const writeRandomPadMax16 = (msg) => {
+    const pad = (0, crypto_1.randomBytes)(1);
+    pad[0] &= 0xf;
+    if (!pad[0]) {
+        pad[0] = 0xf;
+    }
+    return Buffer.concat([msg, Buffer.alloc(pad[0], pad[0])]);
+};
+exports.writeRandomPadMax16 = writeRandomPadMax16;
+const unpadRandomMax16 = (e) => {
+    const t = new Uint8Array(e);
+    if (0 === t.length) {
+        throw new Error('unpadPkcs7 given empty bytes');
+    }
+    var r = t[t.length - 1];
+    if (r > t.length) {
+        throw new Error(`unpad given ${t.length} bytes, but pad is ${r}`);
+    }
+    return new Uint8Array(t.buffer, t.byteOffset, t.length - r);
+};
+exports.unpadRandomMax16 = unpadRandomMax16;
+const encodeWAMessage = (message) => ((0, exports.writeRandomPadMax16)(WAProto_1.proto.Message.encode(message).finish()));
+exports.encodeWAMessage = encodeWAMessage;
+const generateRegistrationId = () => {
+    return Uint16Array.from((0, crypto_1.randomBytes)(2))[0] & 16383;
+};
+exports.generateRegistrationId = generateRegistrationId;
+const encodeBigEndian = (e, t = 4) => {
+    let r = e;
+    const a = new Uint8Array(t);
+    for (let i = t - 1; i >= 0; i--) {
+        a[i] = 255 & r;
+        r >>>= 8;
+    }
+    return a;
+};
+exports.encodeBigEndian = encodeBigEndian;
+const toNumber = (t) => ((typeof t === 'object' && t) ? ('toNumber' in t ? t.toNumber() : t.low) : t);
+exports.toNumber = toNumber;
+/** unix timestamp of a date in seconds */
+const unixTimestampSeconds = (date = new Date()) => Math.floor(date.getTime() / 1000);
+exports.unixTimestampSeconds = unixTimestampSeconds;
+const debouncedTimeout = (intervalMs = 1000, task) => {
+    let timeout;
+    return {
+        start: (newIntervalMs, newTask) => {
+            task = newTask || task;
+            intervalMs = newIntervalMs || intervalMs;
+            timeout && clearTimeout(timeout);
+            timeout = setTimeout(() => task === null || task === void 0 ? void 0 : task(), intervalMs);
+        },
+        cancel: () => {
+            timeout && clearTimeout(timeout);
+            timeout = undefined;
+        },
+        setTask: (newTask) => task = newTask,
+        setInterval: (newInterval) => intervalMs = newInterval
+    };
+};
+exports.debouncedTimeout = debouncedTimeout;
+const delay = (ms) => (0, exports.delayCancellable)(ms).delay;
+exports.delay = delay;
+const delayCancellable = (ms) => {
+    const stack = new Error().stack;
+    let timeout;
+    let reject;
+    const delay = new Promise((resolve, _reject) => {
+        timeout = setTimeout(resolve, ms);
+        reject = _reject;
+    });
+    const cancel = () => {
+        clearTimeout(timeout);
+        reject(new boom_1.Boom('Cancelled', {
+            statusCode: 500,
+            data: {
+                stack
+            }
+        }));
+    };
+    return { delay, cancel };
+};
+exports.delayCancellable = delayCancellable;
+async function promiseTimeout(ms, promise) {
+    if (!ms) {
+        return new Promise(promise);
+    }
+    const stack = new Error().stack;
+    // Create a promise that rejects in <ms> milliseconds
+    const { delay, cancel } = (0, exports.delayCancellable)(ms);
+    const p = new Promise((resolve, reject) => {
+        delay
+            .then(() => reject(new boom_1.Boom('Timed Out', {
+            statusCode: Types_1.DisconnectReason.timedOut,
+            data: {
+                stack
+            }
+        })))
+            .catch(err => reject(err));
+        promise(resolve, reject);
+    })
+        .finally(cancel);
+    return p;
+}
+exports.promiseTimeout = promiseTimeout;
+// generate a random ID to attach to a message
+const generateMessageID = () => 'BAE5' + (0, crypto_1.randomBytes)(6).toString('hex').toUpperCase();
+exports.generateMessageID = generateMessageID;
+function bindWaitForEvent(ev, event) {
+    return async (check, timeoutMs) => {
+        let listener;
+        let closeListener;
+        await (promiseTimeout(timeoutMs, (resolve, reject) => {
+            closeListener = ({ connection, lastDisconnect }) => {
+                if (connection === 'close') {
+                    reject((lastDisconnect === null || lastDisconnect === void 0 ? void 0 : lastDisconnect.error)
+                        || new boom_1.Boom('Connection Closed', { statusCode: Types_1.DisconnectReason.connectionClosed }));
+                }
+            };
+            ev.on('connection.update', closeListener);
+            listener = (update) => {
+                if (check(update)) {
+                    resolve();
+                }
+            };
+            ev.on(event, listener);
+        })
+            .finally(() => {
+            ev.off(event, listener);
+            ev.off('connection.update', closeListener);
+        }));
+    };
+}
+exports.bindWaitForEvent = bindWaitForEvent;
+const bindWaitForConnectionUpdate = (ev) => bindWaitForEvent(ev, 'connection.update');
+exports.bindWaitForConnectionUpdate = bindWaitForConnectionUpdate;
+const printQRIfNecessaryListener = (ev, logger) => {
+    ev.on('connection.update', async ({ qr }) => {
+        if (qr) {
+            const QR = await import('qrcode-terminal')
+                .then(m => m.default || m)
+                .catch(() => {
+                logger.error('QR code terminal not added as dependency');
+            });
+            QR === null || QR === void 0 ? void 0 : QR.generate(qr, { small: true });
+        }
+    });
+};
+exports.printQRIfNecessaryListener = printQRIfNecessaryListener;
+/**
+ * utility that fetches latest baileys version from the master branch.
+ * Use to ensure your WA connection is always on the latest version
+ */
+const fetchLatestBaileysVersion = async (options = {}) => {
+    const URL = 'https://raw.githubusercontent.com/WhiskeySockets/Baileys/master/src/Defaults/baileys-version.json';
+    try {
+        const result = await axios_1.default.get(URL, {
+            ...options,
+            responseType: 'json'
+        });
+        return {
+            version: result.data.version,
+            isLatest: true
+        };
+    }
+    catch (error) {
+        return {
+            version: baileys_version_json_1.version,
+            isLatest: false,
+            error
+        };
+    }
+};
+exports.fetchLatestBaileysVersion = fetchLatestBaileysVersion;
+/**
+ * A utility that fetches the latest web version of whatsapp.
+ * Use to ensure your WA connection is always on the latest version
+ */
+const fetchLatestWaWebVersion = async (options) => {
+    try {
+        const result = await axios_1.default.get('https://web.whatsapp.com/check-update?version=1&platform=web', {
+            ...options,
+            responseType: 'json'
+        });
+        const version = result.data.currentVersion.split('.');
+        return {
+            version: [+version[0], +version[1], +version[2]],
+            isLatest: true
+        };
+    }
+    catch (error) {
+        return {
+            version: baileys_version_json_1.version,
+            isLatest: false,
+            error
+        };
+    }
+};
+exports.fetchLatestWaWebVersion = fetchLatestWaWebVersion;
+/** unique message tag prefix for MD clients */
+const generateMdTagPrefix = () => {
+    const bytes = (0, crypto_1.randomBytes)(4);
+    return `${bytes.readUInt16BE()}.${bytes.readUInt16BE(2)}-`;
+};
+exports.generateMdTagPrefix = generateMdTagPrefix;
+const STATUS_MAP = {
+    'played': WAProto_1.proto.WebMessageInfo.Status.PLAYED,
+    'read': WAProto_1.proto.WebMessageInfo.Status.READ,
+    'read-self': WAProto_1.proto.WebMessageInfo.Status.READ
+};
+/**
+ * Given a type of receipt, returns what the new status of the message should be
+ * @param type type from receipt
+ */
+const getStatusFromReceiptType = (type) => {
+    const status = STATUS_MAP[type];
+    if (typeof type === 'undefined') {
+        return WAProto_1.proto.WebMessageInfo.Status.DELIVERY_ACK;
+    }
+    return status;
+};
+exports.getStatusFromReceiptType = getStatusFromReceiptType;
+const CODE_MAP = {
+    conflict: Types_1.DisconnectReason.connectionReplaced
+};
+/**
+ * Stream errors generally provide a reason, map that to a baileys DisconnectReason
+ * @param reason the string reason given, eg. "conflict"
+ */
+const getErrorCodeFromStreamError = (node) => {
+    const [reasonNode] = (0, WABinary_1.getAllBinaryNodeChildren)(node);
+    let reason = (reasonNode === null || reasonNode === void 0 ? void 0 : reasonNode.tag) || 'unknown';
+    const statusCode = +(node.attrs.code || CODE_MAP[reason] || Types_1.DisconnectReason.badSession);
+    if (statusCode === Types_1.DisconnectReason.restartRequired) {
+        reason = 'restart required';
+    }
+    return {
+        reason,
+        statusCode
+    };
+};
+exports.getErrorCodeFromStreamError = getErrorCodeFromStreamError;
+const getCallStatusFromNode = ({ tag, attrs }) => {
+    let status;
+    switch (tag) {
+        case 'offer':
+        case 'offer_notice':
+            status = 'offer';
+            break;
+        case 'terminate':
+            if (attrs.reason === 'timeout') {
+                status = 'timeout';
+            }
+            else {
+                status = 'reject';
+            }
+            break;
+        case 'reject':
+            status = 'reject';
+            break;
+        case 'accept':
+            status = 'accept';
+            break;
+        default:
+            status = 'ringing';
+            break;
+    }
+    return status;
+};
+exports.getCallStatusFromNode = getCallStatusFromNode;
+const UNEXPECTED_SERVER_CODE_TEXT = 'Unexpected server response: ';
+const getCodeFromWSError = (error) => {
+    var _a, _b, _c;
+    let statusCode = 500;
+    if ((_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.includes(UNEXPECTED_SERVER_CODE_TEXT)) {
+        const code = +(error === null || error === void 0 ? void 0 : error.message.slice(UNEXPECTED_SERVER_CODE_TEXT.length));
+        if (!Number.isNaN(code) && code >= 400) {
+            statusCode = code;
+        }
+    }
+    else if (((_b = error === null || error === void 0 ? void 0 : error.code) === null || _b === void 0 ? void 0 : _b.startsWith('E'))
+        || ((_c = error === null || error === void 0 ? void 0 : error.message) === null || _c === void 0 ? void 0 : _c.includes('timed out'))) { // handle ETIMEOUT, ENOTFOUND etc
+        statusCode = 408;
+    }
+    return statusCode;
+};
+exports.getCodeFromWSError = getCodeFromWSError;
+/**
+ * Is the given platform WA business
+ * @param platform AuthenticationCreds.platform
+ */
+const isWABusinessPlatform = (platform) => {
+    return platform === 'smbi' || platform === 'smba';
+};
+exports.isWABusinessPlatform = isWABusinessPlatform;
+function trimUndefined(obj) {
+    for (const key in obj) {
+        if (typeof obj[key] === 'undefined') {
+            delete obj[key];
+        }
+    }
+    return obj;
+}
+exports.trimUndefined = trimUndefined;
+const CROCKFORD_CHARACTERS = '123456789ABCDEFGHJKLMNPQRSTVWXYZ';
+function bytesToCrockford(buffer) {
+    let value = 0;
+    let bitCount = 0;
+    const crockford = [];
+    for (let i = 0; i < buffer.length; i++) {
+        value = (value << 8) | (buffer[i] & 0xff);
+        bitCount += 8;
+        while (bitCount >= 5) {
+            crockford.push(CROCKFORD_CHARACTERS.charAt((value >>> (bitCount - 5)) & 31));
+            bitCount -= 5;
+        }
+    }
+    if (bitCount > 0) {
+        crockford.push(CROCKFORD_CHARACTERS.charAt((value << (5 - bitCount)) & 31));
+    }
+    return crockford.join('');
+}
+exports.bytesToCrockford = bytesToCrockford;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/history.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/history.d.ts
new file mode 100644
index 0000000..c72a22d
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/history.d.ts
@@ -0,0 +1,15 @@
+import { AxiosRequestConfig } from 'axios';
+import { proto } from '../../WAProto';
+import { Chat, Contact } from '../Types';
+export declare const downloadHistory: (msg: proto.Message.IHistorySyncNotification, options: AxiosRequestConfig<any>) => Promise<proto.HistorySync>;
+export declare const processHistoryMessage: (item: proto.IHistorySync) => {
+    chats: Chat[];
+    contacts: Contact[];
+    messages: proto.IWebMessageInfo[];
+};
+export declare const downloadAndProcessHistorySyncNotification: (msg: proto.Message.IHistorySyncNotification, options: AxiosRequestConfig<any>) => Promise<{
+    chats: Chat[];
+    contacts: Contact[];
+    messages: proto.IWebMessageInfo[];
+}>;
+export declare const getHistoryMsg: (message: proto.IMessage) => proto.Message.IHistorySyncNotification | null | undefined;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/history.js b/node_modules/@whiskeysockets/baileys/lib/Utils/history.js
new file mode 100644
index 0000000..1f072e5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/history.js
@@ -0,0 +1,91 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.getHistoryMsg = exports.downloadAndProcessHistorySyncNotification = exports.processHistoryMessage = exports.downloadHistory = void 0;
+const util_1 = require("util");
+const zlib_1 = require("zlib");
+const WAProto_1 = require("../../WAProto");
+const Types_1 = require("../Types");
+const WABinary_1 = require("../WABinary");
+const generics_1 = require("./generics");
+const messages_1 = require("./messages");
+const messages_media_1 = require("./messages-media");
+const inflatePromise = (0, util_1.promisify)(zlib_1.inflate);
+const downloadHistory = async (msg, options) => {
+    const stream = await (0, messages_media_1.downloadContentFromMessage)(msg, 'md-msg-hist', { options });
+    const bufferArray = [];
+    for await (const chunk of stream) {
+        bufferArray.push(chunk);
+    }
+    let buffer = Buffer.concat(bufferArray);
+    // decompress buffer
+    buffer = await inflatePromise(buffer);
+    const syncData = WAProto_1.proto.HistorySync.decode(buffer);
+    return syncData;
+};
+exports.downloadHistory = downloadHistory;
+const processHistoryMessage = (item) => {
+    var _a, _b, _c;
+    const messages = [];
+    const contacts = [];
+    const chats = [];
+    switch (item.syncType) {
+        case WAProto_1.proto.HistorySync.HistorySyncType.INITIAL_BOOTSTRAP:
+        case WAProto_1.proto.HistorySync.HistorySyncType.RECENT:
+        case WAProto_1.proto.HistorySync.HistorySyncType.FULL:
+            for (const chat of item.conversations) {
+                contacts.push({ id: chat.id, name: chat.name || undefined });
+                const msgs = chat.messages || [];
+                delete chat.messages;
+                delete chat.archived;
+                delete chat.muteEndTime;
+                delete chat.pinned;
+                for (const item of msgs) {
+                    const message = item.message;
+                    messages.push(message);
+                    if (!((_a = chat.messages) === null || _a === void 0 ? void 0 : _a.length)) {
+                        // keep only the most recent message in the chat array
+                        chat.messages = [{ message }];
+                    }
+                    if (!message.key.fromMe && !chat.lastMessageRecvTimestamp) {
+                        chat.lastMessageRecvTimestamp = (0, generics_1.toNumber)(message.messageTimestamp);
+                    }
+                    if ((message.messageStubType === Types_1.WAMessageStubType.BIZ_PRIVACY_MODE_TO_BSP
+                        || message.messageStubType === Types_1.WAMessageStubType.BIZ_PRIVACY_MODE_TO_FB)
+                        && ((_b = message.messageStubParameters) === null || _b === void 0 ? void 0 : _b[0])) {
+                        contacts.push({
+                            id: message.key.participant || message.key.remoteJid,
+                            verifiedName: (_c = message.messageStubParameters) === null || _c === void 0 ? void 0 : _c[0],
+                        });
+                    }
+                }
+                if ((0, WABinary_1.isJidUser)(chat.id) && chat.readOnly && chat.archived) {
+                    delete chat.readOnly;
+                }
+                chats.push({ ...chat });
+            }
+            break;
+        case WAProto_1.proto.HistorySync.HistorySyncType.PUSH_NAME:
+            for (const c of item.pushnames) {
+                contacts.push({ id: c.id, notify: c.pushname });
+            }
+            break;
+    }
+    return {
+        chats,
+        contacts,
+        messages,
+    };
+};
+exports.processHistoryMessage = processHistoryMessage;
+const downloadAndProcessHistorySyncNotification = async (msg, options) => {
+    const historyMsg = await (0, exports.downloadHistory)(msg, options);
+    return (0, exports.processHistoryMessage)(historyMsg);
+};
+exports.downloadAndProcessHistorySyncNotification = downloadAndProcessHistorySyncNotification;
+const getHistoryMsg = (message) => {
+    var _a;
+    const normalizedContent = !!message ? (0, messages_1.normalizeMessageContent)(message) : undefined;
+    const anyHistoryMsg = (_a = normalizedContent === null || normalizedContent === void 0 ? void 0 : normalizedContent.protocolMessage) === null || _a === void 0 ? void 0 : _a.historySyncNotification;
+    return anyHistoryMsg;
+};
+exports.getHistoryMsg = getHistoryMsg;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/index.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/index.d.ts
new file mode 100644
index 0000000..a072e55
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/index.d.ts
@@ -0,0 +1,17 @@
+export * from './generics';
+export * from './decode-wa-message';
+export * from './messages';
+export * from './messages-media';
+export * from './validate-connection';
+export * from './crypto';
+export * from './signal';
+export * from './noise-handler';
+export * from './history';
+export * from './chat-utils';
+export * from './lt-hash';
+export * from './auth-utils';
+export * from './baileys-event-stream';
+export * from './use-multi-file-auth-state';
+export * from './link-preview';
+export * from './event-buffer';
+export * from './process-message';
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/index.js b/node_modules/@whiskeysockets/baileys/lib/Utils/index.js
new file mode 100644
index 0000000..f6fffe2
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/index.js
@@ -0,0 +1,33 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __exportStar = (this && this.__exportStar) || function(m, exports) {
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+__exportStar(require("./generics"), exports);
+__exportStar(require("./decode-wa-message"), exports);
+__exportStar(require("./messages"), exports);
+__exportStar(require("./messages-media"), exports);
+__exportStar(require("./validate-connection"), exports);
+__exportStar(require("./crypto"), exports);
+__exportStar(require("./signal"), exports);
+__exportStar(require("./noise-handler"), exports);
+__exportStar(require("./history"), exports);
+__exportStar(require("./chat-utils"), exports);
+__exportStar(require("./lt-hash"), exports);
+__exportStar(require("./auth-utils"), exports);
+__exportStar(require("./baileys-event-stream"), exports);
+__exportStar(require("./use-multi-file-auth-state"), exports);
+__exportStar(require("./link-preview"), exports);
+__exportStar(require("./event-buffer"), exports);
+__exportStar(require("./process-message"), exports);
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/link-preview.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/link-preview.d.ts
new file mode 100644
index 0000000..7ea768d
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/link-preview.d.ts
@@ -0,0 +1,21 @@
+import { AxiosRequestConfig } from 'axios';
+import { Logger } from 'pino';
+import { WAMediaUploadFunction, WAUrlInfo } from '../Types';
+export type URLGenerationOptions = {
+    thumbnailWidth: number;
+    fetchOpts: {
+        /** Timeout in ms */
+        timeout: number;
+        proxyUrl?: string;
+        headers?: AxiosRequestConfig<{}>['headers'];
+    };
+    uploadImage?: WAMediaUploadFunction;
+    logger?: Logger;
+};
+/**
+ * Given a piece of text, checks for any URL present, generates link preview for the same and returns it
+ * Return undefined if the fetch failed or no URL was found
+ * @param text first matched URL in text
+ * @returns the URL info required to generate link preview
+ */
+export declare const getUrlInfo: (text: string, opts?: URLGenerationOptions) => Promise<WAUrlInfo | undefined>;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/link-preview.js b/node_modules/@whiskeysockets/baileys/lib/Utils/link-preview.js
new file mode 100644
index 0000000..5d9b74c
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/link-preview.js
@@ -0,0 +1,93 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.getUrlInfo = void 0;
+const messages_1 = require("./messages");
+const messages_media_1 = require("./messages-media");
+const THUMBNAIL_WIDTH_PX = 192;
+/** Fetches an image and generates a thumbnail for it */
+const getCompressedJpegThumbnail = async (url, { thumbnailWidth, fetchOpts }) => {
+    const stream = await (0, messages_media_1.getHttpStream)(url, fetchOpts);
+    const result = await (0, messages_media_1.extractImageThumb)(stream, thumbnailWidth);
+    return result;
+};
+/**
+ * Given a piece of text, checks for any URL present, generates link preview for the same and returns it
+ * Return undefined if the fetch failed or no URL was found
+ * @param text first matched URL in text
+ * @returns the URL info required to generate link preview
+ */
+const getUrlInfo = async (text, opts = {
+    thumbnailWidth: THUMBNAIL_WIDTH_PX,
+    fetchOpts: { timeout: 3000 }
+}) => {
+    var _a;
+    try {
+        // retries
+        const retries = 0;
+        const maxRetry = 5;
+        const { getLinkPreview } = await import('link-preview-js');
+        let previewLink = text;
+        if (!text.startsWith('https://') && !text.startsWith('http://')) {
+            previewLink = 'https://' + previewLink;
+        }
+        const info = await getLinkPreview(previewLink, {
+            ...opts.fetchOpts,
+            followRedirects: 'follow',
+            handleRedirects: (baseURL, forwardedURL) => {
+                const urlObj = new URL(baseURL);
+                const forwardedURLObj = new URL(forwardedURL);
+                if (retries >= maxRetry) {
+                    return false;
+                }
+                if (forwardedURLObj.hostname === urlObj.hostname
+                    || forwardedURLObj.hostname === 'www.' + urlObj.hostname
+                    || 'www.' + forwardedURLObj.hostname === urlObj.hostname) {
+                    retries + 1;
+                    return true;
+                }
+                else {
+                    return false;
+                }
+            },
+            headers: opts.fetchOpts
+        });
+        if (info && 'title' in info && info.title) {
+            const [image] = info.images;
+            const urlInfo = {
+                'canonical-url': info.url,
+                'matched-text': text,
+                title: info.title,
+                description: info.description,
+                originalThumbnailUrl: image
+            };
+            if (opts.uploadImage) {
+                const { imageMessage } = await (0, messages_1.prepareWAMessageMedia)({ image: { url: image } }, {
+                    upload: opts.uploadImage,
+                    mediaTypeOverride: 'thumbnail-link',
+                    options: opts.fetchOpts
+                });
+                urlInfo.jpegThumbnail = (imageMessage === null || imageMessage === void 0 ? void 0 : imageMessage.jpegThumbnail)
+                    ? Buffer.from(imageMessage.jpegThumbnail)
+                    : undefined;
+                urlInfo.highQualityThumbnail = imageMessage || undefined;
+            }
+            else {
+                try {
+                    urlInfo.jpegThumbnail = image
+                        ? (await getCompressedJpegThumbnail(image, opts)).buffer
+                        : undefined;
+                }
+                catch (error) {
+                    (_a = opts.logger) === null || _a === void 0 ? void 0 : _a.debug({ err: error.stack, url: previewLink }, 'error in generating thumbnail');
+                }
+            }
+            return urlInfo;
+        }
+    }
+    catch (error) {
+        if (!error.message.includes('receive a valid')) {
+            throw error;
+        }
+    }
+};
+exports.getUrlInfo = getUrlInfo;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/logger.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/logger.d.ts
new file mode 100644
index 0000000..1c55444
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/logger.d.ts
@@ -0,0 +1,4 @@
+declare const _default: import("pino").Logger<{
+    timestamp: () => string;
+}>;
+export default _default;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/logger.js b/node_modules/@whiskeysockets/baileys/lib/Utils/logger.js
new file mode 100644
index 0000000..808bfed
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/logger.js
@@ -0,0 +1,7 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const pino_1 = __importDefault(require("pino"));
+exports.default = (0, pino_1.default)({ timestamp: () => `,"time":"${new Date().toJSON()}"` });
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/lt-hash.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/lt-hash.d.ts
new file mode 100644
index 0000000..76f343c
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/lt-hash.d.ts
@@ -0,0 +1,12 @@
+declare class d {
+    salt: string;
+    constructor(e: string);
+    add(e: any, t: any): any;
+    subtract(e: any, t: any): any;
+    subtractThenAdd(e: any, t: any, r: any): any;
+    _addSingle(e: any, t: any): ArrayBuffer;
+    _subtractSingle(e: any, t: any): ArrayBuffer;
+    performPointwiseWithOverflow(e: any, t: any, r: any): ArrayBuffer;
+}
+export declare const LT_HASH_ANTI_TAMPERING: d;
+export {};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/lt-hash.js b/node_modules/@whiskeysockets/baileys/lib/Utils/lt-hash.js
new file mode 100644
index 0000000..a924fe6
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/lt-hash.js
@@ -0,0 +1,51 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.LT_HASH_ANTI_TAMPERING = void 0;
+const crypto_1 = require("./crypto");
+/**
+ * LT Hash is a summation based hash algorithm that maintains the integrity of a piece of data
+ * over a series of mutations. You can add/remove mutations and it'll return a hash equal to
+ * if the same series of mutations was made sequentially.
+ */
+const o = 128;
+class d {
+    constructor(e) {
+        this.salt = e;
+    }
+    add(e, t) {
+        var r = this;
+        for (const item of t) {
+            e = r._addSingle(e, item);
+        }
+        return e;
+    }
+    subtract(e, t) {
+        var r = this;
+        for (const item of t) {
+            e = r._subtractSingle(e, item);
+        }
+        return e;
+    }
+    subtractThenAdd(e, t, r) {
+        var n = this;
+        return n.add(n.subtract(e, r), t);
+    }
+    _addSingle(e, t) {
+        var r = this;
+        const n = new Uint8Array((0, crypto_1.hkdf)(Buffer.from(t), o, { info: r.salt })).buffer;
+        return r.performPointwiseWithOverflow(e, n, ((e, t) => e + t));
+    }
+    _subtractSingle(e, t) {
+        var r = this;
+        const n = new Uint8Array((0, crypto_1.hkdf)(Buffer.from(t), o, { info: r.salt })).buffer;
+        return r.performPointwiseWithOverflow(e, n, ((e, t) => e - t));
+    }
+    performPointwiseWithOverflow(e, t, r) {
+        const n = new DataView(e), i = new DataView(t), a = new ArrayBuffer(n.byteLength), s = new DataView(a);
+        for (let e = 0; e < n.byteLength; e += 2) {
+            s.setUint16(e, r(n.getUint16(e, !0), i.getUint16(e, !0)), !0);
+        }
+        return a;
+    }
+}
+exports.LT_HASH_ANTI_TAMPERING = new d('WhatsApp Patch Integrity');
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/make-mutex.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/make-mutex.d.ts
new file mode 100644
index 0000000..b613fe4
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/make-mutex.d.ts
@@ -0,0 +1,7 @@
+export declare const makeMutex: () => {
+    mutex<T>(code: () => T | Promise<T>): Promise<T>;
+};
+export type Mutex = ReturnType<typeof makeMutex>;
+export declare const makeKeyedMutex: () => {
+    mutex<T>(key: string, task: () => T | Promise<T>): Promise<T>;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/make-mutex.js b/node_modules/@whiskeysockets/baileys/lib/Utils/make-mutex.js
new file mode 100644
index 0000000..72cb768
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/make-mutex.js
@@ -0,0 +1,43 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.makeKeyedMutex = exports.makeMutex = void 0;
+const makeMutex = () => {
+    let task = Promise.resolve();
+    let taskTimeout;
+    return {
+        mutex(code) {
+            task = (async () => {
+                // wait for the previous task to complete
+                // if there is an error, we swallow so as to not block the queue
+                try {
+                    await task;
+                }
+                catch (_a) { }
+                try {
+                    // execute the current task
+                    const result = await code();
+                    return result;
+                }
+                finally {
+                    clearTimeout(taskTimeout);
+                }
+            })();
+            // we replace the existing task, appending the new piece of execution to it
+            // so the next task will have to wait for this one to finish
+            return task;
+        },
+    };
+};
+exports.makeMutex = makeMutex;
+const makeKeyedMutex = () => {
+    const map = {};
+    return {
+        mutex(key, task) {
+            if (!map[key]) {
+                map[key] = (0, exports.makeMutex)();
+            }
+            return map[key].mutex(task);
+        }
+    };
+};
+exports.makeKeyedMutex = makeKeyedMutex;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/messages-media.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/messages-media.d.ts
new file mode 100644
index 0000000..03f8253
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/messages-media.d.ts
@@ -0,0 +1,107 @@
+/// <reference types="node" />
+/// <reference types="node" />
+/// <reference types="node" />
+import { Boom } from '@hapi/boom';
+import { AxiosRequestConfig } from 'axios';
+import type { Logger } from 'pino';
+import { Readable, Transform } from 'stream';
+import { URL } from 'url';
+import { proto } from '../../WAProto';
+import { DownloadableMessage, MediaConnInfo, MediaDecryptionKeyInfo, MediaType, SocketConfig, WAMediaUpload, WAMediaUploadFunction, WAMessageContent } from '../Types';
+import { BinaryNode } from '../WABinary';
+export declare const hkdfInfoKey: (type: MediaType) => string;
+/** generates all the keys required to encrypt/decrypt & sign a media message */
+export declare function getMediaKeys(buffer: Uint8Array | string | null | undefined, mediaType: MediaType): MediaDecryptionKeyInfo;
+export declare const extractImageThumb: (bufferOrFilePath: Readable | Buffer | string, width?: number) => Promise<{
+    buffer: Buffer;
+    original: {
+        width: number | undefined;
+        height: number | undefined;
+    };
+}>;
+export declare const encodeBase64EncodedStringForUpload: (b64: string) => string;
+export declare const generateProfilePicture: (mediaUpload: WAMediaUpload) => Promise<{
+    img: Buffer;
+}>;
+/** gets the SHA256 of the given media message */
+export declare const mediaMessageSHA256B64: (message: WAMessageContent) => string | null | undefined;
+export declare function getAudioDuration(buffer: Buffer | string | Readable): Promise<number | undefined>;
+/**
+  referenced from and modifying https://github.com/wppconnect-team/wa-js/blob/main/src/chat/functions/prepareAudioWaveform.ts
+ */
+export declare function getAudioWaveform(buffer: Buffer | string | Readable, logger?: Logger): Promise<Uint8Array | undefined>;
+export declare const toReadable: (buffer: Buffer) => Readable;
+export declare const toBuffer: (stream: Readable) => Promise<Buffer>;
+export declare const getStream: (item: WAMediaUpload, opts?: AxiosRequestConfig) => Promise<{
+    readonly stream: Readable;
+    readonly type: "buffer";
+} | {
+    readonly stream: Readable;
+    readonly type: "readable";
+} | {
+    readonly stream: Readable;
+    readonly type: "remote";
+} | {
+    readonly stream: import("fs").ReadStream;
+    readonly type: "file";
+}>;
+/** generates a thumbnail for a given media, if required */
+export declare function generateThumbnail(file: string, mediaType: 'video' | 'image', options: {
+    logger?: Logger;
+}): Promise<{
+    thumbnail: string | undefined;
+    originalImageDimensions: {
+        width: number;
+        height: number;
+    } | undefined;
+}>;
+export declare const getHttpStream: (url: string | URL, options?: AxiosRequestConfig & {
+    isStream?: true;
+}) => Promise<Readable>;
+type EncryptedStreamOptions = {
+    saveOriginalFileIfRequired?: boolean;
+    logger?: Logger;
+    opts?: AxiosRequestConfig;
+};
+export declare const encryptedStream: (media: WAMediaUpload, mediaType: MediaType, { logger, saveOriginalFileIfRequired, opts }?: EncryptedStreamOptions) => Promise<{
+    mediaKey: Buffer;
+    encWriteStream: Readable;
+    bodyPath: string | undefined;
+    mac: Buffer;
+    fileEncSha256: Buffer;
+    fileSha256: Buffer;
+    fileLength: number;
+    didSaveToTmpPath: boolean;
+}>;
+export type MediaDownloadOptions = {
+    startByte?: number;
+    endByte?: number;
+    options?: AxiosRequestConfig<any>;
+};
+export declare const getUrlFromDirectPath: (directPath: string) => string;
+export declare const downloadContentFromMessage: ({ mediaKey, directPath, url }: DownloadableMessage, type: MediaType, opts?: MediaDownloadOptions) => Promise<Transform>;
+/**
+ * Decrypts and downloads an AES256-CBC encrypted file given the keys.
+ * Assumes the SHA256 of the plaintext is appended to the end of the ciphertext
+ * */
+export declare const downloadEncryptedContent: (downloadUrl: string, { cipherKey, iv }: MediaDecryptionKeyInfo, { startByte, endByte, options }?: MediaDownloadOptions) => Promise<Transform>;
+export declare function extensionForMediaMessage(message: WAMessageContent): string;
+export declare const getWAUploadToServer: ({ customUploadHosts, fetchAgent, logger, options }: SocketConfig, refreshMediaConn: (force: boolean) => Promise<MediaConnInfo>) => WAMediaUploadFunction;
+/**
+ * Generate a binary node that will request the phone to re-upload the media & return the newly uploaded URL
+ */
+export declare const encryptMediaRetryRequest: (key: proto.IMessageKey, mediaKey: Buffer | Uint8Array, meId: string) => BinaryNode;
+export declare const decodeMediaRetryNode: (node: BinaryNode) => {
+    key: proto.IMessageKey;
+    media?: {
+        ciphertext: Uint8Array;
+        iv: Uint8Array;
+    } | undefined;
+    error?: Boom<any> | undefined;
+};
+export declare const decryptMediaRetryData: ({ ciphertext, iv }: {
+    ciphertext: Uint8Array;
+    iv: Uint8Array;
+}, mediaKey: Uint8Array, msgId: string) => proto.MediaRetryNotification;
+export declare const getStatusCodeForMediaRetry: (code: number) => any;
+export {};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/messages-media.js b/node_modules/@whiskeysockets/baileys/lib/Utils/messages-media.js
new file mode 100644
index 0000000..3c7acd0
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/messages-media.js
@@ -0,0 +1,680 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
+var __importStar = (this && this.__importStar) || function (mod) {
+    if (mod && mod.__esModule) return mod;
+    var result = {};
+    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
+    return result;
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.getStatusCodeForMediaRetry = exports.decryptMediaRetryData = exports.decodeMediaRetryNode = exports.encryptMediaRetryRequest = exports.getWAUploadToServer = exports.extensionForMediaMessage = exports.downloadEncryptedContent = exports.downloadContentFromMessage = exports.getUrlFromDirectPath = exports.encryptedStream = exports.getHttpStream = exports.generateThumbnail = exports.getStream = exports.toBuffer = exports.toReadable = exports.getAudioWaveform = exports.getAudioDuration = exports.mediaMessageSHA256B64 = exports.generateProfilePicture = exports.encodeBase64EncodedStringForUpload = exports.extractImageThumb = exports.getMediaKeys = exports.hkdfInfoKey = void 0;
+const boom_1 = require("@hapi/boom");
+const child_process_1 = require("child_process");
+const Crypto = __importStar(require("crypto"));
+const events_1 = require("events");
+const fs_1 = require("fs");
+const os_1 = require("os");
+const path_1 = require("path");
+const stream_1 = require("stream");
+const WAProto_1 = require("../../WAProto");
+const Defaults_1 = require("../Defaults");
+const WABinary_1 = require("../WABinary");
+const crypto_1 = require("./crypto");
+const generics_1 = require("./generics");
+const getTmpFilesDirectory = () => (0, os_1.tmpdir)();
+const getImageProcessingLibrary = async () => {
+    const [_jimp, sharp] = await Promise.all([
+        (async () => {
+            const jimp = await (import('jimp')
+                .catch(() => { }));
+            return jimp;
+        })(),
+        (async () => {
+            const sharp = await (import('sharp')
+                .catch(() => { }));
+            return sharp;
+        })()
+    ]);
+    if (sharp) {
+        return { sharp };
+    }
+    const jimp = (_jimp === null || _jimp === void 0 ? void 0 : _jimp.default) || _jimp;
+    if (jimp) {
+        return { jimp };
+    }
+    throw new boom_1.Boom('No image processing library available');
+};
+const hkdfInfoKey = (type) => {
+    const hkdfInfo = Defaults_1.MEDIA_HKDF_KEY_MAPPING[type];
+    return `WhatsApp ${hkdfInfo} Keys`;
+};
+exports.hkdfInfoKey = hkdfInfoKey;
+/** generates all the keys required to encrypt/decrypt & sign a media message */
+function getMediaKeys(buffer, mediaType) {
+    if (!buffer) {
+        throw new boom_1.Boom('Cannot derive from empty media key');
+    }
+    if (typeof buffer === 'string') {
+        buffer = Buffer.from(buffer.replace('data:;base64,', ''), 'base64');
+    }
+    // expand using HKDF to 112 bytes, also pass in the relevant app info
+    const expandedMediaKey = (0, crypto_1.hkdf)(buffer, 112, { info: (0, exports.hkdfInfoKey)(mediaType) });
+    return {
+        iv: expandedMediaKey.slice(0, 16),
+        cipherKey: expandedMediaKey.slice(16, 48),
+        macKey: expandedMediaKey.slice(48, 80),
+    };
+}
+exports.getMediaKeys = getMediaKeys;
+/** Extracts video thumb using FFMPEG */
+const extractVideoThumb = async (path, destPath, time, size) => new Promise((resolve, reject) => {
+    const cmd = `ffmpeg -ss ${time} -i ${path} -y -vf scale=${size.width}:-1 -vframes 1 -f image2 ${destPath}`;
+    (0, child_process_1.exec)(cmd, (err) => {
+        if (err) {
+            reject(err);
+        }
+        else {
+            resolve();
+        }
+    });
+});
+const extractImageThumb = async (bufferOrFilePath, width = 32) => {
+    var _a, _b;
+    if (bufferOrFilePath instanceof stream_1.Readable) {
+        bufferOrFilePath = await (0, exports.toBuffer)(bufferOrFilePath);
+    }
+    const lib = await getImageProcessingLibrary();
+    if ('sharp' in lib && typeof ((_a = lib.sharp) === null || _a === void 0 ? void 0 : _a.default) === 'function') {
+        const img = lib.sharp.default(bufferOrFilePath);
+        const dimensions = await img.metadata();
+        const buffer = await img
+            .resize(width)
+            .jpeg({ quality: 50 })
+            .toBuffer();
+        return {
+            buffer,
+            original: {
+                width: dimensions.width,
+                height: dimensions.height,
+            },
+        };
+    }
+    else if ('jimp' in lib && typeof ((_b = lib.jimp) === null || _b === void 0 ? void 0 : _b.read) === 'function') {
+        const { read, MIME_JPEG, RESIZE_BILINEAR, AUTO } = lib.jimp;
+        const jimp = await read(bufferOrFilePath);
+        const dimensions = {
+            width: jimp.getWidth(),
+            height: jimp.getHeight()
+        };
+        const buffer = await jimp
+            .quality(50)
+            .resize(width, AUTO, RESIZE_BILINEAR)
+            .getBufferAsync(MIME_JPEG);
+        return {
+            buffer,
+            original: dimensions
+        };
+    }
+    else {
+        throw new boom_1.Boom('No image processing library available');
+    }
+};
+exports.extractImageThumb = extractImageThumb;
+const encodeBase64EncodedStringForUpload = (b64) => (encodeURIComponent(b64
+    .replace(/\+/g, '-')
+    .replace(/\//g, '_')
+    .replace(/\=+$/, '')));
+exports.encodeBase64EncodedStringForUpload = encodeBase64EncodedStringForUpload;
+const generateProfilePicture = async (mediaUpload) => {
+    var _a, _b;
+    let bufferOrFilePath;
+    if (Buffer.isBuffer(mediaUpload)) {
+        bufferOrFilePath = mediaUpload;
+    }
+    else if ('url' in mediaUpload) {
+        bufferOrFilePath = mediaUpload.url.toString();
+    }
+    else {
+        bufferOrFilePath = await (0, exports.toBuffer)(mediaUpload.stream);
+    }
+    const lib = await getImageProcessingLibrary();
+    let img;
+    if ('sharp' in lib && typeof ((_a = lib.sharp) === null || _a === void 0 ? void 0 : _a.default) === 'function') {
+        img = lib.sharp.default(bufferOrFilePath)
+            .resize(640, 640)
+            .jpeg({
+            quality: 50,
+        })
+            .toBuffer();
+    }
+    else if ('jimp' in lib && typeof ((_b = lib.jimp) === null || _b === void 0 ? void 0 : _b.read) === 'function') {
+        const { read, MIME_JPEG, RESIZE_BILINEAR } = lib.jimp;
+        const jimp = await read(bufferOrFilePath);
+        const min = Math.min(jimp.getWidth(), jimp.getHeight());
+        const cropped = jimp.crop(0, 0, min, min);
+        img = cropped
+            .quality(50)
+            .resize(640, 640, RESIZE_BILINEAR)
+            .getBufferAsync(MIME_JPEG);
+    }
+    else {
+        throw new boom_1.Boom('No image processing library available');
+    }
+    return {
+        img: await img,
+    };
+};
+exports.generateProfilePicture = generateProfilePicture;
+/** gets the SHA256 of the given media message */
+const mediaMessageSHA256B64 = (message) => {
+    const media = Object.values(message)[0];
+    return (media === null || media === void 0 ? void 0 : media.fileSha256) && Buffer.from(media.fileSha256).toString('base64');
+};
+exports.mediaMessageSHA256B64 = mediaMessageSHA256B64;
+async function getAudioDuration(buffer) {
+    const musicMetadata = await import('music-metadata');
+    let metadata;
+    if (Buffer.isBuffer(buffer)) {
+        metadata = await musicMetadata.parseBuffer(buffer, undefined, { duration: true });
+    }
+    else if (typeof buffer === 'string') {
+        const rStream = (0, fs_1.createReadStream)(buffer);
+        try {
+            metadata = await musicMetadata.parseStream(rStream, undefined, { duration: true });
+        }
+        finally {
+            rStream.destroy();
+        }
+    }
+    else {
+        metadata = await musicMetadata.parseStream(buffer, undefined, { duration: true });
+    }
+    return metadata.format.duration;
+}
+exports.getAudioDuration = getAudioDuration;
+/**
+  referenced from and modifying https://github.com/wppconnect-team/wa-js/blob/main/src/chat/functions/prepareAudioWaveform.ts
+ */
+async function getAudioWaveform(buffer, logger) {
+    try {
+        const audioDecode = (buffer) => import('audio-decode').then(({ default: audioDecode }) => audioDecode(buffer));
+        let audioData;
+        if (Buffer.isBuffer(buffer)) {
+            audioData = buffer;
+        }
+        else if (typeof buffer === 'string') {
+            const rStream = (0, fs_1.createReadStream)(buffer);
+            audioData = await (0, exports.toBuffer)(rStream);
+        }
+        else {
+            audioData = await (0, exports.toBuffer)(buffer);
+        }
+        const audioBuffer = await audioDecode(audioData);
+        const rawData = audioBuffer.getChannelData(0); // We only need to work with one channel of data
+        const samples = 64; // Number of samples we want to have in our final data set
+        const blockSize = Math.floor(rawData.length / samples); // the number of samples in each subdivision
+        const filteredData = [];
+        for (let i = 0; i < samples; i++) {
+            const blockStart = blockSize * i; // the location of the first sample in the block
+            let sum = 0;
+            for (let j = 0; j < blockSize; j++) {
+                sum = sum + Math.abs(rawData[blockStart + j]); // find the sum of all the samples in the block
+            }
+            filteredData.push(sum / blockSize); // divide the sum by the block size to get the average
+        }
+        // This guarantees that the largest data point will be set to 1, and the rest of the data will scale proportionally.
+        const multiplier = Math.pow(Math.max(...filteredData), -1);
+        const normalizedData = filteredData.map((n) => n * multiplier);
+        // Generate waveform like WhatsApp
+        const waveform = new Uint8Array(normalizedData.map((n) => Math.floor(100 * n)));
+        return waveform;
+    }
+    catch (e) {
+        logger === null || logger === void 0 ? void 0 : logger.debug('Failed to generate waveform: ' + e);
+    }
+}
+exports.getAudioWaveform = getAudioWaveform;
+const toReadable = (buffer) => {
+    const readable = new stream_1.Readable({ read: () => { } });
+    readable.push(buffer);
+    readable.push(null);
+    return readable;
+};
+exports.toReadable = toReadable;
+const toBuffer = async (stream) => {
+    const chunks = [];
+    for await (const chunk of stream) {
+        chunks.push(chunk);
+    }
+    stream.destroy();
+    return Buffer.concat(chunks);
+};
+exports.toBuffer = toBuffer;
+const getStream = async (item, opts) => {
+    if (Buffer.isBuffer(item)) {
+        return { stream: (0, exports.toReadable)(item), type: 'buffer' };
+    }
+    if ('stream' in item) {
+        return { stream: item.stream, type: 'readable' };
+    }
+    if (item.url.toString().startsWith('http://') || item.url.toString().startsWith('https://')) {
+        return { stream: await (0, exports.getHttpStream)(item.url, opts), type: 'remote' };
+    }
+    return { stream: (0, fs_1.createReadStream)(item.url), type: 'file' };
+};
+exports.getStream = getStream;
+/** generates a thumbnail for a given media, if required */
+async function generateThumbnail(file, mediaType, options) {
+    var _a;
+    let thumbnail;
+    let originalImageDimensions;
+    if (mediaType === 'image') {
+        const { buffer, original } = await (0, exports.extractImageThumb)(file);
+        thumbnail = buffer.toString('base64');
+        if (original.width && original.height) {
+            originalImageDimensions = {
+                width: original.width,
+                height: original.height,
+            };
+        }
+    }
+    else if (mediaType === 'video') {
+        const imgFilename = (0, path_1.join)(getTmpFilesDirectory(), (0, generics_1.generateMessageID)() + '.jpg');
+        try {
+            await extractVideoThumb(file, imgFilename, '00:00:00', { width: 32, height: 32 });
+            const buff = await fs_1.promises.readFile(imgFilename);
+            thumbnail = buff.toString('base64');
+            await fs_1.promises.unlink(imgFilename);
+        }
+        catch (err) {
+            (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug('could not generate video thumb: ' + err);
+        }
+    }
+    return {
+        thumbnail,
+        originalImageDimensions
+    };
+}
+exports.generateThumbnail = generateThumbnail;
+const getHttpStream = async (url, options = {}) => {
+    const { default: axios } = await import('axios');
+    const fetched = await axios.get(url.toString(), { ...options, responseType: 'stream' });
+    return fetched.data;
+};
+exports.getHttpStream = getHttpStream;
+const encryptedStream = async (media, mediaType, { logger, saveOriginalFileIfRequired, opts } = {}) => {
+    const { stream, type } = await (0, exports.getStream)(media, opts);
+    logger === null || logger === void 0 ? void 0 : logger.debug('fetched media stream');
+    const mediaKey = Crypto.randomBytes(32);
+    const { cipherKey, iv, macKey } = getMediaKeys(mediaKey, mediaType);
+    const encWriteStream = new stream_1.Readable({ read: () => { } });
+    let bodyPath;
+    let writeStream;
+    let didSaveToTmpPath = false;
+    if (type === 'file') {
+        bodyPath = media.url;
+    }
+    else if (saveOriginalFileIfRequired) {
+        bodyPath = (0, path_1.join)(getTmpFilesDirectory(), mediaType + (0, generics_1.generateMessageID)());
+        writeStream = (0, fs_1.createWriteStream)(bodyPath);
+        didSaveToTmpPath = true;
+    }
+    let fileLength = 0;
+    const aes = Crypto.createCipheriv('aes-256-cbc', cipherKey, iv);
+    let hmac = Crypto.createHmac('sha256', macKey).update(iv);
+    let sha256Plain = Crypto.createHash('sha256');
+    let sha256Enc = Crypto.createHash('sha256');
+    try {
+        for await (const data of stream) {
+            fileLength += data.length;
+            if (type === 'remote'
+                && (opts === null || opts === void 0 ? void 0 : opts.maxContentLength)
+                && fileLength + data.length > opts.maxContentLength) {
+                throw new boom_1.Boom(`content length exceeded when encrypting "${type}"`, {
+                    data: { media, type }
+                });
+            }
+            sha256Plain = sha256Plain.update(data);
+            if (writeStream) {
+                if (!writeStream.write(data)) {
+                    await (0, events_1.once)(writeStream, 'drain');
+                }
+            }
+            onChunk(aes.update(data));
+        }
+        onChunk(aes.final());
+        const mac = hmac.digest().slice(0, 10);
+        sha256Enc = sha256Enc.update(mac);
+        const fileSha256 = sha256Plain.digest();
+        const fileEncSha256 = sha256Enc.digest();
+        encWriteStream.push(mac);
+        encWriteStream.push(null);
+        writeStream === null || writeStream === void 0 ? void 0 : writeStream.end();
+        stream.destroy();
+        logger === null || logger === void 0 ? void 0 : logger.debug('encrypted data successfully');
+        return {
+            mediaKey,
+            encWriteStream,
+            bodyPath,
+            mac,
+            fileEncSha256,
+            fileSha256,
+            fileLength,
+            didSaveToTmpPath
+        };
+    }
+    catch (error) {
+        // destroy all streams with error
+        encWriteStream.destroy();
+        writeStream === null || writeStream === void 0 ? void 0 : writeStream.destroy();
+        aes.destroy();
+        hmac.destroy();
+        sha256Plain.destroy();
+        sha256Enc.destroy();
+        stream.destroy();
+        if (didSaveToTmpPath) {
+            try {
+                await fs_1.promises.unlink(bodyPath);
+            }
+            catch (err) {
+                logger === null || logger === void 0 ? void 0 : logger.error({ err }, 'failed to save to tmp path');
+            }
+        }
+        throw error;
+    }
+    function onChunk(buff) {
+        sha256Enc = sha256Enc.update(buff);
+        hmac = hmac.update(buff);
+        encWriteStream.push(buff);
+    }
+};
+exports.encryptedStream = encryptedStream;
+const DEF_HOST = 'mmg.whatsapp.net';
+const AES_CHUNK_SIZE = 16;
+const toSmallestChunkSize = (num) => {
+    return Math.floor(num / AES_CHUNK_SIZE) * AES_CHUNK_SIZE;
+};
+const getUrlFromDirectPath = (directPath) => `https://${DEF_HOST}${directPath}`;
+exports.getUrlFromDirectPath = getUrlFromDirectPath;
+const downloadContentFromMessage = ({ mediaKey, directPath, url }, type, opts = {}) => {
+    const downloadUrl = url || (0, exports.getUrlFromDirectPath)(directPath);
+    const keys = getMediaKeys(mediaKey, type);
+    return (0, exports.downloadEncryptedContent)(downloadUrl, keys, opts);
+};
+exports.downloadContentFromMessage = downloadContentFromMessage;
+/**
+ * Decrypts and downloads an AES256-CBC encrypted file given the keys.
+ * Assumes the SHA256 of the plaintext is appended to the end of the ciphertext
+ * */
+const downloadEncryptedContent = async (downloadUrl, { cipherKey, iv }, { startByte, endByte, options } = {}) => {
+    let bytesFetched = 0;
+    let startChunk = 0;
+    let firstBlockIsIV = false;
+    // if a start byte is specified -- then we need to fetch the previous chunk as that will form the IV
+    if (startByte) {
+        const chunk = toSmallestChunkSize(startByte || 0);
+        if (chunk) {
+            startChunk = chunk - AES_CHUNK_SIZE;
+            bytesFetched = chunk;
+            firstBlockIsIV = true;
+        }
+    }
+    const endChunk = endByte ? toSmallestChunkSize(endByte || 0) + AES_CHUNK_SIZE : undefined;
+    const headers = {
+        ...(options === null || options === void 0 ? void 0 : options.headers) || {},
+        Origin: Defaults_1.DEFAULT_ORIGIN,
+    };
+    if (startChunk || endChunk) {
+        headers.Range = `bytes=${startChunk}-`;
+        if (endChunk) {
+            headers.Range += endChunk;
+        }
+    }
+    // download the message
+    const fetched = await (0, exports.getHttpStream)(downloadUrl, {
+        ...options || {},
+        headers,
+        maxBodyLength: Infinity,
+        maxContentLength: Infinity,
+    });
+    let remainingBytes = Buffer.from([]);
+    let aes;
+    const pushBytes = (bytes, push) => {
+        if (startByte || endByte) {
+            const start = bytesFetched >= startByte ? undefined : Math.max(startByte - bytesFetched, 0);
+            const end = bytesFetched + bytes.length < endByte ? undefined : Math.max(endByte - bytesFetched, 0);
+            push(bytes.slice(start, end));
+            bytesFetched += bytes.length;
+        }
+        else {
+            push(bytes);
+        }
+    };
+    const output = new stream_1.Transform({
+        transform(chunk, _, callback) {
+            let data = Buffer.concat([remainingBytes, chunk]);
+            const decryptLength = toSmallestChunkSize(data.length);
+            remainingBytes = data.slice(decryptLength);
+            data = data.slice(0, decryptLength);
+            if (!aes) {
+                let ivValue = iv;
+                if (firstBlockIsIV) {
+                    ivValue = data.slice(0, AES_CHUNK_SIZE);
+                    data = data.slice(AES_CHUNK_SIZE);
+                }
+                aes = Crypto.createDecipheriv('aes-256-cbc', cipherKey, ivValue);
+                // if an end byte that is not EOF is specified
+                // stop auto padding (PKCS7) -- otherwise throws an error for decryption
+                if (endByte) {
+                    aes.setAutoPadding(false);
+                }
+            }
+            try {
+                pushBytes(aes.update(data), b => this.push(b));
+                callback();
+            }
+            catch (error) {
+                callback(error);
+            }
+        },
+        final(callback) {
+            try {
+                pushBytes(aes.final(), b => this.push(b));
+                callback();
+            }
+            catch (error) {
+                callback(error);
+            }
+        },
+    });
+    return fetched.pipe(output, { end: true });
+};
+exports.downloadEncryptedContent = downloadEncryptedContent;
+function extensionForMediaMessage(message) {
+    const getExtension = (mimetype) => mimetype.split(';')[0].split('/')[1];
+    const type = Object.keys(message)[0];
+    let extension;
+    if (type === 'locationMessage' ||
+        type === 'liveLocationMessage' ||
+        type === 'productMessage') {
+        extension = '.jpeg';
+    }
+    else {
+        const messageContent = message[type];
+        extension = getExtension(messageContent.mimetype);
+    }
+    return extension;
+}
+exports.extensionForMediaMessage = extensionForMediaMessage;
+const getWAUploadToServer = ({ customUploadHosts, fetchAgent, logger, options }, refreshMediaConn) => {
+    return async (stream, { mediaType, fileEncSha256B64, timeoutMs }) => {
+        var _a, _b;
+        const { default: axios } = await import('axios');
+        // send a query JSON to obtain the url & auth token to upload our media
+        let uploadInfo = await refreshMediaConn(false);
+        let urls;
+        const hosts = [...customUploadHosts, ...uploadInfo.hosts];
+        const chunks = [];
+        for await (const chunk of stream) {
+            chunks.push(chunk);
+        }
+        const reqBody = Buffer.concat(chunks);
+        fileEncSha256B64 = (0, exports.encodeBase64EncodedStringForUpload)(fileEncSha256B64);
+        for (const { hostname, maxContentLengthBytes } of hosts) {
+            logger.debug(`uploading to "${hostname}"`);
+            const auth = encodeURIComponent(uploadInfo.auth); // the auth token
+            const url = `https://${hostname}${Defaults_1.MEDIA_PATH_MAP[mediaType]}/${fileEncSha256B64}?auth=${auth}&token=${fileEncSha256B64}`;
+            let result;
+            try {
+                if (maxContentLengthBytes && reqBody.length > maxContentLengthBytes) {
+                    throw new boom_1.Boom(`Body too large for "${hostname}"`, { statusCode: 413 });
+                }
+                const body = await axios.post(url, reqBody, {
+                    ...options,
+                    headers: {
+                        ...options.headers || {},
+                        'Content-Type': 'application/octet-stream',
+                        'Origin': Defaults_1.DEFAULT_ORIGIN
+                    },
+                    httpsAgent: fetchAgent,
+                    timeout: timeoutMs,
+                    responseType: 'json',
+                    maxBodyLength: Infinity,
+                    maxContentLength: Infinity,
+                });
+                result = body.data;
+                if ((result === null || result === void 0 ? void 0 : result.url) || (result === null || result === void 0 ? void 0 : result.directPath)) {
+                    urls = {
+                        mediaUrl: result.url,
+                        directPath: result.direct_path
+                    };
+                    break;
+                }
+                else {
+                    uploadInfo = await refreshMediaConn(true);
+                    throw new Error(`upload failed, reason: ${JSON.stringify(result)}`);
+                }
+            }
+            catch (error) {
+                if (axios.isAxiosError(error)) {
+                    result = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data;
+                }
+                const isLast = hostname === ((_b = hosts[uploadInfo.hosts.length - 1]) === null || _b === void 0 ? void 0 : _b.hostname);
+                logger.warn({ trace: error.stack, uploadResult: result }, `Error in uploading to ${hostname} ${isLast ? '' : ', retrying...'}`);
+            }
+        }
+        if (!urls) {
+            throw new boom_1.Boom('Media upload failed on all hosts', { statusCode: 500 });
+        }
+        return urls;
+    };
+};
+exports.getWAUploadToServer = getWAUploadToServer;
+const getMediaRetryKey = (mediaKey) => {
+    return (0, crypto_1.hkdf)(mediaKey, 32, { info: 'WhatsApp Media Retry Notification' });
+};
+/**
+ * Generate a binary node that will request the phone to re-upload the media & return the newly uploaded URL
+ */
+const encryptMediaRetryRequest = (key, mediaKey, meId) => {
+    const recp = { stanzaId: key.id };
+    const recpBuffer = WAProto_1.proto.ServerErrorReceipt.encode(recp).finish();
+    const iv = Crypto.randomBytes(12);
+    const retryKey = getMediaRetryKey(mediaKey);
+    const ciphertext = (0, crypto_1.aesEncryptGCM)(recpBuffer, retryKey, iv, Buffer.from(key.id));
+    const req = {
+        tag: 'receipt',
+        attrs: {
+            id: key.id,
+            to: (0, WABinary_1.jidNormalizedUser)(meId),
+            type: 'server-error'
+        },
+        content: [
+            // this encrypt node is actually pretty useless
+            // the media is returned even without this node
+            // keeping it here to maintain parity with WA Web
+            {
+                tag: 'encrypt',
+                attrs: {},
+                content: [
+                    { tag: 'enc_p', attrs: {}, content: ciphertext },
+                    { tag: 'enc_iv', attrs: {}, content: iv }
+                ]
+            },
+            {
+                tag: 'rmr',
+                attrs: {
+                    jid: key.remoteJid,
+                    'from_me': (!!key.fromMe).toString(),
+                    // @ts-ignore
+                    participant: key.participant || undefined
+                }
+            }
+        ]
+    };
+    return req;
+};
+exports.encryptMediaRetryRequest = encryptMediaRetryRequest;
+const decodeMediaRetryNode = (node) => {
+    const rmrNode = (0, WABinary_1.getBinaryNodeChild)(node, 'rmr');
+    const event = {
+        key: {
+            id: node.attrs.id,
+            remoteJid: rmrNode.attrs.jid,
+            fromMe: rmrNode.attrs.from_me === 'true',
+            participant: rmrNode.attrs.participant
+        }
+    };
+    const errorNode = (0, WABinary_1.getBinaryNodeChild)(node, 'error');
+    if (errorNode) {
+        const errorCode = +errorNode.attrs.code;
+        event.error = new boom_1.Boom(`Failed to re-upload media (${errorCode})`, { data: errorNode.attrs, statusCode: (0, exports.getStatusCodeForMediaRetry)(errorCode) });
+    }
+    else {
+        const encryptedInfoNode = (0, WABinary_1.getBinaryNodeChild)(node, 'encrypt');
+        const ciphertext = (0, WABinary_1.getBinaryNodeChildBuffer)(encryptedInfoNode, 'enc_p');
+        const iv = (0, WABinary_1.getBinaryNodeChildBuffer)(encryptedInfoNode, 'enc_iv');
+        if (ciphertext && iv) {
+            event.media = { ciphertext, iv };
+        }
+        else {
+            event.error = new boom_1.Boom('Failed to re-upload media (missing ciphertext)', { statusCode: 404 });
+        }
+    }
+    return event;
+};
+exports.decodeMediaRetryNode = decodeMediaRetryNode;
+const decryptMediaRetryData = ({ ciphertext, iv }, mediaKey, msgId) => {
+    const retryKey = getMediaRetryKey(mediaKey);
+    const plaintext = (0, crypto_1.aesDecryptGCM)(ciphertext, retryKey, iv, Buffer.from(msgId));
+    return WAProto_1.proto.MediaRetryNotification.decode(plaintext);
+};
+exports.decryptMediaRetryData = decryptMediaRetryData;
+const getStatusCodeForMediaRetry = (code) => MEDIA_RETRY_STATUS_MAP[code];
+exports.getStatusCodeForMediaRetry = getStatusCodeForMediaRetry;
+const MEDIA_RETRY_STATUS_MAP = {
+    [WAProto_1.proto.MediaRetryNotification.ResultType.SUCCESS]: 200,
+    [WAProto_1.proto.MediaRetryNotification.ResultType.DECRYPTION_ERROR]: 412,
+    [WAProto_1.proto.MediaRetryNotification.ResultType.NOT_FOUND]: 404,
+    [WAProto_1.proto.MediaRetryNotification.ResultType.GENERAL_ERROR]: 418,
+};
+// eslint-disable-next-line @typescript-eslint/no-unused-vars
+function __importStar(arg0) {
+    throw new Error('Function not implemented.');
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/messages.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/messages.d.ts
new file mode 100644
index 0000000..3bed388
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/messages.d.ts
@@ -0,0 +1,76 @@
+/// <reference types="node" />
+/// <reference types="node" />
+import { Logger } from 'pino';
+import { proto } from '../../WAProto';
+import { AnyMediaMessageContent, AnyMessageContent, MediaGenerationOptions, MessageContentGenerationOptions, MessageGenerationOptions, MessageGenerationOptionsFromContent, MessageUserReceipt, WAMessage, WAMessageContent, WAProto } from '../Types';
+import { MediaDownloadOptions } from './messages-media';
+/**
+ * Uses a regex to test whether the string contains a URL, and returns the URL if it does.
+ * @param text eg. hello https://google.com
+ * @returns the URL, eg. https://google.com
+ */
+export declare const extractUrlFromText: (text: string) => string | undefined;
+export declare const generateLinkPreviewIfRequired: (text: string, getUrlInfo: MessageGenerationOptions['getUrlInfo'], logger: MessageGenerationOptions['logger']) => Promise<import("../Types").WAUrlInfo | undefined>;
+export declare const prepareWAMessageMedia: (message: AnyMediaMessageContent, options: MediaGenerationOptions) => Promise<proto.Message>;
+export declare const prepareDisappearingMessageSettingContent: (ephemeralExpiration?: number) => proto.Message;
+/**
+ * Generate forwarded message content like WA does
+ * @param message the message to forward
+ * @param options.forceForward will show the message as forwarded even if it is from you
+ */
+export declare const generateForwardMessageContent: (message: WAMessage, forceForward?: boolean) => proto.IMessage;
+export declare const generateWAMessageContent: (message: AnyMessageContent, options: MessageContentGenerationOptions) => Promise<proto.Message>;
+export declare const generateWAMessageFromContent: (jid: string, message: WAMessageContent, options: MessageGenerationOptionsFromContent) => proto.WebMessageInfo;
+export declare const generateWAMessage: (jid: string, content: AnyMessageContent, options: MessageGenerationOptions) => Promise<proto.WebMessageInfo>;
+/** Get the key to access the true type of content */
+export declare const getContentType: (content: WAProto.IMessage | undefined) => keyof proto.IMessage | undefined;
+/**
+ * Normalizes ephemeral, view once messages to regular message content
+ * Eg. image messages in ephemeral messages, in view once messages etc.
+ * @param content
+ * @returns
+ */
+export declare const normalizeMessageContent: (content: WAMessageContent | null | undefined) => WAMessageContent | undefined;
+/**
+ * Extract the true message content from a message
+ * Eg. extracts the inner message from a disappearing message/view once message
+ */
+export declare const extractMessageContent: (content: WAMessageContent | undefined | null) => WAMessageContent | undefined;
+/**
+ * Returns the device predicted by message ID
+ */
+export declare const getDevice: (id: string) => "android" | "unknown" | "web" | "ios" | "desktop";
+/** Upserts a receipt in the message */
+export declare const updateMessageWithReceipt: (msg: Pick<WAMessage, 'userReceipt'>, receipt: MessageUserReceipt) => void;
+/** Update the message with a new reaction */
+export declare const updateMessageWithReaction: (msg: Pick<WAMessage, 'reactions'>, reaction: proto.IReaction) => void;
+/** Update the message with a new poll update */
+export declare const updateMessageWithPollUpdate: (msg: Pick<WAMessage, 'pollUpdates'>, update: proto.IPollUpdate) => void;
+type VoteAggregation = {
+    name: string;
+    voters: string[];
+};
+/**
+ * Aggregates all poll updates in a poll.
+ * @param msg the poll creation message
+ * @param meId your jid
+ * @returns A list of options & their voters
+ */
+export declare function getAggregateVotesInPollMessage({ message, pollUpdates }: Pick<WAMessage, 'pollUpdates' | 'message'>, meId?: string): VoteAggregation[];
+/** Given a list of message keys, aggregates them by chat & sender. Useful for sending read receipts in bulk */
+export declare const aggregateMessageKeysNotFromMe: (keys: proto.IMessageKey[]) => {
+    jid: string;
+    participant: string | undefined;
+    messageIds: string[];
+}[];
+type DownloadMediaMessageContext = {
+    reuploadRequest: (msg: WAMessage) => Promise<WAMessage>;
+    logger: Logger;
+};
+/**
+ * Downloads the given message. Throws an error if it's not a media message
+ */
+export declare const downloadMediaMessage: (message: WAMessage, type: 'buffer' | 'stream', options: MediaDownloadOptions, ctx?: DownloadMediaMessageContext) => Promise<Buffer | import("stream").Transform>;
+/** Checks whether the given message is a media message; if it is returns the inner content */
+export declare const assertMediaContent: (content: proto.IMessage | null | undefined) => proto.Message.IVideoMessage | proto.Message.IImageMessage | proto.Message.IAudioMessage | proto.Message.IDocumentMessage | proto.Message.IStickerMessage;
+export {};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/messages.js b/node_modules/@whiskeysockets/baileys/lib/Utils/messages.js
new file mode 100644
index 0000000..68ea590
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/messages.js
@@ -0,0 +1,770 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.assertMediaContent = exports.downloadMediaMessage = exports.aggregateMessageKeysNotFromMe = exports.getAggregateVotesInPollMessage = exports.updateMessageWithPollUpdate = exports.updateMessageWithReaction = exports.updateMessageWithReceipt = exports.getDevice = exports.extractMessageContent = exports.normalizeMessageContent = exports.getContentType = exports.generateWAMessage = exports.generateWAMessageFromContent = exports.generateWAMessageContent = exports.generateForwardMessageContent = exports.prepareDisappearingMessageSettingContent = exports.prepareWAMessageMedia = exports.generateLinkPreviewIfRequired = exports.extractUrlFromText = void 0;
+const boom_1 = require("@hapi/boom");
+const axios_1 = __importDefault(require("axios"));
+const crypto_1 = require("crypto");
+const fs_1 = require("fs");
+const WAProto_1 = require("../../WAProto");
+const Defaults_1 = require("../Defaults");
+const Types_1 = require("../Types");
+const WABinary_1 = require("../WABinary");
+const crypto_2 = require("./crypto");
+const generics_1 = require("./generics");
+const messages_media_1 = require("./messages-media");
+const MIMETYPE_MAP = {
+    image: 'image/jpeg',
+    video: 'video/mp4',
+    document: 'application/pdf',
+    audio: 'audio/ogg; codecs=opus',
+    sticker: 'image/webp',
+    'product-catalog-image': 'image/jpeg',
+};
+const MessageTypeProto = {
+    'image': Types_1.WAProto.Message.ImageMessage,
+    'video': Types_1.WAProto.Message.VideoMessage,
+    'audio': Types_1.WAProto.Message.AudioMessage,
+    'sticker': Types_1.WAProto.Message.StickerMessage,
+    'document': Types_1.WAProto.Message.DocumentMessage,
+};
+const ButtonType = WAProto_1.proto.Message.ButtonsMessage.HeaderType;
+/**
+ * Uses a regex to test whether the string contains a URL, and returns the URL if it does.
+ * @param text eg. hello https://google.com
+ * @returns the URL, eg. https://google.com
+ */
+const extractUrlFromText = (text) => { var _a; return (_a = text.match(Defaults_1.URL_REGEX)) === null || _a === void 0 ? void 0 : _a[0]; };
+exports.extractUrlFromText = extractUrlFromText;
+const generateLinkPreviewIfRequired = async (text, getUrlInfo, logger) => {
+    const url = (0, exports.extractUrlFromText)(text);
+    if (!!getUrlInfo && url) {
+        try {
+            const urlInfo = await getUrlInfo(url);
+            return urlInfo;
+        }
+        catch (error) { // ignore if fails
+            logger === null || logger === void 0 ? void 0 : logger.warn({ trace: error.stack }, 'url generation failed');
+        }
+    }
+};
+exports.generateLinkPreviewIfRequired = generateLinkPreviewIfRequired;
+const assertColor = async (color) => {
+    let assertedColor;
+    if (typeof color === 'number') {
+        assertedColor = color > 0 ? color : 0xffffffff + Number(color) + 1;
+    }
+    else {
+        let hex = color.trim().replace('#', '');
+        if (hex.length <= 6) {
+            hex = 'FF' + hex.padStart(6, '0');
+        }
+        assertedColor = parseInt(hex, 16);
+        return assertedColor;
+    }
+};
+const prepareWAMessageMedia = async (message, options) => {
+    const logger = options.logger;
+    let mediaType;
+    for (const key of Defaults_1.MEDIA_KEYS) {
+        if (key in message) {
+            mediaType = key;
+        }
+    }
+    if (!mediaType) {
+        throw new boom_1.Boom('Invalid media type', { statusCode: 400 });
+    }
+    const uploadData = {
+        ...message,
+        media: message[mediaType]
+    };
+    delete uploadData[mediaType];
+    // check if cacheable + generate cache key
+    const cacheableKey = typeof uploadData.media === 'object' &&
+        ('url' in uploadData.media) &&
+        !!uploadData.media.url &&
+        !!options.mediaCache && (
+    // generate the key
+    mediaType + ':' + uploadData.media.url.toString());
+    if (mediaType === 'document' && !uploadData.fileName) {
+        uploadData.fileName = 'file';
+    }
+    if (!uploadData.mimetype) {
+        uploadData.mimetype = MIMETYPE_MAP[mediaType];
+    }
+    // check for cache hit
+    if (cacheableKey) {
+        const mediaBuff = options.mediaCache.get(cacheableKey);
+        if (mediaBuff) {
+            logger === null || logger === void 0 ? void 0 : logger.debug({ cacheableKey }, 'got media cache hit');
+            const obj = Types_1.WAProto.Message.decode(mediaBuff);
+            const key = `${mediaType}Message`;
+            Object.assign(obj[key], { ...uploadData, media: undefined });
+            return obj;
+        }
+    }
+    const requiresDurationComputation = mediaType === 'audio' && typeof uploadData.seconds === 'undefined';
+    const requiresThumbnailComputation = (mediaType === 'image' || mediaType === 'video') &&
+        (typeof uploadData['jpegThumbnail'] === 'undefined');
+    const requiresWaveformProcessing = mediaType === 'audio' && uploadData.ptt === true;
+    const requiresAudioBackground = options.backgroundColor && mediaType === 'audio' && uploadData.ptt === true;
+    const requiresOriginalForSomeProcessing = requiresDurationComputation || requiresThumbnailComputation;
+    const { mediaKey, encWriteStream, bodyPath, fileEncSha256, fileSha256, fileLength, didSaveToTmpPath } = await (0, messages_media_1.encryptedStream)(uploadData.media, options.mediaTypeOverride || mediaType, {
+        logger,
+        saveOriginalFileIfRequired: requiresOriginalForSomeProcessing,
+        opts: options.options
+    });
+    // url safe Base64 encode the SHA256 hash of the body
+    const fileEncSha256B64 = fileEncSha256.toString('base64');
+    const [{ mediaUrl, directPath }] = await Promise.all([
+        (async () => {
+            const result = await options.upload(encWriteStream, { fileEncSha256B64, mediaType, timeoutMs: options.mediaUploadTimeoutMs });
+            logger === null || logger === void 0 ? void 0 : logger.debug({ mediaType, cacheableKey }, 'uploaded media');
+            return result;
+        })(),
+        (async () => {
+            try {
+                if (requiresThumbnailComputation) {
+                    const { thumbnail, originalImageDimensions } = await (0, messages_media_1.generateThumbnail)(bodyPath, mediaType, options);
+                    uploadData.jpegThumbnail = thumbnail;
+                    if (!uploadData.width && originalImageDimensions) {
+                        uploadData.width = originalImageDimensions.width;
+                        uploadData.height = originalImageDimensions.height;
+                        logger === null || logger === void 0 ? void 0 : logger.debug('set dimensions');
+                    }
+                    logger === null || logger === void 0 ? void 0 : logger.debug('generated thumbnail');
+                }
+                if (requiresDurationComputation) {
+                    uploadData.seconds = await (0, messages_media_1.getAudioDuration)(bodyPath);
+                    logger === null || logger === void 0 ? void 0 : logger.debug('computed audio duration');
+                }
+                if (requiresWaveformProcessing) {
+                    uploadData.waveform = await (0, messages_media_1.getAudioWaveform)(bodyPath, logger);
+                    logger === null || logger === void 0 ? void 0 : logger.debug('processed waveform');
+                }
+                if (requiresWaveformProcessing) {
+                    uploadData.waveform = await (0, messages_media_1.getAudioWaveform)(bodyPath, logger);
+                    logger === null || logger === void 0 ? void 0 : logger.debug('processed waveform');
+                }
+                if (requiresAudioBackground) {
+                    uploadData.backgroundArgb = await assertColor(options.backgroundColor);
+                    logger === null || logger === void 0 ? void 0 : logger.debug('computed backgroundColor audio status');
+                }
+            }
+            catch (error) {
+                logger === null || logger === void 0 ? void 0 : logger.warn({ trace: error.stack }, 'failed to obtain extra info');
+            }
+        })(),
+    ])
+        .finally(async () => {
+        encWriteStream.destroy();
+        // remove tmp files
+        if (didSaveToTmpPath && bodyPath) {
+            await fs_1.promises.unlink(bodyPath);
+            logger === null || logger === void 0 ? void 0 : logger.debug('removed tmp files');
+        }
+    });
+    const obj = Types_1.WAProto.Message.fromObject({
+        [`${mediaType}Message`]: MessageTypeProto[mediaType].fromObject({
+            url: mediaUrl,
+            directPath,
+            mediaKey,
+            fileEncSha256,
+            fileSha256,
+            fileLength,
+            mediaKeyTimestamp: (0, generics_1.unixTimestampSeconds)(),
+            ...uploadData,
+            media: undefined
+        })
+    });
+    if (uploadData.ptv) {
+        obj.ptvMessage = obj.videoMessage;
+        delete obj.videoMessage;
+    }
+    if (cacheableKey) {
+        logger === null || logger === void 0 ? void 0 : logger.debug({ cacheableKey }, 'set cache');
+        options.mediaCache.set(cacheableKey, Types_1.WAProto.Message.encode(obj).finish());
+    }
+    return obj;
+};
+exports.prepareWAMessageMedia = prepareWAMessageMedia;
+const prepareDisappearingMessageSettingContent = (ephemeralExpiration) => {
+    ephemeralExpiration = ephemeralExpiration || 0;
+    const content = {
+        ephemeralMessage: {
+            message: {
+                protocolMessage: {
+                    type: Types_1.WAProto.Message.ProtocolMessage.Type.EPHEMERAL_SETTING,
+                    ephemeralExpiration
+                }
+            }
+        }
+    };
+    return Types_1.WAProto.Message.fromObject(content);
+};
+exports.prepareDisappearingMessageSettingContent = prepareDisappearingMessageSettingContent;
+/**
+ * Generate forwarded message content like WA does
+ * @param message the message to forward
+ * @param options.forceForward will show the message as forwarded even if it is from you
+ */
+const generateForwardMessageContent = (message, forceForward) => {
+    var _a;
+    let content = message.message;
+    if (!content) {
+        throw new boom_1.Boom('no content in message', { statusCode: 400 });
+    }
+    // hacky copy
+    content = (0, exports.normalizeMessageContent)(content);
+    content = WAProto_1.proto.Message.decode(WAProto_1.proto.Message.encode(content).finish());
+    let key = Object.keys(content)[0];
+    let score = ((_a = content[key].contextInfo) === null || _a === void 0 ? void 0 : _a.forwardingScore) || 0;
+    score += message.key.fromMe && !forceForward ? 0 : 1;
+    if (key === 'conversation') {
+        content.extendedTextMessage = { text: content[key] };
+        delete content.conversation;
+        key = 'extendedTextMessage';
+    }
+    if (score > 0) {
+        content[key].contextInfo = { forwardingScore: score, isForwarded: true };
+    }
+    else {
+        content[key].contextInfo = {};
+    }
+    return content;
+};
+exports.generateForwardMessageContent = generateForwardMessageContent;
+const generateWAMessageContent = async (message, options) => {
+    var _a;
+    var _b;
+    let m = {};
+    if ('text' in message) {
+        const extContent = { text: message.text };
+        let urlInfo = message.linkPreview;
+        if (typeof urlInfo === 'undefined') {
+            urlInfo = await (0, exports.generateLinkPreviewIfRequired)(message.text, options.getUrlInfo, options.logger);
+        }
+        if (urlInfo) {
+            extContent.canonicalUrl = urlInfo['canonical-url'];
+            extContent.matchedText = urlInfo['matched-text'];
+            extContent.jpegThumbnail = urlInfo.jpegThumbnail;
+            extContent.description = urlInfo.description;
+            extContent.title = urlInfo.title;
+            extContent.previewType = 0;
+            const img = urlInfo.highQualityThumbnail;
+            if (img) {
+                extContent.thumbnailDirectPath = img.directPath;
+                extContent.mediaKey = img.mediaKey;
+                extContent.mediaKeyTimestamp = img.mediaKeyTimestamp;
+                extContent.thumbnailWidth = img.width;
+                extContent.thumbnailHeight = img.height;
+                extContent.thumbnailSha256 = img.fileSha256;
+                extContent.thumbnailEncSha256 = img.fileEncSha256;
+            }
+        }
+        if (options.backgroundColor) {
+            extContent.backgroundArgb = await assertColor(options.backgroundColor);
+        }
+        if (options.font) {
+            extContent.font = options.font;
+        }
+        m.extendedTextMessage = extContent;
+    }
+    else if ('contacts' in message) {
+        const contactLen = message.contacts.contacts.length;
+        if (!contactLen) {
+            throw new boom_1.Boom('require atleast 1 contact', { statusCode: 400 });
+        }
+        if (contactLen === 1) {
+            m.contactMessage = Types_1.WAProto.Message.ContactMessage.fromObject(message.contacts.contacts[0]);
+        }
+        else {
+            m.contactsArrayMessage = Types_1.WAProto.Message.ContactsArrayMessage.fromObject(message.contacts);
+        }
+    }
+    else if ('location' in message) {
+        m.locationMessage = Types_1.WAProto.Message.LocationMessage.fromObject(message.location);
+    }
+    else if ('react' in message) {
+        if (!message.react.senderTimestampMs) {
+            message.react.senderTimestampMs = Date.now();
+        }
+        m.reactionMessage = Types_1.WAProto.Message.ReactionMessage.fromObject(message.react);
+    }
+    else if ('delete' in message) {
+        m.protocolMessage = {
+            key: message.delete,
+            type: Types_1.WAProto.Message.ProtocolMessage.Type.REVOKE
+        };
+    }
+    else if ('forward' in message) {
+        m = (0, exports.generateForwardMessageContent)(message.forward, message.force);
+    }
+    else if ('disappearingMessagesInChat' in message) {
+        const exp = typeof message.disappearingMessagesInChat === 'boolean' ?
+            (message.disappearingMessagesInChat ? Defaults_1.WA_DEFAULT_EPHEMERAL : 0) :
+            message.disappearingMessagesInChat;
+        m = (0, exports.prepareDisappearingMessageSettingContent)(exp);
+    }
+    else if ('buttonReply' in message) {
+        switch (message.type) {
+            case 'template':
+                m.templateButtonReplyMessage = {
+                    selectedDisplayText: message.buttonReply.displayText,
+                    selectedId: message.buttonReply.id,
+                    selectedIndex: message.buttonReply.index,
+                };
+                break;
+            case 'plain':
+                m.buttonsResponseMessage = {
+                    selectedButtonId: message.buttonReply.id,
+                    selectedDisplayText: message.buttonReply.displayText,
+                    type: WAProto_1.proto.Message.ButtonsResponseMessage.Type.DISPLAY_TEXT,
+                };
+                break;
+        }
+    }
+    else if ('product' in message) {
+        const { imageMessage } = await (0, exports.prepareWAMessageMedia)({ image: message.product.productImage }, options);
+        m.productMessage = Types_1.WAProto.Message.ProductMessage.fromObject({
+            ...message,
+            product: {
+                ...message.product,
+                productImage: imageMessage,
+            }
+        });
+    }
+    else if ('listReply' in message) {
+        m.listResponseMessage = { ...message.listReply };
+    }
+    else if ('poll' in message) {
+        (_b = message.poll).selectableCount || (_b.selectableCount = 0);
+        if (!Array.isArray(message.poll.values)) {
+            throw new boom_1.Boom('Invalid poll values', { statusCode: 400 });
+        }
+        if (message.poll.selectableCount < 0
+            || message.poll.selectableCount > message.poll.values.length) {
+            throw new boom_1.Boom(`poll.selectableCount in poll should be >= 0 and <= ${message.poll.values.length}`, { statusCode: 400 });
+        }
+        m.messageContextInfo = {
+            // encKey
+            messageSecret: message.poll.messageSecret || (0, crypto_1.randomBytes)(32),
+        };
+        m.pollCreationMessage = {
+            name: message.poll.name,
+            selectableOptionsCount: message.poll.selectableCount,
+            options: message.poll.values.map(optionName => ({ optionName })),
+        };
+    }
+    else if ('sharePhoneNumber' in message) {
+        m.protocolMessage = {
+            type: WAProto_1.proto.Message.ProtocolMessage.Type.SHARE_PHONE_NUMBER
+        };
+    }
+    else if ('requestPhoneNumber' in message) {
+        m.requestPhoneNumberMessage = {};
+    }
+    else {
+        m = await (0, exports.prepareWAMessageMedia)(message, options);
+    }
+    if ('buttons' in message && !!message.buttons) {
+        const buttonsMessage = {
+            buttons: message.buttons.map(b => ({ ...b, type: WAProto_1.proto.Message.ButtonsMessage.Button.Type.RESPONSE }))
+        };
+        if ('text' in message) {
+            buttonsMessage.contentText = message.text;
+            buttonsMessage.headerType = ButtonType.EMPTY;
+        }
+        else {
+            if ('caption' in message) {
+                buttonsMessage.contentText = message.caption;
+            }
+            const type = Object.keys(m)[0].replace('Message', '').toUpperCase();
+            buttonsMessage.headerType = ButtonType[type];
+            Object.assign(buttonsMessage, m);
+        }
+        if ('footer' in message && !!message.footer) {
+            buttonsMessage.footerText = message.footer;
+        }
+        m = { buttonsMessage };
+    }
+    else if ('templateButtons' in message && !!message.templateButtons) {
+        const msg = {
+            hydratedButtons: message.templateButtons
+        };
+        if ('text' in message) {
+            msg.hydratedContentText = message.text;
+        }
+        else {
+            if ('caption' in message) {
+                msg.hydratedContentText = message.caption;
+            }
+            Object.assign(msg, m);
+        }
+        if ('footer' in message && !!message.footer) {
+            msg.hydratedFooterText = message.footer;
+        }
+        m = {
+            templateMessage: {
+                fourRowTemplate: msg,
+                hydratedTemplate: msg
+            }
+        };
+    }
+    if ('sections' in message && !!message.sections) {
+        const listMessage = {
+            sections: message.sections,
+            buttonText: message.buttonText,
+            title: message.title,
+            footerText: message.footer,
+            description: message.text,
+            listType: WAProto_1.proto.Message.ListMessage.ListType.SINGLE_SELECT
+        };
+        m = { listMessage };
+    }
+    if ('viewOnce' in message && !!message.viewOnce) {
+        m = { viewOnceMessage: { message: m } };
+    }
+    if ('mentions' in message && ((_a = message.mentions) === null || _a === void 0 ? void 0 : _a.length)) {
+        const [messageType] = Object.keys(m);
+        m[messageType].contextInfo = m[messageType] || {};
+        m[messageType].contextInfo.mentionedJid = message.mentions;
+    }
+    if ('edit' in message) {
+        m = {
+            protocolMessage: {
+                key: message.edit,
+                editedMessage: m,
+                timestampMs: Date.now(),
+                type: Types_1.WAProto.Message.ProtocolMessage.Type.MESSAGE_EDIT
+            }
+        };
+    }
+    if ('contextInfo' in message && !!message.contextInfo) {
+        const [messageType] = Object.keys(m);
+        m[messageType] = m[messageType] || {};
+        m[messageType].contextInfo = message.contextInfo;
+    }
+    return Types_1.WAProto.Message.fromObject(m);
+};
+exports.generateWAMessageContent = generateWAMessageContent;
+const generateWAMessageFromContent = (jid, message, options) => {
+    // set timestamp to now
+    // if not specified
+    if (!options.timestamp) {
+        options.timestamp = new Date();
+    }
+    const innerMessage = (0, exports.normalizeMessageContent)(message);
+    const key = (0, exports.getContentType)(innerMessage);
+    const timestamp = (0, generics_1.unixTimestampSeconds)(options.timestamp);
+    const { quoted, userJid } = options;
+    if (quoted) {
+        const participant = quoted.key.fromMe ? userJid : (quoted.participant || quoted.key.participant || quoted.key.remoteJid);
+        let quotedMsg = (0, exports.normalizeMessageContent)(quoted.message);
+        const msgType = (0, exports.getContentType)(quotedMsg);
+        // strip any redundant properties
+        quotedMsg = WAProto_1.proto.Message.fromObject({ [msgType]: quotedMsg[msgType] });
+        const quotedContent = quotedMsg[msgType];
+        if (typeof quotedContent === 'object' && quotedContent && 'contextInfo' in quotedContent) {
+            delete quotedContent.contextInfo;
+        }
+        const contextInfo = innerMessage[key].contextInfo || {};
+        contextInfo.participant = (0, WABinary_1.jidNormalizedUser)(participant);
+        contextInfo.stanzaId = quoted.key.id;
+        contextInfo.quotedMessage = quotedMsg;
+        // if a participant is quoted, then it must be a group
+        // hence, remoteJid of group must also be entered
+        if (jid !== quoted.key.remoteJid) {
+            contextInfo.remoteJid = quoted.key.remoteJid;
+        }
+        innerMessage[key].contextInfo = contextInfo;
+    }
+    if (
+    // if we want to send a disappearing message
+    !!(options === null || options === void 0 ? void 0 : options.ephemeralExpiration) &&
+        // and it's not a protocol message -- delete, toggle disappear message
+        key !== 'protocolMessage' &&
+        // already not converted to disappearing message
+        key !== 'ephemeralMessage') {
+        innerMessage[key].contextInfo = {
+            ...(innerMessage[key].contextInfo || {}),
+            expiration: options.ephemeralExpiration || Defaults_1.WA_DEFAULT_EPHEMERAL,
+            //ephemeralSettingTimestamp: options.ephemeralOptions.eph_setting_ts?.toString()
+        };
+    }
+    message = Types_1.WAProto.Message.fromObject(message);
+    const messageJSON = {
+        key: {
+            remoteJid: jid,
+            fromMe: true,
+            id: (options === null || options === void 0 ? void 0 : options.messageId) || (0, generics_1.generateMessageID)(),
+        },
+        message: message,
+        messageTimestamp: timestamp,
+        messageStubParameters: [],
+        participant: (0, WABinary_1.isJidGroup)(jid) || (0, WABinary_1.isJidStatusBroadcast)(jid) ? userJid : undefined,
+        status: Types_1.WAMessageStatus.PENDING
+    };
+    return Types_1.WAProto.WebMessageInfo.fromObject(messageJSON);
+};
+exports.generateWAMessageFromContent = generateWAMessageFromContent;
+const generateWAMessage = async (jid, content, options) => {
+    var _a;
+    // ensure msg ID is with every log
+    options.logger = (_a = options === null || options === void 0 ? void 0 : options.logger) === null || _a === void 0 ? void 0 : _a.child({ msgId: options.messageId });
+    return (0, exports.generateWAMessageFromContent)(jid, await (0, exports.generateWAMessageContent)(content, options), options);
+};
+exports.generateWAMessage = generateWAMessage;
+/** Get the key to access the true type of content */
+const getContentType = (content) => {
+    if (content) {
+        const keys = Object.keys(content);
+        const key = keys.find(k => (k === 'conversation' || k.includes('Message')) && k !== 'senderKeyDistributionMessage');
+        return key;
+    }
+};
+exports.getContentType = getContentType;
+/**
+ * Normalizes ephemeral, view once messages to regular message content
+ * Eg. image messages in ephemeral messages, in view once messages etc.
+ * @param content
+ * @returns
+ */
+const normalizeMessageContent = (content) => {
+    if (!content) {
+        return undefined;
+    }
+    // set max iterations to prevent an infinite loop
+    for (let i = 0; i < 5; i++) {
+        const inner = getFutureProofMessage(content);
+        if (!inner) {
+            break;
+        }
+        content = inner.message;
+    }
+    return content;
+    function getFutureProofMessage(message) {
+        return ((message === null || message === void 0 ? void 0 : message.ephemeralMessage)
+            || (message === null || message === void 0 ? void 0 : message.viewOnceMessage)
+            || (message === null || message === void 0 ? void 0 : message.documentWithCaptionMessage)
+            || (message === null || message === void 0 ? void 0 : message.viewOnceMessageV2)
+            || (message === null || message === void 0 ? void 0 : message.viewOnceMessageV2Extension)
+            || (message === null || message === void 0 ? void 0 : message.editedMessage));
+    }
+};
+exports.normalizeMessageContent = normalizeMessageContent;
+/**
+ * Extract the true message content from a message
+ * Eg. extracts the inner message from a disappearing message/view once message
+ */
+const extractMessageContent = (content) => {
+    var _a, _b, _c, _d, _e, _f;
+    const extractFromTemplateMessage = (msg) => {
+        if (msg.imageMessage) {
+            return { imageMessage: msg.imageMessage };
+        }
+        else if (msg.documentMessage) {
+            return { documentMessage: msg.documentMessage };
+        }
+        else if (msg.videoMessage) {
+            return { videoMessage: msg.videoMessage };
+        }
+        else if (msg.locationMessage) {
+            return { locationMessage: msg.locationMessage };
+        }
+        else {
+            return {
+                conversation: 'contentText' in msg
+                    ? msg.contentText
+                    : ('hydratedContentText' in msg ? msg.hydratedContentText : '')
+            };
+        }
+    };
+    content = (0, exports.normalizeMessageContent)(content);
+    if (content === null || content === void 0 ? void 0 : content.buttonsMessage) {
+        return extractFromTemplateMessage(content.buttonsMessage);
+    }
+    if ((_a = content === null || content === void 0 ? void 0 : content.templateMessage) === null || _a === void 0 ? void 0 : _a.hydratedFourRowTemplate) {
+        return extractFromTemplateMessage((_b = content === null || content === void 0 ? void 0 : content.templateMessage) === null || _b === void 0 ? void 0 : _b.hydratedFourRowTemplate);
+    }
+    if ((_c = content === null || content === void 0 ? void 0 : content.templateMessage) === null || _c === void 0 ? void 0 : _c.hydratedTemplate) {
+        return extractFromTemplateMessage((_d = content === null || content === void 0 ? void 0 : content.templateMessage) === null || _d === void 0 ? void 0 : _d.hydratedTemplate);
+    }
+    if ((_e = content === null || content === void 0 ? void 0 : content.templateMessage) === null || _e === void 0 ? void 0 : _e.fourRowTemplate) {
+        return extractFromTemplateMessage((_f = content === null || content === void 0 ? void 0 : content.templateMessage) === null || _f === void 0 ? void 0 : _f.fourRowTemplate);
+    }
+    return content;
+};
+exports.extractMessageContent = extractMessageContent;
+/**
+ * Returns the device predicted by message ID
+ */
+const getDevice = (id) => /^3A.{18}$/.test(id) ? 'ios' : /^3E.{20}$/.test(id) ? 'web' : /^(.{21}|.{32})$/.test(id) ? 'android' : /^.{18}$/.test(id) ? 'desktop' : 'unknown';
+exports.getDevice = getDevice;
+/** Upserts a receipt in the message */
+const updateMessageWithReceipt = (msg, receipt) => {
+    msg.userReceipt = msg.userReceipt || [];
+    const recp = msg.userReceipt.find(m => m.userJid === receipt.userJid);
+    if (recp) {
+        Object.assign(recp, receipt);
+    }
+    else {
+        msg.userReceipt.push(receipt);
+    }
+};
+exports.updateMessageWithReceipt = updateMessageWithReceipt;
+/** Update the message with a new reaction */
+const updateMessageWithReaction = (msg, reaction) => {
+    const authorID = (0, generics_1.getKeyAuthor)(reaction.key);
+    const reactions = (msg.reactions || [])
+        .filter(r => (0, generics_1.getKeyAuthor)(r.key) !== authorID);
+    if (reaction.text) {
+        reactions.push(reaction);
+    }
+    msg.reactions = reactions;
+};
+exports.updateMessageWithReaction = updateMessageWithReaction;
+/** Update the message with a new poll update */
+const updateMessageWithPollUpdate = (msg, update) => {
+    var _a, _b;
+    const authorID = (0, generics_1.getKeyAuthor)(update.pollUpdateMessageKey);
+    const reactions = (msg.pollUpdates || [])
+        .filter(r => (0, generics_1.getKeyAuthor)(r.pollUpdateMessageKey) !== authorID);
+    if ((_b = (_a = update.vote) === null || _a === void 0 ? void 0 : _a.selectedOptions) === null || _b === void 0 ? void 0 : _b.length) {
+        reactions.push(update);
+    }
+    msg.pollUpdates = reactions;
+};
+exports.updateMessageWithPollUpdate = updateMessageWithPollUpdate;
+/**
+ * Aggregates all poll updates in a poll.
+ * @param msg the poll creation message
+ * @param meId your jid
+ * @returns A list of options & their voters
+ */
+function getAggregateVotesInPollMessage({ message, pollUpdates }, meId) {
+    var _a, _b, _c;
+    const opts = ((_a = message === null || message === void 0 ? void 0 : message.pollCreationMessage) === null || _a === void 0 ? void 0 : _a.options) || ((_b = message === null || message === void 0 ? void 0 : message.pollCreationMessageV2) === null || _b === void 0 ? void 0 : _b.options) || ((_c = message === null || message === void 0 ? void 0 : message.pollCreationMessageV3) === null || _c === void 0 ? void 0 : _c.options) || [];
+    const voteHashMap = opts.reduce((acc, opt) => {
+        const hash = (0, crypto_2.sha256)(Buffer.from(opt.optionName || '')).toString();
+        acc[hash] = {
+            name: opt.optionName || '',
+            voters: []
+        };
+        return acc;
+    }, {});
+    for (const update of pollUpdates || []) {
+        const { vote } = update;
+        if (!vote) {
+            continue;
+        }
+        for (const option of vote.selectedOptions || []) {
+            const hash = option.toString();
+            let data = voteHashMap[hash];
+            if (!data) {
+                voteHashMap[hash] = {
+                    name: 'Unknown',
+                    voters: []
+                };
+                data = voteHashMap[hash];
+            }
+            voteHashMap[hash].voters.push((0, generics_1.getKeyAuthor)(update.pollUpdateMessageKey, meId));
+        }
+    }
+    return Object.values(voteHashMap);
+}
+exports.getAggregateVotesInPollMessage = getAggregateVotesInPollMessage;
+/** Given a list of message keys, aggregates them by chat & sender. Useful for sending read receipts in bulk */
+const aggregateMessageKeysNotFromMe = (keys) => {
+    const keyMap = {};
+    for (const { remoteJid, id, participant, fromMe } of keys) {
+        if (!fromMe) {
+            const uqKey = `${remoteJid}:${participant || ''}`;
+            if (!keyMap[uqKey]) {
+                keyMap[uqKey] = {
+                    jid: remoteJid,
+                    participant: participant,
+                    messageIds: []
+                };
+            }
+            keyMap[uqKey].messageIds.push(id);
+        }
+    }
+    return Object.values(keyMap);
+};
+exports.aggregateMessageKeysNotFromMe = aggregateMessageKeysNotFromMe;
+const REUPLOAD_REQUIRED_STATUS = [410, 404];
+/**
+ * Downloads the given message. Throws an error if it's not a media message
+ */
+const downloadMediaMessage = async (message, type, options, ctx) => {
+    var _a;
+    try {
+        const result = await downloadMsg();
+        return result;
+    }
+    catch (error) {
+        if (ctx) {
+            if (axios_1.default.isAxiosError(error)) {
+                // check if the message requires a reupload
+                if (REUPLOAD_REQUIRED_STATUS.includes((_a = error.response) === null || _a === void 0 ? void 0 : _a.status)) {
+                    ctx.logger.info({ key: message.key }, 'sending reupload media request...');
+                    // request reupload
+                    message = await ctx.reuploadRequest(message);
+                    const result = await downloadMsg();
+                    return result;
+                }
+            }
+        }
+        throw error;
+    }
+    async function downloadMsg() {
+        const mContent = (0, exports.extractMessageContent)(message.message);
+        if (!mContent) {
+            throw new boom_1.Boom('No message present', { statusCode: 400, data: message });
+        }
+        const contentType = (0, exports.getContentType)(mContent);
+        let mediaType = contentType === null || contentType === void 0 ? void 0 : contentType.replace('Message', '');
+        const media = mContent[contentType];
+        if (!media || typeof media !== 'object' || (!('url' in media) && !('thumbnailDirectPath' in media))) {
+            throw new boom_1.Boom(`"${contentType}" message is not a media message`);
+        }
+        let download;
+        if ('thumbnailDirectPath' in media && !('url' in media)) {
+            download = {
+                directPath: media.thumbnailDirectPath,
+                mediaKey: media.mediaKey
+            };
+            mediaType = 'thumbnail-link';
+        }
+        else {
+            download = media;
+        }
+        const stream = await (0, messages_media_1.downloadContentFromMessage)(download, mediaType, options);
+        if (type === 'buffer') {
+            const bufferArray = [];
+            for await (const chunk of stream) {
+                bufferArray.push(chunk);
+            }
+            return Buffer.concat(bufferArray);
+        }
+        return stream;
+    }
+};
+exports.downloadMediaMessage = downloadMediaMessage;
+/** Checks whether the given message is a media message; if it is returns the inner content */
+const assertMediaContent = (content) => {
+    content = (0, exports.extractMessageContent)(content);
+    const mediaContent = (content === null || content === void 0 ? void 0 : content.documentMessage)
+        || (content === null || content === void 0 ? void 0 : content.imageMessage)
+        || (content === null || content === void 0 ? void 0 : content.videoMessage)
+        || (content === null || content === void 0 ? void 0 : content.audioMessage)
+        || (content === null || content === void 0 ? void 0 : content.stickerMessage);
+    if (!mediaContent) {
+        throw new boom_1.Boom('given message is not a media message', { statusCode: 400, data: content });
+    }
+    return mediaContent;
+};
+exports.assertMediaContent = assertMediaContent;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/noise-handler.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/noise-handler.d.ts
new file mode 100644
index 0000000..41c1931
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/noise-handler.d.ts
@@ -0,0 +1,20 @@
+/// <reference types="node" />
+import { Logger } from 'pino';
+import { proto } from '../../WAProto';
+import { KeyPair } from '../Types';
+import { BinaryNode } from '../WABinary';
+export declare const makeNoiseHandler: ({ keyPair: { private: privateKey, public: publicKey }, NOISE_HEADER, mobile, logger, }: {
+    keyPair: KeyPair;
+    NOISE_HEADER: Uint8Array;
+    mobile: boolean;
+    logger: Logger;
+}) => {
+    encrypt: (plaintext: Uint8Array) => Buffer;
+    decrypt: (ciphertext: Uint8Array) => Buffer;
+    authenticate: (data: Uint8Array) => void;
+    mixIntoKey: (data: Uint8Array) => void;
+    finishInit: () => void;
+    processHandshake: ({ serverHello }: proto.HandshakeMessage, noiseKey: KeyPair) => Buffer;
+    encodeFrame: (data: Buffer | Uint8Array) => Buffer;
+    decodeFrame: (newData: Buffer | Uint8Array, onFrame: (buff: Uint8Array | BinaryNode) => void) => void;
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/noise-handler.js b/node_modules/@whiskeysockets/baileys/lib/Utils/noise-handler.js
new file mode 100644
index 0000000..175d2c1
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/noise-handler.js
@@ -0,0 +1,142 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.makeNoiseHandler = void 0;
+const boom_1 = require("@hapi/boom");
+const WAProto_1 = require("../../WAProto");
+const Defaults_1 = require("../Defaults");
+const WABinary_1 = require("../WABinary");
+const crypto_1 = require("./crypto");
+const generateIV = (counter) => {
+    const iv = new ArrayBuffer(12);
+    new DataView(iv).setUint32(8, counter);
+    return new Uint8Array(iv);
+};
+const makeNoiseHandler = ({ keyPair: { private: privateKey, public: publicKey }, NOISE_HEADER, mobile, logger, }) => {
+    logger = logger.child({ class: 'ns' });
+    const authenticate = (data) => {
+        if (!isFinished) {
+            hash = (0, crypto_1.sha256)(Buffer.concat([hash, data]));
+        }
+    };
+    const encrypt = (plaintext) => {
+        const result = (0, crypto_1.aesEncryptGCM)(plaintext, encKey, generateIV(writeCounter), hash);
+        writeCounter += 1;
+        authenticate(result);
+        return result;
+    };
+    const decrypt = (ciphertext) => {
+        // before the handshake is finished, we use the same counter
+        // after handshake, the counters are different
+        const iv = generateIV(isFinished ? readCounter : writeCounter);
+        const result = (0, crypto_1.aesDecryptGCM)(ciphertext, decKey, iv, hash);
+        if (isFinished) {
+            readCounter += 1;
+        }
+        else {
+            writeCounter += 1;
+        }
+        authenticate(ciphertext);
+        return result;
+    };
+    const localHKDF = (data) => {
+        const key = (0, crypto_1.hkdf)(Buffer.from(data), 64, { salt, info: '' });
+        return [key.slice(0, 32), key.slice(32)];
+    };
+    const mixIntoKey = (data) => {
+        const [write, read] = localHKDF(data);
+        salt = write;
+        encKey = read;
+        decKey = read;
+        readCounter = 0;
+        writeCounter = 0;
+    };
+    const finishInit = () => {
+        const [write, read] = localHKDF(new Uint8Array(0));
+        encKey = write;
+        decKey = read;
+        hash = Buffer.from([]);
+        readCounter = 0;
+        writeCounter = 0;
+        isFinished = true;
+    };
+    const data = Buffer.from(Defaults_1.NOISE_MODE);
+    let hash = Buffer.from(data.byteLength === 32 ? data : (0, crypto_1.sha256)(data));
+    let salt = hash;
+    let encKey = hash;
+    let decKey = hash;
+    let readCounter = 0;
+    let writeCounter = 0;
+    let isFinished = false;
+    let sentIntro = false;
+    let inBytes = Buffer.alloc(0);
+    authenticate(NOISE_HEADER);
+    authenticate(publicKey);
+    return {
+        encrypt,
+        decrypt,
+        authenticate,
+        mixIntoKey,
+        finishInit,
+        processHandshake: ({ serverHello }, noiseKey) => {
+            authenticate(serverHello.ephemeral);
+            mixIntoKey(crypto_1.Curve.sharedKey(privateKey, serverHello.ephemeral));
+            const decStaticContent = decrypt(serverHello.static);
+            mixIntoKey(crypto_1.Curve.sharedKey(privateKey, decStaticContent));
+            const certDecoded = decrypt(serverHello.payload);
+            if (mobile) {
+                WAProto_1.proto.CertChain.NoiseCertificate.decode(certDecoded);
+            }
+            else {
+                const { intermediate: certIntermediate } = WAProto_1.proto.CertChain.decode(certDecoded);
+                const { issuerSerial } = WAProto_1.proto.CertChain.NoiseCertificate.Details.decode(certIntermediate.details);
+                if (issuerSerial !== Defaults_1.WA_CERT_DETAILS.SERIAL) {
+                    throw new boom_1.Boom('certification match failed', { statusCode: 400 });
+                }
+            }
+            const keyEnc = encrypt(noiseKey.public);
+            mixIntoKey(crypto_1.Curve.sharedKey(noiseKey.private, serverHello.ephemeral));
+            return keyEnc;
+        },
+        encodeFrame: (data) => {
+            if (isFinished) {
+                data = encrypt(data);
+            }
+            const introSize = sentIntro ? 0 : NOISE_HEADER.length;
+            const frame = Buffer.alloc(introSize + 3 + data.byteLength);
+            if (!sentIntro) {
+                frame.set(NOISE_HEADER);
+                sentIntro = true;
+            }
+            frame.writeUInt8(data.byteLength >> 16, introSize);
+            frame.writeUInt16BE(65535 & data.byteLength, introSize + 1);
+            frame.set(data, introSize + 3);
+            return frame;
+        },
+        decodeFrame: (newData, onFrame) => {
+            var _a;
+            // the binary protocol uses its own framing mechanism
+            // on top of the WS frames
+            // so we get this data and separate out the frames
+            const getBytesSize = () => {
+                if (inBytes.length >= 3) {
+                    return (inBytes.readUInt8() << 16) | inBytes.readUInt16BE(1);
+                }
+            };
+            inBytes = Buffer.concat([inBytes, newData]);
+            logger.trace(`recv ${newData.length} bytes, total recv ${inBytes.length} bytes`);
+            let size = getBytesSize();
+            while (size && inBytes.length >= size + 3) {
+                let frame = inBytes.slice(3, size + 3);
+                inBytes = inBytes.slice(size + 3);
+                if (isFinished) {
+                    const result = decrypt(frame);
+                    frame = (0, WABinary_1.decodeBinaryNode)(result);
+                }
+                logger.trace({ msg: (_a = frame === null || frame === void 0 ? void 0 : frame.attrs) === null || _a === void 0 ? void 0 : _a.id }, 'recv frame');
+                onFrame(frame);
+                size = getBytesSize();
+            }
+        }
+    };
+};
+exports.makeNoiseHandler = makeNoiseHandler;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/process-message.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/process-message.d.ts
new file mode 100644
index 0000000..68eb9c9
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/process-message.d.ts
@@ -0,0 +1,41 @@
+import { AxiosRequestConfig } from 'axios';
+import type { Logger } from 'pino';
+import { proto } from '../../WAProto';
+import { AuthenticationCreds, BaileysEventEmitter, SignalKeyStoreWithTransaction, SocketConfig } from '../Types';
+type ProcessMessageContext = {
+    shouldProcessHistoryMsg: boolean;
+    creds: AuthenticationCreds;
+    keyStore: SignalKeyStoreWithTransaction;
+    ev: BaileysEventEmitter;
+    getMessage: SocketConfig['getMessage'];
+    logger?: Logger;
+    options: AxiosRequestConfig<{}>;
+};
+/** Cleans a received message to further processing */
+export declare const cleanMessage: (message: proto.IWebMessageInfo, meId: string) => void;
+export declare const isRealMessage: (message: proto.IWebMessageInfo, meId: string) => boolean | undefined;
+export declare const shouldIncrementChatUnread: (message: proto.IWebMessageInfo) => boolean;
+/**
+ * Get the ID of the chat from the given key.
+ * Typically -- that'll be the remoteJid, but for broadcasts, it'll be the participant
+ */
+export declare const getChatId: ({ remoteJid, participant, fromMe }: proto.IMessageKey) => string;
+type PollContext = {
+    /** normalised jid of the person that created the poll */
+    pollCreatorJid: string;
+    /** ID of the poll creation message */
+    pollMsgId: string;
+    /** poll creation message enc key */
+    pollEncKey: Uint8Array;
+    /** jid of the person that voted */
+    voterJid: string;
+};
+/**
+ * Decrypt a poll vote
+ * @param vote encrypted vote
+ * @param ctx additional info about the poll required for decryption
+ * @returns list of SHA256 options
+ */
+export declare function decryptPollVote({ encPayload, encIv }: proto.Message.IPollEncValue, { pollCreatorJid, pollMsgId, pollEncKey, voterJid, }: PollContext): proto.Message.PollVoteMessage;
+declare const processMessage: (message: proto.IWebMessageInfo, { shouldProcessHistoryMsg, ev, creds, keyStore, logger, options, getMessage }: ProcessMessageContext) => Promise<void>;
+export default processMessage;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/process-message.js b/node_modules/@whiskeysockets/baileys/lib/Utils/process-message.js
new file mode 100644
index 0000000..ee4b96b
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/process-message.js
@@ -0,0 +1,321 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.decryptPollVote = exports.getChatId = exports.shouldIncrementChatUnread = exports.isRealMessage = exports.cleanMessage = void 0;
+const WAProto_1 = require("../../WAProto");
+const Types_1 = require("../Types");
+const messages_1 = require("../Utils/messages");
+const WABinary_1 = require("../WABinary");
+const crypto_1 = require("./crypto");
+const generics_1 = require("./generics");
+const history_1 = require("./history");
+const REAL_MSG_STUB_TYPES = new Set([
+    Types_1.WAMessageStubType.CALL_MISSED_GROUP_VIDEO,
+    Types_1.WAMessageStubType.CALL_MISSED_GROUP_VOICE,
+    Types_1.WAMessageStubType.CALL_MISSED_VIDEO,
+    Types_1.WAMessageStubType.CALL_MISSED_VOICE
+]);
+const REAL_MSG_REQ_ME_STUB_TYPES = new Set([
+    Types_1.WAMessageStubType.GROUP_PARTICIPANT_ADD
+]);
+/** Cleans a received message to further processing */
+const cleanMessage = (message, meId) => {
+    // ensure remoteJid and participant doesn't have device or agent in it
+    message.key.remoteJid = (0, WABinary_1.jidNormalizedUser)(message.key.remoteJid);
+    message.key.participant = message.key.participant ? (0, WABinary_1.jidNormalizedUser)(message.key.participant) : undefined;
+    const content = (0, messages_1.normalizeMessageContent)(message.message);
+    // if the message has a reaction, ensure fromMe & remoteJid are from our perspective
+    if (content === null || content === void 0 ? void 0 : content.reactionMessage) {
+        normaliseKey(content.reactionMessage.key);
+    }
+    if (content === null || content === void 0 ? void 0 : content.pollUpdateMessage) {
+        normaliseKey(content.pollUpdateMessage.pollCreationMessageKey);
+    }
+    function normaliseKey(msgKey) {
+        // if the reaction is from another user
+        // we've to correctly map the key to this user's perspective
+        if (!message.key.fromMe) {
+            // if the sender believed the message being reacted to is not from them
+            // we've to correct the key to be from them, or some other participant
+            msgKey.fromMe = !msgKey.fromMe
+                ? (0, WABinary_1.areJidsSameUser)(msgKey.participant || msgKey.remoteJid, meId)
+                // if the message being reacted to, was from them
+                // fromMe automatically becomes false
+                : false;
+            // set the remoteJid to being the same as the chat the message came from
+            msgKey.remoteJid = message.key.remoteJid;
+            // set participant of the message
+            msgKey.participant = msgKey.participant || message.key.participant;
+        }
+    }
+};
+exports.cleanMessage = cleanMessage;
+const isRealMessage = (message, meId) => {
+    var _a;
+    const normalizedContent = (0, messages_1.normalizeMessageContent)(message.message);
+    const hasSomeContent = !!(0, messages_1.getContentType)(normalizedContent);
+    return (!!normalizedContent
+        || REAL_MSG_STUB_TYPES.has(message.messageStubType)
+        || (REAL_MSG_REQ_ME_STUB_TYPES.has(message.messageStubType)
+            && ((_a = message.messageStubParameters) === null || _a === void 0 ? void 0 : _a.some(p => (0, WABinary_1.areJidsSameUser)(meId, p)))))
+        && hasSomeContent
+        && !(normalizedContent === null || normalizedContent === void 0 ? void 0 : normalizedContent.protocolMessage)
+        && !(normalizedContent === null || normalizedContent === void 0 ? void 0 : normalizedContent.reactionMessage)
+        && !(normalizedContent === null || normalizedContent === void 0 ? void 0 : normalizedContent.pollUpdateMessage);
+};
+exports.isRealMessage = isRealMessage;
+const shouldIncrementChatUnread = (message) => (!message.key.fromMe && !message.messageStubType);
+exports.shouldIncrementChatUnread = shouldIncrementChatUnread;
+/**
+ * Get the ID of the chat from the given key.
+ * Typically -- that'll be the remoteJid, but for broadcasts, it'll be the participant
+ */
+const getChatId = ({ remoteJid, participant, fromMe }) => {
+    if ((0, WABinary_1.isJidBroadcast)(remoteJid)
+        && !(0, WABinary_1.isJidStatusBroadcast)(remoteJid)
+        && !fromMe) {
+        return participant;
+    }
+    return remoteJid;
+};
+exports.getChatId = getChatId;
+/**
+ * Decrypt a poll vote
+ * @param vote encrypted vote
+ * @param ctx additional info about the poll required for decryption
+ * @returns list of SHA256 options
+ */
+function decryptPollVote({ encPayload, encIv }, { pollCreatorJid, pollMsgId, pollEncKey, voterJid, }) {
+    const sign = Buffer.concat([
+        toBinary(pollMsgId),
+        toBinary(pollCreatorJid),
+        toBinary(voterJid),
+        toBinary('Poll Vote'),
+        new Uint8Array([1])
+    ]);
+    const key0 = (0, crypto_1.hmacSign)(pollEncKey, new Uint8Array(32), 'sha256');
+    const decKey = (0, crypto_1.hmacSign)(sign, key0, 'sha256');
+    const aad = toBinary(`${pollMsgId}\u0000${voterJid}`);
+    const decrypted = (0, crypto_1.aesDecryptGCM)(encPayload, decKey, encIv, aad);
+    return WAProto_1.proto.Message.PollVoteMessage.decode(decrypted);
+    function toBinary(txt) {
+        return Buffer.from(txt);
+    }
+}
+exports.decryptPollVote = decryptPollVote;
+const processMessage = async (message, { shouldProcessHistoryMsg, ev, creds, keyStore, logger, options, getMessage }) => {
+    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
+    const meId = creds.me.id;
+    const { accountSettings } = creds;
+    const chat = { id: (0, WABinary_1.jidNormalizedUser)((0, exports.getChatId)(message.key)) };
+    const isRealMsg = (0, exports.isRealMessage)(message, meId);
+    if (isRealMsg) {
+        chat.conversationTimestamp = (0, generics_1.toNumber)(message.messageTimestamp);
+        // only increment unread count if not CIPHERTEXT and from another person
+        if ((0, exports.shouldIncrementChatUnread)(message)) {
+            chat.unreadCount = (chat.unreadCount || 0) + 1;
+        }
+    }
+    const content = (0, messages_1.normalizeMessageContent)(message.message);
+    // unarchive chat if it's a real message, or someone reacted to our message
+    // and we've the unarchive chats setting on
+    if ((isRealMsg || ((_b = (_a = content === null || content === void 0 ? void 0 : content.reactionMessage) === null || _a === void 0 ? void 0 : _a.key) === null || _b === void 0 ? void 0 : _b.fromMe))
+        && (accountSettings === null || accountSettings === void 0 ? void 0 : accountSettings.unarchiveChats)) {
+        chat.archived = false;
+        chat.readOnly = false;
+    }
+    const protocolMsg = content === null || content === void 0 ? void 0 : content.protocolMessage;
+    if (protocolMsg) {
+        switch (protocolMsg.type) {
+            case WAProto_1.proto.Message.ProtocolMessage.Type.HISTORY_SYNC_NOTIFICATION:
+                const histNotification = protocolMsg.historySyncNotification;
+                const process = shouldProcessHistoryMsg;
+                const isLatest = !((_c = creds.processedHistoryMessages) === null || _c === void 0 ? void 0 : _c.length);
+                logger === null || logger === void 0 ? void 0 : logger.info({
+                    histNotification,
+                    process,
+                    id: message.key.id,
+                    isLatest,
+                }, 'got history notification');
+                if (process) {
+                    ev.emit('creds.update', {
+                        processedHistoryMessages: [
+                            ...(creds.processedHistoryMessages || []),
+                            { key: message.key, messageTimestamp: message.messageTimestamp }
+                        ]
+                    });
+                    const data = await (0, history_1.downloadAndProcessHistorySyncNotification)(histNotification, options);
+                    ev.emit('messaging-history.set', { ...data, isLatest });
+                }
+                break;
+            case WAProto_1.proto.Message.ProtocolMessage.Type.APP_STATE_SYNC_KEY_SHARE:
+                const keys = protocolMsg.appStateSyncKeyShare.keys;
+                if (keys === null || keys === void 0 ? void 0 : keys.length) {
+                    let newAppStateSyncKeyId = '';
+                    await keyStore.transaction(async () => {
+                        const newKeys = [];
+                        for (const { keyData, keyId } of keys) {
+                            const strKeyId = Buffer.from(keyId.keyId).toString('base64');
+                            newKeys.push(strKeyId);
+                            await keyStore.set({ 'app-state-sync-key': { [strKeyId]: keyData } });
+                            newAppStateSyncKeyId = strKeyId;
+                        }
+                        logger === null || logger === void 0 ? void 0 : logger.info({ newAppStateSyncKeyId, newKeys }, 'injecting new app state sync keys');
+                    });
+                    ev.emit('creds.update', { myAppStateKeyId: newAppStateSyncKeyId });
+                }
+                else {
+                    logger === null || logger === void 0 ? void 0 : logger.info({ protocolMsg }, 'recv app state sync with 0 keys');
+                }
+                break;
+            case WAProto_1.proto.Message.ProtocolMessage.Type.REVOKE:
+                ev.emit('messages.update', [
+                    {
+                        key: {
+                            ...message.key,
+                            id: protocolMsg.key.id
+                        },
+                        update: { message: null, messageStubType: Types_1.WAMessageStubType.REVOKE, key: message.key }
+                    }
+                ]);
+                break;
+            case WAProto_1.proto.Message.ProtocolMessage.Type.EPHEMERAL_SETTING:
+                Object.assign(chat, {
+                    ephemeralSettingTimestamp: (0, generics_1.toNumber)(message.messageTimestamp),
+                    ephemeralExpiration: protocolMsg.ephemeralExpiration || null
+                });
+                break;
+            case WAProto_1.proto.Message.ProtocolMessage.Type.PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE:
+                const response = protocolMsg.peerDataOperationRequestResponseMessage;
+                if (response) {
+                    const { peerDataOperationResult } = response;
+                    for (const result of peerDataOperationResult) {
+                        const { placeholderMessageResendResponse: retryResponse } = result;
+                        if (retryResponse) {
+                            const webMessageInfo = WAProto_1.proto.WebMessageInfo.decode(retryResponse.webMessageInfoBytes);
+                            ev.emit('messages.update', [
+                                { key: webMessageInfo.key, update: { message: webMessageInfo.message } }
+                            ]);
+                        }
+                    }
+                }
+                break;
+        }
+    }
+    else if (content === null || content === void 0 ? void 0 : content.reactionMessage) {
+        const reaction = {
+            ...content.reactionMessage,
+            key: message.key,
+        };
+        ev.emit('messages.reaction', [{
+                reaction,
+                key: content.reactionMessage.key,
+            }]);
+    }
+    else if (message.messageStubType) {
+        const jid = message.key.remoteJid;
+        //let actor = whatsappID (message.participant)
+        let participants;
+        const emitParticipantsUpdate = (action) => (ev.emit('group-participants.update', { id: jid, author: message.participant, participants, action }));
+        const emitGroupUpdate = (update) => {
+            var _a;
+            ev.emit('groups.update', [{ id: jid, ...update, author: (_a = message.participant) !== null && _a !== void 0 ? _a : undefined }]);
+        };
+        const participantsIncludesMe = () => participants.find(jid => (0, WABinary_1.areJidsSameUser)(meId, jid));
+        switch (message.messageStubType) {
+            case Types_1.WAMessageStubType.GROUP_PARTICIPANT_LEAVE:
+            case Types_1.WAMessageStubType.GROUP_PARTICIPANT_REMOVE:
+                participants = message.messageStubParameters || [];
+                emitParticipantsUpdate('remove');
+                // mark the chat read only if you left the group
+                if (participantsIncludesMe()) {
+                    chat.readOnly = true;
+                }
+                break;
+            case Types_1.WAMessageStubType.GROUP_PARTICIPANT_ADD:
+            case Types_1.WAMessageStubType.GROUP_PARTICIPANT_INVITE:
+            case Types_1.WAMessageStubType.GROUP_PARTICIPANT_ADD_REQUEST_JOIN:
+                participants = message.messageStubParameters || [];
+                if (participantsIncludesMe()) {
+                    chat.readOnly = false;
+                }
+                emitParticipantsUpdate('add');
+                break;
+            case Types_1.WAMessageStubType.GROUP_PARTICIPANT_DEMOTE:
+                participants = message.messageStubParameters || [];
+                emitParticipantsUpdate('demote');
+                break;
+            case Types_1.WAMessageStubType.GROUP_PARTICIPANT_PROMOTE:
+                participants = message.messageStubParameters || [];
+                emitParticipantsUpdate('promote');
+                break;
+            case Types_1.WAMessageStubType.GROUP_CHANGE_ANNOUNCE:
+                const announceValue = (_d = message.messageStubParameters) === null || _d === void 0 ? void 0 : _d[0];
+                emitGroupUpdate({ announce: announceValue === 'true' || announceValue === 'on' });
+                break;
+            case Types_1.WAMessageStubType.GROUP_CHANGE_RESTRICT:
+                const restrictValue = (_e = message.messageStubParameters) === null || _e === void 0 ? void 0 : _e[0];
+                emitGroupUpdate({ restrict: restrictValue === 'true' || restrictValue === 'on' });
+                break;
+            case Types_1.WAMessageStubType.GROUP_CHANGE_SUBJECT:
+                const name = (_f = message.messageStubParameters) === null || _f === void 0 ? void 0 : _f[0];
+                chat.name = name;
+                emitGroupUpdate({ subject: name });
+                break;
+            case Types_1.WAMessageStubType.GROUP_CHANGE_INVITE_LINK:
+                const code = (_g = message.messageStubParameters) === null || _g === void 0 ? void 0 : _g[0];
+                emitGroupUpdate({ inviteCode: code });
+                break;
+            case Types_1.WAMessageStubType.GROUP_MEMBER_ADD_MODE:
+                const memberAddValue = (_h = message.messageStubParameters) === null || _h === void 0 ? void 0 : _h[0];
+                emitGroupUpdate({ memberAddMode: memberAddValue === 'all_member_add' });
+                break;
+            case Types_1.WAMessageStubType.GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE:
+                const approvalMode = (_j = message.messageStubParameters) === null || _j === void 0 ? void 0 : _j[0];
+                emitGroupUpdate({ joinApprovalMode: approvalMode === 'on' });
+                break;
+        }
+    }
+    else if (content === null || content === void 0 ? void 0 : content.pollUpdateMessage) {
+        const creationMsgKey = content.pollUpdateMessage.pollCreationMessageKey;
+        // we need to fetch the poll creation message to get the poll enc key
+        const pollMsg = await getMessage(creationMsgKey);
+        if (pollMsg) {
+            const meIdNormalised = (0, WABinary_1.jidNormalizedUser)(meId);
+            const pollCreatorJid = (0, generics_1.getKeyAuthor)(creationMsgKey, meIdNormalised);
+            const voterJid = (0, generics_1.getKeyAuthor)(message.key, meIdNormalised);
+            const pollEncKey = (_k = pollMsg.messageContextInfo) === null || _k === void 0 ? void 0 : _k.messageSecret;
+            try {
+                const voteMsg = decryptPollVote(content.pollUpdateMessage.vote, {
+                    pollEncKey,
+                    pollCreatorJid,
+                    pollMsgId: creationMsgKey.id,
+                    voterJid,
+                });
+                ev.emit('messages.update', [
+                    {
+                        key: creationMsgKey,
+                        update: {
+                            pollUpdates: [
+                                {
+                                    pollUpdateMessageKey: message.key,
+                                    vote: voteMsg,
+                                    senderTimestampMs: content.pollUpdateMessage.senderTimestampMs.toNumber(),
+                                }
+                            ]
+                        }
+                    }
+                ]);
+            }
+            catch (err) {
+                logger === null || logger === void 0 ? void 0 : logger.warn({ err, creationMsgKey }, 'failed to decrypt poll vote');
+            }
+        }
+        else {
+            logger === null || logger === void 0 ? void 0 : logger.warn({ creationMsgKey }, 'poll creation message not found, cannot decrypt update');
+        }
+    }
+    if (Object.keys(chat).length > 1) {
+        ev.emit('chats.update', [chat]);
+    }
+};
+exports.default = processMessage;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/signal.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/signal.d.ts
new file mode 100644
index 0000000..d116e38
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/signal.d.ts
@@ -0,0 +1,32 @@
+import { SignalRepository } from '../Types';
+import { AuthenticationCreds, AuthenticationState, KeyPair, SignalIdentity, SignalKeyStore, SignedKeyPair } from '../Types/Auth';
+import { BinaryNode, JidWithDevice } from '../WABinary';
+export declare const createSignalIdentity: (wid: string, accountSignatureKey: Uint8Array) => SignalIdentity;
+export declare const getPreKeys: ({ get }: SignalKeyStore, min: number, limit: number) => Promise<{
+    [id: string]: KeyPair;
+}>;
+export declare const generateOrGetPreKeys: (creds: AuthenticationCreds, range: number) => {
+    newPreKeys: {
+        [id: number]: KeyPair;
+    };
+    lastPreKeyId: number;
+    preKeysRange: readonly [number, number];
+};
+export declare const xmppSignedPreKey: (key: SignedKeyPair) => BinaryNode;
+export declare const xmppPreKey: (pair: KeyPair, id: number) => BinaryNode;
+export declare const parseAndInjectE2ESessions: (node: BinaryNode, repository: SignalRepository) => Promise<void>;
+export declare const extractDeviceJids: (result: BinaryNode, myJid: string, excludeZeroDevices: boolean) => JidWithDevice[];
+/**
+ * get the next N keys for upload or processing
+ * @param count number of pre-keys to get or generate
+ */
+export declare const getNextPreKeys: ({ creds, keys }: AuthenticationState, count: number) => Promise<{
+    update: Partial<AuthenticationCreds>;
+    preKeys: {
+        [id: string]: KeyPair;
+    };
+}>;
+export declare const getNextPreKeysNode: (state: AuthenticationState, count: number) => Promise<{
+    update: Partial<AuthenticationCreds>;
+    node: BinaryNode;
+}>;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/signal.js b/node_modules/@whiskeysockets/baileys/lib/Utils/signal.js
new file mode 100644
index 0000000..d96b570
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/signal.js
@@ -0,0 +1,151 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.getNextPreKeysNode = exports.getNextPreKeys = exports.extractDeviceJids = exports.parseAndInjectE2ESessions = exports.xmppPreKey = exports.xmppSignedPreKey = exports.generateOrGetPreKeys = exports.getPreKeys = exports.createSignalIdentity = void 0;
+const Defaults_1 = require("../Defaults");
+const WABinary_1 = require("../WABinary");
+const crypto_1 = require("./crypto");
+const generics_1 = require("./generics");
+const createSignalIdentity = (wid, accountSignatureKey) => {
+    return {
+        identifier: { name: wid, deviceId: 0 },
+        identifierKey: (0, crypto_1.generateSignalPubKey)(accountSignatureKey)
+    };
+};
+exports.createSignalIdentity = createSignalIdentity;
+const getPreKeys = async ({ get }, min, limit) => {
+    const idList = [];
+    for (let id = min; id < limit; id++) {
+        idList.push(id.toString());
+    }
+    return get('pre-key', idList);
+};
+exports.getPreKeys = getPreKeys;
+const generateOrGetPreKeys = (creds, range) => {
+    const avaliable = creds.nextPreKeyId - creds.firstUnuploadedPreKeyId;
+    const remaining = range - avaliable;
+    const lastPreKeyId = creds.nextPreKeyId + remaining - 1;
+    const newPreKeys = {};
+    if (remaining > 0) {
+        for (let i = creds.nextPreKeyId; i <= lastPreKeyId; i++) {
+            newPreKeys[i] = crypto_1.Curve.generateKeyPair();
+        }
+    }
+    return {
+        newPreKeys,
+        lastPreKeyId,
+        preKeysRange: [creds.firstUnuploadedPreKeyId, range],
+    };
+};
+exports.generateOrGetPreKeys = generateOrGetPreKeys;
+const xmppSignedPreKey = (key) => ({
+    tag: 'skey',
+    attrs: {},
+    content: [
+        { tag: 'id', attrs: {}, content: (0, generics_1.encodeBigEndian)(key.keyId, 3) },
+        { tag: 'value', attrs: {}, content: key.keyPair.public },
+        { tag: 'signature', attrs: {}, content: key.signature }
+    ]
+});
+exports.xmppSignedPreKey = xmppSignedPreKey;
+const xmppPreKey = (pair, id) => ({
+    tag: 'key',
+    attrs: {},
+    content: [
+        { tag: 'id', attrs: {}, content: (0, generics_1.encodeBigEndian)(id, 3) },
+        { tag: 'value', attrs: {}, content: pair.public }
+    ]
+});
+exports.xmppPreKey = xmppPreKey;
+const parseAndInjectE2ESessions = async (node, repository) => {
+    const extractKey = (key) => (key ? ({
+        keyId: (0, WABinary_1.getBinaryNodeChildUInt)(key, 'id', 3),
+        publicKey: (0, crypto_1.generateSignalPubKey)((0, WABinary_1.getBinaryNodeChildBuffer)(key, 'value')),
+        signature: (0, WABinary_1.getBinaryNodeChildBuffer)(key, 'signature'),
+    }) : undefined);
+    const nodes = (0, WABinary_1.getBinaryNodeChildren)((0, WABinary_1.getBinaryNodeChild)(node, 'list'), 'user');
+    for (const node of nodes) {
+        (0, WABinary_1.assertNodeErrorFree)(node);
+    }
+    await Promise.all(nodes.map(async (node) => {
+        const signedKey = (0, WABinary_1.getBinaryNodeChild)(node, 'skey');
+        const key = (0, WABinary_1.getBinaryNodeChild)(node, 'key');
+        const identity = (0, WABinary_1.getBinaryNodeChildBuffer)(node, 'identity');
+        const jid = node.attrs.jid;
+        const registrationId = (0, WABinary_1.getBinaryNodeChildUInt)(node, 'registration', 4);
+        await repository.injectE2ESession({
+            jid,
+            session: {
+                registrationId: registrationId,
+                identityKey: (0, crypto_1.generateSignalPubKey)(identity),
+                signedPreKey: extractKey(signedKey),
+                preKey: extractKey(key)
+            }
+        });
+    }));
+};
+exports.parseAndInjectE2ESessions = parseAndInjectE2ESessions;
+const extractDeviceJids = (result, myJid, excludeZeroDevices) => {
+    var _a;
+    const { user: myUser, device: myDevice } = (0, WABinary_1.jidDecode)(myJid);
+    const extracted = [];
+    for (const node of result.content) {
+        const list = (_a = (0, WABinary_1.getBinaryNodeChild)(node, 'list')) === null || _a === void 0 ? void 0 : _a.content;
+        if (list && Array.isArray(list)) {
+            for (const item of list) {
+                const { user } = (0, WABinary_1.jidDecode)(item.attrs.jid);
+                const devicesNode = (0, WABinary_1.getBinaryNodeChild)(item, 'devices');
+                const deviceListNode = (0, WABinary_1.getBinaryNodeChild)(devicesNode, 'device-list');
+                if (Array.isArray(deviceListNode === null || deviceListNode === void 0 ? void 0 : deviceListNode.content)) {
+                    for (const { tag, attrs } of deviceListNode.content) {
+                        const device = +attrs.id;
+                        if (tag === 'device' && // ensure the "device" tag
+                            (!excludeZeroDevices || device !== 0) && // if zero devices are not-excluded, or device is non zero
+                            (myUser !== user || myDevice !== device) && // either different user or if me user, not this device
+                            (device === 0 || !!attrs['key-index']) // ensure that "key-index" is specified for "non-zero" devices, produces a bad req otherwise
+                        ) {
+                            extracted.push({ user, device });
+                        }
+                    }
+                }
+            }
+        }
+    }
+    return extracted;
+};
+exports.extractDeviceJids = extractDeviceJids;
+/**
+ * get the next N keys for upload or processing
+ * @param count number of pre-keys to get or generate
+ */
+const getNextPreKeys = async ({ creds, keys }, count) => {
+    const { newPreKeys, lastPreKeyId, preKeysRange } = (0, exports.generateOrGetPreKeys)(creds, count);
+    const update = {
+        nextPreKeyId: Math.max(lastPreKeyId + 1, creds.nextPreKeyId),
+        firstUnuploadedPreKeyId: Math.max(creds.firstUnuploadedPreKeyId, lastPreKeyId + 1)
+    };
+    await keys.set({ 'pre-key': newPreKeys });
+    const preKeys = await (0, exports.getPreKeys)(keys, preKeysRange[0], preKeysRange[0] + preKeysRange[1]);
+    return { update, preKeys };
+};
+exports.getNextPreKeys = getNextPreKeys;
+const getNextPreKeysNode = async (state, count) => {
+    const { creds } = state;
+    const { update, preKeys } = await (0, exports.getNextPreKeys)(state, count);
+    const node = {
+        tag: 'iq',
+        attrs: {
+            xmlns: 'encrypt',
+            type: 'set',
+            to: WABinary_1.S_WHATSAPP_NET,
+        },
+        content: [
+            { tag: 'registration', attrs: {}, content: (0, generics_1.encodeBigEndian)(creds.registrationId) },
+            { tag: 'type', attrs: {}, content: Defaults_1.KEY_BUNDLE_TYPE },
+            { tag: 'identity', attrs: {}, content: creds.signedIdentityKey.public },
+            { tag: 'list', attrs: {}, content: Object.keys(preKeys).map(k => (0, exports.xmppPreKey)(preKeys[+k], +k)) },
+            (0, exports.xmppSignedPreKey)(creds.signedPreKey)
+        ]
+    };
+    return { update, node };
+};
+exports.getNextPreKeysNode = getNextPreKeysNode;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/use-multi-file-auth-state.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/use-multi-file-auth-state.d.ts
new file mode 100644
index 0000000..5b4ff53
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/use-multi-file-auth-state.d.ts
@@ -0,0 +1,12 @@
+import { AuthenticationState } from '../Types';
+/**
+ * stores the full authentication state in a single folder.
+ * Far more efficient than singlefileauthstate
+ *
+ * Again, I wouldn't endorse this for any production level use other than perhaps a bot.
+ * Would recommend writing an auth state for use with a proper SQL or No-SQL DB
+ * */
+export declare const useMultiFileAuthState: (folder: string) => Promise<{
+    state: AuthenticationState;
+    saveCreds: () => Promise<void>;
+}>;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/use-multi-file-auth-state.js b/node_modules/@whiskeysockets/baileys/lib/Utils/use-multi-file-auth-state.js
new file mode 100644
index 0000000..0898d35
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/use-multi-file-auth-state.js
@@ -0,0 +1,80 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.useMultiFileAuthState = void 0;
+const promises_1 = require("fs/promises");
+const path_1 = require("path");
+const WAProto_1 = require("../../WAProto");
+const auth_utils_1 = require("./auth-utils");
+const generics_1 = require("./generics");
+/**
+ * stores the full authentication state in a single folder.
+ * Far more efficient than singlefileauthstate
+ *
+ * Again, I wouldn't endorse this for any production level use other than perhaps a bot.
+ * Would recommend writing an auth state for use with a proper SQL or No-SQL DB
+ * */
+const useMultiFileAuthState = async (folder) => {
+    const writeData = (data, file) => {
+        return (0, promises_1.writeFile)((0, path_1.join)(folder, fixFileName(file)), JSON.stringify(data, generics_1.BufferJSON.replacer));
+    };
+    const readData = async (file) => {
+        try {
+            const data = await (0, promises_1.readFile)((0, path_1.join)(folder, fixFileName(file)), { encoding: 'utf-8' });
+            return JSON.parse(data, generics_1.BufferJSON.reviver);
+        }
+        catch (error) {
+            return null;
+        }
+    };
+    const removeData = async (file) => {
+        try {
+            await (0, promises_1.unlink)((0, path_1.join)(folder, fixFileName(file)));
+        }
+        catch (_a) {
+        }
+    };
+    const folderInfo = await (0, promises_1.stat)(folder).catch(() => { });
+    if (folderInfo) {
+        if (!folderInfo.isDirectory()) {
+            throw new Error(`found something that is not a directory at ${folder}, either delete it or specify a different location`);
+        }
+    }
+    else {
+        await (0, promises_1.mkdir)(folder, { recursive: true });
+    }
+    const fixFileName = (file) => { var _a; return (_a = file === null || file === void 0 ? void 0 : file.replace(/\//g, '__')) === null || _a === void 0 ? void 0 : _a.replace(/:/g, '-'); };
+    const creds = await readData('creds.json') || (0, auth_utils_1.initAuthCreds)();
+    return {
+        state: {
+            creds,
+            keys: {
+                get: async (type, ids) => {
+                    const data = {};
+                    await Promise.all(ids.map(async (id) => {
+                        let value = await readData(`${type}-${id}.json`);
+                        if (type === 'app-state-sync-key' && value) {
+                            value = WAProto_1.proto.Message.AppStateSyncKeyData.fromObject(value);
+                        }
+                        data[id] = value;
+                    }));
+                    return data;
+                },
+                set: async (data) => {
+                    const tasks = [];
+                    for (const category in data) {
+                        for (const id in data[category]) {
+                            const value = data[category][id];
+                            const file = `${category}-${id}.json`;
+                            tasks.push(value ? writeData(value, file) : removeData(file));
+                        }
+                    }
+                    await Promise.all(tasks);
+                }
+            }
+        },
+        saveCreds: () => {
+            return writeData(creds, 'creds.json');
+        }
+    };
+};
+exports.useMultiFileAuthState = useMultiFileAuthState;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/validate-connection.d.ts b/node_modules/@whiskeysockets/baileys/lib/Utils/validate-connection.d.ts
new file mode 100644
index 0000000..4a8ef5a
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/validate-connection.d.ts
@@ -0,0 +1,11 @@
+import { proto } from '../../WAProto';
+import type { AuthenticationCreds, SignalCreds, SocketConfig } from '../Types';
+import { BinaryNode } from '../WABinary';
+export declare const generateMobileNode: (config: SocketConfig) => proto.IClientPayload;
+export declare const generateLoginNode: (userJid: string, config: SocketConfig) => proto.IClientPayload;
+export declare const generateRegistrationNode: ({ registrationId, signedPreKey, signedIdentityKey }: SignalCreds, config: SocketConfig) => proto.ClientPayload;
+export declare const configureSuccessfulPairing: (stanza: BinaryNode, { advSecretKey, signedIdentityKey, signalIdentities }: Pick<AuthenticationCreds, 'advSecretKey' | 'signedIdentityKey' | 'signalIdentities'>) => {
+    creds: Partial<AuthenticationCreds>;
+    reply: BinaryNode;
+};
+export declare const encodeSignedDeviceIdentity: (account: proto.IADVSignedDeviceIdentity, includeSignatureKey: boolean) => Uint8Array;
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/validate-connection.js b/node_modules/@whiskeysockets/baileys/lib/Utils/validate-connection.js
new file mode 100644
index 0000000..5ca4313
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/validate-connection.js
@@ -0,0 +1,205 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.encodeSignedDeviceIdentity = exports.configureSuccessfulPairing = exports.generateRegistrationNode = exports.generateLoginNode = exports.generateMobileNode = void 0;
+const boom_1 = require("@hapi/boom");
+const crypto_1 = require("crypto");
+const WAProto_1 = require("../../WAProto");
+const Defaults_1 = require("../Defaults");
+const WABinary_1 = require("../WABinary");
+const crypto_2 = require("./crypto");
+const generics_1 = require("./generics");
+const signal_1 = require("./signal");
+const getUserAgent = (config) => {
+    var _a, _b;
+    const osVersion = config.mobile ? '15.3.1' : '0.1';
+    const version = config.mobile ? [2, 24, 6] : config.version;
+    const device = config.mobile ? 'iPhone_7' : 'Desktop';
+    const manufacturer = config.mobile ? 'Apple' : '';
+    const platform = config.mobile ? WAProto_1.proto.ClientPayload.UserAgent.Platform.IOS : WAProto_1.proto.ClientPayload.UserAgent.Platform.WEB;
+    const phoneId = config.mobile ? { phoneId: config.auth.creds.phoneId } : {};
+    return {
+        appVersion: {
+            primary: version[0],
+            secondary: version[1],
+            tertiary: version[2],
+        },
+        platform,
+        releaseChannel: WAProto_1.proto.ClientPayload.UserAgent.ReleaseChannel.RELEASE,
+        mcc: ((_a = config.auth.creds.registration) === null || _a === void 0 ? void 0 : _a.phoneNumberMobileCountryCode) || '000',
+        mnc: ((_b = config.auth.creds.registration) === null || _b === void 0 ? void 0 : _b.phoneNumberMobileNetworkCode) || '000',
+        osVersion: osVersion,
+        manufacturer,
+        device,
+        osBuildNumber: osVersion,
+        localeLanguageIso6391: 'en',
+        localeCountryIso31661Alpha2: 'US',
+        ...phoneId
+    };
+};
+const PLATFORM_MAP = {
+    'Mac OS': WAProto_1.proto.ClientPayload.WebInfo.WebSubPlatform.DARWIN,
+    'Windows': WAProto_1.proto.ClientPayload.WebInfo.WebSubPlatform.WIN32
+};
+const getWebInfo = (config) => {
+    let webSubPlatform = WAProto_1.proto.ClientPayload.WebInfo.WebSubPlatform.WEB_BROWSER;
+    if (config.syncFullHistory && PLATFORM_MAP[config.browser[0]]) {
+        webSubPlatform = PLATFORM_MAP[config.browser[0]];
+    }
+    return { webSubPlatform };
+};
+const getClientPayload = (config) => {
+    const payload = {
+        connectType: WAProto_1.proto.ClientPayload.ConnectType.WIFI_UNKNOWN,
+        connectReason: WAProto_1.proto.ClientPayload.ConnectReason.USER_ACTIVATED,
+        userAgent: getUserAgent(config),
+    };
+    if (!config.mobile) {
+        payload.webInfo = getWebInfo(config);
+    }
+    return payload;
+};
+const generateMobileNode = (config) => {
+    if (!config.auth.creds) {
+        throw new boom_1.Boom('No registration data found', { data: config });
+    }
+    const payload = {
+        ...getClientPayload(config),
+        sessionId: Math.floor(Math.random() * 999999999 + 1),
+        shortConnect: true,
+        connectAttemptCount: 0,
+        device: 0,
+        dnsSource: {
+            appCached: false,
+            dnsMethod: WAProto_1.proto.ClientPayload.DNSSource.DNSResolutionMethod.SYSTEM,
+        },
+        passive: false,
+        pushName: 'test',
+        username: Number(`${config.auth.creds.registration.phoneNumberCountryCode}${config.auth.creds.registration.phoneNumberNationalNumber}`),
+    };
+    return WAProto_1.proto.ClientPayload.fromObject(payload);
+};
+exports.generateMobileNode = generateMobileNode;
+const generateLoginNode = (userJid, config) => {
+    const { user, device } = (0, WABinary_1.jidDecode)(userJid);
+    const payload = {
+        ...getClientPayload(config),
+        passive: true,
+        username: +user,
+        device: device,
+    };
+    return WAProto_1.proto.ClientPayload.fromObject(payload);
+};
+exports.generateLoginNode = generateLoginNode;
+const getPlatformType = (platform) => {
+    const platformType = platform.toUpperCase();
+    return WAProto_1.proto.DeviceProps.PlatformType[platformType] || WAProto_1.proto.DeviceProps.PlatformType.DESKTOP;
+};
+const generateRegistrationNode = ({ registrationId, signedPreKey, signedIdentityKey }, config) => {
+    // the app version needs to be md5 hashed
+    // and passed in
+    const appVersionBuf = (0, crypto_1.createHash)('md5')
+        .update(config.version.join('.')) // join as string
+        .digest();
+    const companion = {
+        os: config.browser[0],
+        platformType: getPlatformType(config.browser[1]),
+        requireFullSync: config.syncFullHistory,
+    };
+    const companionProto = WAProto_1.proto.DeviceProps.encode(companion).finish();
+    const registerPayload = {
+        ...getClientPayload(config),
+        passive: false,
+        devicePairingData: {
+            buildHash: appVersionBuf,
+            deviceProps: companionProto,
+            eRegid: (0, generics_1.encodeBigEndian)(registrationId),
+            eKeytype: Defaults_1.KEY_BUNDLE_TYPE,
+            eIdent: signedIdentityKey.public,
+            eSkeyId: (0, generics_1.encodeBigEndian)(signedPreKey.keyId, 3),
+            eSkeyVal: signedPreKey.keyPair.public,
+            eSkeySig: signedPreKey.signature,
+        },
+    };
+    return WAProto_1.proto.ClientPayload.fromObject(registerPayload);
+};
+exports.generateRegistrationNode = generateRegistrationNode;
+const configureSuccessfulPairing = (stanza, { advSecretKey, signedIdentityKey, signalIdentities }) => {
+    const msgId = stanza.attrs.id;
+    const pairSuccessNode = (0, WABinary_1.getBinaryNodeChild)(stanza, 'pair-success');
+    const deviceIdentityNode = (0, WABinary_1.getBinaryNodeChild)(pairSuccessNode, 'device-identity');
+    const platformNode = (0, WABinary_1.getBinaryNodeChild)(pairSuccessNode, 'platform');
+    const deviceNode = (0, WABinary_1.getBinaryNodeChild)(pairSuccessNode, 'device');
+    const businessNode = (0, WABinary_1.getBinaryNodeChild)(pairSuccessNode, 'biz');
+    if (!deviceIdentityNode || !deviceNode) {
+        throw new boom_1.Boom('Missing device-identity or device in pair success node', { data: stanza });
+    }
+    const bizName = businessNode === null || businessNode === void 0 ? void 0 : businessNode.attrs.name;
+    const jid = deviceNode.attrs.jid;
+    const { details, hmac } = WAProto_1.proto.ADVSignedDeviceIdentityHMAC.decode(deviceIdentityNode.content);
+    // check HMAC matches
+    const advSign = (0, crypto_2.hmacSign)(details, Buffer.from(advSecretKey, 'base64'));
+    if (Buffer.compare(hmac, advSign) !== 0) {
+        throw new boom_1.Boom('Invalid account signature');
+    }
+    const account = WAProto_1.proto.ADVSignedDeviceIdentity.decode(details);
+    const { accountSignatureKey, accountSignature, details: deviceDetails } = account;
+    // verify the device signature matches
+    const accountMsg = Buffer.concat([Buffer.from([6, 0]), deviceDetails, signedIdentityKey.public]);
+    if (!crypto_2.Curve.verify(accountSignatureKey, accountMsg, accountSignature)) {
+        throw new boom_1.Boom('Failed to verify account signature');
+    }
+    // sign the details with our identity key
+    const deviceMsg = Buffer.concat([Buffer.from([6, 1]), deviceDetails, signedIdentityKey.public, accountSignatureKey]);
+    account.deviceSignature = crypto_2.Curve.sign(signedIdentityKey.private, deviceMsg);
+    const identity = (0, signal_1.createSignalIdentity)(jid, accountSignatureKey);
+    const accountEnc = (0, exports.encodeSignedDeviceIdentity)(account, false);
+    const deviceIdentity = WAProto_1.proto.ADVDeviceIdentity.decode(account.details);
+    const reply = {
+        tag: 'iq',
+        attrs: {
+            to: WABinary_1.S_WHATSAPP_NET,
+            type: 'result',
+            id: msgId,
+        },
+        content: [
+            {
+                tag: 'pair-device-sign',
+                attrs: {},
+                content: [
+                    {
+                        tag: 'device-identity',
+                        attrs: { 'key-index': deviceIdentity.keyIndex.toString() },
+                        content: accountEnc
+                    }
+                ]
+            }
+        ]
+    };
+    const authUpdate = {
+        account,
+        me: { id: jid, name: bizName },
+        signalIdentities: [
+            ...(signalIdentities || []),
+            identity
+        ],
+        platform: platformNode === null || platformNode === void 0 ? void 0 : platformNode.attrs.name
+    };
+    return {
+        creds: authUpdate,
+        reply
+    };
+};
+exports.configureSuccessfulPairing = configureSuccessfulPairing;
+const encodeSignedDeviceIdentity = (account, includeSignatureKey) => {
+    var _a;
+    account = { ...account };
+    // set to null if we are not to include the signature key
+    // or if we are including the signature key but it is empty
+    if (!includeSignatureKey || !((_a = account.accountSignatureKey) === null || _a === void 0 ? void 0 : _a.length)) {
+        account.accountSignatureKey = null;
+    }
+    return WAProto_1.proto.ADVSignedDeviceIdentity
+        .encode(account)
+        .finish();
+};
+exports.encodeSignedDeviceIdentity = encodeSignedDeviceIdentity;
diff --git a/node_modules/@whiskeysockets/baileys/lib/WABinary/constants.d.ts b/node_modules/@whiskeysockets/baileys/lib/WABinary/constants.d.ts
new file mode 100644
index 0000000..510e192
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WABinary/constants.d.ts
@@ -0,0 +1,27 @@
+export declare const TAGS: {
+    LIST_EMPTY: number;
+    DICTIONARY_0: number;
+    DICTIONARY_1: number;
+    DICTIONARY_2: number;
+    DICTIONARY_3: number;
+    AD_JID: number;
+    LIST_8: number;
+    LIST_16: number;
+    JID_PAIR: number;
+    HEX_8: number;
+    BINARY_8: number;
+    BINARY_20: number;
+    BINARY_32: number;
+    NIBBLE_8: number;
+    PACKED_MAX: number;
+    SINGLE_BYTE_MAX: number;
+    STREAM_END: number;
+};
+export declare const DOUBLE_BYTE_TOKENS: string[][];
+export declare const SINGLE_BYTE_TOKENS: (string | null)[];
+export declare const TOKEN_MAP: {
+    [token: string]: {
+        dict?: number;
+        index: number;
+    };
+};
diff --git a/node_modules/@whiskeysockets/baileys/lib/WABinary/constants.js b/node_modules/@whiskeysockets/baileys/lib/WABinary/constants.js
new file mode 100644
index 0000000..2b204a5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WABinary/constants.js
@@ -0,0 +1,40 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.TOKEN_MAP = exports.SINGLE_BYTE_TOKENS = exports.DOUBLE_BYTE_TOKENS = exports.TAGS = void 0;
+exports.TAGS = {
+    LIST_EMPTY: 0,
+    DICTIONARY_0: 236,
+    DICTIONARY_1: 237,
+    DICTIONARY_2: 238,
+    DICTIONARY_3: 239,
+    AD_JID: 247,
+    LIST_8: 248,
+    LIST_16: 249,
+    JID_PAIR: 250,
+    HEX_8: 251,
+    BINARY_8: 252,
+    BINARY_20: 253,
+    BINARY_32: 254,
+    NIBBLE_8: 255,
+    PACKED_MAX: 127,
+    SINGLE_BYTE_MAX: 256,
+    STREAM_END: 2
+};
+exports.DOUBLE_BYTE_TOKENS = [
+    ['media-for1-1.cdn.whatsapp.net', 'relay', 'media-gru2-2.cdn.whatsapp.net', 'uncompressed', 'medium', 'voip_settings', 'device', 'reason', 'media-lim1-1.cdn.whatsapp.net', 'media-qro1-2.cdn.whatsapp.net', 'media-gru1-2.cdn.whatsapp.net', 'action', 'features', 'media-gru2-1.cdn.whatsapp.net', 'media-gru1-1.cdn.whatsapp.net', 'media-otp1-1.cdn.whatsapp.net', 'kyc-id', 'priority', 'phash', 'mute', 'token', '100', 'media-qro1-1.cdn.whatsapp.net', 'none', 'media-mrs2-2.cdn.whatsapp.net', 'sign_credential', '03', 'media-mrs2-1.cdn.whatsapp.net', 'protocol', 'timezone', 'transport', 'eph_setting', '1080', 'original_dimensions', 'media-frx5-1.cdn.whatsapp.net', 'background', 'disable', 'original_image_url', '5', 'transaction-id', 'direct_path', '103', 'appointment_only', 'request_image_url', 'peer_pid', 'address', '105', '104', '102', 'media-cdt1-1.cdn.whatsapp.net', '101', '109', '110', '106', 'background_location', 'v_id', 'sync', 'status-old', '111', '107', 'ppic', 'media-scl2-1.cdn.whatsapp.net', 'business_profile', '108', 'invite', '04', 'audio_duration', 'media-mct1-1.cdn.whatsapp.net', 'media-cdg2-1.cdn.whatsapp.net', 'media-los2-1.cdn.whatsapp.net', 'invis', 'net', 'voip_payload_type', 'status-revoke-delay', '404', 'state', 'use_correct_order_for_hmac_sha1', 'ver', 'media-mad1-1.cdn.whatsapp.net', 'order', '540', 'skey', 'blinded_credential', 'android', 'contact_remove', 'enable_downlink_relay_latency_only', 'duration', 'enable_vid_one_way_codec_nego', '6', 'media-sof1-1.cdn.whatsapp.net', 'accept', 'all', 'signed_credential', 'media-atl3-1.cdn.whatsapp.net', 'media-lhr8-1.cdn.whatsapp.net', 'website', '05', 'latitude', 'media-dfw5-1.cdn.whatsapp.net', 'forbidden', 'enable_audio_piggyback_network_mtu_fix', 'media-dfw5-2.cdn.whatsapp.net', 'note.m4r', 'media-atl3-2.cdn.whatsapp.net', 'jb_nack_discard_count_fix', 'longitude', 'Opening.m4r', 'media-arn2-1.cdn.whatsapp.net', 'email', 'timestamp', 'admin', 'media-pmo1-1.cdn.whatsapp.net', 'America/Sao_Paulo', 'contact_add', 'media-sin6-1.cdn.whatsapp.net', 'interactive', '8000', 'acs_public_key', 'sigquit_anr_detector_release_rollover_percent', 'media.fmed1-2.fna.whatsapp.net', 'groupadd', 'enabled_for_video_upgrade', 'latency_update_threshold', 'media-frt3-2.cdn.whatsapp.net', 'calls_row_constraint_layout', 'media.fgbb2-1.fna.whatsapp.net', 'mms4_media_retry_notification_encryption_enabled', 'timeout', 'media-sin6-3.cdn.whatsapp.net', 'audio_nack_jitter_multiplier', 'jb_discard_count_adjust_pct_rc', 'audio_reserve_bps', 'delta', 'account_sync', 'default', 'media.fjed4-6.fna.whatsapp.net', '06', 'lock_video_orientation', 'media-frt3-1.cdn.whatsapp.net', 'w:g2', 'media-sin6-2.cdn.whatsapp.net', 'audio_nack_algo_mask', 'media.fgbb2-2.fna.whatsapp.net', 'media.fmed1-1.fna.whatsapp.net', 'cond_range_target_bitrate', 'mms4_server_error_receipt_encryption_enabled', 'vid_rc_dyn', 'fri', 'cart_v1_1_order_message_changes_enabled', 'reg_push', 'jb_hist_deposit_value', 'privatestats', 'media.fist7-2.fna.whatsapp.net', 'thu', 'jb_discard_count_adjust_pct', 'mon', 'group_call_video_maximization_enabled', 'mms_cat_v1_forward_hot_override_enabled', 'audio_nack_new_rtt', 'media.fsub2-3.fna.whatsapp.net', 'media_upload_aggressive_retry_exponential_backoff_enabled', 'tue', 'wed', 'media.fruh4-2.fna.whatsapp.net', 'audio_nack_max_seq_req', 'max_rtp_audio_packet_resends', 'jb_hist_max_cdf_value', '07', 'audio_nack_max_jb_delay', 'mms_forward_partially_downloaded_video', 'media-lcy1-1.cdn.whatsapp.net', 'resume', 'jb_inband_fec_aware', 'new_commerce_entry_point_enabled', '480', 'payments_upi_generate_qr_amount_limit', 'sigquit_anr_detector_rollover_percent', 'media.fsdu2-1.fna.whatsapp.net', 'fbns', 'aud_pkt_reorder_pct', 'dec', 'stop_probing_before_accept_send', 'media_upload_max_aggressive_retries', 'edit_business_profile_new_mode_enabled', 'media.fhex4-1.fna.whatsapp.net', 'media.fjed4-3.fna.whatsapp.net', 'sigquit_anr_detector_64bit_rollover_percent', 'cond_range_ema_jb_last_delay', 'watls_enable_early_data_http_get', 'media.fsdu2-2.fna.whatsapp.net', 'message_qr_disambiguation_enabled', 'media-mxp1-1.cdn.whatsapp.net', 'sat', 'vertical', 'media.fruh4-5.fna.whatsapp.net', '200', 'media-sof1-2.cdn.whatsapp.net', '-1', 'height', 'product_catalog_hide_show_items_enabled', 'deep_copy_frm_last', 'tsoffline', 'vp8/h.264', 'media.fgye5-3.fna.whatsapp.net', 'media.ftuc1-2.fna.whatsapp.net', 'smb_upsell_chat_banner_enabled', 'canonical', '08', '9', '.', 'media.fgyd4-4.fna.whatsapp.net', 'media.fsti4-1.fna.whatsapp.net', 'mms_vcache_aggregation_enabled', 'mms_hot_content_timespan_in_seconds', 'nse_ver', 'rte', 'third_party_sticker_web_sync', 'cond_range_target_total_bitrate', 'media_upload_aggressive_retry_enabled', 'instrument_spam_report_enabled', 'disable_reconnect_tone', 'move_media_folder_from_sister_app', 'one_tap_calling_in_group_chat_size', '10', 'storage_mgmt_banner_threshold_mb', 'enable_backup_passive_mode', 'sharechat_inline_player_enabled', 'media.fcnq2-1.fna.whatsapp.net', 'media.fhex4-2.fna.whatsapp.net', 'media.fist6-3.fna.whatsapp.net', 'ephemeral_drop_column_stage', 'reconnecting_after_network_change_threshold_ms', 'media-lhr8-2.cdn.whatsapp.net', 'cond_jb_last_delay_ema_alpha', 'entry_point_block_logging_enabled', 'critical_event_upload_log_config', 'respect_initial_bitrate_estimate', 'smaller_image_thumbs_status_enabled', 'media.fbtz1-4.fna.whatsapp.net', 'media.fjed4-1.fna.whatsapp.net', 'width', '720', 'enable_frame_dropper', 'enable_one_side_mode', 'urn:xmpp:whatsapp:dirty', 'new_sticker_animation_behavior_v2', 'media.flim3-2.fna.whatsapp.net', 'media.fuio6-2.fna.whatsapp.net', 'skip_forced_signaling', 'dleq_proof', 'status_video_max_bitrate', 'lazy_send_probing_req', 'enhanced_storage_management', 'android_privatestats_endpoint_dit_enabled', 'media.fscl13-2.fna.whatsapp.net', 'video_duration'],
+    ['group_call_discoverability_enabled', 'media.faep9-2.fna.whatsapp.net', 'msgr', 'bloks_loggedin_access_app_id', 'db_status_migration_step', 'watls_prefer_ip6', 'jabber:iq:privacy', '68', 'media.fsaw1-11.fna.whatsapp.net', 'mms4_media_conn_persist_enabled', 'animated_stickers_thread_clean_up', 'media.fcgk3-2.fna.whatsapp.net', 'media.fcgk4-6.fna.whatsapp.net', 'media.fgye5-2.fna.whatsapp.net', 'media.flpb1-1.fna.whatsapp.net', 'media.fsub2-1.fna.whatsapp.net', 'media.fuio6-3.fna.whatsapp.net', 'not-allowed', 'partial_pjpeg_bw_threshold', 'cap_estimated_bitrate', 'mms_chatd_resume_check_over_thrift', 'smb_upsell_business_profile_enabled', 'product_catalog_webclient', 'groups', 'sigquit_anr_detector_release_updated_rollout', 'syncd_key_rotation_enabled', 'media.fdmm2-1.fna.whatsapp.net', 'media-hou1-1.cdn.whatsapp.net', 'remove_old_chat_notifications', 'smb_biztools_deeplink_enabled', 'use_downloadable_filters_int', 'group_qr_codes_enabled', 'max_receipt_processing_time', 'optimistic_image_processing_enabled', 'smaller_video_thumbs_status_enabled', 'watls_early_data', 'reconnecting_before_relay_failover_threshold_ms', 'cond_range_packet_loss_pct', 'groups_privacy_blacklist', 'status-revoke-drop', 'stickers_animated_thumbnail_download', 'dedupe_transcode_shared_images', 'dedupe_transcode_shared_videos', 'media.fcnq2-2.fna.whatsapp.net', 'media.fgyd4-1.fna.whatsapp.net', 'media.fist7-1.fna.whatsapp.net', 'media.flim3-3.fna.whatsapp.net', 'add_contact_by_qr_enabled', 'https://faq.whatsapp.com/payments', 'multicast_limit_global', 'sticker_notification_preview', 'smb_better_catalog_list_adapters_enabled', 'bloks_use_minscript_android', 'pen_smoothing_enabled', 'media.fcgk4-5.fna.whatsapp.net', 'media.fevn1-3.fna.whatsapp.net', 'media.fpoj7-1.fna.whatsapp.net', 'media-arn2-2.cdn.whatsapp.net', 'reconnecting_before_network_change_threshold_ms', 'android_media_use_fresco_for_gifs', 'cond_in_congestion', 'status_image_max_edge', 'sticker_search_enabled', 'starred_stickers_web_sync', 'db_blank_me_jid_migration_step', 'media.fist6-2.fna.whatsapp.net', 'media.ftuc1-1.fna.whatsapp.net', '09', 'anr_fast_logs_upload_rollout', 'camera_core_integration_enabled', '11', 'third_party_sticker_caching', 'thread_dump_contact_support', 'wam_privatestats_enabled', 'vcard_as_document_size_kb', 'maxfpp', 'fbip', 'ephemeral_allow_group_members', 'media-bom1-2.cdn.whatsapp.net', 'media-xsp1-1.cdn.whatsapp.net', 'disable_prewarm', 'frequently_forwarded_max', 'media.fbtz1-5.fna.whatsapp.net', 'media.fevn7-1.fna.whatsapp.net', 'media.fgyd4-2.fna.whatsapp.net', 'sticker_tray_animation_fully_visible_items', 'green_alert_banner_duration', 'reconnecting_after_p2p_failover_threshold_ms', 'connected', 'share_biz_vcard_enabled', 'stickers_animation', '0a', '1200', 'WhatsApp', 'group_description_length', 'p_v_id', 'payments_upi_intent_transaction_limit', 'frequently_forwarded_messages', 'media-xsp1-2.cdn.whatsapp.net', 'media.faep8-1.fna.whatsapp.net', 'media.faep8-2.fna.whatsapp.net', 'media.faep9-1.fna.whatsapp.net', 'media.fdmm2-2.fna.whatsapp.net', 'media.fgzt3-1.fna.whatsapp.net', 'media.flim4-2.fna.whatsapp.net', 'media.frao1-1.fna.whatsapp.net', 'media.fscl9-2.fna.whatsapp.net', 'media.fsub2-2.fna.whatsapp.net', 'superadmin', 'media.fbog10-1.fna.whatsapp.net', 'media.fcgh28-1.fna.whatsapp.net', 'media.fjdo10-1.fna.whatsapp.net', 'third_party_animated_sticker_import', 'delay_fec', 'attachment_picker_refresh', 'android_linked_devices_re_auth_enabled', 'rc_dyn', 'green_alert_block_jitter', 'add_contact_logging_enabled', 'biz_message_logging_enabled', 'conversation_media_preview_v2', 'media-jnb1-1.cdn.whatsapp.net', 'ab_key', 'media.fcgk4-2.fna.whatsapp.net', 'media.fevn1-1.fna.whatsapp.net', 'media.fist6-1.fna.whatsapp.net', 'media.fruh4-4.fna.whatsapp.net', 'media.fsti4-2.fna.whatsapp.net', 'mms_vcard_autodownload_size_kb', 'watls_enabled', 'notif_ch_override_off', 'media.fsaw1-14.fna.whatsapp.net', 'media.fscl13-1.fna.whatsapp.net', 'db_group_participant_migration_step', '1020', 'cond_range_sterm_rtt', 'invites_logging_enabled', 'triggered_block_enabled', 'group_call_max_participants', 'media-iad3-1.cdn.whatsapp.net', 'product_catalog_open_deeplink', 'shops_required_tos_version', 'image_max_kbytes', 'cond_low_quality_vid_mode', 'db_receipt_migration_step', 'jb_early_prob_hist_shrink', 'media.fdmm2-3.fna.whatsapp.net', 'media.fdmm2-4.fna.whatsapp.net', 'media.fruh4-1.fna.whatsapp.net', 'media.fsaw2-2.fna.whatsapp.net', 'remove_geolocation_videos', 'new_animation_behavior', 'fieldstats_beacon_chance', '403', 'authkey_reset_on_ban', 'continuous_ptt_playback', 'reconnecting_after_relay_failover_threshold_ms', 'false', 'group', 'sun', 'conversation_swipe_to_reply', 'ephemeral_messages_setting', 'smaller_video_thumbs_enabled', 'md_device_sync_enabled', 'bloks_shops_pdp_url_regex', 'lasso_integration_enabled', 'media-bom1-1.cdn.whatsapp.net', 'new_backup_format_enabled', '256', 'media.faep6-1.fna.whatsapp.net', 'media.fasr1-1.fna.whatsapp.net', 'media.fbtz1-7.fna.whatsapp.net', 'media.fesb4-1.fna.whatsapp.net', 'media.fjdo1-2.fna.whatsapp.net', 'media.frba2-1.fna.whatsapp.net', 'watls_no_dns', '600', 'db_broadcast_me_jid_migration_step', 'new_wam_runtime_enabled', 'group_update', 'enhanced_block_enabled', 'sync_wifi_threshold_kb', 'mms_download_nc_cat', 'bloks_minification_enabled', 'ephemeral_messages_enabled', 'reject', 'voip_outgoing_xml_signaling', 'creator', 'dl_bw', 'payments_request_messages', 'target_bitrate', 'bloks_rendercore_enabled', 'media-hbe1-1.cdn.whatsapp.net', 'media-hel3-1.cdn.whatsapp.net', 'media-kut2-2.cdn.whatsapp.net', 'media-lax3-1.cdn.whatsapp.net', 'media-lax3-2.cdn.whatsapp.net', 'sticker_pack_deeplink_enabled', 'hq_image_bw_threshold', 'status_info', 'voip', 'dedupe_transcode_videos', 'grp_uii_cleanup', 'linked_device_max_count', 'media.flim1-1.fna.whatsapp.net', 'media.fsaw2-1.fna.whatsapp.net', 'reconnecting_after_call_active_threshold_ms', '1140', 'catalog_pdp_new_design', 'media.fbtz1-10.fna.whatsapp.net', 'media.fsaw1-15.fna.whatsapp.net', '0b', 'consumer_rc_provider', 'mms_async_fast_forward_ttl', 'jb_eff_size_fix', 'voip_incoming_xml_signaling', 'media_provider_share_by_uuid', 'suspicious_links', 'dedupe_transcode_images', 'green_alert_modal_start', 'media-cgk1-1.cdn.whatsapp.net', 'media-lga3-1.cdn.whatsapp.net', 'template_doc_mime_types', 'important_messages', 'user_add', 'vcard_max_size_kb', 'media.fada2-1.fna.whatsapp.net', 'media.fbog2-5.fna.whatsapp.net', 'media.fbtz1-3.fna.whatsapp.net', 'media.fcgk3-1.fna.whatsapp.net', 'media.fcgk7-1.fna.whatsapp.net', 'media.flim1-3.fna.whatsapp.net', 'media.fscl9-1.fna.whatsapp.net', 'ctwa_context_enterprise_enabled', 'media.fsaw1-13.fna.whatsapp.net', 'media.fuio11-2.fna.whatsapp.net', 'status_collapse_muted', 'db_migration_level_force', 'recent_stickers_web_sync', 'bloks_session_state', 'bloks_shops_enabled', 'green_alert_setting_deep_links_enabled', 'restrict_groups', 'battery', 'green_alert_block_start', 'refresh', 'ctwa_context_enabled', 'md_messaging_enabled', 'status_image_quality', 'md_blocklist_v2_server', 'media-del1-1.cdn.whatsapp.net', '13', 'userrate', 'a_v_id', 'cond_rtt_ema_alpha', 'invalid'],
+    ['media.fada1-1.fna.whatsapp.net', 'media.fadb3-2.fna.whatsapp.net', 'media.fbhz2-1.fna.whatsapp.net', 'media.fcor2-1.fna.whatsapp.net', 'media.fjed4-2.fna.whatsapp.net', 'media.flhe4-1.fna.whatsapp.net', 'media.frak1-2.fna.whatsapp.net', 'media.fsub6-3.fna.whatsapp.net', 'media.fsub6-7.fna.whatsapp.net', 'media.fvvi1-1.fna.whatsapp.net', 'search_v5_eligible', 'wam_real_time_enabled', 'report_disk_event', 'max_tx_rott_based_bitrate', 'product', 'media.fjdo10-2.fna.whatsapp.net', 'video_frame_crc_sample_interval', 'media_max_autodownload', '15', 'h.264', 'wam_privatestats_buffer_count', 'md_phash_v2_enabled', 'account_transfer_enabled', 'business_product_catalog', 'enable_non_dyn_codec_param_fix', 'is_user_under_epd_jurisdiction', 'media.fbog2-4.fna.whatsapp.net', 'media.fbtz1-2.fna.whatsapp.net', 'media.fcfc1-1.fna.whatsapp.net', 'media.fjed4-5.fna.whatsapp.net', 'media.flhe4-2.fna.whatsapp.net', 'media.flim1-2.fna.whatsapp.net', 'media.flos5-1.fna.whatsapp.net', 'android_key_store_auth_ver', '010', 'anr_process_monitor', 'delete_old_auth_key', 'media.fcor10-3.fna.whatsapp.net', 'storage_usage_enabled', 'android_camera2_support_level', 'dirty', 'consumer_content_provider', 'status_video_max_duration', '0c', 'bloks_cache_enabled', 'media.fadb2-2.fna.whatsapp.net', 'media.fbko1-1.fna.whatsapp.net', 'media.fbtz1-9.fna.whatsapp.net', 'media.fcgk4-4.fna.whatsapp.net', 'media.fesb4-2.fna.whatsapp.net', 'media.fevn1-2.fna.whatsapp.net', 'media.fist2-4.fna.whatsapp.net', 'media.fjdo1-1.fna.whatsapp.net', 'media.fruh4-6.fna.whatsapp.net', 'media.fsrg5-1.fna.whatsapp.net', 'media.fsub6-6.fna.whatsapp.net', 'minfpp', '5000', 'locales', 'video_max_bitrate', 'use_new_auth_key', 'bloks_http_enabled', 'heartbeat_interval', 'media.fbog11-1.fna.whatsapp.net', 'ephemeral_group_query_ts', 'fec_nack', 'search_in_storage_usage', 'c', 'media-amt2-1.cdn.whatsapp.net', 'linked_devices_ui_enabled', '14', 'async_data_load_on_startup', 'voip_incoming_xml_ack', '16', 'db_migration_step', 'init_bwe', 'max_participants', 'wam_buffer_count', 'media.fada2-2.fna.whatsapp.net', 'media.fadb3-1.fna.whatsapp.net', 'media.fcor2-2.fna.whatsapp.net', 'media.fdiy1-2.fna.whatsapp.net', 'media.frba3-2.fna.whatsapp.net', 'media.fsaw2-3.fna.whatsapp.net', '1280', 'status_grid_enabled', 'w:biz', 'product_catalog_deeplink', 'media.fgye10-2.fna.whatsapp.net', 'media.fuio11-1.fna.whatsapp.net', 'optimistic_upload', 'work_manager_init', 'lc', 'catalog_message', 'cond_net_medium', 'enable_periodical_aud_rr_processing', 'cond_range_ema_rtt', 'media-tir2-1.cdn.whatsapp.net', 'frame_ms', 'group_invite_sending', 'payments_web_enabled', 'wallpapers_v2', '0d', 'browser', 'hq_image_max_edge', 'image_edit_zoom', 'linked_devices_re_auth_enabled', 'media.faly3-2.fna.whatsapp.net', 'media.fdoh5-3.fna.whatsapp.net', 'media.fesb3-1.fna.whatsapp.net', 'media.fknu1-1.fna.whatsapp.net', 'media.fmex3-1.fna.whatsapp.net', 'media.fruh4-3.fna.whatsapp.net', '255', 'web_upgrade_to_md_modal', 'audio_piggyback_timeout_msec', 'enable_audio_oob_fec_feature', 'from_ip', 'image_max_edge', 'message_qr_enabled', 'powersave', 'receipt_pre_acking', 'video_max_edge', 'full', '011', '012', 'enable_audio_oob_fec_for_sender', 'md_voip_enabled', 'enable_privatestats', 'max_fec_ratio', 'payments_cs_faq_url', 'media-xsp1-3.cdn.whatsapp.net', 'hq_image_quality', 'media.fasr1-2.fna.whatsapp.net', 'media.fbog3-1.fna.whatsapp.net', 'media.ffjr1-6.fna.whatsapp.net', 'media.fist2-3.fna.whatsapp.net', 'media.flim4-3.fna.whatsapp.net', 'media.fpbc2-4.fna.whatsapp.net', 'media.fpku1-1.fna.whatsapp.net', 'media.frba1-1.fna.whatsapp.net', 'media.fudi1-1.fna.whatsapp.net', 'media.fvvi1-2.fna.whatsapp.net', 'gcm_fg_service', 'enable_dec_ltr_size_check', 'clear', 'lg', 'media.fgru11-1.fna.whatsapp.net', '18', 'media-lga3-2.cdn.whatsapp.net', 'pkey', '0e', 'max_subject', 'cond_range_lterm_rtt', 'announcement_groups', 'biz_profile_options', 's_t', 'media.fabv2-1.fna.whatsapp.net', 'media.fcai3-1.fna.whatsapp.net', 'media.fcgh1-1.fna.whatsapp.net', 'media.fctg1-4.fna.whatsapp.net', 'media.fdiy1-1.fna.whatsapp.net', 'media.fisb4-1.fna.whatsapp.net', 'media.fpku1-2.fna.whatsapp.net', 'media.fros9-1.fna.whatsapp.net', 'status_v3_text', 'usync_sidelist', '17', 'announcement', '...', 'md_group_notification', '0f', 'animated_pack_in_store', '013', 'America/Mexico_City', '1260', 'media-ams4-1.cdn.whatsapp.net', 'media-cgk1-2.cdn.whatsapp.net', 'media-cpt1-1.cdn.whatsapp.net', 'media-maa2-1.cdn.whatsapp.net', 'media.fgye10-1.fna.whatsapp.net', 'e', 'catalog_cart', 'hfm_string_changes', 'init_bitrate', 'packless_hsm', 'group_info', 'America/Belem', '50', '960', 'cond_range_bwe', 'decode', 'encode', 'media.fada1-8.fna.whatsapp.net', 'media.fadb1-2.fna.whatsapp.net', 'media.fasu6-1.fna.whatsapp.net', 'media.fbog4-1.fna.whatsapp.net', 'media.fcgk9-2.fna.whatsapp.net', 'media.fdoh5-2.fna.whatsapp.net', 'media.ffjr1-2.fna.whatsapp.net', 'media.fgua1-1.fna.whatsapp.net', 'media.fgye1-1.fna.whatsapp.net', 'media.fist1-4.fna.whatsapp.net', 'media.fpbc2-2.fna.whatsapp.net', 'media.fres2-1.fna.whatsapp.net', 'media.fsdq1-2.fna.whatsapp.net', 'media.fsub6-5.fna.whatsapp.net', 'profilo_enabled', 'template_hsm', 'use_disorder_prefetching_timer', 'video_codec_priority', 'vpx_max_qp', 'ptt_reduce_recording_delay', '25', 'iphone', 'Windows', 's_o', 'Africa/Lagos', 'abt', 'media-kut2-1.cdn.whatsapp.net', 'media-mba1-1.cdn.whatsapp.net', 'media-mxp1-2.cdn.whatsapp.net', 'md_blocklist_v2', 'url_text', 'enable_short_offset', 'group_join_permissions', 'enable_audio_piggyback_feature', 'image_quality', 'media.fcgk7-2.fna.whatsapp.net', 'media.fcgk8-2.fna.whatsapp.net', 'media.fclo7-1.fna.whatsapp.net', 'media.fcmn1-1.fna.whatsapp.net', 'media.feoh1-1.fna.whatsapp.net', 'media.fgyd4-3.fna.whatsapp.net', 'media.fjed4-4.fna.whatsapp.net', 'media.flim1-4.fna.whatsapp.net', 'media.flim2-4.fna.whatsapp.net', 'media.fplu6-1.fna.whatsapp.net', 'media.frak1-1.fna.whatsapp.net', 'media.fsdq1-1.fna.whatsapp.net', 'to_ip', '015', 'vp8', '19', '21', '1320', 'auth_key_ver', 'message_processing_dedup', 'server-error', 'wap4_enabled', '420', '014', 'cond_range_rtt', 'ptt_fast_lock_enabled', 'media-ort2-1.cdn.whatsapp.net', 'fwd_ui_start_ts'],
+    ['contact_blacklist', 'Asia/Jakarta', 'media.fepa10-1.fna.whatsapp.net', 'media.fmex10-3.fna.whatsapp.net', 'disorder_prefetching_start_when_empty', 'America/Bogota', 'use_local_probing_rx_bitrate', 'America/Argentina/Buenos_Aires', 'cross_post', 'media.fabb1-1.fna.whatsapp.net', 'media.fbog4-2.fna.whatsapp.net', 'media.fcgk9-1.fna.whatsapp.net', 'media.fcmn2-1.fna.whatsapp.net', 'media.fdel3-1.fna.whatsapp.net', 'media.ffjr1-1.fna.whatsapp.net', 'media.fgdl5-1.fna.whatsapp.net', 'media.flpb1-2.fna.whatsapp.net', 'media.fmex2-1.fna.whatsapp.net', 'media.frba2-2.fna.whatsapp.net', 'media.fros2-2.fna.whatsapp.net', 'media.fruh2-1.fna.whatsapp.net', 'media.fybz2-2.fna.whatsapp.net', 'options', '20', 'a', '017', '018', 'mute_always', 'user_notice', 'Asia/Kolkata', 'gif_provider', 'locked', 'media-gua1-1.cdn.whatsapp.net', 'piggyback_exclude_force_flush', '24', 'media.frec39-1.fna.whatsapp.net', 'user_remove', 'file_max_size', 'cond_packet_loss_pct_ema_alpha', 'media.facc1-1.fna.whatsapp.net', 'media.fadb2-1.fna.whatsapp.net', 'media.faly3-1.fna.whatsapp.net', 'media.fbdo6-2.fna.whatsapp.net', 'media.fcmn2-2.fna.whatsapp.net', 'media.fctg1-3.fna.whatsapp.net', 'media.ffez1-2.fna.whatsapp.net', 'media.fist1-3.fna.whatsapp.net', 'media.fist2-2.fna.whatsapp.net', 'media.flim2-2.fna.whatsapp.net', 'media.fmct2-3.fna.whatsapp.net', 'media.fpei3-1.fna.whatsapp.net', 'media.frba3-1.fna.whatsapp.net', 'media.fsdu8-2.fna.whatsapp.net', 'media.fstu2-1.fna.whatsapp.net', 'media_type', 'receipt_agg', '016', 'enable_pli_for_crc_mismatch', 'live', 'enc_rekey', 'frskmsg', 'd', 'media.fdel11-2.fna.whatsapp.net', 'proto', '2250', 'audio_piggyback_enable_cache', 'skip_nack_if_ltrp_sent', 'mark_dtx_jb_frames', 'web_service_delay', '7282', 'catalog_send_all', 'outgoing', '360', '30', 'LIMITED', '019', 'audio_picker', 'bpv2_phase', 'media.fada1-7.fna.whatsapp.net', 'media.faep7-1.fna.whatsapp.net', 'media.fbko1-2.fna.whatsapp.net', 'media.fbni1-2.fna.whatsapp.net', 'media.fbtz1-1.fna.whatsapp.net', 'media.fbtz1-8.fna.whatsapp.net', 'media.fcjs3-1.fna.whatsapp.net', 'media.fesb3-2.fna.whatsapp.net', 'media.fgdl5-4.fna.whatsapp.net', 'media.fist2-1.fna.whatsapp.net', 'media.flhe2-2.fna.whatsapp.net', 'media.flim2-1.fna.whatsapp.net', 'media.fmex1-1.fna.whatsapp.net', 'media.fpat3-2.fna.whatsapp.net', 'media.fpat3-3.fna.whatsapp.net', 'media.fros2-1.fna.whatsapp.net', 'media.fsdu8-1.fna.whatsapp.net', 'media.fsub3-2.fna.whatsapp.net', 'payments_chat_plugin', 'cond_congestion_no_rtcp_thr', 'green_alert', 'not-a-biz', '..', 'shops_pdp_urls_config', 'source', 'media-dus1-1.cdn.whatsapp.net', 'mute_video', '01b', 'currency', 'max_keys', 'resume_check', 'contact_array', 'qr_scanning', '23', 'b', 'media.fbfh15-1.fna.whatsapp.net', 'media.flim22-1.fna.whatsapp.net', 'media.fsdu11-1.fna.whatsapp.net', 'media.fsdu15-1.fna.whatsapp.net', 'Chrome', 'fts_version', '60', 'media.fada1-6.fna.whatsapp.net', 'media.faep4-2.fna.whatsapp.net', 'media.fbaq5-1.fna.whatsapp.net', 'media.fbni1-1.fna.whatsapp.net', 'media.fcai3-2.fna.whatsapp.net', 'media.fdel3-2.fna.whatsapp.net', 'media.fdmm3-2.fna.whatsapp.net', 'media.fhex3-1.fna.whatsapp.net', 'media.fisb4-2.fna.whatsapp.net', 'media.fkhi5-2.fna.whatsapp.net', 'media.flos2-1.fna.whatsapp.net', 'media.fmct2-1.fna.whatsapp.net', 'media.fntr7-1.fna.whatsapp.net', 'media.frak3-1.fna.whatsapp.net', 'media.fruh5-2.fna.whatsapp.net', 'media.fsub6-1.fna.whatsapp.net', 'media.fuab1-2.fna.whatsapp.net', 'media.fuio1-1.fna.whatsapp.net', 'media.fver1-1.fna.whatsapp.net', 'media.fymy1-1.fna.whatsapp.net', 'product_catalog', '1380', 'audio_oob_fec_max_pkts', '22', '254', 'media-ort2-2.cdn.whatsapp.net', 'media-sjc3-1.cdn.whatsapp.net', '1600', '01a', '01c', '405', 'key_frame_interval', 'body', 'media.fcgh20-1.fna.whatsapp.net', 'media.fesb10-2.fna.whatsapp.net', '125', '2000', 'media.fbsb1-1.fna.whatsapp.net', 'media.fcmn3-2.fna.whatsapp.net', 'media.fcpq1-1.fna.whatsapp.net', 'media.fdel1-2.fna.whatsapp.net', 'media.ffor2-1.fna.whatsapp.net', 'media.fgdl1-4.fna.whatsapp.net', 'media.fhex2-1.fna.whatsapp.net', 'media.fist1-2.fna.whatsapp.net', 'media.fjed5-2.fna.whatsapp.net', 'media.flim6-4.fna.whatsapp.net', 'media.flos2-2.fna.whatsapp.net', 'media.fntr6-2.fna.whatsapp.net', 'media.fpku3-2.fna.whatsapp.net', 'media.fros8-1.fna.whatsapp.net', 'media.fymy1-2.fna.whatsapp.net', 'ul_bw', 'ltrp_qp_offset', 'request', 'nack', 'dtx_delay_state_reset', 'timeoffline', '28', '01f', '32', 'enable_ltr_pool', 'wa_msys_crypto', '01d', '58', 'dtx_freeze_hg_update', 'nack_if_rpsi_throttled', '253', '840', 'media.famd15-1.fna.whatsapp.net', 'media.fbog17-2.fna.whatsapp.net', 'media.fcai19-2.fna.whatsapp.net', 'media.fcai21-4.fna.whatsapp.net', 'media.fesb10-4.fna.whatsapp.net', 'media.fesb10-5.fna.whatsapp.net', 'media.fmaa12-1.fna.whatsapp.net', 'media.fmex11-3.fna.whatsapp.net', 'media.fpoa33-1.fna.whatsapp.net', '1050', '021', 'clean', 'cond_range_ema_packet_loss_pct', 'media.fadb6-5.fna.whatsapp.net', 'media.faqp4-1.fna.whatsapp.net', 'media.fbaq3-1.fna.whatsapp.net', 'media.fbel2-1.fna.whatsapp.net', 'media.fblr4-2.fna.whatsapp.net', 'media.fclo8-1.fna.whatsapp.net', 'media.fcoo1-2.fna.whatsapp.net', 'media.ffjr1-4.fna.whatsapp.net', 'media.ffor9-1.fna.whatsapp.net', 'media.fisb3-1.fna.whatsapp.net', 'media.fkhi2-2.fna.whatsapp.net', 'media.fkhi4-1.fna.whatsapp.net', 'media.fpbc1-2.fna.whatsapp.net', 'media.fruh2-2.fna.whatsapp.net', 'media.fruh5-1.fna.whatsapp.net', 'media.fsub3-1.fna.whatsapp.net', 'payments_transaction_limit', '252', '27', '29', 'tintagel', '01e', '237', '780', 'callee_updated_payload', '020', '257', 'price', '025', '239', 'payments_cs_phone_number', 'mediaretry', 'w:auth:backup:token', 'Glass.caf', 'max_bitrate', '240', '251', '660', 'media.fbog16-1.fna.whatsapp.net', 'media.fcgh21-1.fna.whatsapp.net', 'media.fkul19-2.fna.whatsapp.net', 'media.flim21-2.fna.whatsapp.net', 'media.fmex10-4.fna.whatsapp.net', '64', '33', '34', '35', 'interruption', 'media.fabv3-1.fna.whatsapp.net', 'media.fadb6-1.fna.whatsapp.net', 'media.fagr1-1.fna.whatsapp.net', 'media.famd1-1.fna.whatsapp.net', 'media.famm6-1.fna.whatsapp.net', 'media.faqp2-3.fna.whatsapp.net'],
+];
+exports.SINGLE_BYTE_TOKENS = [
+    '', 'xmlstreamstart', 'xmlstreamend', 's.whatsapp.net', 'type', 'participant', 'from', 'receipt', 'id', 'broadcast', 'status', 'message', 'notification', 'notify', 'to', 'jid', 'user', 'class', 'offline', 'g.us', 'result', 'mediatype', 'enc', 'skmsg', 'off_cnt', 'xmlns', 'presence', 'participants', 'ack', 't', 'iq', 'device_hash', 'read', 'value', 'media', 'picture', 'chatstate', 'unavailable', 'text', 'urn:xmpp:whatsapp:push', 'devices', 'verified_name', 'contact', 'composing', 'edge_routing', 'routing_info', 'item', 'image', 'verified_level', 'get', 'fallback_hostname', '2', 'media_conn', '1', 'v', 'handshake', 'fallback_class', 'count', 'config', 'offline_preview', 'download_buckets', 'w:profile:picture', 'set', 'creation', 'location', 'fallback_ip4', 'msg', 'urn:xmpp:ping', 'fallback_ip6', 'call-creator', 'relaylatency', 'success', 'subscribe', 'video', 'business_hours_config', 'platform', 'hostname', 'version', 'unknown', '0', 'ping', 'hash', 'edit', 'subject', 'max_buckets', 'download', 'delivery', 'props', 'sticker', 'name', 'last', 'contacts', 'business', 'primary', 'preview', 'w:p', 'pkmsg', 'call-id', 'retry', 'prop', 'call', 'auth_ttl', 'available', 'relay_id', 'last_id', 'day_of_week', 'w', 'host', 'seen', 'bits', 'list', 'atn', 'upload', 'is_new', 'w:stats', 'key', 'paused', 'specific_hours', 'multicast', 'stream:error', 'mmg.whatsapp.net', 'code', 'deny', 'played', 'profile', 'fna', 'device-list', 'close_time', 'latency', 'gcm', 'pop', 'audio', '26', 'w:web', 'open_time', 'error', 'auth', 'ip4', 'update', 'profile_options', 'config_value', 'category', 'catalog_not_created', '00', 'config_code', 'mode', 'catalog_status', 'ip6', 'blocklist', 'registration', '7', 'web', 'fail', 'w:m', 'cart_enabled', 'ttl', 'gif', '300', 'device_orientation', 'identity', 'query', '401', 'media-gig2-1.cdn.whatsapp.net', 'in', '3', 'te2', 'add', 'fallback', 'categories', 'ptt', 'encrypt', 'notice', 'thumbnail-document', 'item-not-found', '12', 'thumbnail-image', 'stage', 'thumbnail-link', 'usync', 'out', 'thumbnail-video', '8', '01', 'context', 'sidelist', 'thumbnail-gif', 'terminate', 'not-authorized', 'orientation', 'dhash', 'capability', 'side_list', 'md-app-state', 'description', 'serial', 'readreceipts', 'te', 'business_hours', 'md-msg-hist', 'tag', 'attribute_padding', 'document', 'open_24h', 'delete', 'expiration', 'active', 'prev_v_id', 'true', 'passive', 'index', '4', 'conflict', 'remove', 'w:gp2', 'config_expo_key', 'screen_height', 'replaced', '02', 'screen_width', 'uploadfieldstat', '2:47DEQpj8', 'media-bog1-1.cdn.whatsapp.net', 'encopt', 'url', 'catalog_exists', 'keygen', 'rate', 'offer', 'opus', 'media-mia3-1.cdn.whatsapp.net', 'privacy', 'media-mia3-2.cdn.whatsapp.net', 'signature', 'preaccept', 'token_id', 'media-eze1-1.cdn.whatsapp.net'
+];
+exports.TOKEN_MAP = {};
+for (let i = 0; i < exports.SINGLE_BYTE_TOKENS.length; i++) {
+    exports.TOKEN_MAP[exports.SINGLE_BYTE_TOKENS[i]] = { index: i };
+}
+for (let i = 0; i < exports.DOUBLE_BYTE_TOKENS.length; i++) {
+    for (let j = 0; j < exports.DOUBLE_BYTE_TOKENS[i].length; j++) {
+        exports.TOKEN_MAP[exports.DOUBLE_BYTE_TOKENS[i][j]] = { dict: i, index: j };
+    }
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/WABinary/decode.d.ts b/node_modules/@whiskeysockets/baileys/lib/WABinary/decode.d.ts
new file mode 100644
index 0000000..021a76a
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WABinary/decode.d.ts
@@ -0,0 +1,7 @@
+/// <reference types="node" />
+import type { BinaryNode, BinaryNodeCodingOptions } from './types';
+export declare const decompressingIfRequired: (buffer: Buffer) => Buffer;
+export declare const decodeDecompressedBinaryNode: (buffer: Buffer, opts: Pick<BinaryNodeCodingOptions, 'DOUBLE_BYTE_TOKENS' | 'SINGLE_BYTE_TOKENS' | 'TAGS'>, indexRef?: {
+    index: number;
+}) => BinaryNode;
+export declare const decodeBinaryNode: (buff: Buffer) => BinaryNode;
diff --git a/node_modules/@whiskeysockets/baileys/lib/WABinary/decode.js b/node_modules/@whiskeysockets/baileys/lib/WABinary/decode.js
new file mode 100644
index 0000000..7903b75
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WABinary/decode.js
@@ -0,0 +1,252 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
+var __importStar = (this && this.__importStar) || function (mod) {
+    if (mod && mod.__esModule) return mod;
+    var result = {};
+    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
+    return result;
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.decodeBinaryNode = exports.decodeDecompressedBinaryNode = exports.decompressingIfRequired = void 0;
+const zlib_1 = require("zlib");
+const constants = __importStar(require("./constants"));
+const jid_utils_1 = require("./jid-utils");
+const decompressingIfRequired = (buffer) => {
+    if (2 & buffer.readUInt8()) {
+        buffer = (0, zlib_1.inflateSync)(buffer.slice(1));
+    }
+    else { // nodes with no compression have a 0x00 prefix, we remove that
+        buffer = buffer.slice(1);
+    }
+    return buffer;
+};
+exports.decompressingIfRequired = decompressingIfRequired;
+const decodeDecompressedBinaryNode = (buffer, opts, indexRef = { index: 0 }) => {
+    const { DOUBLE_BYTE_TOKENS, SINGLE_BYTE_TOKENS, TAGS } = opts;
+    const checkEOS = (length) => {
+        if (indexRef.index + length > buffer.length) {
+            throw new Error('end of stream');
+        }
+    };
+    const next = () => {
+        const value = buffer[indexRef.index];
+        indexRef.index += 1;
+        return value;
+    };
+    const readByte = () => {
+        checkEOS(1);
+        return next();
+    };
+    const readBytes = (n) => {
+        checkEOS(n);
+        const value = buffer.slice(indexRef.index, indexRef.index + n);
+        indexRef.index += n;
+        return value;
+    };
+    const readStringFromChars = (length) => {
+        return readBytes(length).toString('utf-8');
+    };
+    const readInt = (n, littleEndian = false) => {
+        checkEOS(n);
+        let val = 0;
+        for (let i = 0; i < n; i++) {
+            const shift = littleEndian ? i : n - 1 - i;
+            val |= next() << (shift * 8);
+        }
+        return val;
+    };
+    const readInt20 = () => {
+        checkEOS(3);
+        return ((next() & 15) << 16) + (next() << 8) + next();
+    };
+    const unpackHex = (value) => {
+        if (value >= 0 && value < 16) {
+            return value < 10 ? '0'.charCodeAt(0) + value : 'A'.charCodeAt(0) + value - 10;
+        }
+        throw new Error('invalid hex: ' + value);
+    };
+    const unpackNibble = (value) => {
+        if (value >= 0 && value <= 9) {
+            return '0'.charCodeAt(0) + value;
+        }
+        switch (value) {
+            case 10:
+                return '-'.charCodeAt(0);
+            case 11:
+                return '.'.charCodeAt(0);
+            case 15:
+                return '\0'.charCodeAt(0);
+            default:
+                throw new Error('invalid nibble: ' + value);
+        }
+    };
+    const unpackByte = (tag, value) => {
+        if (tag === TAGS.NIBBLE_8) {
+            return unpackNibble(value);
+        }
+        else if (tag === TAGS.HEX_8) {
+            return unpackHex(value);
+        }
+        else {
+            throw new Error('unknown tag: ' + tag);
+        }
+    };
+    const readPacked8 = (tag) => {
+        const startByte = readByte();
+        let value = '';
+        for (let i = 0; i < (startByte & 127); i++) {
+            const curByte = readByte();
+            value += String.fromCharCode(unpackByte(tag, (curByte & 0xf0) >> 4));
+            value += String.fromCharCode(unpackByte(tag, curByte & 0x0f));
+        }
+        if (startByte >> 7 !== 0) {
+            value = value.slice(0, -1);
+        }
+        return value;
+    };
+    const isListTag = (tag) => {
+        return tag === TAGS.LIST_EMPTY || tag === TAGS.LIST_8 || tag === TAGS.LIST_16;
+    };
+    const readListSize = (tag) => {
+        switch (tag) {
+            case TAGS.LIST_EMPTY:
+                return 0;
+            case TAGS.LIST_8:
+                return readByte();
+            case TAGS.LIST_16:
+                return readInt(2);
+            default:
+                throw new Error('invalid tag for list size: ' + tag);
+        }
+    };
+    const readJidPair = () => {
+        const i = readString(readByte());
+        const j = readString(readByte());
+        if (j) {
+            return (i || '') + '@' + j;
+        }
+        throw new Error('invalid jid pair: ' + i + ', ' + j);
+    };
+    const readAdJid = () => {
+        const agent = readByte();
+        const device = readByte();
+        const user = readString(readByte());
+        return (0, jid_utils_1.jidEncode)(user, agent === 0 ? 's.whatsapp.net' : 'lid', device);
+    };
+    const readString = (tag) => {
+        if (tag >= 1 && tag < SINGLE_BYTE_TOKENS.length) {
+            return SINGLE_BYTE_TOKENS[tag] || '';
+        }
+        switch (tag) {
+            case TAGS.DICTIONARY_0:
+            case TAGS.DICTIONARY_1:
+            case TAGS.DICTIONARY_2:
+            case TAGS.DICTIONARY_3:
+                return getTokenDouble(tag - TAGS.DICTIONARY_0, readByte());
+            case TAGS.LIST_EMPTY:
+                return '';
+            case TAGS.BINARY_8:
+                return readStringFromChars(readByte());
+            case TAGS.BINARY_20:
+                return readStringFromChars(readInt20());
+            case TAGS.BINARY_32:
+                return readStringFromChars(readInt(4));
+            case TAGS.JID_PAIR:
+                return readJidPair();
+            case TAGS.AD_JID:
+                return readAdJid();
+            case TAGS.HEX_8:
+            case TAGS.NIBBLE_8:
+                return readPacked8(tag);
+            default:
+                throw new Error('invalid string with tag: ' + tag);
+        }
+    };
+    const readList = (tag) => {
+        const items = [];
+        const size = readListSize(tag);
+        for (let i = 0; i < size; i++) {
+            items.push((0, exports.decodeDecompressedBinaryNode)(buffer, opts, indexRef));
+        }
+        return items;
+    };
+    const getTokenDouble = (index1, index2) => {
+        const dict = DOUBLE_BYTE_TOKENS[index1];
+        if (!dict) {
+            throw new Error(`Invalid double token dict (${index1})`);
+        }
+        const value = dict[index2];
+        if (typeof value === 'undefined') {
+            throw new Error(`Invalid double token (${index2})`);
+        }
+        return value;
+    };
+    const listSize = readListSize(readByte());
+    const header = readString(readByte());
+    if (!listSize || !header.length) {
+        throw new Error('invalid node');
+    }
+    const attrs = {};
+    let data;
+    if (listSize === 0 || !header) {
+        throw new Error('invalid node');
+    }
+    // read the attributes in
+    const attributesLength = (listSize - 1) >> 1;
+    for (let i = 0; i < attributesLength; i++) {
+        const key = readString(readByte());
+        const value = readString(readByte());
+        attrs[key] = value;
+    }
+    if (listSize % 2 === 0) {
+        const tag = readByte();
+        if (isListTag(tag)) {
+            data = readList(tag);
+        }
+        else {
+            let decoded;
+            switch (tag) {
+                case TAGS.BINARY_8:
+                    decoded = readBytes(readByte());
+                    break;
+                case TAGS.BINARY_20:
+                    decoded = readBytes(readInt20());
+                    break;
+                case TAGS.BINARY_32:
+                    decoded = readBytes(readInt(4));
+                    break;
+                default:
+                    decoded = readString(tag);
+                    break;
+            }
+            data = decoded;
+        }
+    }
+    return {
+        tag: header,
+        attrs,
+        content: data
+    };
+};
+exports.decodeDecompressedBinaryNode = decodeDecompressedBinaryNode;
+const decodeBinaryNode = (buff) => {
+    const decompBuff = (0, exports.decompressingIfRequired)(buff);
+    return (0, exports.decodeDecompressedBinaryNode)(decompBuff, constants);
+};
+exports.decodeBinaryNode = decodeBinaryNode;
diff --git a/node_modules/@whiskeysockets/baileys/lib/WABinary/encode.d.ts b/node_modules/@whiskeysockets/baileys/lib/WABinary/encode.d.ts
new file mode 100644
index 0000000..0c0485a
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WABinary/encode.d.ts
@@ -0,0 +1,3 @@
+/// <reference types="node" />
+import type { BinaryNode, BinaryNodeCodingOptions } from './types';
+export declare const encodeBinaryNode: ({ tag, attrs, content }: BinaryNode, opts?: Pick<BinaryNodeCodingOptions, 'TAGS' | 'TOKEN_MAP'>, buffer?: number[]) => Buffer;
diff --git a/node_modules/@whiskeysockets/baileys/lib/WABinary/encode.js b/node_modules/@whiskeysockets/baileys/lib/WABinary/encode.js
new file mode 100644
index 0000000..e7c1e75
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WABinary/encode.js
@@ -0,0 +1,228 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
+var __importStar = (this && this.__importStar) || function (mod) {
+    if (mod && mod.__esModule) return mod;
+    var result = {};
+    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
+    return result;
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.encodeBinaryNode = void 0;
+const constants = __importStar(require("./constants"));
+const jid_utils_1 = require("./jid-utils");
+const encodeBinaryNode = ({ tag, attrs, content }, opts = constants, buffer = [0]) => {
+    const { TAGS, TOKEN_MAP } = opts;
+    const pushByte = (value) => buffer.push(value & 0xff);
+    const pushInt = (value, n, littleEndian = false) => {
+        for (let i = 0; i < n; i++) {
+            const curShift = littleEndian ? i : n - 1 - i;
+            buffer.push((value >> (curShift * 8)) & 0xff);
+        }
+    };
+    const pushBytes = (bytes) => (bytes.forEach(b => buffer.push(b)));
+    const pushInt16 = (value) => {
+        pushBytes([(value >> 8) & 0xff, value & 0xff]);
+    };
+    const pushInt20 = (value) => (pushBytes([(value >> 16) & 0x0f, (value >> 8) & 0xff, value & 0xff]));
+    const writeByteLength = (length) => {
+        if (length >= 4294967296) {
+            throw new Error('string too large to encode: ' + length);
+        }
+        if (length >= 1 << 20) {
+            pushByte(TAGS.BINARY_32);
+            pushInt(length, 4); // 32 bit integer
+        }
+        else if (length >= 256) {
+            pushByte(TAGS.BINARY_20);
+            pushInt20(length);
+        }
+        else {
+            pushByte(TAGS.BINARY_8);
+            pushByte(length);
+        }
+    };
+    const writeStringRaw = (str) => {
+        const bytes = Buffer.from(str, 'utf-8');
+        writeByteLength(bytes.length);
+        pushBytes(bytes);
+    };
+    const writeJid = ({ domainType, device, user, server }) => {
+        if (typeof device !== 'undefined') {
+            pushByte(TAGS.AD_JID);
+            pushByte(domainType || 0);
+            pushByte(device || 0);
+            writeString(user);
+        }
+        else {
+            pushByte(TAGS.JID_PAIR);
+            if (user.length) {
+                writeString(user);
+            }
+            else {
+                pushByte(TAGS.LIST_EMPTY);
+            }
+            writeString(server);
+        }
+    };
+    const packNibble = (char) => {
+        switch (char) {
+            case '-':
+                return 10;
+            case '.':
+                return 11;
+            case '\0':
+                return 15;
+            default:
+                if (char >= '0' && char <= '9') {
+                    return char.charCodeAt(0) - '0'.charCodeAt(0);
+                }
+                throw new Error(`invalid byte for nibble "${char}"`);
+        }
+    };
+    const packHex = (char) => {
+        if (char >= '0' && char <= '9') {
+            return char.charCodeAt(0) - '0'.charCodeAt(0);
+        }
+        if (char >= 'A' && char <= 'F') {
+            return 10 + char.charCodeAt(0) - 'A'.charCodeAt(0);
+        }
+        if (char >= 'a' && char <= 'f') {
+            return 10 + char.charCodeAt(0) - 'a'.charCodeAt(0);
+        }
+        if (char === '\0') {
+            return 15;
+        }
+        throw new Error(`Invalid hex char "${char}"`);
+    };
+    const writePackedBytes = (str, type) => {
+        if (str.length > TAGS.PACKED_MAX) {
+            throw new Error('Too many bytes to pack');
+        }
+        pushByte(type === 'nibble' ? TAGS.NIBBLE_8 : TAGS.HEX_8);
+        let roundedLength = Math.ceil(str.length / 2.0);
+        if (str.length % 2 !== 0) {
+            roundedLength |= 128;
+        }
+        pushByte(roundedLength);
+        const packFunction = type === 'nibble' ? packNibble : packHex;
+        const packBytePair = (v1, v2) => {
+            const result = (packFunction(v1) << 4) | packFunction(v2);
+            return result;
+        };
+        const strLengthHalf = Math.floor(str.length / 2);
+        for (let i = 0; i < strLengthHalf; i++) {
+            pushByte(packBytePair(str[2 * i], str[2 * i + 1]));
+        }
+        if (str.length % 2 !== 0) {
+            pushByte(packBytePair(str[str.length - 1], '\x00'));
+        }
+    };
+    const isNibble = (str) => {
+        if (str.length > TAGS.PACKED_MAX) {
+            return false;
+        }
+        for (let i = 0; i < str.length; i++) {
+            const char = str[i];
+            const isInNibbleRange = char >= '0' && char <= '9';
+            if (!isInNibbleRange && char !== '-' && char !== '.') {
+                return false;
+            }
+        }
+        return true;
+    };
+    const isHex = (str) => {
+        if (str.length > TAGS.PACKED_MAX) {
+            return false;
+        }
+        for (let i = 0; i < str.length; i++) {
+            const char = str[i];
+            const isInNibbleRange = char >= '0' && char <= '9';
+            if (!isInNibbleRange && !(char >= 'A' && char <= 'F') && !(char >= 'a' && char <= 'f')) {
+                return false;
+            }
+        }
+        return true;
+    };
+    const writeString = (str) => {
+        const tokenIndex = TOKEN_MAP[str];
+        if (tokenIndex) {
+            if (typeof tokenIndex.dict === 'number') {
+                pushByte(TAGS.DICTIONARY_0 + tokenIndex.dict);
+            }
+            pushByte(tokenIndex.index);
+        }
+        else if (isNibble(str)) {
+            writePackedBytes(str, 'nibble');
+        }
+        else if (isHex(str)) {
+            writePackedBytes(str, 'hex');
+        }
+        else if (str) {
+            const decodedJid = (0, jid_utils_1.jidDecode)(str);
+            if (decodedJid) {
+                writeJid(decodedJid);
+            }
+            else {
+                writeStringRaw(str);
+            }
+        }
+    };
+    const writeListStart = (listSize) => {
+        if (listSize === 0) {
+            pushByte(TAGS.LIST_EMPTY);
+        }
+        else if (listSize < 256) {
+            pushBytes([TAGS.LIST_8, listSize]);
+        }
+        else {
+            pushByte(TAGS.LIST_16);
+            pushInt16(listSize);
+        }
+    };
+    const validAttributes = Object.keys(attrs).filter(k => (typeof attrs[k] !== 'undefined' && attrs[k] !== null));
+    writeListStart(2 * validAttributes.length + 1 + (typeof content !== 'undefined' ? 1 : 0));
+    writeString(tag);
+    for (const key of validAttributes) {
+        if (typeof attrs[key] === 'string') {
+            writeString(key);
+            writeString(attrs[key]);
+        }
+    }
+    if (typeof content === 'string') {
+        writeString(content);
+    }
+    else if (Buffer.isBuffer(content) || content instanceof Uint8Array) {
+        writeByteLength(content.length);
+        pushBytes(content);
+    }
+    else if (Array.isArray(content)) {
+        writeListStart(content.length);
+        for (const item of content) {
+            (0, exports.encodeBinaryNode)(item, opts, buffer);
+        }
+    }
+    else if (typeof content === 'undefined') {
+        // do nothing
+    }
+    else {
+        throw new Error(`invalid children for header "${tag}": ${content} (${typeof content})`);
+    }
+    return Buffer.from(buffer);
+};
+exports.encodeBinaryNode = encodeBinaryNode;
diff --git a/node_modules/@whiskeysockets/baileys/lib/WABinary/generic-utils.d.ts b/node_modules/@whiskeysockets/baileys/lib/WABinary/generic-utils.d.ts
new file mode 100644
index 0000000..f7aefb8
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WABinary/generic-utils.d.ts
@@ -0,0 +1,15 @@
+/// <reference types="node" />
+import { proto } from '../../WAProto';
+import { BinaryNode } from './types';
+export declare const getBinaryNodeChildren: (node: BinaryNode | undefined, childTag: string) => BinaryNode[];
+export declare const getAllBinaryNodeChildren: ({ content }: BinaryNode) => BinaryNode[];
+export declare const getBinaryNodeChild: (node: BinaryNode | undefined, childTag: string) => BinaryNode | undefined;
+export declare const getBinaryNodeChildBuffer: (node: BinaryNode | undefined, childTag: string) => Uint8Array | Buffer | undefined;
+export declare const getBinaryNodeChildString: (node: BinaryNode | undefined, childTag: string) => string | undefined;
+export declare const getBinaryNodeChildUInt: (node: BinaryNode, childTag: string, length: number) => number | undefined;
+export declare const assertNodeErrorFree: (node: BinaryNode) => void;
+export declare const reduceBinaryNodeToDictionary: (node: BinaryNode, tag: string) => {
+    [_: string]: string;
+};
+export declare const getBinaryNodeMessages: ({ content }: BinaryNode) => proto.WebMessageInfo[];
+export declare function binaryNodeToString(node: BinaryNode | BinaryNode['content'], i?: number): any;
diff --git a/node_modules/@whiskeysockets/baileys/lib/WABinary/generic-utils.js b/node_modules/@whiskeysockets/baileys/lib/WABinary/generic-utils.js
new file mode 100644
index 0000000..7f75a97
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WABinary/generic-utils.js
@@ -0,0 +1,110 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.binaryNodeToString = exports.getBinaryNodeMessages = exports.reduceBinaryNodeToDictionary = exports.assertNodeErrorFree = exports.getBinaryNodeChildUInt = exports.getBinaryNodeChildString = exports.getBinaryNodeChildBuffer = exports.getBinaryNodeChild = exports.getAllBinaryNodeChildren = exports.getBinaryNodeChildren = void 0;
+const boom_1 = require("@hapi/boom");
+const WAProto_1 = require("../../WAProto");
+// some extra useful utilities
+const getBinaryNodeChildren = (node, childTag) => {
+    if (Array.isArray(node === null || node === void 0 ? void 0 : node.content)) {
+        return node.content.filter(item => item.tag === childTag);
+    }
+    return [];
+};
+exports.getBinaryNodeChildren = getBinaryNodeChildren;
+const getAllBinaryNodeChildren = ({ content }) => {
+    if (Array.isArray(content)) {
+        return content;
+    }
+    return [];
+};
+exports.getAllBinaryNodeChildren = getAllBinaryNodeChildren;
+const getBinaryNodeChild = (node, childTag) => {
+    if (Array.isArray(node === null || node === void 0 ? void 0 : node.content)) {
+        return node === null || node === void 0 ? void 0 : node.content.find(item => item.tag === childTag);
+    }
+};
+exports.getBinaryNodeChild = getBinaryNodeChild;
+const getBinaryNodeChildBuffer = (node, childTag) => {
+    var _a;
+    const child = (_a = (0, exports.getBinaryNodeChild)(node, childTag)) === null || _a === void 0 ? void 0 : _a.content;
+    if (Buffer.isBuffer(child) || child instanceof Uint8Array) {
+        return child;
+    }
+};
+exports.getBinaryNodeChildBuffer = getBinaryNodeChildBuffer;
+const getBinaryNodeChildString = (node, childTag) => {
+    var _a;
+    const child = (_a = (0, exports.getBinaryNodeChild)(node, childTag)) === null || _a === void 0 ? void 0 : _a.content;
+    if (Buffer.isBuffer(child) || child instanceof Uint8Array) {
+        return Buffer.from(child).toString('utf-8');
+    }
+    else if (typeof child === 'string') {
+        return child;
+    }
+};
+exports.getBinaryNodeChildString = getBinaryNodeChildString;
+const getBinaryNodeChildUInt = (node, childTag, length) => {
+    const buff = (0, exports.getBinaryNodeChildBuffer)(node, childTag);
+    if (buff) {
+        return bufferToUInt(buff, length);
+    }
+};
+exports.getBinaryNodeChildUInt = getBinaryNodeChildUInt;
+const assertNodeErrorFree = (node) => {
+    const errNode = (0, exports.getBinaryNodeChild)(node, 'error');
+    if (errNode) {
+        throw new boom_1.Boom(errNode.attrs.text || 'Unknown error', { data: +errNode.attrs.code });
+    }
+};
+exports.assertNodeErrorFree = assertNodeErrorFree;
+const reduceBinaryNodeToDictionary = (node, tag) => {
+    const nodes = (0, exports.getBinaryNodeChildren)(node, tag);
+    const dict = nodes.reduce((dict, { attrs }) => {
+        dict[attrs.name || attrs.config_code] = attrs.value || attrs.config_value;
+        return dict;
+    }, {});
+    return dict;
+};
+exports.reduceBinaryNodeToDictionary = reduceBinaryNodeToDictionary;
+const getBinaryNodeMessages = ({ content }) => {
+    const msgs = [];
+    if (Array.isArray(content)) {
+        for (const item of content) {
+            if (item.tag === 'message') {
+                msgs.push(WAProto_1.proto.WebMessageInfo.decode(item.content));
+            }
+        }
+    }
+    return msgs;
+};
+exports.getBinaryNodeMessages = getBinaryNodeMessages;
+function bufferToUInt(e, t) {
+    let a = 0;
+    for (let i = 0; i < t; i++) {
+        a = 256 * a + e[i];
+    }
+    return a;
+}
+const tabs = (n) => '\t'.repeat(n);
+function binaryNodeToString(node, i = 0) {
+    if (!node) {
+        return node;
+    }
+    if (typeof node === 'string') {
+        return tabs(i) + node;
+    }
+    if (node instanceof Uint8Array) {
+        return tabs(i) + Buffer.from(node).toString('hex');
+    }
+    if (Array.isArray(node)) {
+        return node.map((x) => tabs(i + 1) + binaryNodeToString(x, i + 1)).join('\n');
+    }
+    const children = binaryNodeToString(node.content, i + 1);
+    const tag = `<${node.tag} ${Object.entries(node.attrs || {})
+        .filter(([, v]) => v !== undefined)
+        .map(([k, v]) => `${k}='${v}'`)
+        .join(' ')}`;
+    const content = children ? `>\n${children}\n${tabs(i)}</${node.tag}>` : '/>';
+    return tag + content;
+}
+exports.binaryNodeToString = binaryNodeToString;
diff --git a/node_modules/@whiskeysockets/baileys/lib/WABinary/index.d.ts b/node_modules/@whiskeysockets/baileys/lib/WABinary/index.d.ts
new file mode 100644
index 0000000..e30bfa6
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WABinary/index.d.ts
@@ -0,0 +1,5 @@
+export * from './encode';
+export * from './decode';
+export * from './generic-utils';
+export * from './jid-utils';
+export * from './types';
diff --git a/node_modules/@whiskeysockets/baileys/lib/WABinary/index.js b/node_modules/@whiskeysockets/baileys/lib/WABinary/index.js
new file mode 100644
index 0000000..26c5c6b
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WABinary/index.js
@@ -0,0 +1,21 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __exportStar = (this && this.__exportStar) || function(m, exports) {
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+__exportStar(require("./encode"), exports);
+__exportStar(require("./decode"), exports);
+__exportStar(require("./generic-utils"), exports);
+__exportStar(require("./jid-utils"), exports);
+__exportStar(require("./types"), exports);
diff --git a/node_modules/@whiskeysockets/baileys/lib/WABinary/jid-utils.d.ts b/node_modules/@whiskeysockets/baileys/lib/WABinary/jid-utils.d.ts
new file mode 100644
index 0000000..4ce85c8
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WABinary/jid-utils.d.ts
@@ -0,0 +1,29 @@
+export declare const S_WHATSAPP_NET = "@s.whatsapp.net";
+export declare const OFFICIAL_BIZ_JID = "16505361212@c.us";
+export declare const SERVER_JID = "server@c.us";
+export declare const PSA_WID = "0@c.us";
+export declare const STORIES_JID = "status@broadcast";
+export type JidServer = 'c.us' | 'g.us' | 'broadcast' | 's.whatsapp.net' | 'call' | 'lid';
+export type JidWithDevice = {
+    user: string;
+    device?: number;
+};
+export type FullJid = JidWithDevice & {
+    server: JidServer | string;
+    domainType?: number;
+};
+export declare const jidEncode: (user: string | number | null, server: JidServer, device?: number, agent?: number) => string;
+export declare const jidDecode: (jid: string | undefined) => FullJid | undefined;
+/** is the jid a user */
+export declare const areJidsSameUser: (jid1: string | undefined, jid2: string | undefined) => boolean;
+/** is the jid a user */
+export declare const isJidUser: (jid: string | undefined) => boolean | undefined;
+/** is the jid a group */
+export declare const isLidUser: (jid: string | undefined) => boolean | undefined;
+/** is the jid a broadcast */
+export declare const isJidBroadcast: (jid: string | undefined) => boolean | undefined;
+/** is the jid a group */
+export declare const isJidGroup: (jid: string | undefined) => boolean | undefined;
+/** is the jid the status broadcast */
+export declare const isJidStatusBroadcast: (jid: string) => boolean;
+export declare const jidNormalizedUser: (jid: string | undefined) => string;
diff --git a/node_modules/@whiskeysockets/baileys/lib/WABinary/jid-utils.js b/node_modules/@whiskeysockets/baileys/lib/WABinary/jid-utils.js
new file mode 100644
index 0000000..73f312e
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WABinary/jid-utils.js
@@ -0,0 +1,59 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.jidNormalizedUser = exports.isJidStatusBroadcast = exports.isJidGroup = exports.isJidBroadcast = exports.isLidUser = exports.isJidUser = exports.areJidsSameUser = exports.jidDecode = exports.jidEncode = exports.STORIES_JID = exports.PSA_WID = exports.SERVER_JID = exports.OFFICIAL_BIZ_JID = exports.S_WHATSAPP_NET = void 0;
+exports.S_WHATSAPP_NET = '@s.whatsapp.net';
+exports.OFFICIAL_BIZ_JID = '16505361212@c.us';
+exports.SERVER_JID = 'server@c.us';
+exports.PSA_WID = '0@c.us';
+exports.STORIES_JID = 'status@broadcast';
+const jidEncode = (user, server, device, agent) => {
+    return `${user || ''}${!!agent ? `_${agent}` : ''}${!!device ? `:${device}` : ''}@${server}`;
+};
+exports.jidEncode = jidEncode;
+const jidDecode = (jid) => {
+    const sepIdx = typeof jid === 'string' ? jid.indexOf('@') : -1;
+    if (sepIdx < 0) {
+        return undefined;
+    }
+    const server = jid.slice(sepIdx + 1);
+    const userCombined = jid.slice(0, sepIdx);
+    const [userAgent, device] = userCombined.split(':');
+    const user = userAgent.split('_')[0];
+    return {
+        server,
+        user,
+        domainType: server === 'lid' ? 1 : 0,
+        device: device ? +device : undefined
+    };
+};
+exports.jidDecode = jidDecode;
+/** is the jid a user */
+const areJidsSameUser = (jid1, jid2) => {
+    var _a, _b;
+    return (((_a = (0, exports.jidDecode)(jid1)) === null || _a === void 0 ? void 0 : _a.user) === ((_b = (0, exports.jidDecode)(jid2)) === null || _b === void 0 ? void 0 : _b.user));
+};
+exports.areJidsSameUser = areJidsSameUser;
+/** is the jid a user */
+const isJidUser = (jid) => (jid === null || jid === void 0 ? void 0 : jid.endsWith('@s.whatsapp.net'));
+exports.isJidUser = isJidUser;
+/** is the jid a group */
+const isLidUser = (jid) => (jid === null || jid === void 0 ? void 0 : jid.endsWith('@lid'));
+exports.isLidUser = isLidUser;
+/** is the jid a broadcast */
+const isJidBroadcast = (jid) => (jid === null || jid === void 0 ? void 0 : jid.endsWith('@broadcast'));
+exports.isJidBroadcast = isJidBroadcast;
+/** is the jid a group */
+const isJidGroup = (jid) => (jid === null || jid === void 0 ? void 0 : jid.endsWith('@g.us'));
+exports.isJidGroup = isJidGroup;
+/** is the jid the status broadcast */
+const isJidStatusBroadcast = (jid) => jid === 'status@broadcast';
+exports.isJidStatusBroadcast = isJidStatusBroadcast;
+const jidNormalizedUser = (jid) => {
+    const result = (0, exports.jidDecode)(jid);
+    if (!result) {
+        return '';
+    }
+    const { user, server } = result;
+    return (0, exports.jidEncode)(user, server === 'c.us' ? 's.whatsapp.net' : server);
+};
+exports.jidNormalizedUser = jidNormalizedUser;
diff --git a/node_modules/@whiskeysockets/baileys/lib/WABinary/types.d.ts b/node_modules/@whiskeysockets/baileys/lib/WABinary/types.d.ts
new file mode 100644
index 0000000..9d63813
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WABinary/types.d.ts
@@ -0,0 +1,18 @@
+import * as constants from './constants';
+/**
+ * the binary node WA uses internally for communication
+ *
+ * this is manipulated soley as an object and it does not have any functions.
+ * This is done for easy serialization, to prevent running into issues with prototypes &
+ * to maintain functional code structure
+ * */
+export type BinaryNode = {
+    tag: string;
+    attrs: {
+        [key: string]: string;
+    };
+    content?: BinaryNode[] | string | Uint8Array;
+};
+export type BinaryNodeAttributes = BinaryNode['attrs'];
+export type BinaryNodeData = BinaryNode['content'];
+export type BinaryNodeCodingOptions = typeof constants;
diff --git a/node_modules/@whiskeysockets/baileys/lib/WABinary/types.js b/node_modules/@whiskeysockets/baileys/lib/WABinary/types.js
new file mode 100644
index 0000000..c8ad2e5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WABinary/types.js
@@ -0,0 +1,2 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@whiskeysockets/baileys/lib/WAM/BinaryInfo.d.ts b/node_modules/@whiskeysockets/baileys/lib/WAM/BinaryInfo.d.ts
new file mode 100644
index 0000000..b08b801
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WAM/BinaryInfo.d.ts
@@ -0,0 +1,17 @@
+/// <reference types="node" />
+export declare class BinaryInfo {
+    protocolVersion: number;
+    sequence: number;
+    events: {
+        [x: string]: {
+            props: {
+                [x: string]: any;
+            };
+            globals: {
+                [x: string]: any;
+            };
+        };
+    }[];
+    buffer: Buffer[];
+    constructor(options?: Partial<BinaryInfo>);
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/WAM/BinaryInfo.js b/node_modules/@whiskeysockets/baileys/lib/WAM/BinaryInfo.js
new file mode 100644
index 0000000..9bd98a7
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WAM/BinaryInfo.js
@@ -0,0 +1,13 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.BinaryInfo = void 0;
+class BinaryInfo {
+    constructor(options = {}) {
+        this.protocolVersion = 5;
+        this.sequence = 0;
+        this.events = [];
+        this.buffer = [];
+        Object.assign(this, options);
+    }
+}
+exports.BinaryInfo = BinaryInfo;
diff --git a/node_modules/@whiskeysockets/baileys/lib/WAM/constants.d.ts b/node_modules/@whiskeysockets/baileys/lib/WAM/constants.d.ts
new file mode 100644
index 0000000..6d11f8d
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WAM/constants.d.ts
@@ -0,0 +1,38 @@
+export declare const WEB_EVENTS: Event[];
+export declare const WEB_GLOBALS: Global[];
+export declare const FLAG_BYTE = 8, FLAG_GLOBAL = 0, FLAG_EVENT = 1, FLAG_FIELD = 2, FLAG_EXTENDED = 4;
+export type Event = {
+    name: string;
+    id: number;
+    props: {
+        [key: string]: [number, string | {
+            [key: string]: number;
+        }];
+    };
+    weight: number;
+    wamChannel: string;
+    privateStatsIdInt: number;
+};
+export type Global = {
+    name: string;
+    id: number;
+    type: string | {
+        [key: string]: number;
+    };
+    validator?: string;
+    channels: string[];
+};
+type EventByName<T extends Event['name']> = Extract<Event, {
+    name: T;
+}>;
+export type EventInputType = {
+    [key in Event['name']]: {
+        props: {
+            [k in keyof EventByName<key>['props']]: any;
+        };
+        globals: {
+            [x: string]: any;
+        };
+    };
+} & {};
+export {};
diff --git a/node_modules/@whiskeysockets/baileys/lib/WAM/constants.js b/node_modules/@whiskeysockets/baileys/lib/WAM/constants.js
new file mode 100644
index 0000000..9dcc594
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WAM/constants.js
@@ -0,0 +1,15350 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.FLAG_EXTENDED = exports.FLAG_FIELD = exports.FLAG_EVENT = exports.FLAG_GLOBAL = exports.FLAG_BYTE = exports.WEB_GLOBALS = exports.WEB_EVENTS = void 0;
+exports.WEB_EVENTS = [
+    {
+        name: 'WebcFingerprint',
+        id: 1704,
+        props: {
+            webcCanvasFingerprint: [25, 'string'],
+            webcDocumentDriverEvaluate: [9, 'boolean'],
+            webcDocumentDriverUnwrapped: [7, 'boolean'],
+            webcDocumentElementAttrDriver: [14, 'boolean'],
+            webcDocumentElementAttrSelenium: [12, 'boolean'],
+            webcDocumentElementAttrWebdriver: [13, 'boolean'],
+            webcDocumentFxdriverEvaluate: [6, 'boolean'],
+            webcDocumentFxdriverUnwrapped: [11, 'boolean'],
+            webcDocumentSeleniumEvaluate: [2, 'boolean'],
+            webcDocumentSeleniumUnwrapped: [10, 'boolean'],
+            webcDocumentWebdriverEvaluate: [1, 'boolean'],
+            webcDocumentWebdriverScriptFn: [5, 'boolean'],
+            webcDocumentWebdriverScriptFunc: [4, 'boolean'],
+            webcDocumentWebdriverScriptFunction: [3, 'boolean'],
+            webcDocumentWebdriverUnwrapped: [8, 'boolean'],
+            webcWebglFingerprint: [24, 'string'],
+            webcWebglRenderer: [23, 'string'],
+            webcWebglVendor: [22, 'string'],
+            webcWindowSeleniumIdeRecorder: [20, 'boolean'],
+            webcWindowCallphantom: [18, 'boolean'],
+            webcWindowCallselenium: [19, 'boolean'],
+            webcWindowNavigatorWebdriver: [
+                21,
+                {
+                    FALSE: 0,
+                    TRUE: 1,
+                    UNDEFINED: 2,
+                },
+            ],
+            webcWindowNightmare: [16, 'boolean'],
+            webcWindowPhantom: [15, 'boolean'],
+            webcWindowSelenium: [17, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'Login',
+        id: 460,
+        props: {
+            androidKeystoreState: [
+                10,
+                {
+                    NOT_AVAILABLE: 1,
+                    SELF_TEST_FAILURE: 2,
+                    ENC_KEY_READ_FAILURE: 3,
+                    ENC_KEY_STORED_USED: 4,
+                    ENC_KEY_PLAIN_DELETED: 5,
+                    ENC_KEY_PLAIN_RECOVERED: 6,
+                },
+            ],
+            connectionOrigin: [
+                6,
+                {
+                    PERSON: 1,
+                    PUSH: 2,
+                    OTHER: 3,
+                    BACKOFF: 4,
+                },
+            ],
+            connectionSequenceStep: [
+                11,
+                {
+                    PUSH_OVERRIDES: 1,
+                    PRIMARY: 2,
+                    PUSH_FALLBACKS: 4,
+                    HOST_FALLBACK: 5,
+                    NO_DNS: 6,
+                    SOFTLAYER: 7,
+                    PRIMARY_HTTP: 8,
+                    SOFTLAYER_HTTP: 9,
+                    HOST_FALLBACK_HTTP: 10,
+                    NO_DNS_HTTP: 11,
+                },
+            ],
+            connectionT: [5, 'timer'],
+            dnsResolutionMethod: [
+                12,
+                {
+                    SYSTEM: 1,
+                    GOOGLE: 2,
+                    HARDCODED: 3,
+                    NO_DNS: 4,
+                },
+            ],
+            loginDnsResolver: [
+                13,
+                {
+                    SYSTEM: 1,
+                    GOOGLE: 2,
+                    HARDCODED: 3,
+                    NO_DNS: 4,
+                },
+            ],
+            loginIpSource: [
+                14,
+                {
+                    PUSH_OVERRIDES: 1,
+                    G_WHATSAPP_NET: 2,
+                    PUSH_FALLBACKS: 3,
+                    G_FALLBACK_WHATSAPP_NET: 4,
+                    HARDCODED_LIST: 5,
+                    EX_WHATSAPP_NET: 6,
+                },
+            ],
+            loginPort: [
+                15,
+                {
+                    P5222: 1,
+                    P443: 2,
+                    P80: 3,
+                    UNKNOWN: 4,
+                },
+            ],
+            loginResult: [
+                1,
+                {
+                    OK: 1,
+                    ERROR_UNKNOWN: 2,
+                    SERVER_ERROR: 3,
+                    SERVER_GOAWAY: 4,
+                    NETWORK_ERROR: 5,
+                    ANDROID_KEYSTORE_ERROR: 6,
+                    CERTIFICATE_ERROR: 7,
+                },
+            ],
+            loginT: [3, 'timer'],
+            longConnect: [4, 'boolean'],
+            noiseProtocolVersion: [16, 'integer'],
+            passive: [8, 'boolean'],
+            pendingAcksCount: [17, 'integer'],
+            retryCount: [2, 'integer'],
+            sequenceStep: [7, 'integer'],
+            serverErrorCode: [9, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcPageLoad',
+        id: 642,
+        props: {
+            webcAppcacheStatus: [
+                29,
+                {
+                    UNCACHED: 0,
+                    IDLE: 1,
+                    CHECKING: 2,
+                    DOWNLOADING: 3,
+                    UPDATEREADY: 4,
+                    OBSOLETE: 5,
+                },
+            ],
+            webcCached: [30, 'boolean'],
+            webcConnectEnd: [10, 'timer'],
+            webcConnectStart: [9, 'timer'],
+            webcDomComplete: [19, 'timer'],
+            webcDomContentLoadedEventEnd: [18, 'timer'],
+            webcDomContentLoadedEventStart: [17, 'timer'],
+            webcDomInteractive: [16, 'timer'],
+            webcDomLoading: [15, 'timer'],
+            webcDomainLookupEnd: [8, 'timer'],
+            webcDomainLookupStart: [7, 'timer'],
+            webcExeDone: [23, 'timer'],
+            webcExeStart: [22, 'timer'],
+            webcFetchStart: [6, 'timer'],
+            webcInitialMountT: [38, 'timer'],
+            webcInitialNavMountT: [39, 'timer'],
+            webcInitialPanel: [42, 'string'],
+            webcInitialPanelMountStartT: [43, 'timer'],
+            webcInitialPanelMountT: [40, 'timer'],
+            webcInitialPanelRenderT: [46, 'timer'],
+            webcJsLoadT: [37, 'timer'],
+            webcLoadEventEnd: [21, 'timer'],
+            webcLoadEventStart: [20, 'timer'],
+            webcLoadInForeground: [53, 'boolean'],
+            webcMainScriptEnd: [45, 'timer'],
+            webcMainScriptStart: [44, 'timer'],
+            webcNativeLoadT: [36, 'timer'],
+            webcNavigation: [
+                32,
+                {
+                    NAVIGATE_NEXT: 0,
+                    RELOAD: 1,
+                    BACK_FORWARD: 2,
+                    UNDEFINED: 255,
+                },
+            ],
+            webcPageLoadT: [34, 'timer'],
+            webcParallellyFetched: [41, 'boolean'],
+            webcQrCode: [31, 'boolean'],
+            webcRedirectCount: [33, 'number'],
+            webcRedirectEnd: [5, 'timer'],
+            webcRedirectStart: [4, 'timer'],
+            webcRequestStart: [12, 'timer'],
+            webcResponseEnd: [14, 'timer'],
+            webcResponseStart: [13, 'timer'],
+            webcSecureConnectionStart: [11, 'timer'],
+            webcUnloadEventEnd: [3, 'timer'],
+            webcUnloadEventStart: [2, 'timer'],
+            webcWsAttempts: [28, 'number'],
+            webcWsNormal: [27, 'timer'],
+            webcWsOpening: [24, 'timer'],
+            webcWsPairing: [25, 'timer'],
+            webcWsSyncing: [26, 'timer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'OfflineResume',
+        id: 3112,
+        props: {
+            affectedBySleepMode: [35, 'boolean'],
+            chatThreadCount: [1, 'integer'],
+            expectedOfflineCallCount: [23, 'integer'],
+            expectedOfflineMessageCount: [17, 'integer'],
+            expectedOfflineNotificationCount: [18, 'integer'],
+            expectedOfflineReceiptCount: [19, 'integer'],
+            isOfflineCompleteMissed: [2, 'boolean'],
+            isResumeInForeground: [13, 'boolean'],
+            isRunningFromServiceExtension: [22, 'boolean'],
+            lastStanzaT: [3, 'timer'],
+            mailboxAge: [14, 'integer'],
+            mainScreenLoadT: [4, 'timer'],
+            offlineCallCount: [24, 'integer'],
+            offlineDecryptErrorCount: [5, 'integer'],
+            offlineMessageCount: [6, 'integer'],
+            offlineNotificationCount: [7, 'integer'],
+            offlinePreviewT: [8, 'timer'],
+            offlineProcessingT: [20, 'timer'],
+            offlineReceiptCount: [9, 'integer'],
+            offlineResumeResult: [
+                21,
+                {
+                    COMPLETE: 1,
+                    INCOMPLETE_UNKNOWN_ERROR: 2,
+                    INCOMPLETE_DISCONNECT: 3,
+                    INCOMPLETE_APP_RESTART: 4,
+                },
+            ],
+            offlineSizeBytes: [10, 'integer'],
+            onTrickleMode: [15, 'boolean'],
+            pageLoadT: [11, 'timer'],
+            passiveModeT: [25, 'timer'],
+            preackCallCount: [26, 'integer'],
+            preackMessageCount: [27, 'integer'],
+            preackNotificationCount: [28, 'integer'],
+            preackReceiptCount: [29, 'integer'],
+            processedCallCount: [30, 'integer'],
+            processedMessageCount: [31, 'integer'],
+            processedNotificationCount: [32, 'integer'],
+            processedReceiptCount: [33, 'integer'],
+            socketConnectT: [12, 'timer'],
+            transientOfflineSessionId: [34, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcDbOpen',
+        id: 1940,
+        props: {
+            webcDbName: [1, 'string'],
+            webcDbOpenNumAttempts: [3, 'integer'],
+            webcDbOpenWasSuccess: [2, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PsIdUpdate',
+        id: 2862,
+        props: {
+            isFromWamsys: [4, 'boolean'],
+            psIdAction: [
+                2,
+                {
+                    CREATED: 1,
+                    ROTATED: 2,
+                    DELETED: 3,
+                },
+            ],
+            psIdKey: [1, 'integer'],
+            psIdRotationFrequence: [3, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebDbVersionsSource',
+        id: 4784,
+        props: {
+            webDbVersionSource: [
+                1,
+                {
+                    KNOB: 1,
+                    LOCAL: 2,
+                    STATIC: 3,
+                    KNOB_WITH_LOCAL_OVERRIDE: 4,
+                },
+            ],
+            webSchemaInitiator: [
+                2,
+                {
+                    MAIN: 1,
+                    WEB_WORKER: 2,
+                    SERVICE_WORKER: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcAssetLoad',
+        id: 1358,
+        props: {
+            webcAssetCacheType: [
+                4,
+                {
+                    UNCACHED: 0,
+                    IDB: 1,
+                    SW: 2,
+                },
+            ],
+            webcAssetFromCache: [2, 'boolean'],
+            webcAssetLoadT: [3, 'timer'],
+            webcAssetName: [1, 'string'],
+            webcAssetSize: [5, 'number'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcStorageStat',
+        id: 1504,
+        props: {
+            webcAgeOfStorage: [3, 'integer'],
+            webcPackingEnabled: [4, 'boolean'],
+            webcStorageQuota: [2, 'integer'],
+            webcStorageUsage: [1, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'OfflineResumeStage',
+        id: 3536,
+        props: {
+            attemptId: [13, 'integer'],
+            chatThreadCount: [4, 'integer'],
+            currentOfflineStage: [
+                1,
+                {
+                    PAGE_LOAD: 1,
+                    SOCKET_CONNECT: 2,
+                    PROCESS_COMPLETE: 3,
+                    SCREEN_LOAD: 4,
+                    OFFLINE_PREVIEW: 5,
+                    OFFLINE_COMPLETE_RECEIVED: 6,
+                    PREACKS_SENT: 7,
+                },
+            ],
+            isResumeInForeground: [5, 'boolean'],
+            isResumeStartedInForeground: [14, 'boolean'],
+            lastPushTimestampMs: [12, 'integer'],
+            mailboxAge: [6, 'integer'],
+            offlineCallCount: [15, 'integer'],
+            offlineDecryptErrorCount: [7, 'integer'],
+            offlineMessageCount: [8, 'integer'],
+            offlineNotificationCount: [9, 'integer'],
+            offlineReceiptCount: [10, 'integer'],
+            offlineResumeMode: [
+                11,
+                {
+                    RESUME_FROM_RESTART: 1,
+                    RESUME_FROM_OPEN_TAB: 2,
+                    UNKNOWN: 3,
+                    CONNECT_REASON_USER: 4,
+                    CONNECT_REASON_PUSH: 5,
+                    CONNECT_REASON_BACKOFF: 6,
+                },
+            ],
+            offlineSessionId: [2, 'string'],
+            offlineSizeBytes: [16, 'integer'],
+            offlineStageTimestampMs: [3, 'integer'],
+            passiveModeT: [17, 'timer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcStreamModeChange',
+        id: 770,
+        props: {
+            webcStreamMode: [
+                1,
+                {
+                    QR: 0,
+                    MAIN: 1,
+                    SYNCING: 2,
+                    OFFLINE: 3,
+                    CONFLICT: 4,
+                    PROXYBLOCK: 5,
+                    TOS_BLOCK: 6,
+                    SMB_TOS_BLOCK: 7,
+                    DEPRECATED_VERSION: 8,
+                    LOCK: 9,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcStatusSync',
+        id: 1878,
+        props: {
+            webcStatusMutedItemCount: [4, 'integer'],
+            webcStatusMutedRowCount: [7, 'integer'],
+            webcStatusRecentItemCount: [2, 'integer'],
+            webcStatusRecentRowCount: [5, 'integer'],
+            webcStatusSyncT: [1, 'timer'],
+            webcStatusViewedItemCount: [3, 'integer'],
+            webcStatusViewedRowCount: [6, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'TsNavigation',
+        id: 4334,
+        props: {
+            cid: [19, 'string'],
+            entryPointConversationInitiated: [
+                23,
+                {
+                    BUSINESS_INITIATED: 0,
+                    CONSUMER_INITIATED: 1,
+                    NO_MESSAGES_LAST_24H: 2,
+                },
+            ],
+            entryPointConversionApp: [24, 'string'],
+            entryPointConversionSource: [25, 'string'],
+            groupSize: [1, 'integer'],
+            isCatalogVisible: [29, 'boolean'],
+            isCloudapi: [26, 'boolean'],
+            isOnpremises: [27, 'boolean'],
+            isSmb: [28, 'boolean'],
+            navigationDestination: [
+                2,
+                {
+                    UNKNOWN: 1,
+                    COMMUNITY_HOME: 2,
+                    COMMUNITY_TAB: 3,
+                    CHAT_THREAD: 4,
+                    CHAT_INFO_PAGE: 5,
+                    CHAT_LIST: 6,
+                    COMMUNITY_NAVIGATION: 7,
+                    BACKGROUND: 8,
+                    RESIGN: 9,
+                    SUBGROUP_SWITCHER: 10,
+                    COMMUNITY_COMPOSER: 11,
+                    MEDIA_VIEWER: 12,
+                    ALL_MEDIA: 13,
+                    STREAMING_MEDIA_VIEWER: 14,
+                    CALLS_HOME_TAB: 15,
+                    IN_CALL_UI: 16,
+                    STATUS_HOME_TAB: 17,
+                    STATUS_COMPOSER: 18,
+                    STATUS_VIEW: 19,
+                    CAMERA: 20,
+                    PHOTO_VIDEO_LIBRARY: 21,
+                    SETTINGS_HOME_TAB: 22,
+                    TOOLS_TAB: 23,
+                    COMMUNITY_SETTINGS: 24,
+                    CHANNEL_UPDATES_HOME: 25,
+                    CHANNEL_THREAD: 26,
+                    CHANNEL_DIRECTORY: 27,
+                    CHANNEL_PROFILE: 28,
+                    CHANNEL_FORWARD: 29,
+                    CHANNEL_PRODUCER_MEDIA_EDITOR: 30,
+                    CHANNEL_CREATE: 31,
+                    CHANNEL_EDIT: 32,
+                    CHANNEL_DELETE: 33,
+                    STATUS_COMPOSER_TEXT: 34,
+                    LIGHTWEIGHT_CALL_UI: 35,
+                    AI_HOME: 36,
+                    LIGHTWEIGHT_CALL_BANNER: 37,
+                    LIGHTWEIGHT_CALL_NUX: 38,
+                    CALL_INFO_PAGE: 39,
+                    SMB_CATALOG: 40,
+                    SMB_CATALOG_SHARE_LINK: 41,
+                    SMB_CATALOG_SHARE_PRODUCT_LINK: 42,
+                    SMB_CATALOG_SETTINGS: 43,
+                    SMB_CATALOG_PRODUCT: 44,
+                    SMB_CATALOG_NEW_COLLECTION: 45,
+                    SMB_CATALOG_EDIT_COLLECTION: 46,
+                    SMB_CATALOG_CREATE_PRODUCT: 47,
+                    SMB_CATALOG_EDIT_PRODUCT: 48,
+                    SMB_CATALOG_NEW_COLLECTION_ADD_ITEMS: 49,
+                    SMB_CATALOG_COLLECTION_UPDATE_ITEMS: 50,
+                    SMB_CATALOG_COLLECTIONS: 51,
+                    SMB_CATALOG_COLLECTION_REORDER: 52,
+                    SMB_CATALOG_COLLECTION_PRODUCTS: 53,
+                    SMB_CATALOG_COLLECTION_PRODUCTS_REORDER: 54,
+                    CREATE_EVENT: 55,
+                    EVENT_PAGE: 56,
+                    EVENTS_IN_GROUP: 57,
+                    CATALOG_HOME: 59,
+                    CATALOG_COLLECTION: 60,
+                    CATALOG_ITEM: 61,
+                    CATALOG_CART: 62,
+                    FLOWS_EXPERIENCE: 63,
+                    BUSINESS_PROFILE_EDIT: 64,
+                    BUSINESS_PROFILE_EDIT_NAME: 65,
+                    BUSINESS_PROFILE_EDIT_CATEGORIES: 66,
+                    BUSINESS_PROFILE_EDIT_DESCRIPTION: 67,
+                    BUSINESS_PROFILE_EDIT_WEBSITE: 68,
+                    BUSINESS_PROFILE_EDIT_EMAIL: 69,
+                    BUSINESS_PROFILE_EDIT_ADDRESS: 70,
+                    BUSINESS_PROFILE_EDIT_HOURS: 71,
+                    BUSINESS_PROFILE_EDIT_COVER_PHOTO: 72,
+                    BUSINESS_PROFILE_LINK_FB_IG: 73,
+                    BUSINESS_PROFILE_HELP_PAGE_LINK_FB_IG: 74,
+                    PAYMENTS_HOME: 75,
+                    PAYMENTS_HOME_TRANSACTIONS: 76,
+                    PAYMENTS_HOME_RECENT_MERCHANTS: 77,
+                    PAYMENTS_HOME_INVITE_OTHERS: 78,
+                    PAYMENTS_HOME_HELP: 79,
+                    MESSAGE_MENU: 80,
+                    PIN_MESSAGE_REPLACEMENT_DIALOG: 81,
+                    PIN_MESSAGE_EXPIRATION_DIALOG: 82,
+                    MY_STATUS_LIST: 83,
+                    ALL_STATUS_LIST: 84,
+                    PIN_BANNER: 85,
+                    CALL_BANNER: 86,
+                    LANDING_SCREEN: 87,
+                    NEW_CHAT: 88,
+                    GROUP_MEMBER_ADD_GROUP_CREATION: 89,
+                    GROUP_MEMBER_ADD_EXISTING_GROUP: 90,
+                    GROUP_CHAT: 91,
+                    GROUP_CREATION: 92,
+                },
+            ],
+            navigationSource: [
+                3,
+                {
+                    UNKNOWN: 1,
+                    COMMUNITY_HOME: 2,
+                    COMMUNITY_TAB: 3,
+                    CHAT_THREAD: 4,
+                    CHAT_INFO_PAGE: 5,
+                    CHAT_LIST: 6,
+                    COMMUNITY_NAVIGATION: 7,
+                    BACKGROUND: 8,
+                    RESIGN: 9,
+                    SUBGROUP_SWITCHER: 10,
+                    COMMUNITY_COMPOSER: 11,
+                    MEDIA_VIEWER: 12,
+                    ALL_MEDIA: 13,
+                    STREAMING_MEDIA_VIEWER: 14,
+                    CALLS_HOME_TAB: 15,
+                    IN_CALL_UI: 16,
+                    STATUS_HOME_TAB: 17,
+                    STATUS_COMPOSER: 18,
+                    STATUS_VIEW: 19,
+                    CAMERA: 20,
+                    PHOTO_VIDEO_LIBRARY: 21,
+                    SETTINGS_HOME_TAB: 22,
+                    TOOLS_TAB: 23,
+                    COMMUNITY_SETTINGS: 24,
+                    CHANNEL_UPDATES_HOME: 25,
+                    CHANNEL_THREAD: 26,
+                    CHANNEL_DIRECTORY: 27,
+                    CHANNEL_PROFILE: 28,
+                    CHANNEL_FORWARD: 29,
+                    CHANNEL_PRODUCER_MEDIA_EDITOR: 30,
+                    CHANNEL_CREATE: 31,
+                    CHANNEL_EDIT: 32,
+                    CHANNEL_DELETE: 33,
+                    STATUS_COMPOSER_TEXT: 34,
+                    LIGHTWEIGHT_CALL_UI: 35,
+                    AI_HOME: 36,
+                    LIGHTWEIGHT_CALL_BANNER: 37,
+                    LIGHTWEIGHT_CALL_NUX: 38,
+                    CALL_INFO_PAGE: 39,
+                    SMB_CATALOG: 40,
+                    SMB_CATALOG_SHARE_LINK: 41,
+                    SMB_CATALOG_SHARE_PRODUCT_LINK: 42,
+                    SMB_CATALOG_SETTINGS: 43,
+                    SMB_CATALOG_PRODUCT: 44,
+                    SMB_CATALOG_NEW_COLLECTION: 45,
+                    SMB_CATALOG_EDIT_COLLECTION: 46,
+                    SMB_CATALOG_CREATE_PRODUCT: 47,
+                    SMB_CATALOG_EDIT_PRODUCT: 48,
+                    SMB_CATALOG_NEW_COLLECTION_ADD_ITEMS: 49,
+                    SMB_CATALOG_COLLECTION_UPDATE_ITEMS: 50,
+                    SMB_CATALOG_COLLECTIONS: 51,
+                    SMB_CATALOG_COLLECTION_REORDER: 52,
+                    SMB_CATALOG_COLLECTION_PRODUCTS: 53,
+                    SMB_CATALOG_COLLECTION_PRODUCTS_REORDER: 54,
+                    CREATE_EVENT: 55,
+                    EVENT_PAGE: 56,
+                    EVENTS_IN_GROUP: 57,
+                    CATALOG_HOME: 59,
+                    CATALOG_COLLECTION: 60,
+                    CATALOG_ITEM: 61,
+                    CATALOG_CART: 62,
+                    FLOWS_EXPERIENCE: 63,
+                    BUSINESS_PROFILE_EDIT: 64,
+                    BUSINESS_PROFILE_EDIT_NAME: 65,
+                    BUSINESS_PROFILE_EDIT_CATEGORIES: 66,
+                    BUSINESS_PROFILE_EDIT_DESCRIPTION: 67,
+                    BUSINESS_PROFILE_EDIT_WEBSITE: 68,
+                    BUSINESS_PROFILE_EDIT_EMAIL: 69,
+                    BUSINESS_PROFILE_EDIT_ADDRESS: 70,
+                    BUSINESS_PROFILE_EDIT_HOURS: 71,
+                    BUSINESS_PROFILE_EDIT_COVER_PHOTO: 72,
+                    BUSINESS_PROFILE_LINK_FB_IG: 73,
+                    BUSINESS_PROFILE_HELP_PAGE_LINK_FB_IG: 74,
+                    PAYMENTS_HOME: 75,
+                    PAYMENTS_HOME_TRANSACTIONS: 76,
+                    PAYMENTS_HOME_RECENT_MERCHANTS: 77,
+                    PAYMENTS_HOME_INVITE_OTHERS: 78,
+                    PAYMENTS_HOME_HELP: 79,
+                    MESSAGE_MENU: 80,
+                    PIN_MESSAGE_REPLACEMENT_DIALOG: 81,
+                    PIN_MESSAGE_EXPIRATION_DIALOG: 82,
+                    MY_STATUS_LIST: 83,
+                    ALL_STATUS_LIST: 84,
+                    PIN_BANNER: 85,
+                    CALL_BANNER: 86,
+                    LANDING_SCREEN: 87,
+                    NEW_CHAT: 88,
+                    GROUP_MEMBER_ADD_GROUP_CREATION: 89,
+                    GROUP_MEMBER_ADD_EXISTING_GROUP: 90,
+                    GROUP_CHAT: 91,
+                    GROUP_CREATION: 92,
+                },
+            ],
+            relativeTimestampMs: [4, 'integer'],
+            smbCatalogBusinessVertical: [20, 'string'],
+            smbCatalogIsCatalogVisible: [21, 'boolean'],
+            smbCatalogIsToggleCart: [22, 'boolean'],
+            threadType: [
+                7,
+                {
+                    GROUP: 1,
+                    BROADCAST: 2,
+                    INDIVIDUAL: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    SUB_GROUP: 6,
+                    DEFAULT_SUB_GROUP: 7,
+                    PARENT_GROUP: 8,
+                },
+            ],
+            tsSessionId: [5, 'integer'],
+            typeOfGroup: [
+                6,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'UserActivity',
+        id: 1384,
+        props: {
+            userActivityBitmapHigh: [4, 'integer'],
+            userActivityBitmapLen: [5, 'integer'],
+            userActivityBitmapLow: [3, 'integer'],
+            userActivitySessionCum: [7, 'integer'],
+            userActivitySessionId: [1, 'string'],
+            userActivitySessionSeq: [6, 'integer'],
+            userActivityStartTime: [2, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'TsBitArray',
+        id: 4332,
+        props: {
+            bitarrayHigh: [1, 'integer'],
+            bitarrayLength: [2, 'integer'],
+            bitarrayLow: [3, 'integer'],
+            cumulativeBits: [4, 'integer'],
+            relativeTimestampMs: [5, 'integer'],
+            sessionSeq: [6, 'integer'],
+            tsSessionId: [7, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcResourceLoad',
+        id: 688,
+        props: {
+            webcResourceCached: [3, 'boolean'],
+            webcResourceDuration: [2, 'timer'],
+            webcResourceName: [1, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdAppStateMessageRange',
+        id: 2522,
+        props: {
+            additionalMessagesCount: [1, 'integer'],
+        },
+        weight: 1000,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdBootstrapDataApplied',
+        id: 2298,
+        props: {
+            collection: [
+                5,
+                {
+                    REGULAR: 1,
+                    REGULAR_LOW: 2,
+                    REGULAR_HIGH: 3,
+                    CRITICAL_BLOCK: 4,
+                    CRITICAL_UNBLOCK_LOW: 5,
+                },
+            ],
+            historySyncChunkOrder: [14, 'integer'],
+            historySyncStageProgress: [11, 'integer'],
+            mdBootstrapContactsCount: [8, 'integer'],
+            mdBootstrapHistoryPayloadType: [
+                10,
+                {
+                    INITIAL: 1,
+                    RECENT_HISTORY: 2,
+                    FULL_HISTORY: 3,
+                    PUSHNAME: 4,
+                    STATUS_V3: 5,
+                    NON_BLOCKING_DATA: 6,
+                    ON_DEMAND: 7,
+                },
+            ],
+            mdBootstrapPayloadType: [
+                3,
+                {
+                    CRITICAL: 1,
+                    NON_CRITICAL: 2,
+                },
+            ],
+            mdBootstrapSource: [
+                2,
+                {
+                    APP_STATE: 1,
+                    HISTORY: 2,
+                },
+            ],
+            mdBootstrapStepDuration: [6, 'integer'],
+            mdBootstrapStepResult: [
+                12,
+                {
+                    SUCCESS: 1,
+                    FAILURE: 2,
+                },
+            ],
+            mdRegAttemptId: [9, 'string'],
+            mdSessionId: [1, 'string'],
+            mdTimestamp: [4, 'integer'],
+            sentViaMms: [13, 'boolean'],
+            usedSnapshot: [7, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdBootstrapAppStateDataDownloaded',
+        id: 2294,
+        props: {
+            mdBootstrapContactsCount: [5, 'integer'],
+            mdBootstrapHistoryPayloadType: [
+                11,
+                {
+                    INITIAL: 1,
+                    RECENT_HISTORY: 2,
+                    FULL_HISTORY: 3,
+                    PUSHNAME: 4,
+                    STATUS_V3: 5,
+                    NON_BLOCKING_DATA: 6,
+                    ON_DEMAND: 7,
+                },
+            ],
+            mdBootstrapPayloadSize: [4, 'integer'],
+            mdBootstrapPayloadType: [
+                2,
+                {
+                    CRITICAL: 1,
+                    NON_CRITICAL: 2,
+                },
+            ],
+            mdBootstrapStepDuration: [6, 'integer'],
+            mdBootstrapStepResult: [
+                7,
+                {
+                    SUCCESS: 1,
+                    FAILURE: 2,
+                },
+            ],
+            mdRegAttemptId: [10, 'string'],
+            mdSessionId: [1, 'string'],
+            mdStorageQuotaBytes: [8, 'integer'],
+            mdStorageQuotaUsedBytes: [9, 'integer'],
+            mdTimestamp: [3, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdAppStateKeyRotation',
+        id: 2518,
+        props: {
+            mdAppStateKeyRotationReason: [
+                1,
+                {
+                    APP_STATE_SYNC_KEY_EXPIRY: 1,
+                    DEVICE_DEREGISTERATION: 2,
+                    NO_KEYS: 3,
+                },
+            ],
+        },
+        weight: 1000,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdAppStateSyncDaily',
+        id: 2300,
+        props: {
+            crossIndexConflictCount: [11, 'integer'],
+            invalidActionCount: [4, 'integer'],
+            keyRotationRemoveCount: [12, 'integer'],
+            missingKeyCount: [9, 'integer'],
+            mutationCount: [1, 'integer'],
+            storedMutationCount: [7, 'integer'],
+            unsetActionCount: [8, 'integer'],
+            unsupportedActionCount: [5, 'integer'],
+            uploadConflictCount: [10, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcPwaEvent',
+        id: 4116,
+        props: {
+            webcPwaAction: [
+                2,
+                {
+                    INSTALL: 1,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'DeepLinkClick',
+        id: 1156,
+        props: {
+            deepLinkHasPhoneNumber: [2, 'boolean'],
+            deepLinkHasText: [1, 'boolean'],
+            deepLinkSessionId: [3, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MessageSecretErrors',
+        id: 3686,
+        props: {
+            messageMediaType: [
+                3,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messageSecretAllowedList: [
+                1,
+                {
+                    MESSAGE_POLL: 0,
+                },
+            ],
+            messageSecretError: [
+                2,
+                {
+                    MISSING_MESSAGE_SECRET: 0,
+                    WRONG_LENGTH: 1,
+                    ENCRYPTION_ERROR: 2,
+                    DECRYPTION_ERROR: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChatMessageCounts',
+        id: 1644,
+        props: {
+            audioMessagesReceived: [149, 'integer'],
+            audioMessagesSent: [150, 'integer'],
+            awayMsgsSent: [56, 'integer'],
+            bizCatalogType: [
+                60,
+                {
+                    SHOPS: 0,
+                    NATIVE: 1,
+                },
+            ],
+            bizConversationDepth: [65, 'integer'],
+            blockReason: [
+                33,
+                {
+                    OTHER: 0,
+                    NO_LONGER_NEEDED: 1,
+                    NO_SIGN_UP: 2,
+                    SPAM: 3,
+                    OFFENSIVE_MESSAGES: 4,
+                    OTP_DID_NOT_REQUEST: 5,
+                },
+            ],
+            broadcastMsgsReceived: [30, 'integer'],
+            broadcastMsgsSent: [29, 'integer'],
+            callOffersReceived: [27, 'integer'],
+            callOffersSent: [26, 'integer'],
+            callsResultBusy: [70, 'integer'],
+            callsResultCancelled: [71, 'integer'],
+            callsResultConnected: [72, 'integer'],
+            callsResultError: [78, 'integer'],
+            callsResultMissed: [73, 'integer'],
+            callsResultRejected: [74, 'integer'],
+            canEditDmSettings: [88, 'boolean'],
+            cartViews: [86, 'integer'],
+            chatEphemeralityDuration: [15, 'integer'],
+            chatMuted: [
+                8,
+                {
+                    NOT_MUTED: 1,
+                    MUTED_NO_NOTIFICATIONS: 2,
+                    MUTED_SILENT_NOTIFICATIONS: 3,
+                },
+            ],
+            chatOrigins: [
+                179,
+                {
+                    LID_USERNAME: 1,
+                    LID_CTWA: 2,
+                    OTHERS: 3,
+                },
+            ],
+            chatOverflowClicks: [79, 'integer'],
+            chatTypeInd: [
+                2,
+                {
+                    INDIVIDUAL: 1,
+                    SMB: 2,
+                    ENT: 3,
+                    INTEROP: 4,
+                },
+            ],
+            collectionInquiriesSent: [44, 'integer'],
+            commandSheetShow: [174, 'integer'],
+            commentsReceived: [126, 'integer'],
+            commerceMsgsReceived: [41, 'integer'],
+            commerceMsgsSent: [40, 'integer'],
+            disappearingChatInitiator: [
+                59,
+                {
+                    CHAT: 1,
+                    INITIATED_BY_ME: 2,
+                    INITIATED_BY_OTHER: 3,
+                    CHAT_PICKER: 4,
+                    BIZ_UPGRADE_FB_HOSTING: 5,
+                },
+            ],
+            documentMessagesReceived: [151, 'integer'],
+            documentMessagesSent: [152, 'integer'],
+            editedMsgsSent: [100, 'integer'],
+            entryPointConversionApp: [47, 'string'],
+            entryPointConversionSource: [46, 'string'],
+            ephemeralMessagesReceived: [14, 'integer'],
+            ephemeralMessagesSent: [13, 'integer'],
+            ephemeralMessagesUnreadExpired: [69, 'integer'],
+            ephemeralityInitiator: [
+                109,
+                {
+                    INITIATED_BY_ME: 1,
+                    INITIATED_BY_OTHER: 2,
+                    BIZ_UPGRADE_FB_HOSTING: 3,
+                },
+            ],
+            ephemeralityTriggerAction: [
+                110,
+                {
+                    UNKNOWN: 0,
+                    CHAT_SETTINGS: 1,
+                    ACCOUNT_SETTINGS: 2,
+                    BULK_CHANGE: 3,
+                    BIZ_SUPPORTS_FB_HOSTING: 4,
+                },
+            ],
+            eventCreationMessagesReceived: [142, 'integer'],
+            eventCreationMessagesSent: [143, 'integer'],
+            eventResponseMessagesReceived: [144, 'integer'],
+            eventResponseMessagesSent: [145, 'integer'],
+            fbCtaInquiriesSent: [45, 'integer'],
+            firstResponseTime: [25, 'integer'],
+            forwardAudioMessagesReceived: [153, 'integer'],
+            forwardAudioMessagesSent: [154, 'integer'],
+            forwardDocumentMessagesReceived: [155, 'integer'],
+            forwardDocumentMessagesSent: [156, 'integer'],
+            forwardGifMessagesReceived: [157, 'integer'],
+            forwardGifMessagesSent: [158, 'integer'],
+            forwardMessagesReceived: [89, 'integer'],
+            forwardMessagesSent: [90, 'integer'],
+            forwardPhotoMessagesReceived: [128, 'integer'],
+            forwardPhotoMessagesSent: [129, 'integer'],
+            forwardPtvMessagesReceived: [159, 'integer'],
+            forwardPtvMessagesSent: [160, 'integer'],
+            forwardStatusReplyMessagesReceived: [161, 'integer'],
+            forwardStatusReplyMessagesSent: [162, 'integer'],
+            forwardStickerMessagesReceived: [163, 'integer'],
+            forwardStickerMessagesSent: [164, 'integer'],
+            forwardTextMessagesReceived: [130, 'integer'],
+            forwardTextMessagesSent: [131, 'integer'],
+            forwardUrlMessagesReceived: [132, 'integer'],
+            forwardUrlMessagesSent: [133, 'integer'],
+            forwardVideoMessagesReceived: [165, 'integer'],
+            forwardVideoMessagesSent: [166, 'integer'],
+            gaStatus: [
+                22,
+                {
+                    NEW: 0,
+                    RETAINED: 1,
+                    RESURRECTED: 2,
+                },
+            ],
+            gifMessagesReceived: [167, 'integer'],
+            gifMessagesSent: [168, 'integer'],
+            greetingMsgsSent: [57, 'integer'],
+            groupContainsBiz: [75, 'boolean'],
+            groupInfoSetting: [
+                87,
+                {
+                    ADMINS_ONLY: 1,
+                    ALL_PARTICIPANTS: 2,
+                },
+            ],
+            groupMembershipReplies: [51, 'integer'],
+            groupPrivateReplies: [52, 'integer'],
+            groupSize: [19, 'integer'],
+            hasUsername: [180, 'boolean'],
+            imagineCommandClick: [175, 'integer'],
+            imagineMentionClick: [146, 'integer'],
+            imagineMentionShow: [176, 'integer'],
+            isAContact: [6, 'boolean'],
+            isAGroup: [5, 'boolean'],
+            isArchived: [10, 'boolean'],
+            isAutoMuted: [108, 'boolean'],
+            isBlocked: [32, 'boolean'],
+            isCartAddClicked: [36, 'boolean'],
+            isCommerceViewed: [35, 'boolean'],
+            isCtaOnPdpClicked: [37, 'boolean'],
+            isInviteCreatedThread: [106, 'boolean'],
+            isLabelled: [54, 'boolean'],
+            isMessageYourself: [91, 'boolean'],
+            isOppositePartyInitiated: [62, 'boolean'],
+            isPinned: [9, 'boolean'],
+            isPnhEnabledChat: [92, 'boolean'],
+            isUser1pBizBotChat: [141, 'boolean'],
+            isUser3pBotChat: [140, 'boolean'],
+            isUserAgent: [111, 'boolean'],
+            isUserCreatedAgent: [123, 'boolean'],
+            isWaPayRegistered: [81, 'boolean'],
+            labelledMsgs: [55, 'integer'],
+            locationsSent: [96, 'integer'],
+            messagesRead: [127, 'integer'],
+            messagesReceived: [4, 'integer'],
+            messagesSent: [3, 'integer'],
+            messagesStarred: [12, 'integer'],
+            messagesUnread: [11, 'integer'],
+            metaAiMentionClick: [147, 'integer'],
+            metaAiMentionShow: [148, 'integer'],
+            newThread: [68, 'boolean'],
+            odReceived: [82, 'integer'],
+            oppositeVisibleIdentification: [
+                181,
+                {
+                    PHONE_NUMBER: 1,
+                    SAVED_CONTACT_NAME: 2,
+                    USERNAME: 3,
+                    MASKED_PHONE_NUMBER: 4,
+                    VERIFIED_BUSINESS_NAME: 5,
+                    PLACEHOLDER: 6,
+                    PUSHNAME: 7,
+                },
+            ],
+            ordersSent: [38, 'integer'],
+            p2mOdNnpTransactionsSent: [83, 'integer'],
+            p2mOdNpTransactionsSent: [84, 'integer'],
+            paymentsSent: [39, 'integer'],
+            pdpInquiriesSent: [42, 'integer'],
+            pdpViews: [61, 'integer'],
+            photoMessagesReceived: [134, 'integer'],
+            photoMessagesSent: [135, 'integer'],
+            pollCreationMessagesReceived: [115, 'integer'],
+            pollCreationMessagesSent: [116, 'integer'],
+            pollUpdateMessagesReceived: [117, 'integer'],
+            pollUpdateMessagesSent: [118, 'integer'],
+            profileReplies: [64, 'integer'],
+            profileViews: [63, 'integer'],
+            pttMessagesReceived: [119, 'integer'],
+            pttMessagesSent: [120, 'integer'],
+            ptvMessagesReceived: [121, 'integer'],
+            ptvMessagesSent: [122, 'integer'],
+            quickRepliesSent: [58, 'integer'],
+            reactionsReceived: [97, 'integer'],
+            reactionsSent: [98, 'integer'],
+            receiverDefaultDisappearingDuration: [21, 'integer'],
+            repliesSent: [80, 'integer'],
+            requestedPhoneNumber: [93, 'boolean'],
+            seenMaskedPhoneNumber: [94, 'boolean'],
+            senderDefaultDisappearingDuration: [20, 'integer'],
+            sharedPhoneNumber: [99, 'boolean'],
+            smbMarketingMessagesReactionsSent: [101, 'integer'],
+            smbMarketingMessagesRepliesSent: [102, 'integer'],
+            smbMarketingMessagesSpamReports: [103, 'integer'],
+            smbMarketingMsgsReceived: [104, 'integer'],
+            smbMarketingMsgsSent: [105, 'integer'],
+            spamReports: [31, 'integer'],
+            startTime: [7, 'integer'],
+            statusReplies: [50, 'integer'],
+            statusReplyMessagesReceived: [169, 'integer'],
+            statusViews: [49, 'integer'],
+            stickerMessagesReceived: [170, 'integer'],
+            stickerMessagesSent: [171, 'integer'],
+            storefrontInquiriesSent: [43, 'integer'],
+            suggestionPromptsClick: [177, 'integer'],
+            suggestionPromptsShow: [178, 'integer'],
+            textMessagesReceived: [136, 'integer'],
+            textMessagesSent: [137, 'integer'],
+            textMessagesToUserCreatedAgentCnt: [124, 'integer'],
+            threadDs: [66, 'string'],
+            threadId: [67, 'string'],
+            totalCallDuration: [28, 'integer'],
+            totalMessageEditsFromAgentCnt: [112, 'integer'],
+            totalMessageFromAgentCnt: [113, 'integer'],
+            totalMessageToAgentCnt: [114, 'integer'],
+            totalMessagesToUserCreatedAgentCnt: [125, 'integer'],
+            typeOfGroup: [
+                85,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+            urlMessagesReceived: [138, 'integer'],
+            urlMessagesSent: [139, 'integer'],
+            viaContactlessChats: [107, 'boolean'],
+            videoCallsOffered: [76, 'integer'],
+            videoMessagesReceived: [172, 'integer'],
+            videoMessagesSent: [173, 'integer'],
+            viewOnceMessagesOpened: [18, 'integer'],
+            viewOnceMessagesReceived: [17, 'integer'],
+            viewOnceMessagesSent: [16, 'integer'],
+            voiceCallsOffered: [77, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'AddressingModeMismatch',
+        id: 4750,
+        props: {
+            iqResponse: [
+                1,
+                {
+                    ADD_PARTICIPANT: 1,
+                    REMOVE_PARTICIPANT: 2,
+                    PROMOTE_PARTICIPANT: 3,
+                    DEMOTE_PARTICIPANT: 4,
+                },
+            ],
+            localAddressingMode: [
+                2,
+                {
+                    PN: 1,
+                    LID: 2,
+                },
+            ],
+            mismatchOrigin: [
+                6,
+                {
+                    INCOMING_GROUP_MESSAGE: 1,
+                    ACK_OUTGOING_MESSAGE: 2,
+                    GROUP_NOTIFICATION: 3,
+                    GROUP_PROFILE_PICTURE_NOTIFICATION: 4,
+                    IQ_RESPONSES: 5,
+                },
+            ],
+            notificationTag: [3, 'string'],
+            serverAddressingMode: [
+                5,
+                {
+                    PN: 1,
+                    LID: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdBadDeviceSentMessage',
+        id: 2176,
+        props: {
+            dsmError: [
+                2,
+                {
+                    INVALID_SENDER: 1,
+                    MISSING_DSM: 2,
+                    INVALID_DSM: 3,
+                },
+            ],
+            peerType: [
+                1,
+                {
+                    PRIMARY: 1,
+                    COMPANION: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'GatedMessageReceived',
+        id: 3152,
+        props: {
+            chatGatedReason: [
+                1,
+                {
+                    TOS3: 1,
+                    COUNTRY: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MessageReceive',
+        id: 450,
+        props: {
+            agentEngagementType: [
+                28,
+                {
+                    DIRECT_CHAT: 0,
+                    INVOKED: 1,
+                    MEMBER: 2,
+                },
+            ],
+            botType: [
+                37,
+                {
+                    UNKNOWN: 0,
+                    METABOT: 1,
+                    BOT_1P_BIZ: 2,
+                    BOT_3P_BIZ: 3,
+                },
+            ],
+            chatOrigins: [
+                38,
+                {
+                    LID_USERNAME: 1,
+                    LID_CTWA: 2,
+                    OTHERS: 3,
+                },
+            ],
+            deviceCount: [16, 'integer'],
+            deviceSizeBucket: [
+                10,
+                {
+                    LT32: 1,
+                    LT64: 2,
+                    LT128: 3,
+                    LT256: 4,
+                    LT512: 5,
+                    LT1000: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            disappearingChatInitiator: [
+                14,
+                {
+                    CHAT: 1,
+                    INITIATED_BY_ME: 2,
+                    INITIATED_BY_OTHER: 3,
+                    CHAT_PICKER: 4,
+                    BIZ_UPGRADE_FB_HOSTING: 5,
+                },
+            ],
+            editType: [
+                25,
+                {
+                    NOT_EDITED: 0,
+                    EDITED: 1,
+                    SENDER_REVOKE: 2,
+                    ADMIN_REVOKE: 3,
+                },
+            ],
+            ephemeralityDuration: [13, 'integer'],
+            ephemeralityInitiator: [
+                26,
+                {
+                    INITIATED_BY_ME: 1,
+                    INITIATED_BY_OTHER: 2,
+                    BIZ_UPGRADE_FB_HOSTING: 3,
+                },
+            ],
+            ephemeralityTriggerAction: [
+                27,
+                {
+                    UNKNOWN: 0,
+                    CHAT_SETTINGS: 1,
+                    ACCOUNT_SETTINGS: 2,
+                    BULK_CHANGE: 3,
+                    BIZ_SUPPORTS_FB_HOSTING: 4,
+                },
+            ],
+            hasUsername: [39, 'boolean'],
+            isAComment: [36, 'boolean'],
+            isAReply: [19, 'boolean'],
+            isForwardedForward: [18, 'boolean'],
+            isLid: [24, 'boolean'],
+            isViewOnce: [9, 'boolean'],
+            localAddressingMode: [
+                33,
+                {
+                    PN: 1,
+                    LID: 2,
+                },
+            ],
+            messageAddressingMode: [
+                34,
+                {
+                    PN: 1,
+                    LID: 2,
+                },
+            ],
+            messageIsInternational: [4, 'boolean'],
+            messageIsInvisible: [23, 'boolean'],
+            messageIsOffline: [5, 'boolean'],
+            messageMediaType: [
+                2,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messageQueueTime: [15, 'timer'],
+            messageReceiveT0: [6, 'timer'],
+            messageReceiveT1: [7, 'timer'],
+            messageType: [
+                1,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            mutedGroupMessage: [8, 'boolean'],
+            numOfWebUrlsInTextMessage: [3, 'integer'],
+            offlineCount: [30, 'integer'],
+            oppositeVisibleIdentification: [
+                40,
+                {
+                    PHONE_NUMBER: 1,
+                    SAVED_CONTACT_NAME: 2,
+                    USERNAME: 3,
+                    MASKED_PHONE_NUMBER: 4,
+                    VERIFIED_BUSINESS_NAME: 5,
+                    PLACEHOLDER: 6,
+                    PUSHNAME: 7,
+                },
+            ],
+            paddingBytesSize: [22, 'integer'],
+            participantCount: [17, 'integer'],
+            receiverDefaultDisappearingDuration: [12, 'integer'],
+            revokeType: [
+                20,
+                {
+                    SENDER: 0,
+                    ADMIN: 1,
+                },
+            ],
+            senderDefaultDisappearingDuration: [11, 'integer'],
+            serverAddressingMode: [
+                35,
+                {
+                    PN: 1,
+                    LID: 2,
+                },
+            ],
+            stickerIsAi: [29, 'boolean'],
+            stickerIsFromStickerMaker: [31, 'boolean'],
+            stickerMakerSourceType: [
+                32,
+                {
+                    CUTOUT_IMAGE: 1,
+                    WEB_STICKER_MAKER: 2,
+                    IOS_STICKER_MAKER: 3,
+                    ANDROID_STICKER_MAKER: 4,
+                    TRANSPARENT_IMAGE: 5,
+                },
+            ],
+            typeOfGroup: [
+                21,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PlaceholderActivity',
+        id: 1980,
+        props: {
+            deviceCount: [9, 'integer'],
+            deviceSizeBucket: [
+                8,
+                {
+                    LT32: 1,
+                    LT64: 2,
+                    LT128: 3,
+                    LT256: 4,
+                    LT512: 5,
+                    LT1000: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            e2eSenderType: [
+                16,
+                {
+                    MY_PRIMARY: 1,
+                    OTHER_PRIMARY: 2,
+                    MY_COMPANION: 3,
+                    OTHER_COMPANION: 4,
+                    MY_HOSTED_COMPANION: 5,
+                    OTHER_HOSTED_COMPANION: 6,
+                },
+            ],
+            isHostedChat: [19, 'boolean'],
+            isLid: [12, 'boolean'],
+            messageBeforeReg: [15, 'boolean'],
+            messageIsRevoke: [7, 'boolean'],
+            messageKeyHash: [14, 'string'],
+            messageMediaType: [
+                6,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messageType: [
+                5,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            participantCount: [10, 'integer'],
+            placeholderActionInd: [
+                2,
+                {
+                    OTHER: 0,
+                    ADD: 1,
+                    VIEW: 2,
+                    POPULATE: 3,
+                },
+            ],
+            placeholderAddReason: [
+                11,
+                {
+                    OTHER: 0,
+                    SIGNAL_NO_SESSION: 1,
+                    DEVICE_VERIFICATION_FAILURE: 2,
+                    UNKNOWN_SELF_DEVICE: 3,
+                    SIGNAL_INVALID_KEY: 4,
+                    SIGNAL_INVALID_KEY_ID: 5,
+                    SIGNAL_INVALID_MESSAGE: 6,
+                    DEVICE_VERIFICATION_FAILURE_SELF_PEER: 7,
+                    UNKNOWN_COMPANION_NO_PREKEY: 8,
+                    BAD_EPHEMERAL_SETTING: 9,
+                    SIGNAL_FUTURE_MESSAGE: 10,
+                    SIGNAL_INVALID_SIGNATURE: 11,
+                    SIGNAL_BAD_MAC: 12,
+                    SIGNAL_INVALID_SESSION: 13,
+                },
+            ],
+            placeholderChatTypeInd: [
+                3,
+                {
+                    OTHER: 0,
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    STATUS: 3,
+                    BROADCAST: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            placeholderPopulationType: [
+                17,
+                {
+                    OTHER: 0,
+                    RETRY: 1,
+                    PEER_MESSAGE: 2,
+                    RESEND: 3,
+                },
+            ],
+            placeholderTimePeriod: [4, 'integer'],
+            placeholderTypeInd: [
+                1,
+                {
+                    OTHER: 0,
+                    CIPHERTEXT: 1,
+                    FANOUT: 2,
+                    DOWNGRADE: 3,
+                },
+            ],
+            typeOfGroup: [
+                13,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'SenderKeyExpired',
+        id: 3130,
+        props: {
+            chatType: [
+                1,
+                {
+                    OTHER: 0,
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    STATUS: 3,
+                    BROADCAST: 4,
+                    CHANNEL: 5,
+                },
+            ],
+            deviceSizeBucket: [
+                2,
+                {
+                    LT32: 1,
+                    LT64: 2,
+                    LT128: 3,
+                    LT256: 4,
+                    LT512: 5,
+                    LT1000: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            expiryReason: [
+                3,
+                {
+                    USER_LEAVE: 1,
+                    DEVICE_UNPAIR: 2,
+                    IDENTITY_CHANGE: 3,
+                    AUDIENCE_CHANGE: 4,
+                    PERIODIC_ROTATION: 5,
+                    KEY_CORRUPTION: 6,
+                    PEER_COMPANION_UNPAIR: 7,
+                    OTHER_DEVICE_UNPAIR: 8,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MexEventV2',
+        id: 4336,
+        props: {
+            mexEventV2DurationMs: [1, 'timer'],
+            mexEventV2EndTime: [2, 'integer'],
+            mexEventV2ErrorCodes: [3, 'string'],
+            mexEventV2Errors: [4, 'string'],
+            mexEventV2HasData: [5, 'boolean'],
+            mexEventV2IsMex: [6, 'boolean'],
+            mexEventV2OperationName: [7, 'string'],
+            mexEventV2QueryId: [8, 'string'],
+            mexEventV2StartTime: [9, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'GraphqlCatalogRequest',
+        id: 3206,
+        props: {
+            businessJid: [4, 'string'],
+            businessType: [
+                5,
+                {
+                    SMB: 1,
+                    API_DC: 2,
+                    API: 3,
+                },
+            ],
+            graphqlCatalogEndpoint: [
+                1,
+                {
+                    GET_CATALOG: 1,
+                    GET_PRODUCT: 2,
+                    GET_PRODUCT_LIST: 3,
+                    GET_COLLECTIONS: 4,
+                    GET_SINGLE_COLLECTION: 5,
+                    GET_CATEGORIES: 6,
+                    GET_VARIANTS: 7,
+                    GET_PROMOTIONS: 8,
+                },
+            ],
+            graphqlErrorCode: [3, 'integer'],
+            graphqlRequestResult: [
+                2,
+                {
+                    SUCCESS: 1,
+                    FAILURE: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 0,
+    },
+    {
+        name: 'MexEvent',
+        id: 3782,
+        props: {
+            isMex: [1, 'boolean'],
+            mexEventData: [2, 'string'],
+            mexEventDurationT: [12, 'timer'],
+            mexEventEndTime: [3, 'integer'],
+            mexEventEnvelopeResponseStatus: [13, 'integer'],
+            mexEventOperation: [7, 'string'],
+            mexEventPayloadResponseStatus: [14, 'integer'],
+            mexEventRequestSize: [8, 'integer'],
+            mexEventResponseSize: [9, 'integer'],
+            mexEventRetries: [10, 'integer'],
+            mexEventStartTime: [11, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'FmxAction',
+        id: 4444,
+        props: {
+            commonGroupNum: [1, 'integer'],
+            countryShown: [2, 'boolean'],
+            fmxEntryPoint: [
+                3,
+                {
+                    FMX_CARD: 0,
+                    SAFETY_TOOLS: 1,
+                },
+            ],
+            fmxEvent: [
+                4,
+                {
+                    BLOCK: 0,
+                    ADD_CONTACT: 1,
+                    REPORT: 2,
+                    SAFETY_TOOLS: 3,
+                    COMMON_GROUPS: 4,
+                    CONTACT_INFO: 5,
+                    FMX_CARD_INSERTED: 6,
+                    FMX_CARD_VIEWED: 7,
+                    LEARN_MORE: 8,
+                    HIGHLIGHT_GROUP_NAME: 9,
+                },
+            ],
+            highlightGroupType: [
+                6,
+                {
+                    UNKNOWN: 0,
+                    SINGLE: 1,
+                    CREATOR: 2,
+                    ADMIN: 3,
+                    SAVED_CONTACTS: 4,
+                    PARTICIPANTS: 5,
+                    MORE: 6,
+                },
+            ],
+            isSenderSmb: [7, 'boolean'],
+            notAContactShown: [5, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'UnknownStanza',
+        id: 3448,
+        props: {
+            unknownStanzaTag: [1, 'string'],
+            unknownStanzaType: [2, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'IncomingMessageDrop',
+        id: 3724,
+        props: {
+            agentEngagementType: [
+                12,
+                {
+                    DIRECT_CHAT: 0,
+                    INVOKED: 1,
+                    MEMBER: 2,
+                },
+            ],
+            botType: [
+                14,
+                {
+                    UNKNOWN: 0,
+                    METABOT: 1,
+                    BOT_1P_BIZ: 2,
+                    BOT_3P_BIZ: 3,
+                },
+            ],
+            e2eCiphertextType: [
+                1,
+                {
+                    MESSAGE: 0,
+                    PREKEY_MESSAGE: 1,
+                    SENDER_KEY_MESSAGE: 2,
+                    MESSAGE_SECRET_MESSAGE: 3,
+                },
+            ],
+            e2eDestination: [
+                2,
+                {
+                    INDIVIDUAL: 0,
+                    GROUP: 1,
+                    LIST: 2,
+                    STATUS: 3,
+                    CHANNEL: 4,
+                    INTEROP: 5,
+                },
+            ],
+            e2eFailureReason: [
+                9,
+                {
+                    INVALID_MESSAGE: 0,
+                    LEGACY_MESSAGE: 1,
+                    INVALID_VERSION: 2,
+                    PRE_KEY_MESSAGE_MISSING_PRE_KEY: 3,
+                    PRE_KEY_MESSAGE_INVALID_KEY: 4,
+                    UNTRUSTED_IDENTITY: 5,
+                    NO_SESSION_AVAILABLE: 6,
+                    PLAINTEXT_BYTE_MISMATCH: 7,
+                    UNKNOWN_CIPHERTEXT_TYPE: 8,
+                    UNKNOWN_CIPHERTEXT_VERSION: 9,
+                    INVALID_PADDING: 10,
+                    INVALID_PROTOCOL_BUFFER: 11,
+                    INVALID_NUMBER_OF_MESSAGE_TYPES: 12,
+                    INVALID_IMAGE_FILE_LENGTH: 13,
+                    INVALID_IMAGE_FILE_SHA256: 14,
+                    INVALID_IMAGE_MEDIA_URL: 15,
+                    INVALID_IMAGE_MEDIA_KEY: 16,
+                    INVALID_IMAGE_MIME_TYPE: 17,
+                    UNKNOWN_V2_TAGS: 18,
+                    INVALID_EDIT_VERSION: 19,
+                    INVALID_HSM_NAMESPACE: 20,
+                    INVALID_HSM_ELEMENT: 21,
+                    UNKNOWN_PROTOCOL_MESSAGE_TYPE: 22,
+                    DUPLICATE_MESSAGE: 23,
+                    FINGERPRINT_IDENTITY_MISMATCH: 24,
+                    FINGERPRINT_VERSION_MISMATCH: 25,
+                    INVALID_ARGUMENT: 26,
+                    INVALID_KEY: 27,
+                    INVALID_KEY_ID: 28,
+                    INVALID_MAC: 29,
+                    NO_MEMORY: 30,
+                    STALE_KEY_EXCHANGE: 31,
+                    VRF_SIGNATURE_VERIFICATION_FAILED: 32,
+                    ERROR_MINIMUM_VALUE: 33,
+                    ERROR_UNKNOWN: 34,
+                    INVALID_BROADCAST_STANZA_ATTRIBUTE: 35,
+                    INVALID_LIST_REPLY_MESSAGE: 36,
+                    INVALID_LIST_REPLY_ROW_IDENTIFIER: 37,
+                    INVALID_BUTTONS_RESPONSE_MESSAGE: 38,
+                    INVALID_BUTTONS_RESPONSE_BUTTON_IDENTIFIER: 39,
+                    INVALID_ORDER_MESSAGE: 40,
+                    ERROR_CANCELLED: 41,
+                    FUTURE_MESSAGE: 42,
+                    INVALID_EMPTY_PROTOBUF_NOT_ALLOWED: 43,
+                    SELF_SEND: 44,
+                    INVALID_MEDIA_MIME_TYPE_TEMPLATE_MESSAGE: 45,
+                    INVALID_MEDIA_ENC_HASH: 46,
+                    INVALID_IDENTITY: 47,
+                    PASSTHROUGH: 48,
+                    NOT_IN_PENDING_DEVICES: 49,
+                    EDIT_TYPE_AND_PROTOCOL_MISMATCH: 50,
+                    DECRYPTION_FAILED: 51,
+                    DESERIALIZE_INVALID_PROTO_FORMAT: 52,
+                    DESERIALIZE_RATCHET_KEY_BAD_FORMAT: 53,
+                    DESERIALIZE_PK_INVALID_PROTO_FORMAT: 54,
+                    DESERIALZE_PK_KEY_BAD_FORMAT: 55,
+                    TOO_MANY_MESSAGES_IN_FUTURE: 56,
+                    EMPTY_VERSION_CONTENT_SUFFIX: 57,
+                    CONTENT_EXCEEDED_EXPECTED_LENGTH: 58,
+                    GRP_INVALID_PROTO_FORMAT: 59,
+                    GRP_INVALID_KEY_FORMAT: 60,
+                    GRP_VERSION_CONTENT_EMPTY: 61,
+                    GRP_INVALID_VERSION_CONTENT_LENGTH: 62,
+                    GRP_SENDER_KEY_INVALID_PROTO_FORMAT: 63,
+                    GRP_SENDER_KEY_PROTO_ERROR: 64,
+                    GRP_TOO_MANY_MESSAGES_IN_FUTURE: 65,
+                    MISSING_MESSAGE_SECRET: 66,
+                    MESSAGE_SECRET_INVALID: 67,
+                    INVALID_REACTION_TEXT: 68,
+                    UNSUPPORTED_MESSAGE_TYPE: 69,
+                    UNSUPPORTED_IN_INTEROP: 70,
+                    TARGET_MESSAGE_NOT_FOUND: 71,
+                    STATUS_FROM_HOSTED_DEVICE_UNSUPPORTED: 72,
+                    GROUP_MESSAGE_FROM_HOSTED_DEVICE_UNSUPPORTED: 73,
+                    BROADCAST_FROM_HOSTED_DEVICE_UNSUPPORTED: 74,
+                    LIVE_LOCATION_FROM_HOSTED_DEVICE_UNSUPPORTED: 75,
+                    MESSAGE_TYPE_MISMATCH: 76,
+                    ERROR_SESSION_STATE_UNACKED_PKMSG_GET_BASE_KEY: 77,
+                    ERROR_SIGNAL_MESSAGE_GET_SENDER_RATCHET_KEY: 78,
+                    ERROR_SESSION_STATE_GET_ROOT_KEY: 79,
+                    ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY_PAIR: 80,
+                    ERROR_SESSION_STATE_SET_SENDER_CHAIN_KEY: 81,
+                    ERROR_SESSION_STATE_FIND_RECEIVER_CHAIN: 82,
+                    ERROR_SESSION_RECORD_DESERIALIZE: 83,
+                    ERROR_SENDER_KEY_STATE_REMOVE_SENDER_MESSAGE_KEY: 84,
+                    ERROR_EMPTY_PLAINTEXT_DATA: 85,
+                    ERROR_MAC_LEN_MISMATCH: 86,
+                    ERROR_INVALID_MAC_LEN: 87,
+                    ERROR_INVALID_SIGNATURE_LEN: 88,
+                    ERROR_SENDER_KEY_LOAD_KEY: 89,
+                    ERROR_FAST_RATCHET_SENDER_KEY_LOAD_KEY: 90,
+                    ERROR_UNKNOWN_LOAD_KEY: 91,
+                    ERROR_UNKNOWN_LOAD_SESSION: 92,
+                    ERROR_SESSION_RECORD_GET_STATE: 93,
+                    ERROR_SESSION_STATE_GET_SENDER_CHAIN_KEY: 94,
+                    ERROR_INVALID_KEY_MATEIRAL_DATA_LEN: 95,
+                    ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY: 96,
+                    ERROR_SESSION_STATE_GET_LOCAL_IDENTITY_KEY: 97,
+                    ERROR_SESSION_STATE_GET_REMOTE_IDENTITY_KEY: 98,
+                },
+            ],
+            e2eSenderType: [
+                3,
+                {
+                    MY_PRIMARY: 1,
+                    OTHER_PRIMARY: 2,
+                    MY_COMPANION: 3,
+                    OTHER_COMPANION: 4,
+                    MY_HOSTED_COMPANION: 5,
+                    OTHER_HOSTED_COMPANION: 6,
+                },
+            ],
+            invisibleMessageCategory: [
+                13,
+                {
+                    PEER: 1,
+                    INVISIBLE_KEY_DISTRIBUTION: 2,
+                    OTHER: 3,
+                },
+            ],
+            messageDropReason: [
+                4,
+                {
+                    SYNCD_DELETION: 1,
+                    ADMIN_REVOKE_NOT_ENABLED: 2,
+                    RECEIVED_WITH_OLD_COUNTER: 3,
+                    INVALID_STANZA: 4,
+                    INVALID_PROTOBUF: 5,
+                    MESSAGE_SECRET_ERROR: 6,
+                    INVALID_LID_ADDRESSED_MESSAGE: 7,
+                    UNKNOWN_MESSAGE_TYPE: 8,
+                    DB_OPERATION_FAILED: 9,
+                    INTERNAL_ERROR: 10,
+                    EXPIRED: 11,
+                    INVALID_HOSTED_COMPANION_STANZA: 12,
+                    MESSAGE_REVOKED: 13,
+                    PAYMENT_MESSAGE_REVOKED: 14,
+                    DUPLICATE_MESSAGE: 15,
+                    DUPLICATE_DELIVERY: 16,
+                },
+            ],
+            messageMediaType: [
+                5,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            offline: [6, 'boolean'],
+            offlineCount: [11, 'integer'],
+            retryCount: [7, 'integer'],
+            revokeType: [
+                8,
+                {
+                    SENDER: 0,
+                    ADMIN: 1,
+                },
+            ],
+            typeOfGroup: [
+                10,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcOfflineNotificationProcess',
+        id: 4222,
+        props: {
+            currentOfflineProcessStage: [
+                4,
+                {
+                    PAGE_LOAD: 1,
+                    SOCKET_CONNECT: 2,
+                    OFFLINE_PREVIEW: 3,
+                    PROCESSING: 4,
+                    PROCESS_COMPLETE: 5,
+                    PROCESS_INTERRUPTED: 6,
+                },
+            ],
+            offlineProcessDecryptErrorCount: [5, 'integer'],
+            offlineProcessMailboxAge: [6, 'integer'],
+            offlineProcessMessageCount: [7, 'integer'],
+            offlineProcessNotificationCount: [8, 'integer'],
+            offlineProcessSessionId: [9, 'string'],
+            offlineProcessStageTimestampMs: [10, 'integer'],
+            runReason: [
+                12,
+                {
+                    PUSH_NOTIFICATION: 1,
+                    PERIODIC_BACKGROUND_SYNC: 2,
+                },
+            ],
+            swVersion: [11, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdCriticalEvent',
+        id: 2746,
+        props: {
+            collection: [
+                2,
+                {
+                    REGULAR: 1,
+                    REGULAR_LOW: 2,
+                    REGULAR_HIGH: 3,
+                    CRITICAL_BLOCK: 4,
+                    CRITICAL_UNBLOCK_LOW: 5,
+                },
+            ],
+            mdCriticalEventCode: [
+                1,
+                {
+                    MESSAGE_RANGE_UNSET: 1,
+                    MESSAGE_RANGE_LAST_SYSTEM_MESSAGE_TIMESTAMP_SET: 2,
+                    MESSAGE_RANGE_MESSAGES_UNSET: 3,
+                    MESSAGE_RANGE_MESSAGES_EMPTY: 4,
+                    MESSAGE_RANGE_MESSAGES_CROSS_LIMIT: 5,
+                    MESSAGE_RANGE_MESSAGE_KEY_UNSET: 6,
+                    MESSAGE_RANGE_MESSAGE_KEY_REMOTE_JID_UNSET: 7,
+                    MESSAGE_RANGE_MESSAGE_KEY_FROM_ME_UNSET: 8,
+                    MESSAGE_RANGE_MESSAGE_KEY_STANZA_ID_UNSET: 9,
+                    MESSAGE_RANGE_MESSAGE_KEY_REMOTE_JID_INVALID: 10,
+                    MESSAGE_RANGE_MESSAGE_KEY_PARTICIPANT_UNSET: 11,
+                    MALFORMED_PENDING_MUTATION: 12,
+                    ACTION_INVALID_INDEX_DATA: 13,
+                    MISSING_MUTATION_TO_REMOVE: 14,
+                    LTHASH_INCONSISTENCY_ON_DAILY_CHECK: 15,
+                    LTHASH_INCONSISTENCY_ON_SNAPSHOT_MAC_MISMATCH: 16,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdLinkDeviceCompanion',
+        id: 2576,
+        props: {
+            mdDurationS: [8, 'integer'],
+            mdLinkDeviceCompanionErrorCode: [6, 'integer'],
+            mdLinkDeviceCompanionStage: [
+                4,
+                {
+                    PAIR_SUCCESS_RECEIVED: 1,
+                    PAIR_DEVICE_SIGN_SENT: 2,
+                    FIRST_CONNECT: 3,
+                    UPLOAD_PREKEYS: 4,
+                    COMPLETE: 5,
+                    GENERATE_PREKEYS: 6,
+                    SENT_PREKEYS: 7,
+                },
+            ],
+            mdRegAttemptId: [9, 'string'],
+            mdSessionId: [1, 'string'],
+            mdTimestampS: [7, 'integer'],
+            mdWasUpgraded: [5, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'AdvStoredTimestampExpired',
+        id: 3036,
+        props: {
+            advExpireTimeInHours: [1, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcQplHealth',
+        id: 3134,
+        props: {
+            webcQplHealthEventData: [1, 'string'],
+            webcQplHealthEventType: [
+                2,
+                {
+                    ANNOTATION_SIZE_LIMIT_EXCEEDED: 1,
+                    MAX_POINT_COUNT_EXCEEDED: 2,
+                    MAX_MARKER_COUNT_EXCEEDED: 3,
+                    TOO_MANY_OPEN_MARKERS_TO_WRITE: 4,
+                    POINT_TO_END_AT_NOT_FOUND: 5,
+                    JSON_FORMAT_ERROR: 6,
+                    MAX_STORAGE_EVENT_COUNT_REACHED: 7,
+                    ERROR_UPLOADING_CHUNK: 8,
+                    POINT_NAME_TOO_LONG: 9,
+                    ANNOTATION_KEY_TOO_LONG: 10,
+                    POINT_DATA_TOO_LONG: 11,
+                    ERROR_PARSING_CONFIG: 12,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'CommunityHomeAction',
+        id: 3494,
+        props: {
+            communityHomeGroupDiscoveries: [1, 'integer'],
+            communityHomeGroupJoins: [2, 'integer'],
+            communityHomeGroupNavigations: [3, 'integer'],
+            communityHomeId: [4, 'string'],
+            communityHomeViews: [5, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'CommunityTabAction',
+        id: 3496,
+        props: {
+            communityNoActionTabViews: [4, 'integer'],
+            communityTabGroupNavigations: [1, 'integer'],
+            communityTabToHomeViews: [2, 'integer'],
+            communityTabViews: [3, 'integer'],
+            communityTabViewsViaContextMenu: [5, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'Daily',
+        id: 1158,
+        props: {
+            accessibilityVoiceover: [108, 'boolean'],
+            addressbookSize: [11, 'integer'],
+            addressbookWhatsappSize: [12, 'integer'],
+            androidAdvertisingId: [135, 'string'],
+            androidKeystoreState: [
+                139,
+                {
+                    NOT_AVAILABLE: 1,
+                    SELF_TEST_FAILURE: 2,
+                    ENC_KEY_READ_FAILURE: 3,
+                    ENC_KEY_STORED_USED: 4,
+                    ENC_KEY_PLAIN_DELETED: 5,
+                    ENC_KEY_PLAIN_RECOVERED: 6,
+                },
+            ],
+            androidXmppWorkersRuntime: [167, 'integer'],
+            appCodeHash: [103, 'string'],
+            appStandbyBucket: [121, 'integer'],
+            autoDlAudioCellular: [90, 'boolean'],
+            autoDlAudioRoaming: [91, 'boolean'],
+            autoDlAudioWifi: [89, 'boolean'],
+            autoDlDocCellular: [96, 'boolean'],
+            autoDlDocRoaming: [97, 'boolean'],
+            autoDlDocWifi: [95, 'boolean'],
+            autoDlImageCellular: [87, 'boolean'],
+            autoDlImageRoaming: [88, 'boolean'],
+            autoDlImageWifi: [86, 'boolean'],
+            autoDlVideoCellular: [93, 'boolean'],
+            autoDlVideoRoaming: [94, 'boolean'],
+            autoDlVideoWifi: [92, 'boolean'],
+            backupNetworkSetting: [
+                10,
+                {
+                    WIFI_ONLY: 0,
+                    WIFI_OR_CELLULAR: 1,
+                },
+            ],
+            backupRestoreEncryptionVersion: [138, 'integer'],
+            backupSchedule: [
+                9,
+                {
+                    OFF: 0,
+                    DAILY: 1,
+                    WEEKLY: 2,
+                    MONTHLY: 3,
+                    MANUAL: 4,
+                },
+            ],
+            channelsMediaFolderSize: [186, 'integer'],
+            chatDatabaseSize: [19, 'integer'],
+            chatLockFolderCount: [168, 'integer'],
+            countEphemeralThreads: [181, 'integer'],
+            countEphemeralThreadsEnabledByMe: [182, 'integer'],
+            defaultDisappearingDuration: [140, 'integer'],
+            deviceLanguage: [153, 'string'],
+            emailState: [
+                174,
+                {
+                    NOT_ADDED: 1,
+                    UNVERIFIED: 2,
+                    VERIFIED: 3,
+                },
+            ],
+            entSecurityNotificationsEnabled: [134, 'boolean'],
+            experimentTmoPreloadGroupDaily: [166, 'integer'],
+            favoritedAnimatedStickerCount: [113, 'integer'],
+            favoritedFirstPartyStickerCount: [112, 'integer'],
+            favoritedTotalStickerCount: [111, 'integer'],
+            hasTextstatusEmojiModified24h: [175, 'boolean'],
+            hasTextstatusModified24h: [176, 'boolean'],
+            hasTextstatusTextModified24h: [177, 'boolean'],
+            hasUsername: [187, 'boolean'],
+            installedAnimatedStickerPackCount: [116, 'integer'],
+            installedAnimatedThirdPartyStickerPackCount: [137, 'integer'],
+            installedFirstPartyStickerPackCount: [115, 'integer'],
+            installedTotalStickerPackCount: [114, 'integer'],
+            ipStr: [122, 'string'],
+            isDefaultDisappearingMessagingUser: [183, 'boolean'],
+            isEphemeralMessagingUser: [184, 'boolean'],
+            keyboardLanguage: [154, 'string'],
+            languageCode: [5, 'string'],
+            lastCloudBackupSize: [185, 'integer'],
+            locationCode: [6, 'string'],
+            lockFolderHidden: [171, 'boolean'],
+            lowestAppStandbyBucket: [160, 'integer'],
+            mdPairTime: [124, 'integer'],
+            mediaFolderFileCount: [21, 'integer'],
+            mediaFolderSize: [20, 'integer'],
+            modifiedInternalProps: [155, 'boolean'],
+            networkIsRoaming: [7, 'boolean'],
+            networkOperatorName: [159, 'string'],
+            numAccounts: [163, 'integer'],
+            numContactsWithTextstatus24h: [178, 'integer'],
+            numContactsWithTextstatusEmoji24h: [179, 'integer'],
+            numContactsWithTextstatusText24h: [180, 'integer'],
+            osBuildNumber: [4, 'string'],
+            osNotificationSetting: [
+                118,
+                {
+                    ALLOWED: 1,
+                    BLOCKED: 2,
+                    UNKNOWN: 3,
+                },
+            ],
+            packageName: [102, 'string'],
+            passkeyExists: [165, 'boolean'],
+            paymentsIsEnabled: [100, 'boolean'],
+            permissionAccessCoarseLocation: [57, 'integer'],
+            permissionAccessFineLocation: [58, 'integer'],
+            permissionCamera: [56, 'integer'],
+            permissionContacts: [104, 'boolean'],
+            permissionReadExternalStorage: [53, 'integer'],
+            permissionRecordAudio: [55, 'integer'],
+            phoneCores: [156, 'integer'],
+            phoneyid: [162, 'string'],
+            privacySettingsAbout: [
+                141,
+                {
+                    NOBODY: 1,
+                    ONLY_SHARE_WITH: 2,
+                    MY_CONTACTS: 3,
+                    MY_CONTACTS_EXCEPT: 4,
+                    EVERYONE: 5,
+                },
+            ],
+            privacySettingsAboutExceptNum: [
+                142,
+                {
+                    B0: 1,
+                    B1: 2,
+                    B5: 3,
+                    B10: 4,
+                    B15: 5,
+                    B20: 6,
+                    B30: 7,
+                    B40: 8,
+                    B50: 9,
+                    B60: 10,
+                    B70: 11,
+                    B80: 12,
+                    B90: 13,
+                    B100: 14,
+                },
+            ],
+            privacySettingsGroups: [
+                143,
+                {
+                    NOBODY: 1,
+                    ONLY_SHARE_WITH: 2,
+                    MY_CONTACTS: 3,
+                    MY_CONTACTS_EXCEPT: 4,
+                    EVERYONE: 5,
+                },
+            ],
+            privacySettingsGroupsExceptNum: [
+                144,
+                {
+                    B0: 1,
+                    B1: 2,
+                    B5: 3,
+                    B10: 4,
+                    B15: 5,
+                    B20: 6,
+                    B30: 7,
+                    B40: 8,
+                    B50: 9,
+                    B60: 10,
+                    B70: 11,
+                    B80: 12,
+                    B90: 13,
+                    B100: 14,
+                },
+            ],
+            privacySettingsLastSeen: [
+                145,
+                {
+                    NOBODY: 1,
+                    ONLY_SHARE_WITH: 2,
+                    MY_CONTACTS: 3,
+                    MY_CONTACTS_EXCEPT: 4,
+                    EVERYONE: 5,
+                },
+            ],
+            privacySettingsLastSeenExceptNum: [
+                146,
+                {
+                    B0: 1,
+                    B1: 2,
+                    B5: 3,
+                    B10: 4,
+                    B15: 5,
+                    B20: 6,
+                    B30: 7,
+                    B40: 8,
+                    B50: 9,
+                    B60: 10,
+                    B70: 11,
+                    B80: 12,
+                    B90: 13,
+                    B100: 14,
+                },
+            ],
+            privacySettingsProfilePhoto: [
+                147,
+                {
+                    NOBODY: 1,
+                    ONLY_SHARE_WITH: 2,
+                    MY_CONTACTS: 3,
+                    MY_CONTACTS_EXCEPT: 4,
+                    EVERYONE: 5,
+                },
+            ],
+            privacySettingsProfilePhotoExceptNum: [
+                148,
+                {
+                    B0: 1,
+                    B1: 2,
+                    B5: 3,
+                    B10: 4,
+                    B15: 5,
+                    B20: 6,
+                    B30: 7,
+                    B40: 8,
+                    B50: 9,
+                    B60: 10,
+                    B70: 11,
+                    B80: 12,
+                    B90: 13,
+                    B100: 14,
+                },
+            ],
+            privacySettingsStatus: [
+                150,
+                {
+                    NOBODY: 1,
+                    ONLY_SHARE_WITH: 2,
+                    MY_CONTACTS: 3,
+                    MY_CONTACTS_EXCEPT: 4,
+                    EVERYONE: 5,
+                },
+            ],
+            privacySettingsStatusExceptNum: [
+                151,
+                {
+                    B0: 1,
+                    B1: 2,
+                    B5: 3,
+                    B10: 4,
+                    B15: 5,
+                    B20: 6,
+                    B30: 7,
+                    B40: 8,
+                    B50: 9,
+                    B60: 10,
+                    B70: 11,
+                    B80: 12,
+                    B90: 13,
+                    B100: 14,
+                },
+            ],
+            privacySettingsStatusShareNum: [
+                152,
+                {
+                    B0: 1,
+                    B1: 2,
+                    B5: 3,
+                    B10: 4,
+                    B15: 5,
+                    B20: 6,
+                    B30: 7,
+                    B40: 8,
+                    B50: 9,
+                    B60: 10,
+                    B70: 11,
+                    B80: 12,
+                    B90: 13,
+                    B100: 14,
+                },
+            ],
+            receiptsEnabled: [8, 'boolean'],
+            secretCodeActive: [172, 'boolean'],
+            showMetaAiButtonSetting: [173, 'boolean'],
+            simMcc: [2, 'integer'],
+            simMnc: [3, 'integer'],
+            storageAvailSize: [31, 'integer'],
+            storageTotalSize: [32, 'integer'],
+            supportedDecoders: [169, 'string'],
+            supportedEncoders: [170, 'string'],
+            videoFolderFileCount: [23, 'integer'],
+            videoFolderSize: [22, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'KeepInChatNotif',
+        id: 3484,
+        props: {
+            kicGroupNotificationTaps: [3, 'integer'],
+            kicGroupNotifications: [4, 'integer'],
+            kicNotificationTaps: [5, 'integer'],
+            kicNotifications: [6, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'NotificationSetting',
+        id: 3684,
+        props: {
+            groupReactionNotification: [1, 'boolean'],
+            groupShowNotification: [2, 'boolean'],
+            groupSoundTone: [
+                3,
+                {
+                    DEFAULT: 1,
+                    CUSTOM: 2,
+                },
+            ],
+            inAppNotificationAlertStyle: [
+                4,
+                {
+                    NONE: 1,
+                    BANNERS: 2,
+                    ALERTS: 3,
+                },
+            ],
+            inAppNotificationSound: [5, 'boolean'],
+            inAppNotificationVibrate: [6, 'boolean'],
+            messageReactionNotification: [7, 'boolean'],
+            messageShowNotification: [8, 'boolean'],
+            messageSoundTone: [
+                9,
+                {
+                    DEFAULT: 1,
+                    CUSTOM: 2,
+                },
+            ],
+            offlineNotification: [11, 'boolean'],
+            showPreview: [10, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PnhDailyCtwa',
+        id: 4280,
+        props: {
+            matMessagesReceived: [1, 'integer'],
+            threadDs: [3, 'string'],
+            threadId: [2, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PnhDaily',
+        id: 3806,
+        props: {
+            communityId: [1, 'string'],
+            mappingMissing: [7, 'integer'],
+            pnhIndicatorClicksChat: [2, 'integer'],
+            pnhIndicatorClicksInfoScreen: [3, 'integer'],
+            reactionDeleteCount: [4, 'integer'],
+            reactionOpenTrayCount: [5, 'integer'],
+            totalContacts: [8, 'integer'],
+            typeOfGroup: [
+                6,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PrivacyHighlightDaily',
+        id: 3522,
+        props: {
+            dialogAppearCount: [1, 'integer'],
+            dialogSelectCount: [2, 'integer'],
+            narrativeAppearCount: [3, 'integer'],
+            privacyHighlightCategory: [
+                4,
+                {
+                    E2EE: 0,
+                },
+            ],
+            privacyHighlightSurface: [
+                5,
+                {
+                    GOLDEN_BOX_CONTACT: 0,
+                    GOLDEN_BOX_GROUP: 1,
+                    GOLDEN_BOX_BROADCAST: 2,
+                    INFO_SCREEN_CONTACT: 3,
+                    INFO_SCREEN_GROUP: 4,
+                    INFO_SCREEN_BROADCAST: 5,
+                    CALLS_LIST: 6,
+                    CHATS_LIST: 7,
+                    STATUS_LIST: 8,
+                    LINKED_DEVICES_SCREEN: 9,
+                    CALLING_SCREEN_AUDIO: 10,
+                    CALLING_SCREEN_VIDEO: 11,
+                    SPLIT_VIEW_HOME_PLACEHOLDER: 12,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PttDaily',
+        id: 2938,
+        props: {
+            pttCancelBroadcast: [9, 'integer'],
+            pttCancelGroup: [8, 'integer'],
+            pttCancelIndividual: [7, 'integer'],
+            pttCancelInterop: [42, 'integer'],
+            pttCancelNewsletter: [32, 'integer'],
+            pttDraftReviewBroadcast: [15, 'integer'],
+            pttDraftReviewGroup: [14, 'integer'],
+            pttDraftReviewIndividual: [13, 'integer'],
+            pttDraftReviewInterop: [43, 'integer'],
+            pttDraftReviewNewsletter: [33, 'integer'],
+            pttFastplaybackBroadcast: [21, 'integer'],
+            pttFastplaybackGroup: [20, 'integer'],
+            pttFastplaybackIndividual: [19, 'integer'],
+            pttFastplaybackInterop: [44, 'integer'],
+            pttFastplaybackNewsletter: [34, 'integer'],
+            pttLockBroadcast: [12, 'integer'],
+            pttLockGroup: [11, 'integer'],
+            pttLockIndividual: [10, 'integer'],
+            pttLockInterop: [45, 'integer'],
+            pttLockNewsletter: [35, 'integer'],
+            pttOutOfChatBroadcast: [29, 'integer'],
+            pttOutOfChatGroup: [30, 'integer'],
+            pttOutOfChatIndividual: [31, 'integer'],
+            pttOutOfChatInterop: [46, 'integer'],
+            pttOutOfChatNewsletter: [36, 'integer'],
+            pttPausedRecordBroadcast: [22, 'integer'],
+            pttPausedRecordGroup: [23, 'integer'],
+            pttPausedRecordIndividual: [24, 'integer'],
+            pttPausedRecordInterop: [47, 'integer'],
+            pttPausedRecordNewsletter: [37, 'integer'],
+            pttPlaybackBroadcast: [18, 'integer'],
+            pttPlaybackGroup: [17, 'integer'],
+            pttPlaybackIndividual: [16, 'integer'],
+            pttPlaybackInterop: [48, 'integer'],
+            pttPlaybackNewsletter: [38, 'integer'],
+            pttRecordBroadcast: [3, 'integer'],
+            pttRecordGroup: [2, 'integer'],
+            pttRecordIndividual: [1, 'integer'],
+            pttRecordInterop: [49, 'integer'],
+            pttRecordNewsletter: [39, 'integer'],
+            pttSendBroadcast: [6, 'integer'],
+            pttSendGroup: [5, 'integer'],
+            pttSendIndividual: [4, 'integer'],
+            pttSendInterop: [50, 'integer'],
+            pttSendNewsletter: [40, 'integer'],
+            pttStopTapBroadcast: [25, 'integer'],
+            pttStopTapGroup: [26, 'integer'],
+            pttStopTapIndividual: [27, 'integer'],
+            pttStopTapInterop: [51, 'integer'],
+            pttStopTapNewsletter: [41, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ScreenLockSettingsData',
+        id: 4802,
+        props: {
+            screenAutoLockDuration: [1, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ScreenLockSettings',
+        id: 3872,
+        props: {
+            screenLockDuration: [1, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 113760892,
+    },
+    {
+        name: 'WebcFtsStorage',
+        id: 3642,
+        props: {
+            ftsTotalSize: [1, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'NotificationEngagement',
+        id: 3796,
+        props: {
+            avgNotifEngagementT: [1, 'timer'],
+            groupSizeBucket: [
+                2,
+                {
+                    SMALL: 1,
+                    MEDIUM: 2,
+                    LARGE: 3,
+                    EXTRA_LARGE: 4,
+                    XX_LARGE: 5,
+                    XXX_LARGE: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            groupTypeClient: [
+                3,
+                {
+                    REGULAR_GROUP: 1,
+                    SUB_GROUP: 2,
+                    DEFAULT_SUB_GROUP: 3,
+                    PARENT_GROUP: 4,
+                },
+            ],
+            isAGroup: [4, 'boolean'],
+            isWebBackgroundSyncNotif: [18, 'boolean'],
+            threadId: [5, 'string'],
+            totalMessageReminderNotifShown: [16, 'integer'],
+            totalMessageReminderNotifTapToOpen: [17, 'integer'],
+            totalNotifMarkAsRead: [6, 'integer'],
+            totalNotifMissedCallVoipCallback: [7, 'integer'],
+            totalNotifMissedCallVoipMessage: [8, 'integer'],
+            totalNotifOthers: [9, 'integer'],
+            totalNotifReply: [10, 'integer'],
+            totalNotifRtcVoipAccept: [11, 'integer'],
+            totalNotifRtcVoipDecline: [12, 'integer'],
+            totalNotifShowPreview: [13, 'integer'],
+            totalNotifShown: [14, 'integer'],
+            totalNotifTapToOpen: [15, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdBootstrapHistorySyncStatusAfterPairing',
+        id: 4652,
+        props: {
+            activeTimeAfterPairing: [
+                1,
+                {
+                    MINS_10: 1,
+                    MINS_20: 2,
+                    MINS_40: 3,
+                    MINS_60: 4,
+                    MINS_5: 5,
+                },
+            ],
+            isLoopRunning: [12, 'boolean'],
+            lastProcessedNotificationChunkOrder: [2, 'integer'],
+            lastProcessedNotificationChunkProgress: [3, 'integer'],
+            mdBootstrapHistoryPayloadType: [
+                4,
+                {
+                    INITIAL: 1,
+                    RECENT_HISTORY: 2,
+                    FULL_HISTORY: 3,
+                    PUSHNAME: 4,
+                    STATUS_V3: 5,
+                    NON_BLOCKING_DATA: 6,
+                    ON_DEMAND: 7,
+                },
+            ],
+            mdHistorySyncStatusResult: [
+                5,
+                {
+                    SUCCESS: 1,
+                    UNFINISHED: 2,
+                    FAIL_TO_DOWNLOAD: 3,
+                    MISSING_CHUNK: 4,
+                    PROTOBUF_ERROR: 5,
+                    FAIL_TO_STORE: 6,
+                    OTHER_ERROR: 7,
+                    IN_PROGRESS: 8,
+                    FAIL_TO_RECEIVE: 9,
+                    FAIL_TO_STORE_CHUNK: 10,
+                    FAIL_TO_FETCH: 11,
+                    FAIL_TO_PREPROCESS: 12,
+                    FAIL_TO_ENCRYPT: 13,
+                },
+            ],
+            mdSessionId: [6, 'string'],
+            mdTimestamp: [7, 'integer'],
+            missingNotificationCount: [8, 'integer'],
+            nextNotificationChunkOrder: [9, 'integer'],
+            totalProcessedMessageCount: [10, 'integer'],
+            unprocessedNotificationCount: [11, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebDbVersionNonAnonymous',
+        id: 4816,
+        props: {
+            webDbName: [
+                1,
+                {
+                    MODEL_STORAGE: 1,
+                    FTS_STORAGE: 2,
+                    JOBS_STORAGE: 3,
+                    LOADGEN_STORAGE: 4,
+                    LRU_MEDIA_STORAGE_IDB: 5,
+                    OFFD_STORAGE: 6,
+                    QPL_STORAGE: 7,
+                    SIGNAL_STORAGE: 8,
+                    WORKER_STORAGE: 9,
+                    SW: 10,
+                    WAWC: 11,
+                    WAWC_DB_ENC: 12,
+                },
+            ],
+            webDbVersionNumber: [2, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'SyncdKeyCount',
+        id: 3978,
+        props: {
+            keysUsedInSnapshotCount: [1, 'integer'],
+            p80MuationsPerKey: [2, 'integer'],
+            p95MuationsPerKey: [3, 'integer'],
+            syncdSessionLengthDays: [4, 'integer'],
+            totalKeyCount: [5, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdAppStateSyncMutationStats',
+        id: 3180,
+        props: {
+            applied: [
+                1,
+                {
+                    ZERO: 1,
+                    ONE: 2,
+                    LT10: 3,
+                    LT100: 4,
+                    LT500: 5,
+                    LT1K: 6,
+                    LT5K: 7,
+                    GTE5K: 8,
+                },
+            ],
+            failed: [
+                2,
+                {
+                    ZERO: 1,
+                    ONE: 2,
+                    LT10: 3,
+                    LT100: 4,
+                    LT500: 5,
+                    LT1K: 6,
+                    LT5K: 7,
+                    GTE5K: 8,
+                },
+            ],
+            invalid: [
+                3,
+                {
+                    ZERO: 1,
+                    ONE: 2,
+                    LT10: 3,
+                    LT100: 4,
+                    LT500: 5,
+                    LT1K: 6,
+                    LT5K: 7,
+                    GTE5K: 8,
+                },
+            ],
+            orphan: [
+                4,
+                {
+                    ZERO: 1,
+                    ONE: 2,
+                    LT10: 3,
+                    LT100: 4,
+                    LT500: 5,
+                    LT1K: 6,
+                    LT5K: 7,
+                    GTE5K: 8,
+                },
+            ],
+            syncdAction: [5, 'string'],
+            unsupported: [
+                6,
+                {
+                    ZERO: 1,
+                    ONE: 2,
+                    LT10: 3,
+                    LT100: 4,
+                    LT500: 5,
+                    LT1K: 6,
+                    LT5K: 7,
+                    GTE5K: 8,
+                },
+            ],
+        },
+        weight: 20,
+        wamChannel: 'private',
+        privateStatsIdInt: 0,
+    },
+    {
+        name: 'GroupJoinC',
+        id: 158,
+        props: {},
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MessageHighRetryCount',
+        id: 3132,
+        props: {
+            deviceSizeBucket: [
+                5,
+                {
+                    LT32: 1,
+                    LT64: 2,
+                    LT128: 3,
+                    LT256: 4,
+                    LT512: 5,
+                    LT1000: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            e2eSenderType: [
+                3,
+                {
+                    MY_PRIMARY: 1,
+                    OTHER_PRIMARY: 2,
+                    MY_COMPANION: 3,
+                    OTHER_COMPANION: 4,
+                    MY_HOSTED_COMPANION: 5,
+                    OTHER_HOSTED_COMPANION: 6,
+                },
+            ],
+            mediaType: [
+                1,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messageType: [
+                4,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            retryCount: [2, 'integer'],
+        },
+        weight: 20,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'OfflineCountTooHigh',
+        id: 2638,
+        props: {
+            callStanzaType: [
+                7,
+                {
+                    OFFER: 0,
+                    ACCEPT: 1,
+                    REJECT: 2,
+                    VIDEO: 3,
+                    TERMINATE: 4,
+                    ENC_REKEY: 5,
+                    RELAYLATENCY: 6,
+                    TRANSPORT: 7,
+                    PREACCEPT: 8,
+                    GROUP_UPDATE: 9,
+                    MUTE_V2: 10,
+                    INTERRUPTION: 11,
+                    FLOWCONTROL: 12,
+                    NOTIFY: 13,
+                    OFFER_NOTICE: 14,
+                    CALL_RELAY: 15,
+                    MUTE: 16,
+                    SCREEN_SHARE: 17,
+                    UNKNOWN: 18,
+                },
+            ],
+            mediaType: [
+                3,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messageType: [
+                4,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            notificationStanzaType: [6, 'string'],
+            offlineCount: [2, 'integer'],
+            receiptStanzaType: [5, 'string'],
+            stanzaType: [
+                1,
+                {
+                    MESSAGE: 1,
+                    RECEIPT: 2,
+                    CALL: 3,
+                    NOTIFICATION: 4,
+                    APPDATA: 5,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'E2eMessageRecv',
+        id: 478,
+        props: {
+            agentEngagementType: [
+                15,
+                {
+                    DIRECT_CHAT: 0,
+                    INVOKED: 1,
+                    MEMBER: 2,
+                },
+            ],
+            botType: [
+                19,
+                {
+                    UNKNOWN: 0,
+                    METABOT: 1,
+                    BOT_1P_BIZ: 2,
+                    BOT_3P_BIZ: 3,
+                },
+            ],
+            e2eCiphertextType: [
+                5,
+                {
+                    MESSAGE: 0,
+                    PREKEY_MESSAGE: 1,
+                    SENDER_KEY_MESSAGE: 2,
+                    MESSAGE_SECRET_MESSAGE: 3,
+                },
+            ],
+            e2eCiphertextVersion: [6, 'integer'],
+            e2eDestination: [
+                4,
+                {
+                    INDIVIDUAL: 0,
+                    GROUP: 1,
+                    LIST: 2,
+                    STATUS: 3,
+                    CHANNEL: 4,
+                    INTEROP: 5,
+                },
+            ],
+            e2eFailureReason: [
+                2,
+                {
+                    INVALID_MESSAGE: 0,
+                    LEGACY_MESSAGE: 1,
+                    INVALID_VERSION: 2,
+                    PRE_KEY_MESSAGE_MISSING_PRE_KEY: 3,
+                    PRE_KEY_MESSAGE_INVALID_KEY: 4,
+                    UNTRUSTED_IDENTITY: 5,
+                    NO_SESSION_AVAILABLE: 6,
+                    PLAINTEXT_BYTE_MISMATCH: 7,
+                    UNKNOWN_CIPHERTEXT_TYPE: 8,
+                    UNKNOWN_CIPHERTEXT_VERSION: 9,
+                    INVALID_PADDING: 10,
+                    INVALID_PROTOCOL_BUFFER: 11,
+                    INVALID_NUMBER_OF_MESSAGE_TYPES: 12,
+                    INVALID_IMAGE_FILE_LENGTH: 13,
+                    INVALID_IMAGE_FILE_SHA256: 14,
+                    INVALID_IMAGE_MEDIA_URL: 15,
+                    INVALID_IMAGE_MEDIA_KEY: 16,
+                    INVALID_IMAGE_MIME_TYPE: 17,
+                    UNKNOWN_V2_TAGS: 18,
+                    INVALID_EDIT_VERSION: 19,
+                    INVALID_HSM_NAMESPACE: 20,
+                    INVALID_HSM_ELEMENT: 21,
+                    UNKNOWN_PROTOCOL_MESSAGE_TYPE: 22,
+                    DUPLICATE_MESSAGE: 23,
+                    FINGERPRINT_IDENTITY_MISMATCH: 24,
+                    FINGERPRINT_VERSION_MISMATCH: 25,
+                    INVALID_ARGUMENT: 26,
+                    INVALID_KEY: 27,
+                    INVALID_KEY_ID: 28,
+                    INVALID_MAC: 29,
+                    NO_MEMORY: 30,
+                    STALE_KEY_EXCHANGE: 31,
+                    VRF_SIGNATURE_VERIFICATION_FAILED: 32,
+                    ERROR_MINIMUM_VALUE: 33,
+                    ERROR_UNKNOWN: 34,
+                    INVALID_BROADCAST_STANZA_ATTRIBUTE: 35,
+                    INVALID_LIST_REPLY_MESSAGE: 36,
+                    INVALID_LIST_REPLY_ROW_IDENTIFIER: 37,
+                    INVALID_BUTTONS_RESPONSE_MESSAGE: 38,
+                    INVALID_BUTTONS_RESPONSE_BUTTON_IDENTIFIER: 39,
+                    INVALID_ORDER_MESSAGE: 40,
+                    ERROR_CANCELLED: 41,
+                    FUTURE_MESSAGE: 42,
+                    INVALID_EMPTY_PROTOBUF_NOT_ALLOWED: 43,
+                    SELF_SEND: 44,
+                    INVALID_MEDIA_MIME_TYPE_TEMPLATE_MESSAGE: 45,
+                    INVALID_MEDIA_ENC_HASH: 46,
+                    INVALID_IDENTITY: 47,
+                    PASSTHROUGH: 48,
+                    NOT_IN_PENDING_DEVICES: 49,
+                    EDIT_TYPE_AND_PROTOCOL_MISMATCH: 50,
+                    DECRYPTION_FAILED: 51,
+                    DESERIALIZE_INVALID_PROTO_FORMAT: 52,
+                    DESERIALIZE_RATCHET_KEY_BAD_FORMAT: 53,
+                    DESERIALIZE_PK_INVALID_PROTO_FORMAT: 54,
+                    DESERIALZE_PK_KEY_BAD_FORMAT: 55,
+                    TOO_MANY_MESSAGES_IN_FUTURE: 56,
+                    EMPTY_VERSION_CONTENT_SUFFIX: 57,
+                    CONTENT_EXCEEDED_EXPECTED_LENGTH: 58,
+                    GRP_INVALID_PROTO_FORMAT: 59,
+                    GRP_INVALID_KEY_FORMAT: 60,
+                    GRP_VERSION_CONTENT_EMPTY: 61,
+                    GRP_INVALID_VERSION_CONTENT_LENGTH: 62,
+                    GRP_SENDER_KEY_INVALID_PROTO_FORMAT: 63,
+                    GRP_SENDER_KEY_PROTO_ERROR: 64,
+                    GRP_TOO_MANY_MESSAGES_IN_FUTURE: 65,
+                    MISSING_MESSAGE_SECRET: 66,
+                    MESSAGE_SECRET_INVALID: 67,
+                    INVALID_REACTION_TEXT: 68,
+                    UNSUPPORTED_MESSAGE_TYPE: 69,
+                    UNSUPPORTED_IN_INTEROP: 70,
+                    TARGET_MESSAGE_NOT_FOUND: 71,
+                    STATUS_FROM_HOSTED_DEVICE_UNSUPPORTED: 72,
+                    GROUP_MESSAGE_FROM_HOSTED_DEVICE_UNSUPPORTED: 73,
+                    BROADCAST_FROM_HOSTED_DEVICE_UNSUPPORTED: 74,
+                    LIVE_LOCATION_FROM_HOSTED_DEVICE_UNSUPPORTED: 75,
+                    MESSAGE_TYPE_MISMATCH: 76,
+                    ERROR_SESSION_STATE_UNACKED_PKMSG_GET_BASE_KEY: 77,
+                    ERROR_SIGNAL_MESSAGE_GET_SENDER_RATCHET_KEY: 78,
+                    ERROR_SESSION_STATE_GET_ROOT_KEY: 79,
+                    ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY_PAIR: 80,
+                    ERROR_SESSION_STATE_SET_SENDER_CHAIN_KEY: 81,
+                    ERROR_SESSION_STATE_FIND_RECEIVER_CHAIN: 82,
+                    ERROR_SESSION_RECORD_DESERIALIZE: 83,
+                    ERROR_SENDER_KEY_STATE_REMOVE_SENDER_MESSAGE_KEY: 84,
+                    ERROR_EMPTY_PLAINTEXT_DATA: 85,
+                    ERROR_MAC_LEN_MISMATCH: 86,
+                    ERROR_INVALID_MAC_LEN: 87,
+                    ERROR_INVALID_SIGNATURE_LEN: 88,
+                    ERROR_SENDER_KEY_LOAD_KEY: 89,
+                    ERROR_FAST_RATCHET_SENDER_KEY_LOAD_KEY: 90,
+                    ERROR_UNKNOWN_LOAD_KEY: 91,
+                    ERROR_UNKNOWN_LOAD_SESSION: 92,
+                    ERROR_SESSION_RECORD_GET_STATE: 93,
+                    ERROR_SESSION_STATE_GET_SENDER_CHAIN_KEY: 94,
+                    ERROR_INVALID_KEY_MATEIRAL_DATA_LEN: 95,
+                    ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY: 96,
+                    ERROR_SESSION_STATE_GET_LOCAL_IDENTITY_KEY: 97,
+                    ERROR_SESSION_STATE_GET_REMOTE_IDENTITY_KEY: 98,
+                },
+            ],
+            e2eSenderType: [
+                8,
+                {
+                    MY_PRIMARY: 1,
+                    OTHER_PRIMARY: 2,
+                    MY_COMPANION: 3,
+                    OTHER_COMPANION: 4,
+                    MY_HOSTED_COMPANION: 5,
+                    OTHER_HOSTED_COMPANION: 6,
+                },
+            ],
+            e2eSuccessful: [1, 'boolean'],
+            editType: [
+                13,
+                {
+                    NOT_EDITED: 0,
+                    EDITED: 1,
+                    SENDER_REVOKE: 2,
+                    ADMIN_REVOKE: 3,
+                },
+            ],
+            isHostedChat: [20, 'boolean'],
+            isLid: [11, 'boolean'],
+            localAddressingMode: [
+                16,
+                {
+                    PN: 1,
+                    LID: 2,
+                },
+            ],
+            messageAddressingMode: [
+                17,
+                {
+                    PN: 1,
+                    LID: 2,
+                },
+            ],
+            messageMediaType: [
+                7,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            offline: [9, 'boolean'],
+            retryCount: [3, 'integer'],
+            revokeType: [
+                10,
+                {
+                    SENDER: 0,
+                    ADMIN: 1,
+                },
+            ],
+            serverAddressingMode: [
+                18,
+                {
+                    PN: 1,
+                    LID: 2,
+                },
+            ],
+            stanzaType: [
+                14,
+                {
+                    MESSAGE: 1,
+                    RECEIPT: 2,
+                    CALL: 3,
+                    NOTIFICATION: 4,
+                    APPDATA: 5,
+                },
+            ],
+            typeOfGroup: [
+                12,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+        },
+        weight: 20,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ReceiptStanzaReceive',
+        id: 2496,
+        props: {
+            dbReadsCount: [12, 'integer'],
+            dbWritesCount: [13, 'integer'],
+            mediaType: [
+                2,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messageType: [
+                10,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            receiptAggregation: [
+                11,
+                {
+                    NONE: 0,
+                    MULTI_MESSAGES: 1,
+                    MULTI_PARTICIPANTS: 2,
+                },
+            ],
+            receiptStanzaDuration: [1, 'timer'],
+            receiptStanzaHasOrphaned: [6, 'boolean'],
+            receiptStanzaOfflineCount: [3, 'integer'],
+            receiptStanzaProcessedCount: [8, 'integer'],
+            receiptStanzaRetryVer: [5, 'integer'],
+            receiptStanzaStage: [
+                9,
+                {
+                    OVERALL: 0,
+                    PARSE: 1,
+                    WAITING_TO_PROCESS: 2,
+                    PROCESS: 3,
+                    WAITING_TO_ACK: 5,
+                    ACK: 4,
+                },
+            ],
+            receiptStanzaTotalCount: [7, 'integer'],
+            receiptStanzaType: [4, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'CtwaActionBannerUnderstand',
+        id: 3586,
+        props: {
+            bannerIdentifier: [1, 'string'],
+            bannerLocale: [2, 'string'],
+            clientLocale: [3, 'string'],
+            hasLocalLink: [4, 'boolean'],
+            hasUniversalLink: [5, 'boolean'],
+            invalidLink: [6, 'string'],
+            lwiFlowIdentifier: [7, 'string'],
+            preferredLink: [
+                8,
+                {
+                    LOCAL: 0,
+                    UNIVERSAL: 1,
+                },
+            ],
+            validLocale: [9, 'boolean'],
+            validNotification: [10, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 0,
+    },
+    {
+        name: 'WaOldCode',
+        id: 3940,
+        props: {
+            deviceId: [1, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'NotificationDelivery',
+        id: 3748,
+        props: {
+            clientMessageId: [1, 'string'],
+            notificationAction: [
+                2,
+                {
+                    SHOW: 1,
+                    REMOVE: 2,
+                },
+            ],
+            notificationDeliveryT: [3, 'integer'],
+            notificationDestination: [
+                4,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    OTHER: 3,
+                    CHANNEL: 4,
+                    INTEROP: 5,
+                },
+            ],
+            notificationId: [5, 'string'],
+            notificationSource: [
+                6,
+                {
+                    PUSH_TRIGGERED: 1,
+                    MAIN_APP: 2,
+                    IN_APP: 3,
+                },
+            ],
+            threadId: [7, 'string'],
+            uiNotificationType: [
+                8,
+                {
+                    TEXT_MESSAGE: 1,
+                    VOICE_MESSAGE: 2,
+                    FILE_MESSAGE: 3,
+                    PHOTO_MESSAGE: 4,
+                    VIDEO_MESSAGE: 5,
+                    MISSED_VOICE_CALL: 6,
+                    MISSED_VIDEO_CALL: 7,
+                    STICKER_MESSAGE: 8,
+                    REACTION_MESSAGE: 9,
+                    GROUP_INVITE_MESSAGE: 10,
+                    REQUEST_MEDIA_REUPLOAD: 11,
+                    WEB_CLIENT_LOGIN: 12,
+                    BACKUP: 13,
+                    KEEP_IN_CHAT: 14,
+                    PAYMENT: 15,
+                    POLL_MESSAGE: 16,
+                    LOCATION_MESSAGE: 17,
+                    WEB_PAGE_MESSAGE: 18,
+                    FAILED_UPLOAD: 19,
+                    GDPR_REPORT: 20,
+                    INCOMING_VOICE_CALL: 21,
+                    INCOMING_VIDEO_CALL: 22,
+                    VIDEO_CALL_UPGRADE: 23,
+                    WAFFLE: 24,
+                    XPLAT_MIGRATION: 25,
+                    OTHER: 26,
+                    INVITE_JOINED: 27,
+                    SCHEDULED_CALL_LOCAL_REMINDER: 28,
+                    PTV_MESSAGE: 29,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdAppStateDirtyBits',
+        id: 2520,
+        props: {
+            dirtyBitsFalsePositive: [2, 'boolean'],
+        },
+        weight: 1000,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdAppStateOfflineNotifications',
+        id: 2602,
+        props: {
+            redundantCount: [1, 'integer'],
+        },
+        weight: 1000,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdRetryFromUnknownDevice',
+        id: 2178,
+        props: {
+            offline: [2, 'boolean'],
+            senderType: [
+                1,
+                {
+                    PRIMARY: 1,
+                    COMPANION: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'E2eRetryReject',
+        id: 3578,
+        props: {
+            messageType: [
+                1,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            msgRetryCount: [2, 'integer'],
+            retryRejectReason: [
+                3,
+                {
+                    OTHER: 0,
+                    DOUBLE_CHECKMARK: 1,
+                    IDENTITY_CHANGE: 2,
+                    MESSAGE_NOT_EXIST: 3,
+                },
+            ],
+            retryRevoke: [4, 'boolean'],
+            senderDeviceType: [
+                5,
+                {
+                    PRIMARY: 1,
+                    COMPANION: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ClockSkewDifferenceT',
+        id: 3178,
+        props: {
+            clockSkewHourly: [1, 'integer'],
+        },
+        weight: 10000,
+        wamChannel: 'private',
+        privateStatsIdInt: 37887164,
+    },
+    {
+        name: 'MdBootstrapAppStateCriticalDataProcessing',
+        id: 3164,
+        props: {
+            bootstrapAppStateDataStage: [
+                1,
+                {
+                    REQUEST_BUILT: 1,
+                    RESPONSE_RECEIVED: 2,
+                    RESPONSE_PARSED_VALID: 3,
+                    MISSING_KEYS_REQUESTED: 4,
+                    MISSING_KEYS_RECEIVED: 5,
+                    MUTATIONS_DECRYPTED: 6,
+                    ABOUT_TO_APPLY_MUTATIONS: 7,
+                    APPLIED_MUTATIONS: 8,
+                    PUSHNAME_APPLIED: 9,
+                    PUSHNAME_INVALID: 10,
+                    ENTERED_RETRY_MODE: 11,
+                },
+            ],
+            mdBootstrapPayloadType: [
+                2,
+                {
+                    CRITICAL: 1,
+                    NON_CRITICAL: 2,
+                },
+            ],
+            mdRegAttemptId: [3, 'string'],
+            mdSessionId: [4, 'string'],
+            mdTimestamp: [5, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcNativeUpsellCta',
+        id: 3934,
+        props: {
+            webcNativeUpsellCtaEventType: [
+                2,
+                {
+                    IMPRESSION: 1,
+                    CTA_BTN_CLICK: 2,
+                    CTA_DISMISS: 3,
+                },
+            ],
+            webcNativeUpsellCtaSource: [
+                1,
+                {
+                    INTRO_PANEL: 1,
+                    CHATLIST_DROPDOWN: 2,
+                    BUTTERBAR: 3,
+                    QR_BANNER: 4,
+                    SEARCH_RESULTS: 5,
+                    CALL_BTN_MODAL: 6,
+                    CALL_BTN_MODAL_2: 7,
+                    MISSED_CALL_MODAL: 8,
+                    MISSED_CALL_MODAL_2: 9,
+                    QR_BANNER_2: 10,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebDbTableUsage',
+        id: 5074,
+        props: {
+            offlineSessionId: [1, 'string'],
+            webScenario: [
+                2,
+                {
+                    OFFLINE_RESUME: 0,
+                },
+            ],
+            webTable: [3, 'string'],
+            webTableLogReason: [
+                4,
+                {
+                    BASE: 0,
+                    EXCEEDED_THRESHOLD: 1,
+                },
+            ],
+            webTableReadCount: [5, 'integer'],
+            webTableWriteCount: [6, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebDbLoadFromVersionFailureNonAnonymous',
+        id: 4814,
+        props: {
+            webDbLoader: [
+                1,
+                {
+                    MAIN: 1,
+                    WEB_WORKER: 2,
+                    SERVICE_WORKER: 3,
+                },
+            ],
+            webDbName: [
+                2,
+                {
+                    MODEL_STORAGE: 1,
+                    FTS_STORAGE: 2,
+                    JOBS_STORAGE: 3,
+                    LOADGEN_STORAGE: 4,
+                    LRU_MEDIA_STORAGE_IDB: 5,
+                    OFFD_STORAGE: 6,
+                    QPL_STORAGE: 7,
+                    SIGNAL_STORAGE: 8,
+                    WORKER_STORAGE: 9,
+                    SW: 10,
+                    WAWC: 11,
+                    WAWC_DB_ENC: 12,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcJobInfo',
+        id: 3054,
+        props: {
+            jobName: [1, 'string'],
+            jobPriority: [2, 'string'],
+            jobResultType: [
+                5,
+                {
+                    COMPLETED: 0,
+                    ERROR: 1,
+                    TIMEOUT: 2,
+                    ABORTED: 3,
+                },
+            ],
+            pendingJobsCount: [4, 'integer'],
+            scenario: [
+                3,
+                {
+                    INITIAL_PAIRING: 0,
+                    OFFLINE_RESUME: 1,
+                    IDLE: 2,
+                },
+            ],
+            webcJobAddedT: [6, 'integer'],
+            webcJobCompletedT: [8, 'integer'],
+            webcJobStartedT: [7, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcRawPlatforms',
+        id: 2416,
+        props: {
+            webcRawPlatform: [1, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebWamForceFlush',
+        id: 3264,
+        props: {},
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChatMute',
+        id: 2280,
+        props: {
+            actionConducted: [
+                3,
+                {
+                    MUTE: 1,
+                    UNMUTE: 2,
+                    EXPIRE: 3,
+                },
+            ],
+            chatMuteNotificationChoice: [
+                5,
+                {
+                    NO_NOTIFICATIONS_WHEN_MUTED: 1,
+                    YES_NOTIFICATIONS_WHEN_MUTED: 2,
+                },
+            ],
+            muteChatType: [
+                4,
+                {
+                    ONE_ON_ONE: 1,
+                    GROUP: 2,
+                    CHANNEL: 3,
+                    INTEROP: 4,
+                },
+            ],
+            muteDuration: [1, 'timer'],
+            muteEntryPoint: [
+                6,
+                {
+                    CHAT_LIST_SCREEN: 1,
+                    CONTACT_INFO: 2,
+                    CONVERSATION_SCREEN: 3,
+                },
+            ],
+            muteGroupSize: [2, 'integer'],
+            waOfficialAccountName: [
+                7,
+                {
+                    WHATSAPP_CHATPSA: 1,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChatPsaAction',
+        id: 3572,
+        props: {
+            messageMediaType: [
+                1,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            psaCampaignId: [4, 'string'],
+            psaMessageActionType: [
+                2,
+                {
+                    SAVE: 1,
+                    FORWARD: 2,
+                    REACT: 3,
+                    LINK_CLICK: 4,
+                    MEDIA_PLAY: 5,
+                    DELETE: 6,
+                },
+            ],
+            psaMsgId: [5, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChatPsaRead',
+        id: 3574,
+        props: {
+            messageMediaType: [
+                1,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            psaCampaignId: [4, 'string'],
+            psaMsgId: [5, 'string'],
+            readEntryPoint: [
+                3,
+                {
+                    CHAT_LIST: 1,
+                    CHAT: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChatPsaRemove',
+        id: 3582,
+        props: {
+            lastReceivedMediaType: [
+                2,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            lastReceivedMessageTs: [4, 'timer'],
+            lastReceivedMsgId: [8, 'string'],
+            psaBlockReason: [
+                10,
+                {
+                    OTHER: 0,
+                    MESSAGES_ARENT_HELPFUL: 1,
+                    TOO_MANY_MESSAGES: 2,
+                    IT_LOOKS_SUSPICIOUS: 3,
+                },
+            ],
+            psaCampaignId: [9, 'string'],
+            psaMessageRemoveAction: [
+                5,
+                {
+                    BLOCK: 1,
+                    UNBLOCK: 2,
+                    ARCHIVE: 3,
+                    UNARCHIVE: 4,
+                    CLEAR: 5,
+                    DELETE_ALL: 6,
+                },
+            ],
+            psaMessageRemoveEntryPoint: [
+                6,
+                {
+                    BLOCK_FROM_CONTACT_INFO: 1,
+                    BLOCK_FROM_CHAT: 2,
+                    UNBLOCK_FROM_CONTACT_INFO: 3,
+                    UNBLOCK_FROM_CHAT: 4,
+                    UNBLOCK_FROM_PRIVACY_SETTINGS: 5,
+                    ARCHIVE_FROM_CHAT_LIST: 6,
+                    ARCHIVE_FROM_DELETE_OPTION: 7,
+                    UNARCHIVE_FROM_ARCHIVED_CHAT_LIST: 8,
+                    CLEAR_FROM_CONTACT_INFO: 9,
+                    CLEAR_FROM_CHAT_LIST: 10,
+                    DELETE_ALL_FROM_CHAT_LIST: 11,
+                    DELETE_ALL_FROM_CONTACT_INFO: 12,
+                    DELETE_ALL_FROM_CONVERSATION: 13,
+                    CLEAR_FROM_CONVERSATION: 14,
+                    BLOCK_FROM_CONSENT_MODAL: 15,
+                },
+            ],
+            waOfficialAccountName: [
+                7,
+                {
+                    WHATSAPP_CHATPSA: 1,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ForwardSend',
+        id: 1728,
+        props: {
+            disappearingChatInitiator: [
+                21,
+                {
+                    CHAT: 1,
+                    INITIATED_BY_ME: 2,
+                    INITIATED_BY_OTHER: 3,
+                    CHAT_PICKER: 4,
+                    BIZ_UPGRADE_FB_HOSTING: 5,
+                },
+            ],
+            e2eCiphertextType: [
+                12,
+                {
+                    MESSAGE: 0,
+                    PREKEY_MESSAGE: 1,
+                    SENDER_KEY_MESSAGE: 2,
+                    MESSAGE_SECRET_MESSAGE: 3,
+                },
+            ],
+            e2eCiphertextVersion: [11, 'integer'],
+            ephemeralityDuration: [18, 'integer'],
+            ephemeralityInitiator: [
+                24,
+                {
+                    INITIATED_BY_ME: 1,
+                    INITIATED_BY_OTHER: 2,
+                    BIZ_UPGRADE_FB_HOSTING: 3,
+                },
+            ],
+            ephemeralityTriggerAction: [
+                25,
+                {
+                    UNKNOWN: 0,
+                    CHAT_SETTINGS: 1,
+                    ACCOUNT_SETTINGS: 2,
+                    BULK_CHANGE: 3,
+                    BIZ_SUPPORTS_FB_HOSTING: 4,
+                },
+            ],
+            fastForwardEnabled: [5, 'boolean'],
+            isForwardedForward: [22, 'boolean'],
+            isFrequentlyForwarded: [14, 'boolean'],
+            mediaCaptionPresent: [10, 'boolean'],
+            messageBizType: [
+                26,
+                {
+                    NOT_BIZ_MSG: 0,
+                    API_MARKETING: 1,
+                    API_UTILITY: 2,
+                    OTHER_API_BIZ_MSG: 3,
+                    SMB_BIZ_MSG: 4,
+                },
+            ],
+            messageForwardAgeT: [4, 'timer'],
+            messageIsFanout: [6, 'boolean'],
+            messageIsFastForward: [3, 'boolean'],
+            messageIsInternational: [9, 'boolean'],
+            messageMediaType: [
+                2,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messageSendT: [13, 'timer'],
+            messageType: [
+                1,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            receiverDefaultDisappearingDuration: [20, 'integer'],
+            resendCount: [8, 'integer'],
+            retryCount: [7, 'integer'],
+            senderDefaultDisappearingDuration: [19, 'integer'],
+            typeOfGroup: [
+                23,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+            wouldBeFrequentlyForwardedAt3: [16, 'boolean'],
+            wouldBeFrequentlyForwardedAt4: [17, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'NonMessagePeerDataMediaUpload',
+        id: 3902,
+        props: {
+            peerDataErrorCount: [1, 'integer'],
+            peerDataExistingDataNoUploadCount: [2, 'integer'],
+            peerDataNotFoundCount: [3, 'integer'],
+            peerDataRequestCount: [4, 'integer'],
+            peerDataRequestSessionId: [5, 'string'],
+            peerDataRequestType: [
+                6,
+                {
+                    UPLOAD_STICKER: 0,
+                    SEND_RECENT_STICKER_BOOTSTRAP: 1,
+                    GENERAL_LINK_PREVIEW: 2,
+                    HISTORY_SYNC_ON_DEMAND: 3,
+                    PLACEHOLDER_MESSAGE_RESEND: 4,
+                },
+            ],
+            peerDataResponseResult: [
+                8,
+                {
+                    SUCCESS: 1,
+                    OTHER_ERROR: 2,
+                    REQUEST_TARGET_NOT_FOUND: 3,
+                    REQUEST_INVALID: 4,
+                    FAIL_TO_UPLOAD: 5,
+                    FAIL_TO_SEND_RESPONSE: 6,
+                    REQUEST_TOO_OLD: 7,
+                },
+            ],
+            peerDataSuccessInlineNoUploadCount: [9, 'integer'],
+            peerDataSuccessUploadCount: [7, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'NonMessagePeerDataOperationResponse',
+        id: 3904,
+        props: {
+            peerDataErrorCount: [1, 'integer'],
+            peerDataNotFoundCount: [2, 'integer'],
+            peerDataRequestSessionId: [3, 'string'],
+            peerDataRequestType: [
+                4,
+                {
+                    UPLOAD_STICKER: 0,
+                    SEND_RECENT_STICKER_BOOTSTRAP: 1,
+                    GENERAL_LINK_PREVIEW: 2,
+                    HISTORY_SYNC_ON_DEMAND: 3,
+                    PLACEHOLDER_MESSAGE_RESEND: 4,
+                },
+            ],
+            peerDataResponseApplyResult: [
+                8,
+                {
+                    SUCCESS: 1,
+                    OTHER_ERROR: 2,
+                    INVALID_RESPONSE: 3,
+                    FAIL_TO_DOWNLOAD: 4,
+                    REQUEST_TIMEOUT: 5,
+                },
+            ],
+            peerDataResponseCount: [5, 'integer'],
+            peerDataSuccessProcessCount: [6, 'integer'],
+            peerDataSuccessResponseCount: [7, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'NonMessagePeerDataRequest',
+        id: 3906,
+        props: {
+            peerDataRequestCount: [1, 'integer'],
+            peerDataRequestSessionId: [2, 'string'],
+            peerDataRequestType: [
+                3,
+                {
+                    UPLOAD_STICKER: 0,
+                    SEND_RECENT_STICKER_BOOTSTRAP: 1,
+                    GENERAL_LINK_PREVIEW: 2,
+                    HISTORY_SYNC_ON_DEMAND: 3,
+                    PLACEHOLDER_MESSAGE_RESEND: 4,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcLinkPreviewResponseHandle',
+        id: 3860,
+        props: {
+            didRespondHqPreview: [5, 'boolean'],
+            isPreviewSuccess: [2, 'boolean'],
+            previewDurationMs: [4, 'integer'],
+            previewSessionId: [3, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdBootstrapHistoryDataDownloaded',
+        id: 2296,
+        props: {
+            historySyncChunkOrder: [15, 'integer'],
+            historySyncStageProgress: [14, 'integer'],
+            mdBootstrapChatsCount: [6, 'integer'],
+            mdBootstrapHistoryPayloadType: [
+                13,
+                {
+                    INITIAL: 1,
+                    RECENT_HISTORY: 2,
+                    FULL_HISTORY: 3,
+                    PUSHNAME: 4,
+                    STATUS_V3: 5,
+                    NON_BLOCKING_DATA: 6,
+                    ON_DEMAND: 7,
+                },
+            ],
+            mdBootstrapMessagesCount: [5, 'integer'],
+            mdBootstrapPayloadSize: [4, 'integer'],
+            mdBootstrapPayloadType: [
+                2,
+                {
+                    CRITICAL: 1,
+                    NON_CRITICAL: 2,
+                },
+            ],
+            mdBootstrapStepDuration: [7, 'integer'],
+            mdBootstrapStepResult: [
+                8,
+                {
+                    SUCCESS: 1,
+                    FAILURE: 2,
+                },
+            ],
+            mdHsOldestMessageTimestamp: [11, 'integer'],
+            mdRegAttemptId: [12, 'string'],
+            mdSessionId: [1, 'string'],
+            mdStorageQuotaBytes: [9, 'integer'],
+            mdStorageQuotaUsedBytes: [10, 'integer'],
+            mdTimestamp: [3, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdBootstrapHistoryDataStartDownloading',
+        id: 4650,
+        props: {
+            historySyncChunkOrder: [1, 'integer'],
+            historySyncStageProgress: [2, 'integer'],
+            mdBootstrapHistoryPayloadType: [
+                3,
+                {
+                    INITIAL: 1,
+                    RECENT_HISTORY: 2,
+                    FULL_HISTORY: 3,
+                    PUSHNAME: 4,
+                    STATUS_V3: 5,
+                    NON_BLOCKING_DATA: 6,
+                    ON_DEMAND: 7,
+                },
+            ],
+            mdBootstrapPayloadSize: [4, 'integer'],
+            mdBootstrapPayloadType: [
+                5,
+                {
+                    CRITICAL: 1,
+                    NON_CRITICAL: 2,
+                },
+            ],
+            mdBootstrapStepDuration: [6, 'integer'],
+            mdSessionId: [7, 'string'],
+            mdTimestamp: [8, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'E2eMessageSend',
+        id: 476,
+        props: {
+            agentEngagementType: [
+                15,
+                {
+                    DIRECT_CHAT: 0,
+                    INVOKED: 1,
+                    MEMBER: 2,
+                },
+            ],
+            botType: [
+                17,
+                {
+                    UNKNOWN: 0,
+                    METABOT: 1,
+                    BOT_1P_BIZ: 2,
+                    BOT_3P_BIZ: 3,
+                },
+            ],
+            e2eCiphertextType: [
+                5,
+                {
+                    MESSAGE: 0,
+                    PREKEY_MESSAGE: 1,
+                    SENDER_KEY_MESSAGE: 2,
+                    MESSAGE_SECRET_MESSAGE: 3,
+                },
+            ],
+            e2eCiphertextVersion: [6, 'integer'],
+            e2eDestination: [
+                4,
+                {
+                    INDIVIDUAL: 0,
+                    GROUP: 1,
+                    LIST: 2,
+                    STATUS: 3,
+                    CHANNEL: 4,
+                    INTEROP: 5,
+                },
+            ],
+            e2eFailureReason: [
+                2,
+                {
+                    INVALID_MESSAGE: 0,
+                    LEGACY_MESSAGE: 1,
+                    INVALID_VERSION: 2,
+                    PRE_KEY_MESSAGE_MISSING_PRE_KEY: 3,
+                    PRE_KEY_MESSAGE_INVALID_KEY: 4,
+                    UNTRUSTED_IDENTITY: 5,
+                    NO_SESSION_AVAILABLE: 6,
+                    PLAINTEXT_BYTE_MISMATCH: 7,
+                    UNKNOWN_CIPHERTEXT_TYPE: 8,
+                    UNKNOWN_CIPHERTEXT_VERSION: 9,
+                    INVALID_PADDING: 10,
+                    INVALID_PROTOCOL_BUFFER: 11,
+                    INVALID_NUMBER_OF_MESSAGE_TYPES: 12,
+                    INVALID_IMAGE_FILE_LENGTH: 13,
+                    INVALID_IMAGE_FILE_SHA256: 14,
+                    INVALID_IMAGE_MEDIA_URL: 15,
+                    INVALID_IMAGE_MEDIA_KEY: 16,
+                    INVALID_IMAGE_MIME_TYPE: 17,
+                    UNKNOWN_V2_TAGS: 18,
+                    INVALID_EDIT_VERSION: 19,
+                    INVALID_HSM_NAMESPACE: 20,
+                    INVALID_HSM_ELEMENT: 21,
+                    UNKNOWN_PROTOCOL_MESSAGE_TYPE: 22,
+                    DUPLICATE_MESSAGE: 23,
+                    FINGERPRINT_IDENTITY_MISMATCH: 24,
+                    FINGERPRINT_VERSION_MISMATCH: 25,
+                    INVALID_ARGUMENT: 26,
+                    INVALID_KEY: 27,
+                    INVALID_KEY_ID: 28,
+                    INVALID_MAC: 29,
+                    NO_MEMORY: 30,
+                    STALE_KEY_EXCHANGE: 31,
+                    VRF_SIGNATURE_VERIFICATION_FAILED: 32,
+                    ERROR_MINIMUM_VALUE: 33,
+                    ERROR_UNKNOWN: 34,
+                    INVALID_BROADCAST_STANZA_ATTRIBUTE: 35,
+                    INVALID_LIST_REPLY_MESSAGE: 36,
+                    INVALID_LIST_REPLY_ROW_IDENTIFIER: 37,
+                    INVALID_BUTTONS_RESPONSE_MESSAGE: 38,
+                    INVALID_BUTTONS_RESPONSE_BUTTON_IDENTIFIER: 39,
+                    INVALID_ORDER_MESSAGE: 40,
+                    ERROR_CANCELLED: 41,
+                    FUTURE_MESSAGE: 42,
+                    INVALID_EMPTY_PROTOBUF_NOT_ALLOWED: 43,
+                    SELF_SEND: 44,
+                    INVALID_MEDIA_MIME_TYPE_TEMPLATE_MESSAGE: 45,
+                    INVALID_MEDIA_ENC_HASH: 46,
+                    INVALID_IDENTITY: 47,
+                    PASSTHROUGH: 48,
+                    NOT_IN_PENDING_DEVICES: 49,
+                    EDIT_TYPE_AND_PROTOCOL_MISMATCH: 50,
+                    DECRYPTION_FAILED: 51,
+                    DESERIALIZE_INVALID_PROTO_FORMAT: 52,
+                    DESERIALIZE_RATCHET_KEY_BAD_FORMAT: 53,
+                    DESERIALIZE_PK_INVALID_PROTO_FORMAT: 54,
+                    DESERIALZE_PK_KEY_BAD_FORMAT: 55,
+                    TOO_MANY_MESSAGES_IN_FUTURE: 56,
+                    EMPTY_VERSION_CONTENT_SUFFIX: 57,
+                    CONTENT_EXCEEDED_EXPECTED_LENGTH: 58,
+                    GRP_INVALID_PROTO_FORMAT: 59,
+                    GRP_INVALID_KEY_FORMAT: 60,
+                    GRP_VERSION_CONTENT_EMPTY: 61,
+                    GRP_INVALID_VERSION_CONTENT_LENGTH: 62,
+                    GRP_SENDER_KEY_INVALID_PROTO_FORMAT: 63,
+                    GRP_SENDER_KEY_PROTO_ERROR: 64,
+                    GRP_TOO_MANY_MESSAGES_IN_FUTURE: 65,
+                    MISSING_MESSAGE_SECRET: 66,
+                    MESSAGE_SECRET_INVALID: 67,
+                    INVALID_REACTION_TEXT: 68,
+                    UNSUPPORTED_MESSAGE_TYPE: 69,
+                    UNSUPPORTED_IN_INTEROP: 70,
+                    TARGET_MESSAGE_NOT_FOUND: 71,
+                    STATUS_FROM_HOSTED_DEVICE_UNSUPPORTED: 72,
+                    GROUP_MESSAGE_FROM_HOSTED_DEVICE_UNSUPPORTED: 73,
+                    BROADCAST_FROM_HOSTED_DEVICE_UNSUPPORTED: 74,
+                    LIVE_LOCATION_FROM_HOSTED_DEVICE_UNSUPPORTED: 75,
+                    MESSAGE_TYPE_MISMATCH: 76,
+                    ERROR_SESSION_STATE_UNACKED_PKMSG_GET_BASE_KEY: 77,
+                    ERROR_SIGNAL_MESSAGE_GET_SENDER_RATCHET_KEY: 78,
+                    ERROR_SESSION_STATE_GET_ROOT_KEY: 79,
+                    ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY_PAIR: 80,
+                    ERROR_SESSION_STATE_SET_SENDER_CHAIN_KEY: 81,
+                    ERROR_SESSION_STATE_FIND_RECEIVER_CHAIN: 82,
+                    ERROR_SESSION_RECORD_DESERIALIZE: 83,
+                    ERROR_SENDER_KEY_STATE_REMOVE_SENDER_MESSAGE_KEY: 84,
+                    ERROR_EMPTY_PLAINTEXT_DATA: 85,
+                    ERROR_MAC_LEN_MISMATCH: 86,
+                    ERROR_INVALID_MAC_LEN: 87,
+                    ERROR_INVALID_SIGNATURE_LEN: 88,
+                    ERROR_SENDER_KEY_LOAD_KEY: 89,
+                    ERROR_FAST_RATCHET_SENDER_KEY_LOAD_KEY: 90,
+                    ERROR_UNKNOWN_LOAD_KEY: 91,
+                    ERROR_UNKNOWN_LOAD_SESSION: 92,
+                    ERROR_SESSION_RECORD_GET_STATE: 93,
+                    ERROR_SESSION_STATE_GET_SENDER_CHAIN_KEY: 94,
+                    ERROR_INVALID_KEY_MATEIRAL_DATA_LEN: 95,
+                    ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY: 96,
+                    ERROR_SESSION_STATE_GET_LOCAL_IDENTITY_KEY: 97,
+                    ERROR_SESSION_STATE_GET_REMOTE_IDENTITY_KEY: 98,
+                },
+            ],
+            e2eReceiverType: [
+                8,
+                {
+                    PRIMARY: 1,
+                    COMPANION: 2,
+                },
+            ],
+            e2eSuccessful: [1, 'boolean'],
+            editType: [
+                14,
+                {
+                    NOT_EDITED: 0,
+                    EDITED: 1,
+                    SENDER_REVOKE: 2,
+                    ADMIN_REVOKE: 3,
+                },
+            ],
+            encRetryCount: [9, 'integer'],
+            isLid: [12, 'boolean'],
+            localAddressingMode: [
+                16,
+                {
+                    PN: 1,
+                    LID: 2,
+                },
+            ],
+            messageIsInvisible: [10, 'boolean'],
+            messageMediaType: [
+                7,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            retryCount: [3, 'integer'],
+            revokeType: [
+                11,
+                {
+                    SENDER: 0,
+                    ADMIN: 1,
+                },
+            ],
+            typeOfGroup: [
+                13,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PrekeysDepletion',
+        id: 3014,
+        props: {
+            deviceSizeBucket: [
+                3,
+                {
+                    LT32: 1,
+                    LT64: 2,
+                    LT128: 3,
+                    LT256: 4,
+                    LT512: 5,
+                    LT1000: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            messageType: [
+                2,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            prekeysFetchReason: [
+                1,
+                {
+                    SEND_MESSAGE: 1,
+                    GET_VNAME_CERTIFICATE: 2,
+                    SEND_LIVE_LOCATION_RETRY: 3,
+                    SEND_LIVE_LOCATION_KEY: 4,
+                    SEND_PEER_MESSAGE: 5,
+                    MULTI_DEVICE_CALL: 6,
+                    CALL_PEER_E2E_FAIL: 7,
+                    IDENTITY_CHANGE_NOTIFICATION: 8,
+                    BACK_OFF: 9,
+                    USER_INTENT_PREFETCH: 10,
+                    RESEND_MESSAGE: 11,
+                    RETRY_MESSAGE: 12,
+                    USER_INTENT_STATUS_PREFETCH: 13,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'AndroidMessageSendPerf',
+        id: 1994,
+        props: {
+            appRestart: [16, 'boolean'],
+            bucketedSenderKeyDistributionCountPercentage: [32, 'integer'],
+            bucketedSenderKeyDistributionHashTime: [35, 'integer'],
+            deviceCount: [36, 'integer'],
+            deviceSizeBucket: [
+                26,
+                {
+                    LT32: 1,
+                    LT64: 2,
+                    LT128: 3,
+                    LT256: 4,
+                    LT512: 5,
+                    LT1000: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            durationAbs: [11, 'timer'],
+            durationRelative: [12, 'timer'],
+            durationT: [1, 'timer'],
+            editType: [
+                42,
+                {
+                    NOT_EDITED: 0,
+                    EDITED: 1,
+                    SENDER_REVOKE: 2,
+                    ADMIN_REVOKE: 3,
+                },
+            ],
+            fetchPrekeys: [15, 'boolean'],
+            fetchPrekeysPercentage: [21, 'integer'],
+            groupSizeBucket: [
+                17,
+                {
+                    SMALL: 1,
+                    MEDIUM: 2,
+                    LARGE: 3,
+                    EXTRA_LARGE: 4,
+                    XX_LARGE: 5,
+                    XXX_LARGE: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            isDirectedMessage: [33, 'boolean'],
+            isE2eBackfill: [27, 'boolean'],
+            isLid: [41, 'boolean'],
+            isMessageFanout: [9, 'boolean'],
+            isMessageForward: [8, 'boolean'],
+            isRevokeMessage: [24, 'boolean'],
+            isViewOnce: [29, 'boolean'],
+            jobsInQueue: [18, 'integer'],
+            mediaType: [
+                3,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messageIsFirstUserMessage: [30, 'boolean'],
+            messageIsInvisible: [31, 'boolean'],
+            messageType: [
+                4,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            networkWasDisconnected: [14, 'boolean'],
+            participantCount: [37, 'integer'],
+            phoneCores: [34, 'integer'],
+            prekeysEligibleForPrallelProcessing: [28, 'boolean'],
+            receiverDeviceCount: [39, 'integer'],
+            sendCount: [13, 'integer'],
+            sendRetryCount: [10, 'integer'],
+            sendStage: [
+                2,
+                {
+                    CLIENT_RENDERED: 1,
+                    CLIENT_SAVED: 2,
+                    CLIENT_WRITTEN_WIRE: 3,
+                    CLIENT_QUEUED: 4,
+                    CLIENT_WAITING_TO_ENCRYPT: 5,
+                    CLIENT_READY_TO_SEND: 6,
+                    CLIENT_ENCRYPT: 7,
+                    CLIENT_PREKEYS_FETCH: 8,
+                },
+            ],
+            senderDeviceCount: [40, 'integer'],
+            senderKeyDistributionCountPercentage: [23, 'integer'],
+            sessionsMissingWhenComposing: [25, 'boolean'],
+            targetDeviceGroupSizeBucket: [
+                20,
+                {
+                    SMALL: 1,
+                    MEDIUM: 2,
+                    LARGE: 3,
+                    EXTRA_LARGE: 4,
+                    XX_LARGE: 5,
+                    XXX_LARGE: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            threadsInExecution: [19, 'integer'],
+            typeOfGroup: [
+                38,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+        },
+        weight: 2000,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdDeviceSyncAck',
+        id: 2180,
+        props: {
+            chatType: [
+                1,
+                {
+                    OTHER: 0,
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    STATUS: 3,
+                    BROADCAST: 4,
+                    CHANNEL: 5,
+                },
+            ],
+            isLid: [3, 'boolean'],
+            localAddressingMode: [
+                5,
+                {
+                    PN: 1,
+                    LID: 2,
+                },
+            ],
+            revoke: [2, 'boolean'],
+            serverAddressingMode: [
+                6,
+                {
+                    PN: 1,
+                    LID: 2,
+                },
+            ],
+            typeOfGroup: [
+                4,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'AdvMetadataCreationFailure',
+        id: 3048,
+        props: {
+            advMetadataIsMe: [1, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdGroupParticipantMissAck',
+        id: 4146,
+        props: {
+            groupSizeBucket: [
+                1,
+                {
+                    SMALL: 1,
+                    MEDIUM: 2,
+                    LARGE: 3,
+                    EXTRA_LARGE: 4,
+                    XX_LARGE: 5,
+                    XXX_LARGE: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            isLid: [2, 'boolean'],
+            messageIsRevoke: [3, 'boolean'],
+            participantAddCount: [4, 'integer'],
+            participantRemoveCount: [5, 'integer'],
+            typeOfGroup: [
+                6,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'CrashLog',
+        id: 494,
+        props: {
+            crashContext: [3, 'string'],
+            crashCount: [5, 'integer'],
+            crashReason: [2, 'string'],
+            crashType: [
+                6,
+                {
+                    CRASH: 0,
+                    OOM: 1,
+                    MAIN_THREAD_STALL_3_SECONDS: 15,
+                    MAIN_THREAD_STALL_30_SECONDS: 2,
+                    MAIN_THREAD_STALL_60_SECONDS: 16,
+                    MAIN_THREAD_STALL_POKED: 17,
+                    MAIN_THREAD_STALL_DEBUG: 3,
+                    AUDIO_TRANSCODING_ERROR: 4,
+                    VIDEO_TRANSCODING_ERROR: 5,
+                    ANR: 6,
+                    CRITICAL_EVENT: 7,
+                    UNHANDLED_EXCEPTION: 8,
+                    APP_CRASH: 9,
+                    NATIVE_CRASH: 10,
+                    UFAD: 11,
+                    EXPERIMENTAL_UFAD_DETECTION: 12,
+                    UX_BREAKING_EXCEPTION: 13,
+                    UX_GRACEFUL_RECOVERY_EXCEPTION: 14,
+                },
+            ],
+        },
+        weight: 100,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcPageResume',
+        id: 884,
+        props: {
+            webcResumeCount: [1, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcPhoneDisconnected',
+        id: 878,
+        props: {
+            webcPhoneBbarShownT: [2, 'timer'],
+            webcPhoneDisconnectedT: [1, 'timer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdSyncdDogfoodingFeatureUsage',
+        id: 3016,
+        props: {
+            mdSyncdDogfoodingFeature: [
+                1,
+                {
+                    PIN_MUTATION: 1,
+                    UNPIN_4TH_CHAT_MUTATION: 2,
+                    DELETE_MUTATION: 3,
+                    CLEAR_CHAT_REMOVE_STARRED_MUTATION: 4,
+                    CLEAR_CHAT_KEEP_STARRED_MUTATION: 5,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdFatalError',
+        id: 2304,
+        props: {
+            collection: [
+                2,
+                {
+                    REGULAR: 1,
+                    REGULAR_LOW: 2,
+                    REGULAR_HIGH: 3,
+                    CRITICAL_BLOCK: 4,
+                    CRITICAL_UNBLOCK_LOW: 5,
+                },
+            ],
+            currentPrimaryAppVersion: [14, 'string'],
+            daysSinceLastPeriodicSync: [11, 'integer'],
+            didBootstrapFromSnapshot: [38, 'boolean'],
+            hoursSinceFirstFiniteFailure: [12, 'integer'],
+            isBootstrap: [3, 'boolean'],
+            isFatal: [16, 'boolean'],
+            isPatchSenderPrimary: [23, 'boolean'],
+            isPreviousPatchAnIncomingPatch: [24, 'boolean'],
+            isPreviousPatchSenderPrimary: [25, 'boolean'],
+            isSenderIndexSameAsPreviousSenderIndex: [39, 'boolean'],
+            isThereAnotherSyncdCompanion: [40, 'boolean'],
+            isWebLthashConsistent: [17, 'boolean'],
+            macFatalCollectionNameMismatch: [18, 'boolean'],
+            macFatalCurrentLthashMismatch: [19, 'boolean'],
+            macFatalDidPreviousPatchFailPostSaveValidation: [26, 'boolean'],
+            macFatalDidUseMacFetchFallback: [36, 'boolean'],
+            macFatalFirstTwoBytesFromAHashOfSnapshotMacKeyMismatch: [20, 'boolean'],
+            macFatalHasMissingRemove: [37, 'boolean'],
+            macFatalNewLthashMismatch: [21, 'boolean'],
+            macFatalNewLthashSubtractMismatch: [27, 'boolean'],
+            macFatalNumberAddMismatch: [28, 'boolean'],
+            macFatalNumberHasOverrideMutation: [29, 'boolean'],
+            macFatalNumberNumAddMutation: [30, 'integer'],
+            macFatalNumberNumRemoveMutation: [31, 'integer'],
+            macFatalNumberOverrideMismatch: [32, 'boolean'],
+            macFatalNumberRemoveMismatch: [33, 'boolean'],
+            macFatalPatchVersionMismatch: [22, 'boolean'],
+            macFatalPreviousPatchNewLthashToCurrentPatchCurrentLthash: [34, 'boolean'],
+            macFatalSenderCurrentLthashToLocalCalculatedCurrentLthashMismatch: [35, 'boolean'],
+            mailboxAgeDays: [13, 'integer'],
+            mdFatalErrorCode: [
+                1,
+                {
+                    TOO_MANY_INTERNAL_SERVER_ERRORS_IN_7D: 1,
+                    SERVER_DATA_MISMATCH: 2,
+                    PROTOBUF_DESERIALIZATION_FAILED: 3,
+                    EXTERNAL_PATCH_EXPIRED: 4,
+                    MISSING_OR_EMPTY_INDEX: 5,
+                    SAME_INDEX_FOR_MULTIPLE_MUTATIONS_IN_PATCH: 6,
+                    DECRYPTION_FAILED: 7,
+                    MISSING_PATCH_VERSION: 8,
+                    DUPLICATE_PATCH_VERSION_IN_COLLECTION: 9,
+                    ENCRYPTION_FAILED: 10,
+                    MISSING_MUTATION_VERSION: 11,
+                    MISSING_MUTATION_VALUE: 12,
+                    INVALID_MUTATION_INDEX: 13,
+                    PATCH_WITH_BOTH_INLINE_AND_EXTERNAL_MUTATIONS: 14,
+                    MISSING_MUTATION_OPERATION: 15,
+                    MISSING_MUTATION_RECORD: 16,
+                    MISSING_MUTATION_KEY_ID: 17,
+                    PATCH_PROTOBUF_DESERIALIZATION_FAILED: 18,
+                    ACTION_DATA_PROTOBUF_DESERIALIZATION_FAILED: 19,
+                    MISSING_MUTATION_INDEX: 20,
+                    MISSING_ACTION_INDEX: 21,
+                    INVALID_ACTION_INDEX: 22,
+                    MISSING_ACTION_VALUE: 23,
+                    MISSING_ACTION_VERSION: 24,
+                    MISSING_ACTION_TIMESTAMP: 25,
+                    MUTATIONS_PROTOBUF_DESERIALIZATION_FAILED: 26,
+                    MUTATIONS_PROTOBUF_SERIALIZATION_FAILED: 27,
+                    PATCH_PROTOBUF_SERIALIZATION_FAILED: 28,
+                    ACTION_DATA_PROTOBUF_SERIALIZATION_FAILED: 29,
+                    MISSING_KEY_ON_ALL_CLIENTS: 30,
+                    TIMEOUT_WHILE_WAITING_FOR_MISSING_KEY: 31,
+                    MAC_MISMATCH_SNAPSHOT: 33,
+                    MAC_MISMATCH_PATCH: 34,
+                    DB_STORE_NOT_READY: 35,
+                    TERMINAL_PATCH_MISSING_DATA: 36,
+                    TERMINAL_PATCH_DESERIALIZATION_ERROR: 37,
+                    TERMINAL_PATCH_UNKNOWN: 38,
+                    CYCLIC_MUTATION_DEPENDENCY_IN_PATCH: 39,
+                    MISSING_SNAPSHOT_VERSION: 45,
+                    MISSING_SNAPSHOT_MAC: 46,
+                    MISSING_PATCH_SNAPSHOT_MAC: 47,
+                    MISSING_PATCH_MAC: 48,
+                    MISSING_EXTERNAL_BLOB_REFERENCE_MEDIA_KEY: 49,
+                    MISSING_EXTERNAL_BLOB_REFERENCE_DIRECT_PATH: 50,
+                    MISSING_EXTERNAL_BLOB_REFERENCE_FILE_SHA256: 51,
+                    MISSING_EXTERNAL_BLOB_REFERENCE_FILE_ENC_SHA256: 52,
+                    INVALID_KEY_SHARE_KEY_ID: 53,
+                    MISSING_PATCH_KEY_ID: 56,
+                    INVALID_KEY_SHARE_KEY_DATA: 57,
+                    SNAPSHOT_EXPIRED: 58,
+                    MISSING_SNAPSHOT_KEY_ID: 59,
+                    SNAPSHOT_MAC_MISMATCH_IN_PATCH: 60,
+                    SNAPSHOT_MAC_MISMATCH_IN_SNAPSHOT: 61,
+                    XMPP_BAD_REQUEST_FOR_COLLECTION: 62,
+                    XMPP_NOT_FOUND_FOR_COLLECTION: 63,
+                    XMPP_BAD_REQUEST_GLOBAL_ERROR: 64,
+                    XMPP_NOT_FOUND_GLOBAL_ERROR: 65,
+                    XMPP_BAD_METHOD_GLOBAL_ERROR: 66,
+                    XMPP_NOT_ACCEPTABLE_GLOBAL_ERROR: 67,
+                    SAME_INDEX_FOR_MULTIPLE_MUTATIONS_IN_SNAPSHOT: 68,
+                    EXTERNAL_BLOB_REFERENCE_PROTOBUF_DESERIALIZATION_FAILED: 69,
+                    SNAPSHOT_PROTOBUF_DESERIALIZATION_FAILED: 70,
+                    REQUESTING_MISSING_KEY_WITH_NO_CLIENTS: 71,
+                    DB_STORE_NOT_READY_LOW_DISK_SPACE: 72,
+                    SERVER_DID_NOT_SEND_ALL_PATCHES: 73,
+                    SERVER_SENT_EARLIER_PATCH: 74,
+                    MISSING_KEY_FOR_MUTATION_IN_LOCAL_SNAPSHOT: 75,
+                    MISSING_ACTIVE_KEY_AFTER_ROTATION: 76,
+                    MISSING_ACTIVE_KEY_FOR_ENCRYPTION: 77,
+                    MISSING_CURRENT_EPOCH_FOR_ACTIVE_KEY_VALIDATION: 78,
+                    SAME_INDEX_FOR_MULTIPLE_MUTATIONS_IN_OUTGOING_PATCH: 79,
+                    INVALID_SNAPSHOT_RECORDS: 80,
+                    MISSING_EXTERNAL_BLOB_REFERENCE_HANDLE: 81,
+                    INVALID_EXTERNAL_BLOB_REFERENCE_UPLOADED: 82,
+                    INVALID_PATCH_KEY_ID_SIZE: 83,
+                    INVALID_PATCH_MAC_SIZE: 84,
+                    INVALID_PATCH_SNAPSHOT_MAC_SIZE: 85,
+                    INVALID_COLLECTION_SNAPSHOT_HASH_SIZE: 86,
+                    MISSING_COLLECTION_SNAPSHOT_HASH: 87,
+                    INVALID_PATCH_KEY_ID_DEVICE_ID: 88,
+                    INVALID_PATCH_KEY_ID_EPOCH: 89,
+                    DECRYPTION_FAILED_KEY_ID_MISMATCH: 90,
+                    DECRYPTION_FAILED_VALUE_MAC_MISMATCH: 91,
+                    DECRYPTION_FAILED_INDEX_MAC_MISMATCH: 92,
+                    EXTERNAL_PATCH_MISSING_BLOB: 93,
+                    COLLECTION_PULL_REQUEST_RECEIVED_PUSH_RESPONSE_WITH_UPDATED_VERSION: 94,
+                    COLLECTION_PUSH_REQUEST_RECEIVED_RESPONSE_WITH_VERSION_MISMATCH: 95,
+                    MMS_ERROR_INVALID_FILEHASH: 96,
+                    UNKNOWN: 97,
+                    MALFORMED_MUTATION_CLEAR_CHAT: 98,
+                    MALFORMED_MUTATION_DELETE_CHAT: 99,
+                    FAILED_MUTATION_CLEAR_CHAT: 100,
+                    FAILED_MUTATION_DELETE_CHAT: 101,
+                    CHAT_DB_CORRUPTION: 102,
+                },
+            ],
+            patchSnapshotMutationCount: [9, 'integer'],
+            patchVersion: [5, 'integer'],
+            sessionStartPrimaryAppVersion: [15, 'string'],
+            sourceType: [
+                10,
+                {
+                    SNAPSHOT: 1,
+                    EXTERNAL_PATCH: 2,
+                    INLINE_PATCH: 3,
+                },
+            ],
+            timeSincePairingMs: [6, 'integer'],
+            timeSinceRefreshMs: [7, 'integer'],
+            timeSinceTabTakeoverMs: [8, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MediaUpload2',
+        id: 1588,
+        props: {
+            batchSize: [57, 'integer'],
+            connectionType: [
+                43,
+                {
+                    HOSTNAME: 0,
+                    IP4: 1,
+                    IP6: 2,
+                },
+            ],
+            debugMediaException: [34, 'string'],
+            debugMediaIp: [32, 'string'],
+            debugUrl: [33, 'string'],
+            estimatedBandwidth: [45, 'number'],
+            fileHeight: [55, 'integer'],
+            fileWidth: [56, 'integer'],
+            finalizeConnectT: [28, 'timer'],
+            finalizeHttpCode: [31, 'integer'],
+            finalizeIsReuse: [30, 'boolean'],
+            finalizeNetworkT: [29, 'timer'],
+            httpProtocolVersionType: [
+                51,
+                {
+                    HTTP1: 0,
+                    HTTP2: 1,
+                    HTTP3: 2,
+                },
+            ],
+            isViewOnce: [49, 'boolean'],
+            mediaId: [46, 'integer'],
+            messageKeyHash: [58, 'string'],
+            networkStack: [
+                42,
+                {
+                    NATIVE: 0,
+                    OK_HTTP: 1,
+                    LIGER: 2,
+                    APACHE: 3,
+                    WATLS: 4,
+                    CRONET: 5,
+                },
+            ],
+            originalSize: [53, 'integer'],
+            overallAttemptCount: [4, 'integer'],
+            overallConnBlockFetchT: [10, 'timer'],
+            overallConnectionClass: [41, 'string'],
+            overallCumT: [37, 'timer'],
+            overallCumUserVisibleT: [38, 'timer'],
+            overallDomain: [5, 'string'],
+            overallEncryptT: [50, 'timer'],
+            overallIsFinal: [36, 'boolean'],
+            overallIsForward: [16, 'boolean'],
+            overallIsManual: [13, 'boolean'],
+            overallLastUploadRetryPhase: [
+                11,
+                {
+                    RESUME_CHECK: 1,
+                    UPLOAD: 2,
+                    FINALIZE: 3,
+                },
+            ],
+            overallMediaKeyReuse: [
+                40,
+                {
+                    NONE_NEW_CONTENT: 1,
+                    NONE_EXPIRED: 2,
+                    REUSED: 3,
+                    NONE_WAS_STATUS: 4,
+                },
+            ],
+            overallMediaSize: [7, 'number'],
+            overallMediaType: [
+                1,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            overallMmsVersion: [6, 'integer'],
+            overallOptimisticFlag: [
+                12,
+                {
+                    NONE: 0,
+                    OPTIMISTIC: 1,
+                    OPT_USED: 2,
+                    OPT_TAKEOVER: 3,
+                    OPT_DISABLED: 4,
+                },
+            ],
+            overallQueueT: [9, 'timer'],
+            overallRetryCount: [3, 'integer'],
+            overallT: [8, 'timer'],
+            overallTranscodeT: [15, 'timer'],
+            overallUploadMode: [
+                39,
+                {
+                    REGULAR: 1,
+                    FAST_FORWARD_EXIST_CHECK: 2,
+                    VIDEO_EXIST_CHECK: 3,
+                    PRODUCT: 4,
+                    MEDIA_RETRY: 5,
+                    WEB_REUPLOAD: 6,
+                    THUMBNAIL: 7,
+                    EXPRESS_PATH_UPLOAD: 8,
+                },
+            ],
+            overallUploadOrigin: [
+                44,
+                {
+                    UNKNOWN: 1,
+                    CHAT_PERSONAL: 2,
+                    CHAT_GROUP: 3,
+                    STATUS_USER: 4,
+                    PRODUCT_CATALOG: 5,
+                    STICKER_WEB: 6,
+                    PAYMENTS_KYC: 7,
+                    MESSAGE_HISTORY_SYNC: 8,
+                    COMMUNITY: 9,
+                    CHANNEL: 10,
+                    BROADCAST: 11,
+                    MULTI_CHAT: 12,
+                    INTEROP: 13,
+                },
+            ],
+            overallUploadResult: [
+                35,
+                {
+                    OK: 1,
+                    DUPLICATE: 3,
+                    ERROR_UNKNOWN: 2,
+                    ERROR_REQUEST: 4,
+                    ERROR_UPLOAD: 5,
+                    ERROR_OOM: 6,
+                    ERROR_IO: 7,
+                    ERROR_NO_PERMISSIONS: 8,
+                    ERROR_BAD_MEDIA: 9,
+                    ERROR_INSUFFICIENT_SPACE: 10,
+                    ERROR_FNF: 11,
+                    ERROR_CANCEL: 12,
+                    ERROR_SERVER: 13,
+                    ERROR_REQUEST_TIMEOUT: 14,
+                    ERROR_NOT_FINALIZED: 15,
+                    ERROR_OPTIMISTIC_HASH: 16,
+                    ERROR_MEDIA_CONN: 17,
+                    ERROR_DNS: 18,
+                    ERROR_THROTTLE: 19,
+                    ERROR_SSL: 20,
+                    ERROR_NO_CLIENT_NETWORK: 21,
+                    SKIPPED_EP_NOT_ONLINE: 22,
+                    SKIPPED_EP_NOT_1TO1CHAT: 23,
+                    SKIPPED_EP_UPLOAD_FAILED: 24,
+                    SKIPPED_EP_MULTI_CHAT: 25,
+                    SKIPPED_EP_NO_PRIMARY_HOST: 26,
+                    ERROR_CRONET: 27,
+                    ERROR_INCOMPLETE_SERVER_RESPONSE: 28,
+                    ERROR_TRANSCODING: 29,
+                    ERROR_CANCEL_PROGRAMMATIC: 30,
+                    ERROR_NO_ROUTE: 31,
+                    ERROR_TOO_LARGE: 32,
+                    ERROR_CANNOT_TRANSCODE: 33,
+                    ERROR_UNKNOWN_MIMETYPE: 34,
+                    ERROR_UNSUPPORTED_MIMETYPE: 35,
+                    ERROR_SERVER_REJECTED_MEDIA: 36,
+                    ERROR_IO_ENCRYPTION: 37,
+                    ERROR_NO_ENCRYPTION_ALGORITHM: 38,
+                    ERROR_HOST_SWITCH_REQUIRED: 39,
+                    ERROR_WAMSYS: 40,
+                    ERROR_INVALID_URL: 41,
+                },
+            ],
+            overallUserVisibleT: [14, 'timer'],
+            photoQualitySetting: [
+                52,
+                {
+                    AUTO: 0,
+                    DATA_SAVER: 1,
+                    HIGH_QUALITY: 2,
+                    HIGHEST_QUALITY: 3,
+                },
+            ],
+            resumeConnectT: [17, 'timer'],
+            resumeHttpCode: [20, 'integer'],
+            resumeIsReuse: [19, 'boolean'],
+            resumeNetworkT: [18, 'timer'],
+            uploadBytesTransferred: [27, 'number'],
+            uploadConnectT: [22, 'timer'],
+            uploadHttpCode: [25, 'integer'],
+            uploadIsReuse: [24, 'boolean'],
+            uploadIsStreaming: [26, 'boolean'],
+            uploadNetworkT: [23, 'timer'],
+            uploadResumePoint: [21, 'integer'],
+            uploadSource: [
+                48,
+                {
+                    OTHER: 1,
+                    CAMERA: 2,
+                    GALLERY: 3,
+                    SHARE: 4,
+                },
+            ],
+            usedFallbackHint: [47, 'string'],
+            videoQualitySetting: [
+                54,
+                {
+                    AUTO: 0,
+                    DATA_SAVER: 1,
+                    HIGH_QUALITY: 2,
+                    HIGHEST_QUALITY: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcMediaErrorUnknownDetails',
+        id: 2352,
+        props: {
+            mediaId: [1, 'integer'],
+            webcMediaErrorMessage: [4, 'string'],
+            webcMediaErrorName: [3, 'string'],
+            webcMediaOperation: [
+                2,
+                {
+                    DOWNLOAD: 1,
+                    UPLOAD: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcMediaLoad',
+        id: 1202,
+        props: {
+            webcMediaLoadResult: [
+                2,
+                {
+                    SUCCESS: 0,
+                    SILENCE: 1,
+                    ZEROWIDTH: 2,
+                },
+            ],
+            webcMediaLoadT: [1, 'timer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'StickerError',
+        id: 5024,
+        props: {
+            stickerErrorType: [
+                1,
+                {
+                    DECOMPRESSION: 2,
+                    SENDER_VALIDATION: 3,
+                    RECEIVER_VALIDATION: 4,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'StickerLatency',
+        id: 5026,
+        props: {
+            size: [1, 'integer'],
+            stickerLatencyAction: [
+                2,
+                {
+                    DECOMPRESSION: 2,
+                },
+            ],
+            stickerLatencyTtAction: [3, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcProgressiveImage',
+        id: 2226,
+        props: {
+            webcFirstRenderScans: [1, 'integer'],
+            webcFirstRenderT: [2, 'timer'],
+            webcFullQualityT: [4, 'timer'],
+            webcMidQualityT: [3, 'timer'],
+        },
+        weight: 10,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'SendDocument',
+        id: 2172,
+        props: {
+            documentSize: [1, 'number'],
+            documentType: [
+                2,
+                {
+                    OTHER: 1,
+                    IMAGE: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    DOCUMENT: 5,
+                    COMPRESSED_FILE: 6,
+                    EXECUTABLE: 7,
+                    VCARD: 8,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcMediaAnalyzed',
+        id: 912,
+        props: {
+            webcMediaAnalyzeT: [3, 'timer'],
+            webcMediaExtensions: [2, 'string'],
+            webcMediaSupported: [1, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'VideoTranscoder',
+        id: 1802,
+        props: {
+            sourceAudioBitRate: [12, 'number'],
+            sourceDuration: [8, 'timer'],
+            sourceFileSize: [7, 'number'],
+            sourceFormat: [
+                14,
+                {
+                    SLOMO: 0,
+                    VIDEO: 1,
+                    GIF: 2,
+                },
+            ],
+            sourceFrameRate: [13, 'number'],
+            sourceHeight: [10, 'number'],
+            sourceVideoBitRate: [11, 'number'],
+            sourceWidth: [9, 'number'],
+            targetAudioBitRate: [20, 'number'],
+            targetDuration: [16, 'timer'],
+            targetFileSize: [15, 'number'],
+            targetFormat: [
+                22,
+                {
+                    IMAGE: 0,
+                    VIDEO: 1,
+                    GIF: 2,
+                },
+            ],
+            targetFrameRate: [21, 'number'],
+            targetHeight: [18, 'number'],
+            targetVideoBitRate: [19, 'number'],
+            targetWidth: [17, 'number'],
+            transcoderAlgorithm: [
+                1,
+                {
+                    WA_IPHONE: 0,
+                    FB_IPHONE: 1,
+                },
+            ],
+            transcoderContainsVideocomposition: [5, 'boolean'],
+            transcoderHasEdits: [6, 'boolean'],
+            transcoderIsPassthrough: [4, 'boolean'],
+            transcoderResult: [
+                2,
+                {
+                    UNKNOWN: 0,
+                    SUCCEEDED: 1,
+                    FAILED: 2,
+                    CANCELLED: 3,
+                },
+            ],
+            transcoderT: [3, 'timer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'StickerSend',
+        id: 1840,
+        props: {
+            stickerIsAi: [7, 'boolean'],
+            stickerIsAnimated: [3, 'boolean'],
+            stickerIsAvatar: [6, 'boolean'],
+            stickerIsFirstParty: [2, 'boolean'],
+            stickerIsFromStickerMaker: [5, 'boolean'],
+            stickerIsGiphy: [10, 'boolean'],
+            stickerIsLottie: [9, 'boolean'],
+            stickerIsTenor: [11, 'boolean'],
+            stickerMakerSourceType: [
+                8,
+                {
+                    CUTOUT_IMAGE: 1,
+                    WEB_STICKER_MAKER: 2,
+                    IOS_STICKER_MAKER: 3,
+                    ANDROID_STICKER_MAKER: 4,
+                    TRANSPARENT_IMAGE: 5,
+                },
+            ],
+            stickerSendMessageType: [
+                4,
+                {
+                    REGULAR: 1,
+                    PAYMENTS: 2,
+                },
+            ],
+            stickerSendOrigin: [
+                1,
+                {
+                    STICKER_SEARCH: 1,
+                    FORWARD: 2,
+                    STICKER_PICKER_TAB_RECENTS: 3,
+                    STICKER_PICKER_TAB_FAVORITES: 4,
+                    STICKER_PICKER_TAB_EMOTION: 5,
+                    STICKER_PICKER_TAB_PACK: 6,
+                    STICKER_PICKER_TAB_CONTEXTUAL_SUGGESTIONS: 7,
+                    STICKER_MAKER: 8,
+                    STICKER_STORE: 9,
+                    AI_STICKER_CREATE: 10,
+                    AI_STICKER_CREATE_TRAY: 11,
+                    AI_STICKER_CREATE_CHAT: 12,
+                    STATUS_QUICK_REPLY: 13,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MediaDownload2',
+        id: 1590,
+        props: {
+            clientMessageId: [50, 'string'],
+            connectionType: [
+                31,
+                {
+                    HOSTNAME: 0,
+                    IP4: 1,
+                    IP6: 2,
+                },
+            ],
+            daysSinceReceive: [46, 'integer'],
+            debugMediaException: [24, 'string'],
+            debugMediaIp: [22, 'string'],
+            debugUrl: [23, 'string'],
+            deviceCount: [49, 'integer'],
+            downloadBytesTransferred: [20, 'number'],
+            downloadConnectT: [15, 'timer'],
+            downloadHttpCode: [18, 'integer'],
+            downloadIsReuse: [17, 'boolean'],
+            downloadIsStreaming: [19, 'boolean'],
+            downloadNetworkT: [16, 'timer'],
+            downloadQuality: [
+                37,
+                {
+                    NORMAL_QUALITY: 1,
+                    MID_QUALITY: 2,
+                    INELIGIBLE_IMAGE_TOO_SMALL: 3,
+                    INELIGIBLE_PARTIAL_HASHES_NOT_FOUND: 4,
+                    ERROR_DETERMINING_ELIGIBILITY: 5,
+                    NOT_DOWNLOADED_ENOUGH_BYTES_TO_DETERMINE_ELIGIBILITY: 6,
+                },
+            ],
+            downloadResumePoint: [14, 'integer'],
+            downloadTimeToFirstByteT: [21, 'timer'],
+            estimatedBandwidth: [36, 'number'],
+            expressPathBytesSaved: [42, 'number'],
+            expressPathTimeSavedMs: [43, 'timer'],
+            fileHeight: [47, 'integer'],
+            fileWidth: [48, 'integer'],
+            hasLeveragedExpressPath: [44, 'boolean'],
+            httpProtocolVersionType: [
+                45,
+                {
+                    HTTP1: 0,
+                    HTTP2: 1,
+                    HTTP3: 2,
+                },
+            ],
+            isSenderPlatformCapi: [52, 'boolean'],
+            isViewOnce: [41, 'boolean'],
+            mediaId: [38, 'integer'],
+            networkStack: [
+                30,
+                {
+                    NATIVE: 0,
+                    OK_HTTP: 1,
+                    LIGER: 2,
+                    APACHE: 3,
+                    WATLS: 4,
+                    CRONET: 5,
+                },
+            ],
+            overallAttemptCount: [4, 'integer'],
+            overallBackendStore: [
+                39,
+                {
+                    UNKNOWN: 0,
+                    NON_DIRECT_PATH: 1,
+                    EVERSTORE: 2,
+                    OIL: 3,
+                    EXPRESS_PATH: 4,
+                    STATIC: 5,
+                    MANIFOLD: 6,
+                },
+            ],
+            overallConnBlockFetchT: [10, 'timer'],
+            overallConnectionClass: [29, 'string'],
+            overallCumT: [27, 'timer'],
+            overallCumV2T: [53, 'timer'],
+            overallDecryptT: [12, 'timer'],
+            overallDomain: [5, 'string'],
+            overallDownloadMode: [
+                11,
+                {
+                    MANUAL: 1,
+                    FULL: 2,
+                    PREFETCH: 3,
+                    HEADER: 4,
+                    THUMBNAIL: 5,
+                    EXPRESS_PATH_DOWNLOAD: 6,
+                },
+            ],
+            overallDownloadOrigin: [
+                35,
+                {
+                    CHAT_PERSONAL: 1,
+                    CHAT_GROUP: 2,
+                    STATUS_USER: 3,
+                    STATUS_ADS: 4,
+                    PRODUCT_CATALOG: 5,
+                    GDPR: 6,
+                    STICKER_PICKER: 7,
+                    PROFILE_PICTURE: 8,
+                    BLOKS: 9,
+                    P2B: 10,
+                    MESSAGE_HISTORY_SYNC: 11,
+                    COMMUNITY: 12,
+                    CHANNEL: 13,
+                    BROADCAST: 14,
+                    INTEROP: 15,
+                },
+            ],
+            overallDownloadResult: [
+                25,
+                {
+                    OK: 1,
+                    ERROR_UNKNOWN: 2,
+                    ERROR_TIMEOUT: 3,
+                    ERROR_DNS: 4,
+                    ERROR_INSUFFICIENT_SPACE: 5,
+                    ERROR_TOO_OLD: 6,
+                    ERROR_CANNOT_RESUME: 7,
+                    ERROR_HASH_MISMATCH: 8,
+                    ERROR_INVALID_URL: 9,
+                    ERROR_OUTPUT_STREAM: 10,
+                    ERROR_CANCEL: 11,
+                    DEDUPED: 12,
+                    ERROR_ENC_HASH_MISMATCH: 14,
+                    PREFETCH_END: 15,
+                    ERROR_CANCEL_PROGRAMMATIC: 16,
+                    ERROR_MEDIA_CONN: 17,
+                    ERROR_THROTTLE: 18,
+                    ERROR_SSL: 19,
+                    ERROR_NETWORK: 20,
+                    ERROR_CONNECT: 21,
+                    ERROR_EP_NOTIFY_DECRYPTION_FAILURE: 22,
+                    SKIPPED_EP_DIFFERENT_POP: 23,
+                    SKIPPED_EP_AUTODOWNLOAD_DISABLED: 24,
+                    ERROR_SERVER: 25,
+                    ERROR_WATLS: 26,
+                    ERROR_INVALID_CODE: 27,
+                    ERROR_WAMSYS: 28,
+                    ERROR_GENERIC: 29,
+                    ERROR_CRONET: 30,
+                    ERROR_NO_CLIENT_NETWORK: 31,
+                    ERROR_HOST_SWITCH_REQUIRED: 32,
+                    ERROR_SUSPICIOUS_CONTENT: 33,
+                    ERROR_NO_ENCRYPTION_ALGORITHM: 34,
+                    ERROR_NO_ENCRYPTED_HASH: 35,
+                    ERROR_NO_MEDIA_HASH: 36,
+                    ERROR_NO_MEDIA_KEY: 37,
+                    ERROR_NO_SIDECAR: 38,
+                    ERROR_HASH_VERIFICATION_FAILURE: 39,
+                },
+            ],
+            overallFileValidationT: [13, 'timer'],
+            overallIsEncrypted: [28, 'boolean'],
+            overallIsFinal: [26, 'boolean'],
+            overallMediaSize: [7, 'number'],
+            overallMediaType: [
+                1,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            overallMmsVersion: [6, 'integer'],
+            overallQueueT: [9, 'timer'],
+            overallRetryCount: [3, 'integer'],
+            overallT: [8, 'timer'],
+            sleepModeAffected: [51, 'boolean'],
+            usedFallbackHint: [40, 'string'],
+        },
+        weight: 50,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcMediaRmr',
+        id: 1906,
+        props: {
+            messageMediaType: [
+                10,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            webcBrowserNetworkType: [2, 'string'],
+            webcBrowserStorageQuotaBytes: [11, 'integer'],
+            webcBrowserStorageQuotaUsedBytes: [12, 'integer'],
+            webcChatPosition: [1, 'integer'],
+            webcChatType: [
+                9,
+                {
+                    INDIVIDUAL: 0,
+                    GROUP: 1,
+                    BROADCAST_LIST: 2,
+                    COMMUNITY: 3,
+                    NEWSLETTER: 4,
+                },
+            ],
+            webcMediaRmrError: [8, 'boolean'],
+            webcMediaRmrT: [6, 'timer'],
+            webcMediaSize: [7, 'integer'],
+            webcMessageIndex: [3, 'integer'],
+            webcMessageT: [5, 'timer'],
+            webcRmrReason: [
+                14,
+                {
+                    OTHER: 0,
+                    MSG_CLICK: 1,
+                    STICKER_PANEL_ICON: 2,
+                    MEDIA_VIEWER: 3,
+                    VIDEO_STREAMING: 4,
+                    STATUS_V3: 5,
+                    MULTI_SELECT_DOWNLOAD: 6,
+                    DOCUMENT_DOWNLOAD: 7,
+                    PIP: 8,
+                    STICKER_PANEL_STICKER: 9,
+                    SEND_TO_CHAT: 10,
+                    UPLOAD: 11,
+                    MSG_INIT: 12,
+                    MSG_UPDATE: 13,
+                    MSG_DELETE: 14,
+                    MSG_RENDER: 15,
+                },
+            ],
+            webcRmrStatusCode: [13, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'BlockEventsFs',
+        id: 4288,
+        props: {
+            blockEntryPoint: [
+                1,
+                {
+                    OTHER: 0,
+                    CHAT: 1,
+                    PROFILE: 2,
+                    BLOCK_LIST: 3,
+                    TRIGGERED_BLOCK: 4,
+                    ACCOUNT_INFO: 5,
+                    CALL_LOG: 6,
+                    OVERFLOW_MENU: 7,
+                    GROUP_INFO: 8,
+                    BLOCK_DIALOG: 9,
+                    MESSAGE_MENU: 10,
+                    MEDIA_VIEWER: 11,
+                    OVERFLOW_MENU_BLOCK: 12,
+                    ONE_TO_ONE_OLD_SPAM_BANNER_BLOCK: 13,
+                    ONE_TO_ONE_SPAM_BANNER_BLOCK: 14,
+                    BIZ_SPAM_BANNER_BLOCK: 15,
+                    BLOCK_HEADER_CHAT: 16,
+                    OVERFLOW_MENU_REPORT: 17,
+                    ACCOUNT_INFO_REPORT: 18,
+                    BIZ_OLD_SPAM_BANNER_BLOCK: 19,
+                    CHAT_LIST_BLOCK: 20,
+                    CHAT_LIST_NOINSUB_BLOCK: 21,
+                    CHAT_LIST_CONTEXT_MENU_BLOCK: 22,
+                    NOTIFICATION_BLOCK: 23,
+                    ONE_TO_ONE_SPAM_BANNER_REPORT: 24,
+                    BIZ_EXTENSION_MENU: 25,
+                    VIEW_ONCE_VIEWER: 26,
+                    STATUS_OVERFLOW_MENU_REPORT: 27,
+                    ALBUM_MEDIA_MENU_REPORT: 28,
+                    STATUS_POST_REPORT: 29,
+                    MISSED_CALL_NOTIFICATION_BLOCK: 30,
+                    CHAT_FMX_CARD_BLOCK: 31,
+                    CHAT_FMX_CARD_BLOCK_SUSPICIOUS: 32,
+                    CHAT_FMX_CARD_SAFETY_TOOLS_BLOCK: 33,
+                    CHAT_FMX_CARD_SAFETY_TOOLS_BLOCK_SUSPICIOUS: 34,
+                    CHAT_FMX_CARD_SAFETY_TOOLS_REPORT: 35,
+                    CHAT_FMX_CARD_SAFETY_TOOLS_REPORT_SUSPICIOUS: 36,
+                    ACCOUNT_INFO_BLOCK: 37,
+                    CALL_LOG_BLOCK: 38,
+                    BIZ_BLOCK_HEADER_CHAT: 39,
+                    BIZ_OVERFLOW_MENU_BLOCK: 40,
+                    PSA_BANNER_BLOCK: 41,
+                    COMMENT_ACTIONS_BOTTOM_SHEET: 42,
+                    CALL_SPAM_DIALOG_REPORT: 43,
+                    CALL_SPAM_DIALOG_BLOCK: 44,
+                    BIZ_ACCOUNT_INFO_BLOCK: 45,
+                    BIZ_BLOCK_LIST: 46,
+                    BIZ_CALL_LOG_BLOCK: 47,
+                    ONGOING_CALL_LINK_BLOCK: 48,
+                    ONE_TO_ONE_BLOCKED_CHAT_COMPOSER: 49,
+                },
+            ],
+            blockEventActionType: [
+                2,
+                {
+                    BLOCK: 0,
+                    UNBLOCK: 1,
+                },
+            ],
+            blockEventIsSuspicious: [3, 'boolean'],
+            blockEventIsUnsub: [4, 'boolean'],
+            pastCall: [5, 'boolean'],
+            pastCallResult: [
+                6,
+                {
+                    INVALID: 0,
+                    CONNECTED: 1,
+                    REJECTED_BY_USER: 2,
+                    REJECTED_BY_SERVER: 3,
+                    MISSED: 4,
+                    BUSY: 5,
+                    SETUP_ERROR: 6,
+                    SERVER_NACK: 7,
+                    CALL_OFFER_ACK_NOT_RECEIVED: 8,
+                    MISSED_NO_RECEIPT: 9,
+                    ACCEPTED_BUT_NOT_CONNECTED: 10,
+                    CALL_CANCELED_CELLULAR_IN_PROGRESS: 11,
+                    CALL_CANCELED_AIRPLANE_MODE_ON: 12,
+                    CALL_CANCELED_NO_NETWORK: 13,
+                    CALL_OFFER_ACK_CORRUPT: 14,
+                    CALL_REJECTED_TOS: 15,
+                    CALL_REJECTED_E2E: 16,
+                    CALL_REJECTED_UNAVAILABLE: 17,
+                    CALL_CANCELED_OFFER_NOT_SENT: 18,
+                    PEER_SETUP_ERROR: 19,
+                    ACTIVE_ELSEWHERE: 20,
+                    NO_DECRYPTED_OFFER: 21,
+                    ACCEPTED_ELSEWHERE: 22,
+                    REJECTED_ELSEWHERE: 23,
+                    LONELY: 24,
+                    CALL_IS_FULL: 25,
+                    SILENCED: 26,
+                    CALL_MISSED_SILENCED: 27,
+                    CALL_DOES_NOT_EXIST_FOR_REJOIN: 28,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'SignCredential',
+        id: 2242,
+        props: {
+            applicationState: [
+                6,
+                {
+                    FOREGROUND: 1,
+                    BACKGROUND: 2,
+                },
+            ],
+            isFromWameta: [8, 'boolean'],
+            overallT: [4, 'timer'],
+            projectCode: [
+                7,
+                {
+                    DIT: 1,
+                    DIRECTORY_SEARCH: 2,
+                },
+            ],
+            retryCount: [2, 'integer'],
+            signCredentialResult: [
+                1,
+                {
+                    SUCCESS: 1,
+                    ERROR_BAD_REQUEST: 2,
+                    ERROR_SERVER: 3,
+                    ERROR_OTHER: 4,
+                    ERROR_CLIENT_NETWORK: 5,
+                },
+            ],
+            signCredentialT: [3, 'timer'],
+            waConnectedToChatd: [5, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PsBufferUpload',
+        id: 2244,
+        props: {
+            applicationState: [
+                6,
+                {
+                    FOREGROUND: 1,
+                    BACKGROUND: 2,
+                },
+            ],
+            isFromWamsys: [12, 'boolean'],
+            isUserSampled: [14, 'boolean'],
+            psBufferSequenceNumber: [13, 'integer'],
+            psBufferUploadHttpResponseCode: [3, 'integer'],
+            psBufferUploadResult: [
+                1,
+                {
+                    SUCCESS: 1,
+                    ERROR_PARSING: 2,
+                    ERROR_DECODING: 3,
+                    ERROR_CREDENTIAL: 4,
+                    ERROR_OTHER: 5,
+                    ERROR_CLIENT_NETWORK: 6,
+                    ERROR_WAIT_FOR_TOKEN: 7,
+                    ERROR_SERVER_OTHER: 8,
+                    SKIPPED_NO_NETWORK: 9,
+                    SKIPPED_NO_DATA: 10,
+                    ERROR_ACCESS_TOKEN: 11,
+                },
+            ],
+            psBufferUploadT: [2, 'timer'],
+            psDitheredT: [11, 'integer'],
+            psForceUpload: [10, 'boolean'],
+            psTokenNotReadyReason: [
+                4,
+                {
+                    NO_REASON: 0,
+                    REASON_UNKNOWN: 1,
+                    REASON_WAIT_FOR_FIRST_TOKEN: 2,
+                    REASON_INVALID_SHARED_KEY: 3,
+                    REASON_INVALID_FACTOR: 4,
+                    REASON_GEN_FACTOR_FAILURE: 5,
+                    REASON_COMPUTE_HMAC_FAILURE: 6,
+                    REASON_BLIND_FAILURE: 7,
+                    REASON_UNBLIND_FAILURE: 8,
+                    REASON_LAST_SIGNREQ_NETWORK_FAILURE: 9,
+                    REASON_LAST_SIGNREQ_SERVER_ERROR: 10,
+                    REASON_LAST_SIGNREQ_BAD_REQUEST: 11,
+                    REASON_LAST_SIGNREQ_OTHER_ERROR: 12,
+                    REASON_WAIT_FOR_GEN_TOKEN: 13,
+                    REASON_GEN_SHAREDKEY_FAILURE: 14,
+                    REASON_WAIT_FOR_GEN_FIRST_TOKEN: 15,
+                },
+            ],
+            psUploadReason: [
+                9,
+                {
+                    REASON_PS_PINGER: 0,
+                    REASON_PS_OFFCYCLE: 1,
+                },
+            ],
+            waConnectedToChatd: [5, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'EditMessageSend',
+        id: 3990,
+        props: {
+            editDuration: [1, 'integer'],
+            editType: [
+                2,
+                {
+                    NOT_EDITED: 0,
+                    EDITED: 1,
+                    SENDER_REVOKE: 2,
+                    ADMIN_REVOKE: 3,
+                },
+            ],
+            mediaType: [
+                8,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messageSendResultIsTerminal: [3, 'boolean'],
+            messageType: [
+                4,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            resendCount: [5, 'integer'],
+            retryCount: [6, 'integer'],
+            typeOfGroup: [
+                9,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MessageSend',
+        id: 854,
+        props: {
+            agentEngagementType: [
+                49,
+                {
+                    DIRECT_CHAT: 0,
+                    INVOKED: 1,
+                    MEMBER: 2,
+                },
+            ],
+            botType: [
+                55,
+                {
+                    UNKNOWN: 0,
+                    METABOT: 1,
+                    BOT_1P_BIZ: 2,
+                    BOT_3P_BIZ: 3,
+                },
+            ],
+            chatOrigins: [
+                58,
+                {
+                    LID_USERNAME: 1,
+                    LID_CTWA: 2,
+                    OTHERS: 3,
+                },
+            ],
+            deviceCount: [31, 'integer'],
+            deviceSizeBucket: [
+                25,
+                {
+                    LT32: 1,
+                    LT64: 2,
+                    LT128: 3,
+                    LT256: 4,
+                    LT512: 5,
+                    LT1000: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            disappearingChatInitiator: [
+                30,
+                {
+                    CHAT: 1,
+                    INITIATED_BY_ME: 2,
+                    INITIATED_BY_OTHER: 3,
+                    CHAT_PICKER: 4,
+                    BIZ_UPGRADE_FB_HOSTING: 5,
+                },
+            ],
+            e2eBackfill: [23, 'boolean'],
+            e2eCiphertextType: [
+                10,
+                {
+                    MESSAGE: 0,
+                    PREKEY_MESSAGE: 1,
+                    SENDER_KEY_MESSAGE: 2,
+                    MESSAGE_SECRET_MESSAGE: 3,
+                },
+            ],
+            e2eCiphertextVersion: [9, 'integer'],
+            e2eFailureReason: [
+                46,
+                {
+                    INVALID_MESSAGE: 0,
+                    LEGACY_MESSAGE: 1,
+                    INVALID_VERSION: 2,
+                    PRE_KEY_MESSAGE_MISSING_PRE_KEY: 3,
+                    PRE_KEY_MESSAGE_INVALID_KEY: 4,
+                    UNTRUSTED_IDENTITY: 5,
+                    NO_SESSION_AVAILABLE: 6,
+                    PLAINTEXT_BYTE_MISMATCH: 7,
+                    UNKNOWN_CIPHERTEXT_TYPE: 8,
+                    UNKNOWN_CIPHERTEXT_VERSION: 9,
+                    INVALID_PADDING: 10,
+                    INVALID_PROTOCOL_BUFFER: 11,
+                    INVALID_NUMBER_OF_MESSAGE_TYPES: 12,
+                    INVALID_IMAGE_FILE_LENGTH: 13,
+                    INVALID_IMAGE_FILE_SHA256: 14,
+                    INVALID_IMAGE_MEDIA_URL: 15,
+                    INVALID_IMAGE_MEDIA_KEY: 16,
+                    INVALID_IMAGE_MIME_TYPE: 17,
+                    UNKNOWN_V2_TAGS: 18,
+                    INVALID_EDIT_VERSION: 19,
+                    INVALID_HSM_NAMESPACE: 20,
+                    INVALID_HSM_ELEMENT: 21,
+                    UNKNOWN_PROTOCOL_MESSAGE_TYPE: 22,
+                    DUPLICATE_MESSAGE: 23,
+                    FINGERPRINT_IDENTITY_MISMATCH: 24,
+                    FINGERPRINT_VERSION_MISMATCH: 25,
+                    INVALID_ARGUMENT: 26,
+                    INVALID_KEY: 27,
+                    INVALID_KEY_ID: 28,
+                    INVALID_MAC: 29,
+                    NO_MEMORY: 30,
+                    STALE_KEY_EXCHANGE: 31,
+                    VRF_SIGNATURE_VERIFICATION_FAILED: 32,
+                    ERROR_MINIMUM_VALUE: 33,
+                    ERROR_UNKNOWN: 34,
+                    INVALID_BROADCAST_STANZA_ATTRIBUTE: 35,
+                    INVALID_LIST_REPLY_MESSAGE: 36,
+                    INVALID_LIST_REPLY_ROW_IDENTIFIER: 37,
+                    INVALID_BUTTONS_RESPONSE_MESSAGE: 38,
+                    INVALID_BUTTONS_RESPONSE_BUTTON_IDENTIFIER: 39,
+                    INVALID_ORDER_MESSAGE: 40,
+                    ERROR_CANCELLED: 41,
+                    FUTURE_MESSAGE: 42,
+                    INVALID_EMPTY_PROTOBUF_NOT_ALLOWED: 43,
+                    SELF_SEND: 44,
+                    INVALID_MEDIA_MIME_TYPE_TEMPLATE_MESSAGE: 45,
+                    INVALID_MEDIA_ENC_HASH: 46,
+                    INVALID_IDENTITY: 47,
+                    PASSTHROUGH: 48,
+                    NOT_IN_PENDING_DEVICES: 49,
+                    EDIT_TYPE_AND_PROTOCOL_MISMATCH: 50,
+                    DECRYPTION_FAILED: 51,
+                    DESERIALIZE_INVALID_PROTO_FORMAT: 52,
+                    DESERIALIZE_RATCHET_KEY_BAD_FORMAT: 53,
+                    DESERIALIZE_PK_INVALID_PROTO_FORMAT: 54,
+                    DESERIALZE_PK_KEY_BAD_FORMAT: 55,
+                    TOO_MANY_MESSAGES_IN_FUTURE: 56,
+                    EMPTY_VERSION_CONTENT_SUFFIX: 57,
+                    CONTENT_EXCEEDED_EXPECTED_LENGTH: 58,
+                    GRP_INVALID_PROTO_FORMAT: 59,
+                    GRP_INVALID_KEY_FORMAT: 60,
+                    GRP_VERSION_CONTENT_EMPTY: 61,
+                    GRP_INVALID_VERSION_CONTENT_LENGTH: 62,
+                    GRP_SENDER_KEY_INVALID_PROTO_FORMAT: 63,
+                    GRP_SENDER_KEY_PROTO_ERROR: 64,
+                    GRP_TOO_MANY_MESSAGES_IN_FUTURE: 65,
+                    MISSING_MESSAGE_SECRET: 66,
+                    MESSAGE_SECRET_INVALID: 67,
+                    INVALID_REACTION_TEXT: 68,
+                    UNSUPPORTED_MESSAGE_TYPE: 69,
+                    UNSUPPORTED_IN_INTEROP: 70,
+                    TARGET_MESSAGE_NOT_FOUND: 71,
+                    STATUS_FROM_HOSTED_DEVICE_UNSUPPORTED: 72,
+                    GROUP_MESSAGE_FROM_HOSTED_DEVICE_UNSUPPORTED: 73,
+                    BROADCAST_FROM_HOSTED_DEVICE_UNSUPPORTED: 74,
+                    LIVE_LOCATION_FROM_HOSTED_DEVICE_UNSUPPORTED: 75,
+                    MESSAGE_TYPE_MISMATCH: 76,
+                    ERROR_SESSION_STATE_UNACKED_PKMSG_GET_BASE_KEY: 77,
+                    ERROR_SIGNAL_MESSAGE_GET_SENDER_RATCHET_KEY: 78,
+                    ERROR_SESSION_STATE_GET_ROOT_KEY: 79,
+                    ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY_PAIR: 80,
+                    ERROR_SESSION_STATE_SET_SENDER_CHAIN_KEY: 81,
+                    ERROR_SESSION_STATE_FIND_RECEIVER_CHAIN: 82,
+                    ERROR_SESSION_RECORD_DESERIALIZE: 83,
+                    ERROR_SENDER_KEY_STATE_REMOVE_SENDER_MESSAGE_KEY: 84,
+                    ERROR_EMPTY_PLAINTEXT_DATA: 85,
+                    ERROR_MAC_LEN_MISMATCH: 86,
+                    ERROR_INVALID_MAC_LEN: 87,
+                    ERROR_INVALID_SIGNATURE_LEN: 88,
+                    ERROR_SENDER_KEY_LOAD_KEY: 89,
+                    ERROR_FAST_RATCHET_SENDER_KEY_LOAD_KEY: 90,
+                    ERROR_UNKNOWN_LOAD_KEY: 91,
+                    ERROR_UNKNOWN_LOAD_SESSION: 92,
+                    ERROR_SESSION_RECORD_GET_STATE: 93,
+                    ERROR_SESSION_STATE_GET_SENDER_CHAIN_KEY: 94,
+                    ERROR_INVALID_KEY_MATEIRAL_DATA_LEN: 95,
+                    ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY: 96,
+                    ERROR_SESSION_STATE_GET_LOCAL_IDENTITY_KEY: 97,
+                    ERROR_SESSION_STATE_GET_REMOTE_IDENTITY_KEY: 98,
+                },
+            ],
+            editDuration: [43, 'integer'],
+            editType: [
+                44,
+                {
+                    NOT_EDITED: 0,
+                    EDITED: 1,
+                    SENDER_REVOKE: 2,
+                    ADMIN_REVOKE: 3,
+                },
+            ],
+            ephemeralityDuration: [21, 'integer'],
+            ephemeralityInitiator: [
+                47,
+                {
+                    INITIATED_BY_ME: 1,
+                    INITIATED_BY_OTHER: 2,
+                    BIZ_UPGRADE_FB_HOSTING: 3,
+                },
+            ],
+            ephemeralityTriggerAction: [
+                48,
+                {
+                    UNKNOWN: 0,
+                    CHAT_SETTINGS: 1,
+                    ACCOUNT_SETTINGS: 2,
+                    BULK_CHANGE: 3,
+                    BIZ_SUPPORTS_FB_HOSTING: 4,
+                },
+            ],
+            excessPayloadKbSize: [40, 'integer'],
+            fastForwardEnabled: [15, 'boolean'],
+            hasUsername: [59, 'boolean'],
+            isAComment: [54, 'boolean'],
+            isAReply: [35, 'boolean'],
+            isFromWamsys: [19, 'boolean'],
+            isLid: [39, 'boolean'],
+            isViewOnce: [22, 'boolean'],
+            localAddressingMode: [
+                53,
+                {
+                    PN: 1,
+                    LID: 2,
+                },
+            ],
+            mediaCaptionPresent: [8, 'boolean'],
+            messageDistributionType: [
+                41,
+                {
+                    REGULAR_MESSAGE: 0,
+                    DIRECT_MESSAGE: 1,
+                    SENDER_KEY_DISTRIBUTION_MESSAGE: 2,
+                },
+            ],
+            messageForwardAgeT: [14, 'timer'],
+            messageIsFanout: [5, 'boolean'],
+            messageIsFastForward: [13, 'boolean'],
+            messageIsFirstUserMessage: [26, 'boolean'],
+            messageIsForward: [4, 'boolean'],
+            messageIsInternational: [7, 'boolean'],
+            messageIsInvisible: [29, 'boolean'],
+            messageIsRevoke: [24, 'boolean'],
+            messageKeyHash: [57, 'string'],
+            messageMediaType: [
+                3,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messageSendOptUploadEnabled: [12, 'boolean'],
+            messageSendResult: [
+                1,
+                {
+                    OK: 1,
+                    ERROR_UNKNOWN: 3,
+                    ERROR_NETWORK: 4,
+                    ERROR_EXPIRED: 5,
+                    ERROR_CANCELLED: 6,
+                    ERROR_UPLOAD: 7,
+                    ERROR_BACKFILL_USYNC_FAILED: 8,
+                    ERROR_PAYLOAD_TOO_BIG: 9,
+                    ERROR_LOCATION: 10,
+                    ERROR_INVALID_MESSAGE: 11,
+                    ERROR_E2EE: 12,
+                    ERROR_INVALID_PROTOBUF: 13,
+                    SERVER_ERROR: 14,
+                    EPHEMERALLY_EXPIRED: 15,
+                },
+            ],
+            messageSendResultIsTerminal: [17, 'boolean'],
+            messageSendT: [11, 'timer'],
+            messageType: [
+                2,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            networkWasDisconnected: [37, 'boolean'],
+            oppositeVisibleIdentification: [
+                60,
+                {
+                    PHONE_NUMBER: 1,
+                    SAVED_CONTACT_NAME: 2,
+                    USERNAME: 3,
+                    MASKED_PHONE_NUMBER: 4,
+                    VERIFIED_BUSINESS_NAME: 5,
+                    PLACEHOLDER: 6,
+                    PUSHNAME: 7,
+                },
+            ],
+            overallMediaSize: [42, 'number'],
+            participantCount: [32, 'integer'],
+            receiverDefaultDisappearingDuration: [28, 'integer'],
+            resendCount: [16, 'integer'],
+            retryCount: [6, 'integer'],
+            revokeDuration: [33, 'integer'],
+            revokeType: [
+                34,
+                {
+                    SENDER: 0,
+                    ADMIN: 1,
+                },
+            ],
+            sendButtonPressT: [45, 'integer'],
+            senderDefaultDisappearingDuration: [27, 'integer'],
+            serverErrorCode: [56, 'integer'],
+            stickerIsAi: [50, 'boolean'],
+            stickerIsAvatar: [38, 'boolean'],
+            stickerIsFirstParty: [18, 'boolean'],
+            stickerIsFromStickerMaker: [51, 'boolean'],
+            stickerMakerSourceType: [
+                52,
+                {
+                    CUTOUT_IMAGE: 1,
+                    WEB_STICKER_MAKER: 2,
+                    IOS_STICKER_MAKER: 3,
+                    ANDROID_STICKER_MAKER: 4,
+                    TRANSPARENT_IMAGE: 5,
+                },
+            ],
+            thumbSize: [20, 'number'],
+            typeOfGroup: [
+                36,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'RevokeMessageSend',
+        id: 3656,
+        props: {
+            messageSendResultIsTerminal: [1, 'boolean'],
+            messageType: [
+                2,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            resendCount: [3, 'integer'],
+            retryCount: [4, 'integer'],
+            revokeDuration: [5, 'integer'],
+            revokeType: [
+                6,
+                {
+                    SENDER: 0,
+                    ADMIN: 1,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'BotBizJourney',
+        id: 4868,
+        props: {
+            appSessionId: [1, 'string'],
+            botBizActionType: [
+                5,
+                {
+                    BOT_BIZ_CARD_CLICK: 1,
+                    BOT_BIZ_CARD_MESSAGE_CLICK: 2,
+                    BOT_BIZ_CARD_VIEW_AI_CLICK: 3,
+                    BOT_BIZ_DEEPLINK_CLICK: 4,
+                    BOT_BIZ_NUX_APPEAR: 5,
+                    BOT_BIZ_NUX_DISMISS: 6,
+                    BOT_BIZ_NUX_SELECT: 7,
+                    BOT_BIZ_INFO_CHAT_CLICK: 8,
+                },
+            ],
+            botBizEntryPoint: [
+                6,
+                {
+                    SHARED_BOT_BIZ_CARD: 1,
+                    SHARED_BOT_BIZ_DEEPLINK: 2,
+                    BOT_BIZ_CHAT: 3,
+                },
+            ],
+            botBizType: [
+                7,
+                {
+                    BOT_BIZ_3P: 1,
+                    BOT_BIZ_1P: 2,
+                },
+            ],
+            botType: [
+                4,
+                {
+                    UNKNOWN: 0,
+                    METABOT: 1,
+                    BOT_1P_BIZ: 2,
+                    BOT_3P_BIZ: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'TsExternal',
+        id: 4574,
+        props: {
+            relativeTimestampMs: [1, 'integer'],
+            tsDuration: [2, 'integer'],
+            tsExternalEventSource: [
+                3,
+                {
+                    CALL: 1,
+                    VIDEO: 2,
+                    PTT_RECORD: 3,
+                    PTT_PLAY: 4,
+                },
+            ],
+            tsSessionId: [4, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'DeepLinkConversion',
+        id: 1432,
+        props: {
+            callInitiator: [
+                8,
+                {
+                    BUSINESS: 0,
+                    CONSUMER: 1,
+                },
+            ],
+            ctwaChatCreationMode: [
+                4,
+                {
+                    JID: 0,
+                    LID: 1,
+                },
+            ],
+            ctwaConversionType: [
+                3,
+                {
+                    FIRST_MESSAGE: 0,
+                    DEEP_CONVERSATION: 1,
+                    FIRST_BIZ_REPLY: 2,
+                    FIRST_CALL: 3,
+                    FIRST_LONG_CALL: 4,
+                    SECOND_MESSAGE: 5,
+                    SECOND_BIZ_REPLY: 6,
+                    THIRD_MESSAGE: 7,
+                    CART_RECEIVED: 8,
+                    ORDER_CREATED: 9,
+                    FIRST_MESSAGE_CONTINUATION: 10,
+                    FIRST_BIZ_REPLY_CONTINUATION: 11,
+                    SECOND_MESSAGE_CONTINUATION: 12,
+                    SECOND_BIZ_REPLY_CONTINUATION: 13,
+                    THIRD_MESSAGE_CONTINUATION: 14,
+                },
+            ],
+            deepLinkConversionData: [2, 'string'],
+            deepLinkConversionSource: [1, 'string'],
+            isPriority: [7, 'boolean'],
+            trustBannerAction: [
+                5,
+                {
+                    VIEWED: 0,
+                    DISMISSED: 1,
+                },
+            ],
+            trustBannerType: [6, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'EphemeralOutOfSyncInfo',
+        id: 3892,
+        props: {
+            groupSizeBucket: [
+                1,
+                {
+                    SMALL: 1,
+                    MEDIUM: 2,
+                    LARGE: 3,
+                    EXTRA_LARGE: 4,
+                    XX_LARGE: 5,
+                    XXX_LARGE: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            incomingMessageEphemeralityDuration: [2, 'integer'],
+            isAGroup: [3, 'boolean'],
+            isNewThreadForUser: [5, 'boolean'],
+            otherDefaultModeDuration: [6, 'integer'],
+            threadEphemeralityDuration: [7, 'integer'],
+            threadId: [8, 'string'],
+            userDefaultModeDuration: [9, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'EphemeralSyncResponseReceive',
+        id: 4780,
+        props: {
+            clientDisappearingModeInitiator: [
+                1,
+                {
+                    CHAT: 1,
+                    INITIATED_BY_ME: 2,
+                    INITIATED_BY_OTHER: 3,
+                    CHAT_PICKER: 4,
+                    BIZ_UPGRADE_FB_HOSTING: 5,
+                },
+            ],
+            clientEphemeralityDuration: [2, 'integer'],
+            clientEphemeralityInitiator: [
+                3,
+                {
+                    INITIATED_BY_ME: 1,
+                    INITIATED_BY_OTHER: 2,
+                    BIZ_UPGRADE_FB_HOSTING: 3,
+                },
+            ],
+            clientEphemeralitySettingTimestamp: [4, 'integer'],
+            clientEphemeralityTriggerAction: [
+                5,
+                {
+                    UNKNOWN: 0,
+                    CHAT_SETTINGS: 1,
+                    ACCOUNT_SETTINGS: 2,
+                    BULK_CHANGE: 3,
+                    BIZ_SUPPORTS_FB_HOSTING: 4,
+                },
+            ],
+            esrDisappearingModeInitiator: [
+                6,
+                {
+                    CHAT: 1,
+                    INITIATED_BY_ME: 2,
+                    INITIATED_BY_OTHER: 3,
+                    CHAT_PICKER: 4,
+                    BIZ_UPGRADE_FB_HOSTING: 5,
+                },
+            ],
+            esrEphemeralityDuration: [7, 'integer'],
+            esrEphemeralityInitiator: [
+                8,
+                {
+                    INITIATED_BY_ME: 1,
+                    INITIATED_BY_OTHER: 2,
+                    BIZ_UPGRADE_FB_HOSTING: 3,
+                },
+            ],
+            esrEphemeralitySettingTimestamp: [9, 'integer'],
+            esrEphemeralityTriggerAction: [
+                10,
+                {
+                    UNKNOWN: 0,
+                    CHAT_SETTINGS: 1,
+                    ACCOUNT_SETTINGS: 2,
+                    BULK_CHANGE: 3,
+                    BIZ_SUPPORTS_FB_HOSTING: 4,
+                },
+            ],
+            esrFailureReason: [
+                11,
+                {
+                    ESR_ABPROP_OFF: 1,
+                    DM_RELIABILITY_ABPROP_OFF: 2,
+                    INVALID_MESSAGE_TYPE: 3,
+                    OLDER_EPHEMERAL_SETTING_TIMESTAMP: 4,
+                    NO_EPHEMERAL_INFO: 5,
+                    ATTEMPTS_EXHAUSTED: 6,
+                    NO_USER_INFO: 7,
+                    NO_CHAT_SESSION: 8,
+                    INVALID_EPHEMERAL_DURATION: 9,
+                },
+            ],
+            esrResolveResult: [
+                12,
+                {
+                    SUCCESS: 1,
+                    ERROR: 2,
+                },
+            ],
+            isAGroup: [13, 'boolean'],
+            threadId: [14, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'EphemeralSyncResponseSend',
+        id: 4778,
+        props: {
+            clientDisappearingModeInitiator: [
+                1,
+                {
+                    CHAT: 1,
+                    INITIATED_BY_ME: 2,
+                    INITIATED_BY_OTHER: 3,
+                    CHAT_PICKER: 4,
+                    BIZ_UPGRADE_FB_HOSTING: 5,
+                },
+            ],
+            clientEphemeralityDuration: [2, 'integer'],
+            clientEphemeralityInitiator: [
+                3,
+                {
+                    INITIATED_BY_ME: 1,
+                    INITIATED_BY_OTHER: 2,
+                    BIZ_UPGRADE_FB_HOSTING: 3,
+                },
+            ],
+            clientEphemeralitySettingTimestamp: [4, 'integer'],
+            clientEphemeralityTriggerAction: [
+                5,
+                {
+                    UNKNOWN: 0,
+                    CHAT_SETTINGS: 1,
+                    ACCOUNT_SETTINGS: 2,
+                    BULK_CHANGE: 3,
+                    BIZ_SUPPORTS_FB_HOSTING: 4,
+                },
+            ],
+            esrDisappearingModeInitiator: [
+                6,
+                {
+                    CHAT: 1,
+                    INITIATED_BY_ME: 2,
+                    INITIATED_BY_OTHER: 3,
+                    CHAT_PICKER: 4,
+                    BIZ_UPGRADE_FB_HOSTING: 5,
+                },
+            ],
+            esrEphemeralityDuration: [7, 'integer'],
+            esrEphemeralityInitiator: [
+                8,
+                {
+                    INITIATED_BY_ME: 1,
+                    INITIATED_BY_OTHER: 2,
+                    BIZ_UPGRADE_FB_HOSTING: 3,
+                },
+            ],
+            esrEphemeralitySettingTimestamp: [9, 'integer'],
+            esrEphemeralityTriggerAction: [
+                10,
+                {
+                    UNKNOWN: 0,
+                    CHAT_SETTINGS: 1,
+                    ACCOUNT_SETTINGS: 2,
+                    BULK_CHANGE: 3,
+                    BIZ_SUPPORTS_FB_HOSTING: 4,
+                },
+            ],
+            esrFailureReason: [
+                11,
+                {
+                    ESR_ABPROP_OFF: 1,
+                    DM_RELIABILITY_ABPROP_OFF: 2,
+                    INVALID_MESSAGE_TYPE: 3,
+                    OLDER_EPHEMERAL_SETTING_TIMESTAMP: 4,
+                    NO_EPHEMERAL_INFO: 5,
+                    ATTEMPTS_EXHAUSTED: 6,
+                    NO_USER_INFO: 7,
+                    NO_CHAT_SESSION: 8,
+                    INVALID_EPHEMERAL_DURATION: 9,
+                },
+            ],
+            esrSendAttempt: [12, 'integer'],
+            esrSendResult: [
+                13,
+                {
+                    SUCCESS: 1,
+                    ERROR: 2,
+                },
+            ],
+            isAGroup: [14, 'boolean'],
+            messageDisappearingModeInitiator: [
+                15,
+                {
+                    CHAT: 1,
+                    INITIATED_BY_ME: 2,
+                    INITIATED_BY_OTHER: 3,
+                    CHAT_PICKER: 4,
+                    BIZ_UPGRADE_FB_HOSTING: 5,
+                },
+            ],
+            messageEphemeralityDuration: [16, 'integer'],
+            messageEphemeralityInitiator: [
+                17,
+                {
+                    INITIATED_BY_ME: 1,
+                    INITIATED_BY_OTHER: 2,
+                    BIZ_UPGRADE_FB_HOSTING: 3,
+                },
+            ],
+            messageEphemeralitySettingTimestamp: [18, 'integer'],
+            messageEphemeralityTriggerAction: [
+                19,
+                {
+                    UNKNOWN: 0,
+                    CHAT_SETTINGS: 1,
+                    ACCOUNT_SETTINGS: 2,
+                    BULK_CHANGE: 3,
+                    BIZ_SUPPORTS_FB_HOSTING: 4,
+                },
+            ],
+            threadId: [20, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChannelGapDetected',
+        id: 4768,
+        props: {
+            channelIsForeground: [1, 'boolean'],
+            channelUserType: [
+                2,
+                {
+                    OWNER: 1,
+                    ADMIN: 2,
+                    FOLLOWER: 3,
+                    GUEST: 4,
+                },
+            ],
+            cid: [3, 'string'],
+            gapSize: [4, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChannelMessageHistoryRequest',
+        id: 4770,
+        props: {
+            batchSize: [1, 'integer'],
+            channelMessageHistoryRequestType: [
+                2,
+                {
+                    UNKNOWN: 0,
+                    OLDER: 1,
+                    NEWER: 2,
+                    LATEST: 3,
+                    EXACT: 4,
+                    GAP: 5,
+                },
+            ],
+            channelUserType: [
+                3,
+                {
+                    OWNER: 1,
+                    ADMIN: 2,
+                    FOLLOWER: 3,
+                    GUEST: 4,
+                },
+            ],
+            cid: [4, 'string'],
+            processingDurationT: [5, 'timer'],
+            requestDurationT: [6, 'timer'],
+            requestSuccessful: [7, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChannelCoreEvent',
+        id: 4692,
+        props: {
+            channelCoreEventSequenceNumber: [8, 'integer'],
+            channelCoreEventType: [
+                1,
+                {
+                    FOLLOW: 1,
+                    UNFOLLOW: 2,
+                    MUTE: 3,
+                    UNMUTE: 4,
+                },
+            ],
+            channelDirectorySessionId: [7, 'integer'],
+            channelEntryPoint: [
+                2,
+                {
+                    UNKNOWN: 0,
+                    UPDATES_TAB: 1,
+                    DIRECTORY: 2,
+                    LINK: 3,
+                    DEEPLINK: 4,
+                    FORWARDED_MESSAGE: 5,
+                    DIRECTORY_SEARCH: 6,
+                    RECOMMENDED_LIST: 7,
+                    NOTIFICATION: 8,
+                    UPDATES_TAB_SEARCH: 9,
+                    STATUS: 10,
+                    ADMIN_INVITE_MESSAGE: 11,
+                    MEDIA_BROWSER: 12,
+                    SIMILAR_CHANNEL: 13,
+                },
+            ],
+            channelEntryPointApp: [
+                3,
+                {
+                    EXTERNAL_UNKNOWN: 1,
+                    WHATSAPP: 2,
+                },
+            ],
+            channelEntryPointMetadata: [
+                10,
+                {
+                    STATUS_HEADER: 1,
+                    LINK_TOOLTIP: 2,
+                    LINK_BUTTON: 3,
+                    POST_TOOLTIP: 4,
+                },
+            ],
+            channelEventUnit: [
+                12,
+                {
+                    RECOMMENDED_CHANNELS: 1,
+                    SIMILAR_CHANNELS: 2,
+                },
+            ],
+            cid: [4, 'string'],
+            directoryChannelIndex: [9, 'integer'],
+            entryPointMetadata: [5, 'string'],
+            eventSurface: [
+                6,
+                {
+                    CHANNEL_UPDATES_HOME: 1,
+                    CHANNEL_THREAD: 2,
+                    CHANNEL_DIRECTORY: 3,
+                    CHANNEL_DIRECTORY_SEARCH: 4,
+                    CHANNEL_PROFILE: 5,
+                    CHANNEL_UPDATES_HOME_SEARCH: 6,
+                },
+            ],
+            similarChannelsSessionId: [13, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'UserNoticeError',
+        id: 2474,
+        props: {
+            noticeType: [
+                4,
+                {
+                    LEGACY_USER_NOTICE: 0,
+                    BADGED_USER_NOTICE: 1,
+                    PDFN_DISCLOSURE: 2,
+                },
+            ],
+            userNoticeContentVersion: [2, 'integer'],
+            userNoticeErrorEvent: [
+                3,
+                {
+                    INVALID_STANZA: 1,
+                    JSON_FETCH: 2,
+                    JSON_PARSE: 3,
+                    IMAGE_FETCH: 4,
+                    NO_ELIGIBLE_DISCLOSURE: 5,
+                    DISCLOSURE_STAGE_FETCH: 6,
+                    UI_TEMPLATE_MISMATCHED: 7,
+                    ERROR_UNKNOWN: 8,
+                    SYNC_STAGE_MISMATCH: 9,
+                    IMAGE_FETCH_400: 10,
+                    JSON_FETCH_400: 11,
+                    JSON_FETCH_REDIRECT: 12,
+                    IMAGE_FETCH_REDIRECT: 13,
+                    IMAGE_FETCH_FORBIDDEN: 14,
+                    JSON_FETCH_FORBIDDEN: 15,
+                },
+            ],
+            userNoticeId: [1, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'StickerCommonQueryToStaticServer',
+        id: 2740,
+        props: {
+            httpResponseCode: [2, 'integer'],
+            params: [3, 'string'],
+            queryLatencyMs: [4, 'timer'],
+            queryType: [
+                1,
+                {
+                    STICKER_STORE_DATA: 0,
+                    PREVIEW_IMAGE_DOWNLOAD: 1,
+                    STICKER_PACK_DATA: 2,
+                    STICKER_SEARCH: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdExpansionAgentBrowserMdId',
+        id: 3390,
+        props: {
+            agentId: [1, 'string'],
+            browserId: [2, 'string'],
+            companionMdId: [5, 'integer'],
+            isCustomAgentName: [6, 'boolean'],
+            isNewAgent: [9, 'boolean'],
+            loginTimestamp: [3, 'integer'],
+            logoutTimestamp: [4, 'integer'],
+            mdLinkedCount: [8, 'integer'],
+            multideviceAction: [
+                7,
+                {
+                    LOGIN: 0,
+                    LOGOUT: 1,
+                    CUSTOM_AGENT_NAME: 2,
+                    MESSAGE_INFO: 3,
+                    ACTIVE: 4,
+                    DELETE: 5,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PsPhoneNumberHyperlink',
+        id: 3266,
+        props: {
+            isPhoneNumHyperlinkOwner: [1, 'boolean'],
+            phoneNumHyperlinkAction: [
+                2,
+                {
+                    PHONE_NUM_HYPERLINK_MSG_RECEIVED: 1,
+                    LONG_PRESS_PHONE_NUM_HYPERLINK: 2,
+                    CLICK_PHONE_NUM_HYPERLINK: 3,
+                    CLICK_CALL: 4,
+                    CLICK_ADD_TO_CONTACTS: 5,
+                    CLICK_MESSAGE_ON_WHATSAPP: 6,
+                    CLICK_COPY_PHONE_NUMBER: 7,
+                    CLOSE_DIALOG_BOX: 8,
+                    MESSAGE_SENT: 9,
+                    CLICK_CALL_ON_WHATSAPP: 10,
+                },
+            ],
+            phoneNumberStatusOnWa: [3, 'boolean'],
+            sequenceNumber: [4, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 113760892,
+    },
+    {
+        name: 'GroupCreateC',
+        id: 156,
+        props: {},
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'SendRevokeMessage',
+        id: 1348,
+        props: {
+            messageMediaType: [
+                2,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messageType: [
+                1,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            revokeSendDelay: [3, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'UtmMessageSend',
+        id: 4018,
+        props: {
+            businessPhoneNumber: [1, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 0,
+    },
+    {
+        name: 'WebcMessageSend',
+        id: 2072,
+        props: {
+            messageIsForward: [3, 'boolean'],
+            messageMediaType: [
+                2,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messageSendT: [4, 'timer'],
+            messageType: [
+                1,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdChatAssignmentSecondaryAction',
+        id: 3716,
+        props: {
+            mdChatAssignmentSecondaryActionAgentId: [1, 'string'],
+            mdChatAssignmentSecondaryActionAssignmentType: [
+                8,
+                {
+                    ASSIGNED: 0,
+                    UNASSIGNED: 1,
+                },
+            ],
+            mdChatAssignmentSecondaryActionBrowserId: [2, 'string'],
+            mdChatAssignmentSecondaryActionChatType: [
+                3,
+                {
+                    GROUP: 0,
+                    BROADCAST_LIST: 1,
+                    INDIVIDUAL: 2,
+                    COMMUNITY: 3,
+                    CHANNEL: 4,
+                    INTEROP: 5,
+                },
+            ],
+            mdChatAssignmentSecondaryActionError: [
+                4,
+                {
+                    ERROR_FETCHING_AGENT_NAME: 0,
+                    ERROR_FETCHING_CHAT: 1,
+                    ERROR_OTHER: 2,
+                },
+            ],
+            mdChatAssignmentSecondaryActionMdId: [5, 'integer'],
+            mdChatAssignmentSecondaryActionSource: [
+                6,
+                {
+                    NONE: 0,
+                    BOOTSTRAP: 1,
+                },
+            ],
+            mdChatAssignmentSecondaryActionType: [
+                7,
+                {
+                    ACTION_SYSTEM_MESSAGE_ADDED_TO_CHAT_HISTORY: 0,
+                    ACTION_SYSTEM_MESSAGE_CREATION_ERROR: 1,
+                    ACTION_SYSTEM_MESSAGE_RENDERED: 2,
+                    ACTION_CHAT_STATUS_TICKER_SHOWN: 3,
+                    ACTION_TOOLTIP_SHOWN: 4,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdChatAssignment',
+        id: 3752,
+        props: {
+            assignerAgentId: [1, 'string'],
+            assignerBrowserId: [2, 'string'],
+            assignerMdId: [3, 'integer'],
+            chatAssignmentAction: [
+                4,
+                {
+                    ACTION_ASSIGNED: 0,
+                    ACTION_UNASSIGNED: 1,
+                    ACTION_REASSIGNED: 2,
+                },
+            ],
+            chatAssignmentAgentId: [5, 'string'],
+            chatAssignmentBrowserId: [6, 'string'],
+            chatAssignmentChatType: [
+                7,
+                {
+                    INDIVIDUAL: 0,
+                    GROUP: 1,
+                    COMMUNITY: 2,
+                    CHANNEL: 3,
+                },
+            ],
+            chatAssignmentEntryPoint: [
+                8,
+                {
+                    CONVERSATION_OVERFLOW_MENU: 0,
+                    CONTACT_INFO_SCREEN: 1,
+                    MULTI_SELECT: 2,
+                    SYSTEM_MESSAGE: 3,
+                    CHAT_LIST_SWIPE: 4,
+                },
+            ],
+            chatAssignmentMdId: [9, 'integer'],
+            chatsCnt: [10, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'OtpRetriever',
+        id: 3468,
+        props: {
+            businessPhoneNumber: [1, 'integer'],
+            chatId: [19, 'string'],
+            chatsFolderType: [
+                12,
+                {
+                    INBOX: 1,
+                    ARCHIVED: 2,
+                },
+            ],
+            ctaFallbackReason: [
+                2,
+                {
+                    NO_OTP_REQUEST_RECEIVED: 0,
+                    OTP_REQUEST_EXPIRED: 1,
+                    HASH_MISMATCH: 2,
+                    NO_ACTIVITY_LISTENING_ON_THIRD_PARTY_APP: 3,
+                    OTHER: 4,
+                    NO_PACKAGE_NAME_ON_MESSAGE: 5,
+                    NO_CTA_DISPLAY_NAME: 6,
+                    INCOMPATIBLE_OS_VERSION: 7,
+                    NO_RETRIEVER_BUTTON: 8,
+                    FEATURE_DISABLED: 9,
+                    AMBIGUOUS_DELIVERY_DESTINATION: 10,
+                },
+            ],
+            ctaType: [
+                3,
+                {
+                    COPY_CODE: 0,
+                    AUTOFILL: 1,
+                },
+            ],
+            isKeepChatsArchivedEnabled: [13, 'boolean'],
+            isMessageNotificationEnabled: [14, 'boolean'],
+            isNotificationEnabled: [15, 'boolean'],
+            messageReceivedElapsedTimeSeconds: [11, 'integer'],
+            otpCorrelationId: [20, 'string'],
+            otpEventSource: [
+                5,
+                {
+                    NOTIFICATION_CTA: 0,
+                    NOTIFICATION_BODY: 1,
+                    CHAT_CTA: 2,
+                    OTHER: 3,
+                    OTP_MESSAGE: 4,
+                    OTP_MESSAGE_INFO: 5,
+                    OTP_CONFIGURATION: 6,
+                    OTP_REQUEST_SENDER: 7,
+                    OTP_ZERO_TAP_SENDER: 8,
+                    OTP_CONF_OPTION: 9,
+                },
+            ],
+            otpEventType: [
+                6,
+                {
+                    CLICK: 0,
+                    IMPRESSION: 1,
+                    OTP_CODE_REQUESTED: 2,
+                    OTP_CODE_SENT: 3,
+                    MESSAGE_RECEIVED: 4,
+                    MESSAGE_READ: 5,
+                    MESSAGE_DELETED: 6,
+                    ZERO_TAP_ENABLED: 7,
+                    ZERO_TAP_DISABLED: 8,
+                    ZERO_TAP_NOTICE_VIEWED: 9,
+                    CLEAR_CHAT: 10,
+                    ZERO_TAP_SEND_CODE_STARTED: 11,
+                    ZERO_TAP_SEND_CODE_COMPLETED: 12,
+                    ZERO_TAP_SEND_CODE_FAILED: 13,
+                    OTP_CONF_OPT_ZERO_TAP_FLAG_ENABLED: 14,
+                    OTP_CONF_OPT_ZERO_TAP_FLAG_DISABLED: 15,
+                    HANDSHAKE_CONFIRMATION_SENT: 16,
+                },
+            ],
+            otpFailureReason: [16, 'string'],
+            otpHandshakeElapsedTimeMs: [21, 'integer'],
+            otpHandshakeId: [23, 'string'],
+            otpMaskLinkedDevices: [24, 'boolean'],
+            otpProductType: [
+                7,
+                {
+                    ONE_TAP: 0,
+                    ZERO_TAP: 1,
+                    COPY_CODE: 2,
+                },
+            ],
+            otpSdkVersion: [22, 'string'],
+            otpSessionId: [8, 'string'],
+            receiverCountryCode: [18, 'string'],
+            templateId: [17, 'string'],
+            thirdPartyPackageNameFromIntent: [9, 'string'],
+            thirdPartyPackageSignatureHash: [10, 'string'],
+            waDeviceId: [25, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 113760892,
+    },
+    {
+        name: 'BizCatalogView',
+        id: 3006,
+        props: {
+            bizPlatform: [
+                14,
+                {
+                    UNKNOWN: 1,
+                    SMB: 2,
+                    ENT: 3,
+                    CLOUDAPI: 4,
+                },
+            ],
+            cartToggle: [13, 'boolean'],
+            catalogCategoryId: [19, 'string'],
+            catalogEntryPoint: [
+                2,
+                {
+                    CATALOG_ENTRY_POINT_PROFILE: 1,
+                    CATALOG_ENTRY_POINT_SETTINGS: 2,
+                    CATALOG_ENTRY_POINT_MESSAGE: 3,
+                    CATALOG_ENTRY_POINT_ATTACHMENT_PANEL: 4,
+                    CATALOG_ENTRY_POINT_NUX: 5,
+                    CATALOG_ENTRY_POINT_DEEPLINK: 6,
+                    CATALOG_ENTRY_POINT_CHAT: 7,
+                    CATALOG_ENTRY_POINT_ORDER_MESSAGE: 8,
+                    CATALOG_ENTRY_POINT_INVOICE_ATTACHMENT_PANEL: 9,
+                    CATALOG_ENTRY_POINT_PRODUCT_LIST_MESSAGE: 10,
+                    CATALOG_ENTRY_POINT_TOP_BAR: 11,
+                    CATALOG_ENTRY_POINT_PROFILE_ITEM_CLICK: 12,
+                    CATALOG_ENTRY_POINT_PROFILE_SEE_ALL: 13,
+                    CATALOG_ENTRY_POINT_QUOTED_PRODUCT: 14,
+                    CATALOG_ENTRY_POINT_CATALOG_MESSAGE: 15,
+                    CATALOG_ENTRY_QBM: 16,
+                    CATALOG_ENTRY_POINT_ADS_DEEPLINK: 17,
+                    CATALOG_ENTRY_POINT_WA_PAGES: 18,
+                    CATALOG_ENTRY_POINT_DIRECTORY_BARE_TIPS: 19,
+                    CATALOG_ENTRY_POINT_BIZ_ACTION_BAR: 20,
+                    CATALOG_ENTRY_POINT_BIZ_ONBOARDING: 21,
+                    CATALOG_ENTRY_POINT_TRUST_CARD: 22,
+                    CATALOG_ENTRY_POINT_FLOWS: 23,
+                },
+            ],
+            catalogEventSampled: [11, 'boolean'],
+            catalogOwnerJid: [10, 'string'],
+            catalogReportReasonCode: [8, 'string'],
+            catalogSessionId: [3, 'string'],
+            catalogViewAction: [
+                1,
+                {
+                    ACTION_CARD_ITEM_CLICK: 2,
+                    ACTION_CARD_MORE_CLICK: 3,
+                    ACTION_LIST_IMPRESSION: 4,
+                    ACTION_DETAIL_IMAGE_CLICK: 6,
+                    ACTION_DETAIL_LINK_CLICK: 7,
+                    ACTION_FULL_IMAGE_SWIPE: 11,
+                    ACTION_DETAIL_IMPRESSION: 12,
+                    ACTION_REPORT_PRODUCT: 13,
+                    ACTION_SEND_PRODUCT_MESSAGE: 14,
+                    ACTION_REPORT_PRODUCT_SUCCESS: 15,
+                    ACTION_REPORT_PRODUCT_FAILURE: 16,
+                    ACTION_QUOTED_PRODUCT_IN_CONVERSATION_CLICK: 17,
+                    ACTION_PRODUCT_IN_CONVERSATION_CLICK: 18,
+                    ACTION_SHARE_CATALOG_LINK_CLICK: 19,
+                    ACTION_SHARE_PRODUCT_LINK_CLICK: 20,
+                    ACTION_CATALOG_IN_CONVERSATION_CLICK: 21,
+                    ACTION_SHARE_CATALOG_VIA_WA_LINK_CLICK: 22,
+                    ACTION_SHARE_PRODUCT_VIA_WA_LINK_CLICK: 23,
+                    ACTION_SHARE_CATALOG_COPY_LINK_CLICK: 24,
+                    ACTION_SHARE_PRODUCT_COPY_LINK_CLICK: 25,
+                    ACTION_CHAT_CATALOG_ICON_CLICK: 26,
+                    ACTION_MESSAGE_BUSINESS_BUTTON_CLICK: 27,
+                    ACTION_CART_ADD_PRODUCT: 28,
+                    ACTION_CART_EDIT_PRODUCT: 29,
+                    ACTION_CART_DELETE_PRODUCT: 30,
+                    ACTION_CART_ABANDON: 31,
+                    ACTION_CART_ICON_CLICK: 32,
+                    ACTION_CART_SNACKBAR_CLICK: 33,
+                    ACTION_SEND_ORDER_MESSAGE: 34,
+                    ACTION_ORDER_LIST_IMPRESSION: 35,
+                    ACTION_QUOTED_PRODUCT_MESSAGE_SEND: 36,
+                    ACTION_CART_LIST_IMPRESSION: 37,
+                    ACTION_ORDER_MESSAGE_CLICK: 38,
+                    ACTION_ORDER_LIST_ITEM_CLICK: 39,
+                    ACTION_PLM_CART_CTA_CLICK: 40,
+                    ACTION_CART_CHAT_ICON_CLICK: 42,
+                    ACTION_CREATE_CART: 43,
+                    ACTION_PLP_PRODUCT_VARIANT_BOTTOM_SHEET_OPEN: 44,
+                    ACTION_PLP_PRODUCT_VARIANT_CHANGE: 45,
+                    ACTION_PDP_PRODUCT_VARIANT_CHANGE: 46,
+                    ACTION_PLP_BOTTOM_SHEET_SEE_MORE_DETAILS: 47,
+                },
+            ],
+            collectionId: [15, 'string'],
+            collectionIndex: [16, 'string'],
+            deepLinkOpenFrom: [
+                12,
+                {
+                    DEEP_LINK_EXTERNAL: 1,
+                    DEEP_LINK_WA_LINK_CLICK: 2,
+                    QR_CODE_SHEET: 3,
+                    DEEP_LINK_BANNER: 4,
+                    DEEP_LINK_SMB_NOTIFICATION: 5,
+                    DEEP_LINK_MESSENGER_APP: 6,
+                },
+            ],
+            entryPointConversationInitiated: [
+                22,
+                {
+                    BUSINESS_INITIATED: 0,
+                    CONSUMER_INITIATED: 1,
+                    NO_MESSAGES_LAST_24H: 2,
+                },
+            ],
+            entryPointConversionApp: [20, 'string'],
+            entryPointConversionSource: [21, 'string'],
+            hasVariants: [23, 'boolean'],
+            isNewProductAddedToCart: [7, 'boolean'],
+            isOrderMsgAttached: [5, 'boolean'],
+            orderId: [4, 'string'],
+            productId: [9, 'string'],
+            productIndex: [17, 'string'],
+            quantity: [6, 'integer'],
+            sequenceNumber: [18, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 0,
+    },
+    {
+        name: 'CatalogBiz',
+        id: 1722,
+        props: {
+            cartToggle: [13, 'boolean'],
+            catalogAppealReason: [4, 'string'],
+            catalogBizAction: [
+                1,
+                {
+                    ACTION_PRODUCT_ADD_CLICKED: 1,
+                    ACTION_PRODUCT_ADD_SUCCESS: 2,
+                    ACTION_PRODUCT_ADD_FAILED: 3,
+                    ACTION_PRODUCT_EDIT_CLICKED: 4,
+                    ACTION_PRODUCT_EDIT_SUCCESS: 5,
+                    ACTION_PRODUCT_EDIT_FAILED: 6,
+                    ACTION_PRODUCT_DELETE_CLICKED: 7,
+                    ACTION_PRODUCT_DELETE_SUCCESS: 8,
+                    ACTION_PRODUCT_DELETE_FAILED: 9,
+                    ACTION_APPEAL_PRODUCT_CLICKED: 10,
+                    ACTION_APPEAL_PRODUCT_SUCCESS: 11,
+                    ACTION_APPEAL_PRODUCT_FAILED: 12,
+                    ACTION_CREATE_PRODUCT_CATALOG: 13,
+                    ACTION_CREATE_PRODUCT_CATALOG_SUCCESS: 14,
+                    ACTION_CREATE_PRODUCT_CATALOG_FAILED: 15,
+                    ACTION_CATALOG_MENU_ITEM_CLICKED: 16,
+                    ACTION_PRODUCT_RESUBMIT_CLICKED: 17,
+                    ACTION_START_IMPORT_FLOW: 18,
+                    ACTION_IMPORT_POST: 19,
+                    ACTION_CARD_ITEM_CLICK: 21,
+                    ACTION_CARD_MORE_CLICK: 22,
+                    ACTION_LIST_IMPRESSION: 23,
+                    ACTION_DETAIL_IMAGE_CLICK: 25,
+                    ACTION_DETAIL_LINK_CLICK: 26,
+                    ACTION_FULL_IMAGE_SWIPE: 30,
+                    ACTION_DETAIL_IMPRESSION: 31,
+                    ACTION_QUOTED_PRODUCT_IN_CONVERSATION_CLICK: 32,
+                    ACTION_PRODUCT_IN_CONVERSATION_CLICK: 33,
+                    ACTION_SEND_PRODUCT_MESSAGE: 34,
+                    ACTION_ONBOARD_IMPRESSION: 35,
+                    ACTION_SHARE_CATALOG_LINK_CLICK: 36,
+                    ACTION_SHARE_PRODUCT_LINK_CLICK: 37,
+                    ACTION_CATALOG_IN_CONVERSATION_CLICK: 38,
+                    ACTION_SHARE_CATALOG_VIA_WA_LINK_CLICK: 39,
+                    ACTION_SHARE_PRODUCT_VIA_WA_LINK_CLICK: 40,
+                    ACTION_SHARE_CATALOG_COPY_LINK_CLICK: 41,
+                    ACTION_SHARE_PRODUCT_COPY_LINK_CLICK: 42,
+                    ACTION_SEND_CATALOG_CLICK: 43,
+                    ACTION_ORDER_MESSAGE_CLICK: 44,
+                    ACTION_ORDER_LIST_IMPRESSION: 45,
+                    ACTION_ORDER_LIST_ITEM_CLICK: 46,
+                    ACTION_MESSAGE_BUSINESS_BUTTON_CLICK: 47,
+                    ACTION_QUOTED_PRODUCT_MESSAGE_SEND: 48,
+                    ACTION_CART_ADD_PRODUCT: 49,
+                    ACTION_CART_ICON_CLICK: 50,
+                    ACTION_CART_SNACKBAR_CLICK: 51,
+                    ACTION_CART_LIST_IMPRESSION: 52,
+                    ACTION_CART_EDIT_PRODUCT: 53,
+                    ACTION_CART_DELETE_PRODUCT: 54,
+                    ACTION_CART_ABANDON: 55,
+                    ACTION_SEND_ORDER_MESSAGE: 56,
+                    ACTION_MENU_CLICK: 57,
+                    ACTION_PRODUCT_HIDE_CLICKED: 58,
+                    ACTION_PRODUCT_HIDE_SUCCESS: 59,
+                    ACTION_PRODUCT_HIDE_CANCELLED: 60,
+                    ACTION_PRODUCT_HIDE_FAILED: 61,
+                    ACTION_PRODUCT_UNHIDE_CLICKED: 62,
+                    ACTION_PRODUCT_UNHIDE_SUCCESS: 63,
+                    ACTION_PRODUCT_UNHIDE_CANCELLED: 64,
+                    ACTION_PRODUCT_UNHIDE_FAILED: 65,
+                    ACTION_CATALOG_LIST_MENU_CLICKED: 66,
+                    ACTION_CATALOG_LIST_MENU_CLICKED_WITH_ADVERTISE_SHOWN: 67,
+                    ACTION_COLLECTION_CREATE_CLICKED: 68,
+                    ACTION_COLLECTION_CREATED: 69,
+                    ACTION_MENU_COLLECTIONS_CLICK: 70,
+                    ACTION_COLLECTION_RENAME_CLICKED: 71,
+                    ACTION_COLLECTION_RENAME_CANCELLED: 72,
+                    ACTION_COLLECTION_RENAMED: 73,
+                    ACTION_COLLECTION_DELETE_CLICKED: 74,
+                    ACTION_COLLECTION_DELETE_CANCELLED: 75,
+                    ACTION_COLLECTION_DELETED: 76,
+                    ACTION_COLLECTION_ASSIGN_ITEMS: 77,
+                    ACTION_COLLECTION_UNASSIGN_ITEMS: 78,
+                    ACTION_COLLECTION_CHANGE_ORDER: 80,
+                    ACTION_COLLECTION_ITEM_CHANGE_ORDER: 81,
+                },
+            ],
+            catalogEntryPoint: [
+                7,
+                {
+                    CATALOG_ENTRY_POINT_PROFILE: 1,
+                    CATALOG_ENTRY_POINT_SETTINGS: 2,
+                    CATALOG_ENTRY_POINT_MESSAGE: 3,
+                    CATALOG_ENTRY_POINT_ATTACHMENT_PANEL: 4,
+                    CATALOG_ENTRY_POINT_NUX: 5,
+                    CATALOG_ENTRY_POINT_DEEPLINK: 6,
+                    CATALOG_ENTRY_POINT_CHAT: 7,
+                    CATALOG_ENTRY_POINT_ORDER_MESSAGE: 8,
+                    CATALOG_ENTRY_POINT_INVOICE_ATTACHMENT_PANEL: 9,
+                    CATALOG_ENTRY_POINT_PRODUCT_LIST_MESSAGE: 10,
+                    CATALOG_ENTRY_POINT_TOP_BAR: 11,
+                    CATALOG_ENTRY_POINT_PROFILE_ITEM_CLICK: 12,
+                    CATALOG_ENTRY_POINT_PROFILE_SEE_ALL: 13,
+                    CATALOG_ENTRY_POINT_QUOTED_PRODUCT: 14,
+                    CATALOG_ENTRY_POINT_CATALOG_MESSAGE: 15,
+                    CATALOG_ENTRY_QBM: 16,
+                    CATALOG_ENTRY_POINT_ADS_DEEPLINK: 17,
+                    CATALOG_ENTRY_POINT_WA_PAGES: 18,
+                    CATALOG_ENTRY_POINT_DIRECTORY_BARE_TIPS: 19,
+                    CATALOG_ENTRY_POINT_BIZ_ACTION_BAR: 20,
+                    CATALOG_ENTRY_POINT_BIZ_ONBOARDING: 21,
+                    CATALOG_ENTRY_POINT_TRUST_CARD: 22,
+                    CATALOG_ENTRY_POINT_FLOWS: 23,
+                },
+            ],
+            catalogSessionId: [3, 'string'],
+            collectionCount: [18, 'integer'],
+            collectionId: [14, 'string'],
+            collectionIndex: [15, 'string'],
+            deepLinkOpenFrom: [
+                8,
+                {
+                    DEEP_LINK_EXTERNAL: 1,
+                    DEEP_LINK_WA_LINK_CLICK: 2,
+                    QR_CODE_SHEET: 3,
+                    DEEP_LINK_BANNER: 4,
+                    DEEP_LINK_SMB_NOTIFICATION: 5,
+                    DEEP_LINK_MESSENGER_APP: 6,
+                },
+            ],
+            errorCode: [5, 'integer'],
+            isOrderMsgAttached: [10, 'boolean'],
+            orderId: [9, 'string'],
+            productCount: [6, 'integer'],
+            productId: [2, 'string'],
+            productIds: [12, 'string'],
+            productIndex: [16, 'string'],
+            quantity: [11, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcImgError',
+        id: 1700,
+        props: {
+            webcImgErrorCode: [1, 'number'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'GroupJourney',
+        id: 4512,
+        props: {
+            actionType: [
+                1,
+                {
+                    OPEN: 1,
+                    SELECT_FILTER: 2,
+                    SEARCH_WITH_FILTER: 3,
+                    SEARCH: 4,
+                    SEARCH_ITEM_SELECTED: 5,
+                    SEARCH_MSG_SENT: 6,
+                    UNSELECT_FILTER: 7,
+                    AUTO_CLEAR_FILTER: 8,
+                    VIEW: 9,
+                    GROUP_NAVIGATION: 10,
+                    GROUP_DISCOVERY: 11,
+                    GROUP_JOIN: 12,
+                    SUBGROUP_SWITCHER_CLICK: 13,
+                    SUBGROUP_MENTION_CLICK: 14,
+                    COMMUNITY_RICH_SYSTEM_MESSAGE_CLICK: 15,
+                    GROUP_SYSTEM_MESSAGE_CLICK: 16,
+                    NESTING_VIEW_COMMUNITY_CLICK: 17,
+                    SELECT_COMMUNITY_ADMINS_CAN_ADD_GROUPS: 18,
+                    SELECT_EVERYONE_CAN_ADD_GROUPS: 19,
+                    GROUP_JOIN_REQUEST: 20,
+                    NOTIFICATION_RECEIVED: 21,
+                    NOTIFICATION_RENDERED: 22,
+                    TAP_TO_OPEN: 23,
+                    TAP_TO_REPLY: 24,
+                    VOIP_CALLBACK: 25,
+                    VOIP_MESSAGE: 26,
+                    VOIP_DECLINE: 27,
+                    MARK_AS_READ: 28,
+                    AI_NEW_CHAT_CLICK: 29,
+                    AI_TAB_SELECTION_CLICK: 30,
+                    AI_PERSONA_SELECTION_CLICK: 31,
+                    AI_TOS_VIEW: 32,
+                    AI_TOS_ACCEPT_CLICK: 33,
+                    AI_TOS_DISMISS_CLICK: 34,
+                    AI_NEW_UGC_CLICK: 35,
+                    AI_UGC_CREATION_START_CLICK: 36,
+                    AI_GENDER_AGE_SELECTION_CLICK: 37,
+                    AI_PERSONALITY_SELECTION_CLICK: 38,
+                    AI_INTEREST_SELECTION_CLICK: 39,
+                    AI_AVATAR_SELECTION_CLICK: 40,
+                    AI_NAME_SELECTION_CLICK: 41,
+                    AI_UGC_CREATION_FINISH_CLICK: 42,
+                    REQUEST_WAITLIST_DIALOG_APPEAR: 43,
+                    REQUEST_WAITLIST_SELECT: 44,
+                    FILTER_VIEWED: 45,
+                    FILTER_EMPTY_STATE_VIEWED: 46,
+                    BUSINESS_SERP_LOADED: 47,
+                    BIZ_SEE_MORE_CLICKED: 48,
+                    IMPRESSION: 49,
+                    BIZ_SEARCH_SET_LOCATION_CLICKED: 50,
+                    CLOSE_BTN_CLICKED: 51,
+                    AI_CHAT_CLICK: 52,
+                    NEW_CHAT_CLICK: 53,
+                    SERP_LOADED: 54,
+                },
+            ],
+            appSessionId: [2, 'string'],
+            groupSize: [3, 'integer'],
+            surface: [
+                4,
+                {
+                    CHAT: 1,
+                    CHATLIST: 2,
+                    GALLERY: 3,
+                    COMMUNITY_HOME: 4,
+                    COMMUNITY_TAB: 5,
+                    COMMUNITY_NAV: 6,
+                    COMMUNITY_NAV_SHEET: 7,
+                    COMMUNITY_SETTINGS: 8,
+                    GROUP_INFO: 9,
+                    NOTIFICATION: 10,
+                    EXPRESSIONS_EMOJI: 11,
+                    INVITE_NON_WA_CONTACT: 12,
+                },
+            ],
+            threadType: [
+                5,
+                {
+                    GROUP: 1,
+                    BROADCAST: 2,
+                    INDIVIDUAL: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    SUB_GROUP: 6,
+                    DEFAULT_SUB_GROUP: 7,
+                    PARENT_GROUP: 8,
+                },
+            ],
+            uiSurface: [
+                7,
+                {
+                    UNKNOWN: 1,
+                    COMMUNITY_HOME: 2,
+                    COMMUNITY_TAB: 3,
+                    CHAT_THREAD: 4,
+                    CHAT_INFO_PAGE: 5,
+                    CHAT_LIST: 6,
+                    COMMUNITY_NAVIGATION: 7,
+                    BACKGROUND: 8,
+                    RESIGN: 9,
+                    SUBGROUP_SWITCHER: 10,
+                    COMMUNITY_COMPOSER: 11,
+                    MEDIA_VIEWER: 12,
+                    ALL_MEDIA: 13,
+                    STREAMING_MEDIA_VIEWER: 14,
+                    CALLS_HOME_TAB: 15,
+                    IN_CALL_UI: 16,
+                    STATUS_HOME_TAB: 17,
+                    STATUS_COMPOSER: 18,
+                    STATUS_VIEW: 19,
+                    CAMERA: 20,
+                    PHOTO_VIDEO_LIBRARY: 21,
+                    SETTINGS_HOME_TAB: 22,
+                    TOOLS_TAB: 23,
+                    COMMUNITY_SETTINGS: 24,
+                    CHANNEL_UPDATES_HOME: 25,
+                    CHANNEL_THREAD: 26,
+                    CHANNEL_DIRECTORY: 27,
+                    CHANNEL_PROFILE: 28,
+                    CHANNEL_FORWARD: 29,
+                    CHANNEL_PRODUCER_MEDIA_EDITOR: 30,
+                    CHANNEL_CREATE: 31,
+                    CHANNEL_EDIT: 32,
+                    CHANNEL_DELETE: 33,
+                    STATUS_COMPOSER_TEXT: 34,
+                    LIGHTWEIGHT_CALL_UI: 35,
+                    AI_HOME: 36,
+                    LIGHTWEIGHT_CALL_BANNER: 37,
+                    LIGHTWEIGHT_CALL_NUX: 38,
+                    CALL_INFO_PAGE: 39,
+                    SMB_CATALOG: 40,
+                    SMB_CATALOG_SHARE_LINK: 41,
+                    SMB_CATALOG_SHARE_PRODUCT_LINK: 42,
+                    SMB_CATALOG_SETTINGS: 43,
+                    SMB_CATALOG_PRODUCT: 44,
+                    SMB_CATALOG_NEW_COLLECTION: 45,
+                    SMB_CATALOG_EDIT_COLLECTION: 46,
+                    SMB_CATALOG_CREATE_PRODUCT: 47,
+                    SMB_CATALOG_EDIT_PRODUCT: 48,
+                    SMB_CATALOG_NEW_COLLECTION_ADD_ITEMS: 49,
+                    SMB_CATALOG_COLLECTION_UPDATE_ITEMS: 50,
+                    SMB_CATALOG_COLLECTIONS: 51,
+                    SMB_CATALOG_COLLECTION_REORDER: 52,
+                    SMB_CATALOG_COLLECTION_PRODUCTS: 53,
+                    SMB_CATALOG_COLLECTION_PRODUCTS_REORDER: 54,
+                    CREATE_EVENT: 55,
+                    EVENT_PAGE: 56,
+                    EVENTS_IN_GROUP: 57,
+                    CATALOG_HOME: 59,
+                    CATALOG_COLLECTION: 60,
+                    CATALOG_ITEM: 61,
+                    CATALOG_CART: 62,
+                    FLOWS_EXPERIENCE: 63,
+                    BUSINESS_PROFILE_EDIT: 64,
+                    BUSINESS_PROFILE_EDIT_NAME: 65,
+                    BUSINESS_PROFILE_EDIT_CATEGORIES: 66,
+                    BUSINESS_PROFILE_EDIT_DESCRIPTION: 67,
+                    BUSINESS_PROFILE_EDIT_WEBSITE: 68,
+                    BUSINESS_PROFILE_EDIT_EMAIL: 69,
+                    BUSINESS_PROFILE_EDIT_ADDRESS: 70,
+                    BUSINESS_PROFILE_EDIT_HOURS: 71,
+                    BUSINESS_PROFILE_EDIT_COVER_PHOTO: 72,
+                    BUSINESS_PROFILE_LINK_FB_IG: 73,
+                    BUSINESS_PROFILE_HELP_PAGE_LINK_FB_IG: 74,
+                    PAYMENTS_HOME: 75,
+                    PAYMENTS_HOME_TRANSACTIONS: 76,
+                    PAYMENTS_HOME_RECENT_MERCHANTS: 77,
+                    PAYMENTS_HOME_INVITE_OTHERS: 78,
+                    PAYMENTS_HOME_HELP: 79,
+                    MESSAGE_MENU: 80,
+                    PIN_MESSAGE_REPLACEMENT_DIALOG: 81,
+                    PIN_MESSAGE_EXPIRATION_DIALOG: 82,
+                    MY_STATUS_LIST: 83,
+                    ALL_STATUS_LIST: 84,
+                    PIN_BANNER: 85,
+                    CALL_BANNER: 86,
+                    LANDING_SCREEN: 87,
+                    NEW_CHAT: 88,
+                    GROUP_MEMBER_ADD_GROUP_CREATION: 89,
+                    GROUP_MEMBER_ADD_EXISTING_GROUP: 90,
+                    GROUP_CHAT: 91,
+                    GROUP_CREATION: 92,
+                },
+            ],
+            userRole: [
+                6,
+                {
+                    MEMBER: 0,
+                    ADMIN: 1,
+                    CADMIN: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcMessageQuery',
+        id: 1876,
+        props: {
+            webcAudioMessageCount: [14, 'integer'],
+            webcBrowserNetworkType: [1, 'string'],
+            webcBrowserStorageQuotaBytes: [20, 'integer'],
+            webcBrowserStorageQuotaUsedBytes: [21, 'integer'],
+            webcChatPosition: [2, 'integer'],
+            webcChatType: [
+                13,
+                {
+                    INDIVIDUAL: 0,
+                    GROUP: 1,
+                    BROADCAST_LIST: 2,
+                    COMMUNITY: 3,
+                    NEWSLETTER: 4,
+                },
+            ],
+            webcDocumentMessageCount: [16, 'integer'],
+            webcEarliestMessageIndex: [11, 'integer'],
+            webcEarliestMessageT: [12, 'timer'],
+            webcMessageCount: [4, 'integer'],
+            webcMessageQueryTrigger: [
+                19,
+                {
+                    UNKNOWN: 0,
+                    USER_SCROLL: 1,
+                    NEW_MESSAGE_PREFETCH: 2,
+                    SEARCH_RESULT_CLICK: 3,
+                },
+            ],
+            webcMessageQueryType: [
+                3,
+                {
+                    LOAD_PREV: 0,
+                    LOAD_NEXT: 1,
+                    LOAD_AROUND: 2,
+                },
+            ],
+            webcOtherMessageCount: [18, 'integer'],
+            webcPhotoMessageCount: [7, 'integer'],
+            webcPttMessageCount: [15, 'integer'],
+            webcQueryT: [9, 'timer'],
+            webcResponseBytes: [10, 'integer'],
+            webcStickerMessageCount: [17, 'integer'],
+            webcTextMessageCount: [5, 'integer'],
+            webcVideoMessageCount: [6, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MediaPicker',
+        id: 1038,
+        props: {
+            audienceSelectorClicked: [24, 'boolean'],
+            audienceSelectorUpdated: [25, 'boolean'],
+            chatRecipients: [16, 'integer'],
+            isViewOnce: [22, 'boolean'],
+            mediaPickerAvatarStickers: [33, 'integer'],
+            mediaPickerChanged: [4, 'integer'],
+            mediaPickerCroppedRotated: [10, 'integer'],
+            mediaPickerDeleted: [3, 'integer'],
+            mediaPickerDrawing: [11, 'integer'],
+            mediaPickerFilter: [18, 'integer'],
+            mediaPickerHasLocationSticker: [26, 'boolean'],
+            mediaPickerLikeDoc: [19, 'integer'],
+            mediaPickerNotLikeDoc: [20, 'integer'],
+            mediaPickerOrigin: [
+                14,
+                {
+                    CHAT_PHOTO_LIBRARY: 1,
+                    CAMERA_TAB_CAPTURE: 2,
+                    FORWARD: 3,
+                    PASTE: 4,
+                    SHARE_EXTENSION: 5,
+                    EXPORT: 6,
+                    MENU_CAMERA_CAPTURE: 7,
+                    EXTERNAL_CAMERA: 8,
+                    LINK_PREVIEW_DOWNLOAD: 9,
+                    CAMERA_TAB_MEDIA_STRIP: 10,
+                    CAMERA_TAB_PHOTO_LIBRARY: 11,
+                    CHAT_BUTTON_CAMERA_CAPTURE: 12,
+                    CHAT_BUTTON_CAMERA_MEDIA_STRIP: 13,
+                    CHAT_BUTTON_CAMERA_PHOTO_LIBRARY: 14,
+                    STATUS_TAB_CAMERA_CAPTURE: 15,
+                    STATUS_TAB_CAMERA_MEDIA_STRIP: 16,
+                    STATUS_TAB_CAMERA_PHOTO_LIBRARY: 17,
+                    STATUS_REPLY_CAMERA_CAPTURE: 18,
+                    STATUS_REPLY_CAMERA_MEDIA_STRIP: 19,
+                    STATUS_REPLY_CAMERA_PHOTO_LIBRARY: 20,
+                    MENU_CAMERA_PHOTO_LIBRARY: 21,
+                    CHAT_GIF_INAPP: 22,
+                    CHAT_GIF_EXTERNAL: 23,
+                    STATUS_REPLY_GIF_INAPP: 24,
+                    STATUS_REPLY_GIF_EXTERNAL: 25,
+                    SMB_QUICK_REPLY_EDIT: 26,
+                    SMB_QUICK_REPLY_SEND: 27,
+                    MEDIA_BROWSER: 28,
+                    CHAT_QUICK_EDIT: 29,
+                    CAMERA_TAB_GIF: 30,
+                    STATUS_TAB_GIF: 31,
+                    PAYMENT_COMPOSER: 32,
+                    PHOTO_RECEIVED: 33,
+                    PHOTO_RECEIVED_GALLERY: 34,
+                    AD_CREATION: 35,
+                    EXTERNAL_DROP: 36,
+                    IN_APP_BROWSER: 37,
+                    PREMIUM_MESSAGE_COMPOSER: 38,
+                    DOCUMENT_PICKER: 39,
+                    IN_APP_BUG_REPORTING: 40,
+                    STICKER_TRAY_CREATE_STICKER: 41,
+                    STICKER_TRAY_EDIT_STICKER: 42,
+                    STICKER_MESSAGE_CREATE_YOUR_OWN: 43,
+                    STICKER_MESSAGE_EDIT_STICKER: 44,
+                    MEDIA_VIEWER_CREATE_STICKER: 45,
+                    STATUS_NEWSLETTER_CARD: 46,
+                    CUTOUT_IMAGE_EDIT_STICKER: 47,
+                    STICKER_TRAY_CREATE_STICKER_CAPTURE: 48,
+                    THUNDERSTORM_IN_APP_PHOTO_LIBRARY: 49,
+                    TRANSPARENT_IMAGE_EDIT_STICKER: 50,
+                    BUSINESS_FLOWS: 51,
+                    SYSTEM_INTENT: 52,
+                },
+            ],
+            mediaPickerOriginThirdParty: [21, 'boolean'],
+            mediaPickerSent: [2, 'integer'],
+            mediaPickerSentUnchanged: [5, 'integer'],
+            mediaPickerSessionId: [29, 'string'],
+            mediaPickerStickers: [12, 'integer'],
+            mediaPickerT: [15, 'timer'],
+            mediaPickerText: [13, 'integer'],
+            mediaType: [
+                1,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            motionPhotoImpressionCount: [31, 'integer'],
+            motionPhotoSentCount: [32, 'integer'],
+            photoGalleryDurationT: [23, 'timer'],
+            photoQualitySetting: [
+                27,
+                {
+                    AUTO: 0,
+                    DATA_SAVER: 1,
+                    HIGH_QUALITY: 2,
+                    HIGHEST_QUALITY: 3,
+                },
+            ],
+            pickerSessionId: [30, 'integer'],
+            statusRecipients: [17, 'integer'],
+            videoQualitySetting: [
+                28,
+                {
+                    AUTO: 0,
+                    DATA_SAVER: 1,
+                    HIGH_QUALITY: 2,
+                    HIGHEST_QUALITY: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcStatusSession',
+        id: 1880,
+        props: {
+            webcStatusMutedItemCount: [4, 'integer'],
+            webcStatusMutedRowCount: [7, 'integer'],
+            webcStatusRecentItemCount: [2, 'integer'],
+            webcStatusRecentRowCount: [5, 'integer'],
+            webcStatusSessionId: [1, 'integer'],
+            webcStatusViewedItemCount: [3, 'integer'],
+            webcStatusViewedRowCount: [6, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'TestAnonymousDailyId',
+        id: 2958,
+        props: {
+            psTestEnumField: [
+                1,
+                {
+                    TEST_VALUE1: 1,
+                    TEST_VALUE2: 2,
+                },
+            ],
+            psTestFloatField: [2, 'number'],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 248614979,
+    },
+    {
+        name: 'TestAnonymousDaily',
+        id: 2328,
+        props: {},
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 113760892,
+    },
+    {
+        name: 'TestAnonymousIdLess',
+        id: 3004,
+        props: {
+            psTimeSinceLastEventInMin: [1, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 0,
+    },
+    {
+        name: 'TestAnonymousMonthlyId',
+        id: 2960,
+        props: {},
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 191000728,
+    },
+    {
+        name: 'TestAnonymousWeeklyId',
+        id: 2956,
+        props: {
+            psTestBooleanField: [2, 'boolean'],
+            psTestStringField: [3, 'string'],
+            psTimeSinceLastEventInMin: [1, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 42196056,
+    },
+    {
+        name: 'ChannelSimilarChannels',
+        id: 5202,
+        props: {
+            bannerStatus: [
+                1,
+                {
+                    DISPLAYED: 0,
+                    HIDDEN: 1,
+                    CLOSED: 2,
+                },
+            ],
+            bannerStatusReason: [
+                2,
+                {
+                    NO_SIMILAR_CHANNELS_FOUND: 0,
+                    NOT_ENOUGH_SIMILAR_CHANNELS: 1,
+                    SIMILAR_CHANNELS_FOUND: 2,
+                    CLOSE_TAP: 3,
+                    UNFOLLOW_TAP: 4,
+                },
+            ],
+            cid: [3, 'string'],
+            similarChannelDisplayRank: [4, 'integer'],
+            similarChannelEventSurface: [
+                5,
+                {
+                    CHANNEL_UPDATES_HOME: 1,
+                    CHANNEL_THREAD: 2,
+                    CHANNEL_DIRECTORY: 3,
+                    CHANNEL_DIRECTORY_SEARCH: 4,
+                    CHANNEL_PROFILE: 5,
+                    CHANNEL_UPDATES_HOME_SEARCH: 6,
+                },
+            ],
+            similarChannelId: [6, 'string'],
+            similarChannelRank: [7, 'integer'],
+            similarChannelUserType: [
+                9,
+                {
+                    OWNER: 1,
+                    ADMIN: 2,
+                    FOLLOWER: 3,
+                    GUEST: 4,
+                },
+            ],
+            similarChannelsSessionId: [10, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'UiMessageYourselfAction',
+        id: 3780,
+        props: {
+            uiMessageYourselfActionSessionId: [1, 'string'],
+            uiMessageYourselfActionType: [
+                2,
+                {
+                    NEW_CHAT_PRESSED: 1,
+                    YOU_SELECTED: 2,
+                    SEARCH_BAR_PRESSED: 3,
+                    SEARCH_FULL_NAME_YOU_SELECTED: 4,
+                    NEW_NTS_CREATED: 5,
+                    EXISTING_NTS_OPENED: 6,
+                },
+            ],
+            uiMessageYourselfFunnelName: [
+                3,
+                {
+                    NEW_CHAT: 1,
+                    CONTACT_AND_GLOBAL_SEARCH: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MediaStreamPlayback',
+        id: 1584,
+        props: {
+            bytesDownloadedStart: [4, 'number'],
+            bytesTransferred: [5, 'number'],
+            didPlay: [15, 'boolean'],
+            forcedPlayCount: [12, 'integer'],
+            initialBufferingT: [7, 'timer'],
+            mediaSize: [2, 'number'],
+            mediaType: [
+                3,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            overallPlayT: [10, 'timer'],
+            overallT: [1, 'timer'],
+            playbackCount: [14, 'integer'],
+            playbackError: [17, 'integer'],
+            playbackOrigin: [
+                16,
+                {
+                    CONVERSATION: 1,
+                    STATUS: 2,
+                    CHANNELS: 3,
+                },
+            ],
+            playbackState: [
+                11,
+                {
+                    IDLE: 1,
+                    READY_PLAY: 2,
+                    READY_PAUSE: 3,
+                    BUFFERING: 4,
+                    OUTSIDE: 5,
+                    ENDED: 6,
+                    ERROR: 7,
+                },
+            ],
+            seekCount: [13, 'integer'],
+            totalRebufferingCount: [9, 'integer'],
+            totalRebufferingT: [8, 'timer'],
+            videoDuration: [6, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PrivacyTipAction',
+        id: 4794,
+        props: {
+            privacyTipActionType: [
+                1,
+                {
+                    VIEW: 1,
+                    CLICK_PRIVACY_TIP: 2,
+                    CLICK_OK: 3,
+                    CLICK_OUTSIDE: 4,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'UiAction',
+        id: 472,
+        props: {
+            agentEngagementType: [
+                9,
+                {
+                    DIRECT_CHAT: 0,
+                    INVOKED: 1,
+                    MEMBER: 2,
+                },
+            ],
+            botType: [
+                11,
+                {
+                    UNKNOWN: 0,
+                    METABOT: 1,
+                    BOT_1P_BIZ: 2,
+                    BOT_3P_BIZ: 3,
+                },
+            ],
+            dbMainThreadCount: [13, 'integer'],
+            dbReadsCount: [14, 'integer'],
+            dbWritesCount: [15, 'integer'],
+            deviceCount: [5, 'integer'],
+            isLid: [8, 'boolean'],
+            localAddressingMode: [
+                10,
+                {
+                    PN: 1,
+                    LID: 2,
+                },
+            ],
+            participantCount: [6, 'integer'],
+            sizeBucket: [
+                4,
+                {
+                    LT32: 1,
+                    LT64: 2,
+                    LT128: 3,
+                    LT256: 4,
+                    LT512: 5,
+                    LT1000: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            uiActionChatType: [
+                7,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    SUBGROUP: 3,
+                    DEFAULT_SUBGROUP: 4,
+                    CHANNEL: 5,
+                },
+            ],
+            uiActionPreloaded: [2, 'boolean'],
+            uiActionT: [3, 'timer'],
+            uiActionTtrcSurfaceName: [12, 'string'],
+            uiActionType: [
+                1,
+                {
+                    OTHER: 1,
+                    APP_OPEN: 2,
+                    CHAT_OPEN: 3,
+                    IMAGE_OPEN: 4,
+                    FIRST_FTS_RESULT: 5,
+                    CONTACTS_OPEN: 6,
+                    GROUP_INFO_OPEN: 7,
+                    MSG_INFO_OPEN: 8,
+                    COMMUNITY_INFO_OPEN: 9,
+                    DEFAULT_SUBGROUP_INFO_OPEN: 10,
+                    COMMUNITY_CREATE: 11,
+                    COMMUNITY_LINK: 12,
+                    EMOJI_OBI_DECOMPRESSION: 13,
+                    EMOJI_PNG_DECOMPRESSION: 14,
+                    CHAT_LIST_OPEN: 15,
+                    CALL_LIST_OPEN: 16,
+                    CHANNEL_INFO_OPEN: 17,
+                    TTRC: 18,
+                },
+            ],
+        },
+        weight: 5000,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'AdvertiseTooltipImpression',
+        id: 4024,
+        props: {
+            lwiEntryPoint: [
+                1,
+                {
+                    SMB_CATALG_LIST_LWI_ADVERTISE_BANNER: 1,
+                    SMB_CATALOG_LIST_ADVERTISE_MENU_ITEM: 2,
+                    SMB_BUSINESS_TOOLS_ADVERTISE_LIST_ITEM: 3,
+                    SMB_STATUS_DETAILS_ADVERTISE_MENU_ITEM: 4,
+                    SMB_STATUS_PREVIEW_ADVERTISE_MENU_ITEM: 5,
+                    SMB_CONVERSATIONS_LIST_BANNER_WITH_VALID_PRODUCT: 6,
+                    SMB_CONVERSATIONS_LIST_BANNER_WITHOUT_VALID_PRODUCT: 7,
+                    SMB_STATUS_3DTOUCH_ADVERTISE_MENU_ITEM: 8,
+                    SMB_HOME_SCREEN_OVERFLOW_MENU_ITEM: 9,
+                    SMB_BUSINESS_TOOLS_ADVERTISE_LIST_FIRST_ITEM: 10,
+                    SMB_SETTINGS_ADVERTISE_LIST_ITEM: 11,
+                    SMB_ADVERTISE_FROM_NOTIFICATION: 12,
+                    SMB_ADVERTISE_FROM_BANNER: 13,
+                    SMB_ADVERTISE_FROM_DEEP_LINK: 14,
+                    SMB_BUSINESS_TOOLS_TAB_ADVERTISE: 15,
+                    SMB_CATALOG_LIST_ADVERTISE_BUTTON: 16,
+                    SMB_PRODUCT_DETAILS_ADVERTISE_BUTTON: 17,
+                    SMB_ADVERTISE_FROM_STATUS_MESSAGE: 18,
+                    SMB_HOME_SCREEN_ICON: 19,
+                    SMB_HOME_BANNER: 20,
+                    SMB_ADVERTISE_FROM_STATUS_MESSAGE_SELF_VIEW: 21,
+                    SMB_STATUS_MAIN_TAB_ADVERTISE: 22,
+                    SMB_STATUS_MAIN_TAB_BANNER: 23,
+                    SMB_BUSINESS_HOME_CARD_CREATE_FIRST_AD: 24,
+                    SMB_BUSINESS_HOME_CARD_CREATE_RETURNING_AD: 25,
+                    SMB_MEDIA_SHARE_VIA_GROUP: 26,
+                    SMB_MEDIA_SHARE_VIA_BROADCAST: 27,
+                    STATUS_PLAYBACK_SCREEN_ICON: 28,
+                    CATALOG_SHARED_IN_GROUP: 29,
+                    CATALOG_SHARED_IN_BROADCAST_LIST: 30,
+                    CATALOG_SHARED_IN_SINGLE_CHAT: 31,
+                    PRODUCT_SHARED_IN_SINGLE_CHAT: 32,
+                    PRODUCT_SHARED_IN_BROADCAST_LIST: 33,
+                    PRODUCT_SHARED_IN_GROUP: 34,
+                    PRODUCT_LINK_SHARED_IN_SINGLE_CHAT: 35,
+                    PRODUCT_LINK_SHARED_IN_BROADCAST_LIST: 36,
+                    PRODUCT_LINK_SHARED_IN_GROUP: 37,
+                    SMB_MESSAGING_GUIDE_AD_CREATION: 38,
+                    SMB_BUSINESS_HOME_ADVERTISE_FROM_BANNER: 39,
+                    SMB_STATUS_UPSELL_BOTTOM_SHEET: 40,
+                    BUSINESS_PROFILE: 41,
+                    SMB_BUSINESS_HOME_CARD_ACTIVE_AD: 42,
+                    SMB_STATUS_CHANNELS_TAB_ADVERTISE: 43,
+                    SMB_STATUS_CHANNELS_TAB_BANNER: 44,
+                    SMB_PRODUCT_UPSELL_BOTTOM_SHEET: 45,
+                    SMB_STATUS_CHANNELS_UPSELL_BOTTOM_SHEET: 46,
+                    SMB_ADVERTISE_FROM_FORWARD_SCREEN_INDIVIDUAL: 47,
+                    SMB_ADVERTISE_FROM_FORWARD_SCREEN_GROUP: 48,
+                    SMB_ADVERTISE_FROM_FORWARD_SCREEN_BROADCAST: 49,
+                    SMB_BUSINESS_HOME_CARD_ACTIVE_AD_DISMISS: 50,
+                    SMB_BUSINESS_HOME_CARD_DRAFT_AD: 51,
+                    SMB_BUSINESS_HOME_MANAGE_AD: 52,
+                    SMB_BUSINESS_TOOLS_MANAGE_AD: 53,
+                    SMB_HOME_SCREEN_OVERFLOW_MANAGE_ITEM: 54,
+                    SMB_BUSINESS_HOME_QP_CARD: 55,
+                    SMB_CREATED_AD: 56,
+                    SMB_BUSINESS_HOME_CARD_COUPON_PROMOTION: 57,
+                },
+            ],
+            tooltipAction: [
+                2,
+                {
+                    EMPTY: 1,
+                    ENTER_AD_CREATION_FLOW: 2,
+                    DISMISS: 3,
+                    IGNORE: 4,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChannelLinkShare',
+        id: 4728,
+        props: {
+            channelLinkShareDirection: [
+                1,
+                {
+                    WHATSAPP: 1,
+                    STATUS: 2,
+                    EXTERNAL: 3,
+                },
+            ],
+            channelLinkShareEntryPoint: [
+                2,
+                {
+                    CHANNEL_INFO_PAGE: 1,
+                    CHANNEL_THREAD: 2,
+                    PRODUCER_CONTEXT_CARD: 3,
+                },
+            ],
+            channelLinkShareScreen: [
+                4,
+                {
+                    CONTEXT_CARD: 1,
+                    CHANNEL_INFO: 2,
+                    CHANNEL_THREAD: 3,
+                    SHARE_LINK_SCREEN: 4,
+                },
+            ],
+            cid: [3, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'CommunityFeatureUsage',
+        id: 3696,
+        props: {
+            communityId: [2, 'string'],
+            communityUiAction: [
+                4,
+                {
+                    ENTRY: 1,
+                    GROUP_NAV: 2,
+                    GROUP_ADD: 3,
+                    COMMUNITY_NAV: 4,
+                },
+            ],
+            communityUiFeature: [
+                3,
+                {
+                    SUBGROUP_SWITCH: 1,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'GroupProfilePicture',
+        id: 3652,
+        props: {
+            groupCreationDs: [1, 'string'],
+            groupProfileAction: [
+                7,
+                {
+                    CHANGE_PROFILE_PHOTO: 1,
+                    TAP_ACTION_ITEM_TAKE_PHOTO: 2,
+                    TAP_ACTION_ITEM_VIEW_PHOTO: 3,
+                    TAP_ACTION_ITEM_EMOJI_STICKER: 4,
+                    TAP_ACTION_ITEM_UPLOAD_PHOTO: 5,
+                    TAP_ACTION_ITEM_REMOVE_PHOTO: 6,
+                    TAP_ACTION_ITEM_WEB_SEARCH: 7,
+                    EMOJI_PANEL_OPEN: 8,
+                    STICKER_PANEL_OPEN: 9,
+                    PROFILE_PIC_UPDATED: 10,
+                },
+            ],
+            hasProfilePicture: [3, 'boolean'],
+            isAdmin: [4, 'boolean'],
+            preciseGroupSizeBucket: [
+                5,
+                {
+                    LT4: 1,
+                    LT8: 2,
+                    LT16: 3,
+                    LT32: 4,
+                    LT64: 5,
+                    LT128: 6,
+                    LT256: 7,
+                    LT512: 8,
+                    LT1000: 9,
+                    LT1500: 10,
+                    LT2000: 11,
+                    LT2500: 12,
+                    LT3000: 13,
+                    LT3500: 14,
+                    LT4000: 15,
+                    LT4500: 16,
+                    LT5000: 17,
+                    LARGEST_BUCKET: 18,
+                },
+            ],
+            profilePictureType: [
+                6,
+                {
+                    PHOTO_CAMERA: 1,
+                    PHOTO_UPLOAD: 2,
+                    WEB_SEARCH: 3,
+                    EMOJI: 4,
+                    STICKER: 5,
+                    REMOVE_PHOTO: 6,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'KeepInChatNux',
+        id: 3486,
+        props: {
+            chatEphemeralityDuration: [1, 'integer'],
+            kicNuxActionName: [
+                2,
+                {
+                    FIRST_DM_NUX_IMPRESSION: 1,
+                    KIC_NUX_IMPRESSION: 2,
+                    KIC_NUX_LEARN_MORE_TAP: 3,
+                    KIC_SYSTEM_MESSAGE_GENERATE: 4,
+                },
+            ],
+            threadId: [3, 'string'],
+            trigger: [
+                4,
+                {
+                    CHAT_ENTRY: 1,
+                    SYSTEM_MESSAGE: 2,
+                    KEEP_MESSAGE_FIRST_TIME: 3,
+                    USER_MESSAGE_KEPT: 4,
+                    KEPT_FOLDER_TAP_FIRST_TIME: 5,
+                    UNKEEP_MESSAGE_FIRST_TIME: 6,
+                    EPHEMERAL_SETTINGS: 7,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'LwiEntryPointImpression',
+        id: 2906,
+        props: {
+            businessToolsSessionId: [2, 'string'],
+            catalogSessionId: [1, 'string'],
+            itemsCount: [7, 'integer'],
+            lwiEntryPoint: [
+                3,
+                {
+                    SMB_CATALG_LIST_LWI_ADVERTISE_BANNER: 1,
+                    SMB_CATALOG_LIST_ADVERTISE_MENU_ITEM: 2,
+                    SMB_BUSINESS_TOOLS_ADVERTISE_LIST_ITEM: 3,
+                    SMB_STATUS_DETAILS_ADVERTISE_MENU_ITEM: 4,
+                    SMB_STATUS_PREVIEW_ADVERTISE_MENU_ITEM: 5,
+                    SMB_CONVERSATIONS_LIST_BANNER_WITH_VALID_PRODUCT: 6,
+                    SMB_CONVERSATIONS_LIST_BANNER_WITHOUT_VALID_PRODUCT: 7,
+                    SMB_STATUS_3DTOUCH_ADVERTISE_MENU_ITEM: 8,
+                    SMB_HOME_SCREEN_OVERFLOW_MENU_ITEM: 9,
+                    SMB_BUSINESS_TOOLS_ADVERTISE_LIST_FIRST_ITEM: 10,
+                    SMB_SETTINGS_ADVERTISE_LIST_ITEM: 11,
+                    SMB_ADVERTISE_FROM_NOTIFICATION: 12,
+                    SMB_ADVERTISE_FROM_BANNER: 13,
+                    SMB_ADVERTISE_FROM_DEEP_LINK: 14,
+                    SMB_BUSINESS_TOOLS_TAB_ADVERTISE: 15,
+                    SMB_CATALOG_LIST_ADVERTISE_BUTTON: 16,
+                    SMB_PRODUCT_DETAILS_ADVERTISE_BUTTON: 17,
+                    SMB_ADVERTISE_FROM_STATUS_MESSAGE: 18,
+                    SMB_HOME_SCREEN_ICON: 19,
+                    SMB_HOME_BANNER: 20,
+                    SMB_ADVERTISE_FROM_STATUS_MESSAGE_SELF_VIEW: 21,
+                    SMB_STATUS_MAIN_TAB_ADVERTISE: 22,
+                    SMB_STATUS_MAIN_TAB_BANNER: 23,
+                    SMB_BUSINESS_HOME_CARD_CREATE_FIRST_AD: 24,
+                    SMB_BUSINESS_HOME_CARD_CREATE_RETURNING_AD: 25,
+                    SMB_MEDIA_SHARE_VIA_GROUP: 26,
+                    SMB_MEDIA_SHARE_VIA_BROADCAST: 27,
+                    STATUS_PLAYBACK_SCREEN_ICON: 28,
+                    CATALOG_SHARED_IN_GROUP: 29,
+                    CATALOG_SHARED_IN_BROADCAST_LIST: 30,
+                    CATALOG_SHARED_IN_SINGLE_CHAT: 31,
+                    PRODUCT_SHARED_IN_SINGLE_CHAT: 32,
+                    PRODUCT_SHARED_IN_BROADCAST_LIST: 33,
+                    PRODUCT_SHARED_IN_GROUP: 34,
+                    PRODUCT_LINK_SHARED_IN_SINGLE_CHAT: 35,
+                    PRODUCT_LINK_SHARED_IN_BROADCAST_LIST: 36,
+                    PRODUCT_LINK_SHARED_IN_GROUP: 37,
+                    SMB_MESSAGING_GUIDE_AD_CREATION: 38,
+                    SMB_BUSINESS_HOME_ADVERTISE_FROM_BANNER: 39,
+                    SMB_STATUS_UPSELL_BOTTOM_SHEET: 40,
+                    BUSINESS_PROFILE: 41,
+                    SMB_BUSINESS_HOME_CARD_ACTIVE_AD: 42,
+                    SMB_STATUS_CHANNELS_TAB_ADVERTISE: 43,
+                    SMB_STATUS_CHANNELS_TAB_BANNER: 44,
+                    SMB_PRODUCT_UPSELL_BOTTOM_SHEET: 45,
+                    SMB_STATUS_CHANNELS_UPSELL_BOTTOM_SHEET: 46,
+                    SMB_ADVERTISE_FROM_FORWARD_SCREEN_INDIVIDUAL: 47,
+                    SMB_ADVERTISE_FROM_FORWARD_SCREEN_GROUP: 48,
+                    SMB_ADVERTISE_FROM_FORWARD_SCREEN_BROADCAST: 49,
+                    SMB_BUSINESS_HOME_CARD_ACTIVE_AD_DISMISS: 50,
+                    SMB_BUSINESS_HOME_CARD_DRAFT_AD: 51,
+                    SMB_BUSINESS_HOME_MANAGE_AD: 52,
+                    SMB_BUSINESS_TOOLS_MANAGE_AD: 53,
+                    SMB_HOME_SCREEN_OVERFLOW_MANAGE_ITEM: 54,
+                    SMB_BUSINESS_HOME_QP_CARD: 55,
+                    SMB_CREATED_AD: 56,
+                    SMB_BUSINESS_HOME_CARD_COUPON_PROMOTION: 57,
+                },
+            ],
+            lwiSubEntryPoint: [
+                6,
+                {
+                    SMB_HOME_SCREEN_CONVERSATIONS_TAB: 1,
+                    SMB_HOME_SCREEN_STATUS_TAB: 2,
+                    SMB_HOME_SCREEN_CALL_HISTORY_TAB: 3,
+                    SMB_HOME_SCREEN_COMMUNITIES_TAB: 4,
+                    SMB_HOME_SCREEN_BIZ_HOME_TAB: 5,
+                },
+            ],
+            statusSessionId: [5, 'integer'],
+            userHasLinkedFbPage: [4, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'LwiEntryTap',
+        id: 2770,
+        props: {
+            businessToolsSessionId: [4, 'string'],
+            catalogSessionId: [2, 'string'],
+            itemsCount: [11, 'integer'],
+            lwiEntryPoint: [
+                3,
+                {
+                    SMB_CATALG_LIST_LWI_ADVERTISE_BANNER: 1,
+                    SMB_CATALOG_LIST_ADVERTISE_MENU_ITEM: 2,
+                    SMB_BUSINESS_TOOLS_ADVERTISE_LIST_ITEM: 3,
+                    SMB_STATUS_DETAILS_ADVERTISE_MENU_ITEM: 4,
+                    SMB_STATUS_PREVIEW_ADVERTISE_MENU_ITEM: 5,
+                    SMB_CONVERSATIONS_LIST_BANNER_WITH_VALID_PRODUCT: 6,
+                    SMB_CONVERSATIONS_LIST_BANNER_WITHOUT_VALID_PRODUCT: 7,
+                    SMB_STATUS_3DTOUCH_ADVERTISE_MENU_ITEM: 8,
+                    SMB_HOME_SCREEN_OVERFLOW_MENU_ITEM: 9,
+                    SMB_BUSINESS_TOOLS_ADVERTISE_LIST_FIRST_ITEM: 10,
+                    SMB_SETTINGS_ADVERTISE_LIST_ITEM: 11,
+                    SMB_ADVERTISE_FROM_NOTIFICATION: 12,
+                    SMB_ADVERTISE_FROM_BANNER: 13,
+                    SMB_ADVERTISE_FROM_DEEP_LINK: 14,
+                    SMB_BUSINESS_TOOLS_TAB_ADVERTISE: 15,
+                    SMB_CATALOG_LIST_ADVERTISE_BUTTON: 16,
+                    SMB_PRODUCT_DETAILS_ADVERTISE_BUTTON: 17,
+                    SMB_ADVERTISE_FROM_STATUS_MESSAGE: 18,
+                    SMB_HOME_SCREEN_ICON: 19,
+                    SMB_HOME_BANNER: 20,
+                    SMB_ADVERTISE_FROM_STATUS_MESSAGE_SELF_VIEW: 21,
+                    SMB_STATUS_MAIN_TAB_ADVERTISE: 22,
+                    SMB_STATUS_MAIN_TAB_BANNER: 23,
+                    SMB_BUSINESS_HOME_CARD_CREATE_FIRST_AD: 24,
+                    SMB_BUSINESS_HOME_CARD_CREATE_RETURNING_AD: 25,
+                    SMB_MEDIA_SHARE_VIA_GROUP: 26,
+                    SMB_MEDIA_SHARE_VIA_BROADCAST: 27,
+                    STATUS_PLAYBACK_SCREEN_ICON: 28,
+                    CATALOG_SHARED_IN_GROUP: 29,
+                    CATALOG_SHARED_IN_BROADCAST_LIST: 30,
+                    CATALOG_SHARED_IN_SINGLE_CHAT: 31,
+                    PRODUCT_SHARED_IN_SINGLE_CHAT: 32,
+                    PRODUCT_SHARED_IN_BROADCAST_LIST: 33,
+                    PRODUCT_SHARED_IN_GROUP: 34,
+                    PRODUCT_LINK_SHARED_IN_SINGLE_CHAT: 35,
+                    PRODUCT_LINK_SHARED_IN_BROADCAST_LIST: 36,
+                    PRODUCT_LINK_SHARED_IN_GROUP: 37,
+                    SMB_MESSAGING_GUIDE_AD_CREATION: 38,
+                    SMB_BUSINESS_HOME_ADVERTISE_FROM_BANNER: 39,
+                    SMB_STATUS_UPSELL_BOTTOM_SHEET: 40,
+                    BUSINESS_PROFILE: 41,
+                    SMB_BUSINESS_HOME_CARD_ACTIVE_AD: 42,
+                    SMB_STATUS_CHANNELS_TAB_ADVERTISE: 43,
+                    SMB_STATUS_CHANNELS_TAB_BANNER: 44,
+                    SMB_PRODUCT_UPSELL_BOTTOM_SHEET: 45,
+                    SMB_STATUS_CHANNELS_UPSELL_BOTTOM_SHEET: 46,
+                    SMB_ADVERTISE_FROM_FORWARD_SCREEN_INDIVIDUAL: 47,
+                    SMB_ADVERTISE_FROM_FORWARD_SCREEN_GROUP: 48,
+                    SMB_ADVERTISE_FROM_FORWARD_SCREEN_BROADCAST: 49,
+                    SMB_BUSINESS_HOME_CARD_ACTIVE_AD_DISMISS: 50,
+                    SMB_BUSINESS_HOME_CARD_DRAFT_AD: 51,
+                    SMB_BUSINESS_HOME_MANAGE_AD: 52,
+                    SMB_BUSINESS_TOOLS_MANAGE_AD: 53,
+                    SMB_HOME_SCREEN_OVERFLOW_MANAGE_ITEM: 54,
+                    SMB_BUSINESS_HOME_QP_CARD: 55,
+                    SMB_CREATED_AD: 56,
+                    SMB_BUSINESS_HOME_CARD_COUPON_PROMOTION: 57,
+                },
+            ],
+            lwiFlowId: [1, 'string'],
+            lwiSubEntryPoint: [
+                7,
+                {
+                    SMB_HOME_SCREEN_CONVERSATIONS_TAB: 1,
+                    SMB_HOME_SCREEN_STATUS_TAB: 2,
+                    SMB_HOME_SCREEN_CALL_HISTORY_TAB: 3,
+                    SMB_HOME_SCREEN_COMMUNITIES_TAB: 4,
+                    SMB_HOME_SCREEN_BIZ_HOME_TAB: 5,
+                },
+            ],
+            statusSessionId: [6, 'integer'],
+            statusTypeMedia: [
+                12,
+                {
+                    IMAGE: 1,
+                    VIDEO: 2,
+                },
+            ],
+            userHasLinkedFbPage: [5, 'boolean'],
+            waCampaignId: [10, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'LwiScreen',
+        id: 2772,
+        props: {
+            adContentRecommendation: [
+                41,
+                {
+                    REGULAR: 1,
+                    RECOMMENDED: 2,
+                },
+            ],
+            adMediaOriginalAspectRatio: [47, 'string'],
+            adMediaPreviewAspectRatio: [48, 'string'],
+            adMediaTypeSelected: [
+                40,
+                {
+                    IMAGE: 1,
+                    VIDEO: 2,
+                },
+            ],
+            adsContentSelected: [
+                42,
+                {
+                    LWI_ADS_CONTENT_TYPE_PRODUCT: 1,
+                    LWI_ADS_CONTENT_TYPE_STATUS: 2,
+                    LWI_ADS_CONTENT_TYPE_DEVICE_MEDIA: 3,
+                    LWI_ADS_CONTENT_TYPE_BUSINESS_PROFILE_PIC: 4,
+                    LWI_ADS_CONTENT_TYPE_CAMERA: 9,
+                    LWI_ADS_CONTENT_TYPE_RECENTLY_USED_MEDIA: 10,
+                    LWI_ADS_CONTENT_TYPE_CATALOGS_ALL: 11,
+                    LWI_ADS_CONTENT_TYPE_STATUSES_ALL: 12,
+                },
+            ],
+            alertCount: [33, 'integer'],
+            audienceType: [
+                45,
+                {
+                    REGION: 1,
+                    MAP: 2,
+                },
+            ],
+            billingStatus: [
+                36,
+                {
+                    UNKNOWN: 1,
+                    NO_ACTION_REQUIRED: 2,
+                    HAS_PENDING_ACTIONS: 3,
+                },
+            ],
+            createAdEnabled: [12, 'boolean'],
+            ctwaAdAccountType: [
+                58,
+                {
+                    CTWA_FB_PAGE_LINKED_ACCOUNT: 0,
+                    CTWA_FB_PAGELESS_ACCOUNT: 1,
+                    CTWA_WA_AD_ACCOUNT: 2,
+                },
+            ],
+            ctwaLoginType: [
+                59,
+                {
+                    CTWA_LOGIN_TYPE_FB_NATIVE: 0,
+                    CTWA_LOGIN_TYPE_FB_WEB: 1,
+                    CTWA_LOGIN_TYPE_WA_AD_ACCOUNT: 2,
+                },
+            ],
+            defaultAdsContentSelected: [
+                9,
+                {
+                    LWI_ADS_CONTENT_TYPE_PRODUCT: 1,
+                    LWI_ADS_CONTENT_TYPE_STATUS: 2,
+                    LWI_ADS_CONTENT_TYPE_DEVICE_MEDIA: 3,
+                    LWI_ADS_CONTENT_TYPE_BUSINESS_PROFILE_PIC: 4,
+                    LWI_ADS_CONTENT_TYPE_CAMERA: 9,
+                    LWI_ADS_CONTENT_TYPE_RECENTLY_USED_MEDIA: 10,
+                    LWI_ADS_CONTENT_TYPE_CATALOGS_ALL: 11,
+                    LWI_ADS_CONTENT_TYPE_STATUSES_ALL: 12,
+                },
+            ],
+            defaultAudienceLocationType: [
+                57,
+                {
+                    CITY_LEVEL: 1,
+                    COUNTRY_LEVEL: 2,
+                },
+            ],
+            itemCount: [39, 'integer'],
+            lwiAdCampaignId: [46, 'string'],
+            lwiAdsIdentityType: [
+                22,
+                {
+                    PAGE: 1,
+                    WHATSAPP: 2,
+                },
+            ],
+            lwiAlertReason: [
+                6,
+                {
+                    LWI_ERROR_CATALOG_LIST_FB_PAGE_NOT_LINKED: 1,
+                    LWI_ERROR_CATALOG_LIST_EMPTY: 2,
+                    LWI_ERROR_CATALOG_LIST_NO_ELIGIBLE_PRODUCT: 3,
+                    LWI_ERROR_UNSUPPORTED_OLD_FB_VERSION: 4,
+                    LWI_ERROR_STATUS_EMPTY: 5,
+                    LWI_NONCE_ERROR: 6,
+                    LWI_ERROR_AD_ACCOUNT_CURRENCY_MISMATCH: 7,
+                    LWI_AD_CREATION_ERROR: 8,
+                    LWI_MISSING_PAYMENT_METHOD: 9,
+                    LWI_NO_INTERNET_CONNECTION: 10,
+                    LWI_SPECIAL_ADS_CATEGORY: 11,
+                    LWI_LOGIN_ON_FACEBOOK: 12,
+                    LWI_REMOVE_FB_ACCOUNT: 13,
+                    LWI_WEBSITE_NOT_SAFE: 14,
+                    LWI_WEBSITE_NOT_AVAILABLE: 15,
+                    LWI_NON_HTTPS: 16,
+                    LWI_FB_WEB_LOGIN_TOKEN_FETCH_ERROR: 17,
+                    LWI_RETRY_WEB_LOGIN_DIALOG_ERROR: 18,
+                    LWI_UNABLE_TO_REDIRECT_BROWSER_NOT_FOUND: 19,
+                    LWI_AD_ACCOUNT_SWITCH_ERROR: 20,
+                    LWI_POLICY_REVIEW_REQUIRED: 21,
+                    LWI_SOMETHING_WENT_WRONG: 22,
+                    LWI_MAXIMUM_RETRY_CODE_REACH: 23,
+                    LWI_ERROR_WRONG_CODE: 24,
+                    LWI_ERROR_INCORRECT_EMAIL_FORMAT: 25,
+                    LWI_NO_RESULTS_FOUND: 26,
+                    LWI_ACTION_ESTIMATED_REACH_FAILED_TO_LOAD: 27,
+                    LWI_ACTION_INVALID_USER: 28,
+                    LWI_LOCATION_ACCESS_PERMISSION: 29,
+                    LWI_ACTION_INVALID_MEDIA_SELECTION: 30,
+                    LWI_ACTION_SCREEN_DESTROYED: 31,
+                    LWI_ACTION_INFO_BUTTON_TAPPED: 32,
+                    LWI_INTEGRITY_ERROR: 33,
+                    LWI_INVALID_STATE: 34,
+                    LWI_FAILED_TO_ENROLL_COUPON: 35,
+                    LWI_CHANGES_NOT_SAVED: 36,
+                    LWI_LOCATION_SYSTEM_SETTING_RESOLUTION_REQUIRED: 37,
+                },
+            ],
+            lwiBudgetInLocal: [15, 'integer'],
+            lwiBudgetOptionsInLocal: [54, 'string'],
+            lwiCtwaAdCtaType: [
+                24,
+                {
+                    PROMOTE_AGAIN: 1,
+                    PAUSE_AD: 2,
+                    RESUME_AD: 3,
+                    ADD_BUDGET: 4,
+                    VIEW_AD: 5,
+                    COMPLETE_PAYMENT: 6,
+                    RECREATE_AD_WITH_RECOMMENDATION: 7,
+                    EDIT_AD_WITH_RECOMMENDATION: 8,
+                },
+            ],
+            lwiCtwaAdStatusType: [
+                25,
+                {
+                    ACTIVE: 1,
+                    SCHEDULED: 2,
+                    PAUSED: 3,
+                    NOT_DELIVERING: 4,
+                    REJECTED: 5,
+                    FINISHED: 6,
+                    IN_REVIEW: 7,
+                    COMPLETED: 8,
+                    EXTENDABLE: 9,
+                    UNABLE_TO_CREATE: 10,
+                    LIMITED_DELIVERY: 11,
+                },
+            ],
+            lwiCurrency: [16, 'string'],
+            lwiDefaultBudgetInLocal: [17, 'integer'],
+            lwiDefaultDurationInDays: [18, 'integer'],
+            lwiDefaultTargetingSpec: [
+                19,
+                {
+                    UNKOWN: 1,
+                    MATCHES_TARGETING_SPEC: 2,
+                    DIFFERS_FROM_TARGETING_SPEC: 3,
+                },
+            ],
+            lwiDurationInDays: [20, 'integer'],
+            lwiEventSequenceNumber: [2, 'integer'],
+            lwiExtras: [30, 'string'],
+            lwiFlowId: [1, 'string'],
+            lwiIsFbAppInstalled: [27, 'boolean'],
+            lwiIsIgAppInstalled: [51, 'boolean'],
+            lwiLocationTypesSetOnAudienceSelection: [55, 'string'],
+            lwiMaxDurationInDays: [52, 'integer'],
+            lwiMinDurationInDays: [53, 'integer'],
+            lwiScreenAction: [
+                5,
+                {
+                    LWI_ACTION_VIEW: 1,
+                    LWI_ACTION_BACK_BUTTON_TAPPED: 2,
+                    LWI_ACTION_CREATE_ADS_TAPPED: 3,
+                    LWI_ACTION_MANAGE_ADS_TAPPED: 4,
+                    LWI_ACTION_LEARN_MORE_TAPPED: 5,
+                    LWI_ACTION_PRODUCT_SELECTED: 6,
+                    LWI_ACTION_CONTINUE_TAPPED: 7,
+                    LWI_MANAGE_ADS_DISPLAYED: 8,
+                    LWI_ALERT: 9,
+                    LWI_ACTION_PROMOTE_CATALOG_ITEMS_TAPPED: 10,
+                    LWI_ACTION_PROMOTE_STATUSES_TAPPED: 11,
+                    LWI_ACTION_PROMOTE_NEW_CONTENT_TAPPED: 12,
+                    LWI_ACTION_CONTACT_US_TAPPED: 13,
+                    LWI_ACTION_HELP_TAPPED: 14,
+                    LWI_ACTION_STATUS_SELECTED: 15,
+                    LWI_ACTION_PRODUCT_DESELECTED: 16,
+                    LWI_ACTION_NUX_CONTINUE_TAPPED: 17,
+                    LWI_ACTION_RECOMMENDED_CATALOG_ITEM_SELECTED: 18,
+                    LWI_ACTION_RECOMMENDED_STATUS_ITEM_SELECTED: 19,
+                    LWI_ACTION_NO_CATALOG_TO_ADVERTISE_TAPPED: 20,
+                    LWI_ACTION_NO_STATUS_TO_ADVERTISE_TAPPED: 21,
+                    LWI_CREATE_AD_DISPLAYED: 22,
+                    LWI_ACTION_CONTINUE_TO_MEDIA_SELECTOR_TAPPED: 23,
+                    LWI_ACTION_AD_DESCRIPTION_TAPPED: 24,
+                    LWI_ACTION_AD_DESCRIPTION_SAVE_TAPPED: 25,
+                    LWI_ACTION_AD_DESCRIPTION_CANCEL_TAPPED: 26,
+                    LWI_ACTION_EDIT_BUDGET_TAPPED: 27,
+                    LWI_ACTION_DAILY_BUDGET_SELECTED: 28,
+                    LWI_ACTION_CUSTOM_DAILY_BUDGET_TAPPED: 29,
+                    LWI_ACTION_CUSTOM_DAILY_BUDGET_SAVE_TAPPED: 30,
+                    LWI_ACTION_CUSTOM_DAILY_BUDGET_CANCEL_TAPPED: 31,
+                    LWI_ACTION_AD_DURATION_UPDATED: 32,
+                    LWI_ACTION_EDIT_AUDIENCE_TAPPED: 33,
+                    LWI_ACTION_EDIT_AUDIENCE_LOCATION_TAPPED: 34,
+                    LWI_ACTION_AUDIENCE_LOCATION_SELECTED: 35,
+                    LWI_ACTION_AUDIENCE_LOCATION_DESELECTED: 36,
+                    LWI_ACTION_AUDIENCE_AGE_RANGE_UPDATED: 37,
+                    LWI_ACTION_AUDIENCE_GENDER_SELECTED: 38,
+                    LWI_ACTION_SPECIAL_ADS_CATEGORY_TAPPED: 39,
+                    LWI_ACTION_SPECIAL_ADS_CATEGORY_CONTINUE_TAPPED: 40,
+                    LWI_ACTION_SPECIAL_ADS_CATEGORY_CANCEL_TAPPED: 41,
+                    LWI_ACTION_ADD_PAYMENT_TAPPED: 42,
+                    LWI_ACTION_CREATE_AD_TAPPED: 43,
+                    LWI_ACTION_EDIT_ACCOUNT_TAPPED: 44,
+                    LWI_ACTION_EDIT_PAYMENT_TAPPED: 45,
+                    LWI_ACTION_REMOVE_ACCOUNT_TAPPED: 46,
+                    LWI_ACTION_REMOVE_ACCOUNT_REMOVE_TAPPED: 47,
+                    LWI_ACTION_REMOVE_ACCOUNT_CANCEL_TAPPED: 48,
+                    LWI_ACTION_CONSENT_CONTINUE_TAPPED: 49,
+                    LWI_ACTION_AD_CREATED_BANNER_IMPRESSION: 50,
+                    LWI_ACTION_AD_CREATED_BANNER_CLICK: 51,
+                    LWI_ACTION_AD_CREATED_BANNER_DISMISS: 52,
+                    LWI_ACTION_AD_SETTINGS_TAPPED: 53,
+                    LWI_ACTION_REFRESH_AD_DETAILS_SCREEN: 54,
+                    LWI_ACTION_CONTINUE_TO_AD_SETTINGS_WITH_RECOMMENDED_STATUS_SELECTED: 55,
+                    LWI_ACTION_CONTINUE_TO_AD_SETTINGS_WITH_PHONE_MEDIA_SELECTED: 56,
+                    LWI_ACTION_MEDIA_SELECTION_COMPLETE: 57,
+                    LWI_ACTION_CROP_IMAGE_DONE: 58,
+                    LWI_ACTION_CONSENT_NOT_YOU_TAPPED: 59,
+                    LWI_ACTION_SWITCH_ACCOUNT_TAPPED: 60,
+                    LWI_ACTION_SWITCH_ACCOUNT_SWITCH_TAPPED: 61,
+                    LWI_ACTION_SWITCH_ACCOUNT_CANCEL_TAPPED: 62,
+                    LWI_ACTION_WEB_LOGIN_PAGE_LOADED: 63,
+                    LWI_ACTION_WEB_LOGIN_SUCCESS: 64,
+                    LWI_ACTION_CONSENT_LOGIN_TAPPED: 65,
+                    LWI_ACTION_WEB_LOGIN_CANCELLED: 66,
+                    LWI_ACTION_WEB_LOGIN_TRY_AGAIN: 67,
+                    LWI_NEW_MANAGE_ADS_TAB_ADS_LOADED: 68,
+                    LWI_NEW_MANAGE_ADS_TAB_AD_CLICKED: 69,
+                    LWI_NEW_MANAGE_ADS_TAB_AD_CTA_MENU_CLICKED: 70,
+                    LWI_NEW_MANAGE_ADS_TAB_AD_CTA_ITEM_CLICKED: 71,
+                    LWI_NEW_MANAGE_ADS_TAB_EDUCATION_BANNER_SHOWN: 72,
+                    LWI_NEW_MANAGE_ADS_TAB_EDUCATION_BANNER_CANCELLED: 73,
+                    LWI_NEW_MANAGE_ADS_TAB_CONSENT_SHOWN: 74,
+                    LWI_NEW_MANAGE_ADS_TAB_CONSENT_ACCEPTED: 75,
+                    LWI_NEW_MANAGE_ADS_TAB_CONSENT_DIFFERENT_USER_SIGN_IN: 76,
+                    LWI_NEW_MANAGE_ADS_TAB_WEB_LOGIN_CONSENT_SCREEN_SHOWN: 77,
+                    LWI_NEW_MANAGE_ADS_TAB_CONSENT_WEB_LOGIN_SIGN_IN: 78,
+                    LWI_NEW_MANAGE_ADS_TAB_WEB_LOGIN_SUCCESSFUL: 79,
+                    LWI_MANAGE_ADS_TAPPED_V2: 80,
+                    LWI_NEW_MANAGE_ADS_TAB_AD_CREATED_BANNER_CANCELLED: 81,
+                    LWI_NEW_MANAGE_ADS_TAB_AD_CREATED_BANNER_BACK_PRESED: 82,
+                    LWI_NO_PERMISSION_TO_MANAGE_ADS_DIALOG_SHOWN: 83,
+                    LWI_SWITCH_ACCCOUNT_ON_NO_MANAGE_ADS_PERMISSION_DIALOG_PRESSED: 84,
+                    LWI_LOGIN_PRESSED_ON_SESSION_EXPIRED: 85,
+                    LWI_ASYNC_DATA: 86,
+                    LWI_ACTION_AD_ACCOUNTS_TAPPED: 87,
+                    LWI_ACTION_AD_ACCOUNT_SELECTED: 88,
+                    LWI_ACTION_AD_ACCOUNT_SWITCH_SUCCESS: 89,
+                    LWI_ACTION_AD_ACCOUNT_SWITCH_CANCELLED: 90,
+                    LWI_ACTION_SELECT_SAVED_AUDIENCE: 91,
+                    LWI_ACTION_SELECT_DEFAULT_AUDIENCE: 92,
+                    LWI_ACTION_EDIT_DEFAULT_AUDIENCE: 93,
+                    LWI_ACTION_NON_DISCRIMINATION_POLICY_ACCEPT_TAPPED: 94,
+                    LWI_ACTION_POLICY_REVIEW_REQUIRED_EXIT_TAPPED: 95,
+                    LWI_ACTION_POLICY_REVIEW_REQUIRED_REVIEW_TAPPED: 96,
+                    LWI_ACTION_NON_DISCRIMINATION_POLICY_ACCEPT_SUCCESS: 97,
+                    LWI_ACTION_NON_DISCRIMINATION_POLICY_CANCELLED: 98,
+                    LWI_ACTION_NON_DISCRIMINATION_POLICY_TRY_AGAIN: 99,
+                    LWI_ACTION_LOADED: 100,
+                    LWI_CTA_MENU_CLICKED: 101,
+                    LWI_ACTION_CTA_ITEM_CLICKED: 102,
+                    LWI_ACTION_AD_PREVIEW_TAPPED: 103,
+                    LWI_AD_PREVIEW_STARTED: 104,
+                    LWI_BILLING_LOADED: 105,
+                    LWI_BILLING_ERROR: 106,
+                    LWI_IMAGE_URL_DETAILS_LOADED: 107,
+                    LWI_ACTION_BILLING_RETRY_TAPPED: 108,
+                    LWI_ACTION_VIEW_DETAILED_INSIGHTS_TAPPED: 109,
+                    LWI_ACTION_VIEW_ADVANCED_AUDIENCE_TAPPED: 110,
+                    LWI_ACTION_PROMOTE_AGAIN_TAPPED: 111,
+                    LWI_ACTION_EDIT_ON_FACEBOOK_TAPPED: 113,
+                    LWI_ACTION_SWIPE_REFRESH: 114,
+                    LWI_ACTION_VIEW_FACEBOOK_AD_PREVIEW: 115,
+                    LWI_ACTION_VIEW_INSTAGRAM_AD_PREVIEW: 116,
+                    LWI_ACTION_NEXT_BUTTON_TAPPED: 117,
+                    LWI_ACTION_LOADING_ERROR: 118,
+                    LWI_ACTION_DIALOG_DISMISSED: 119,
+                    LWI_NETWORK_ERROR_SHOWN: 120,
+                    LWI_GENERIC_ERROR_SHOWN: 121,
+                    LWI_RETRY_BUTTON_TAPPED: 122,
+                    LWI_ACTION_RECOMMENDED_BUINESS_POFILE_ITEM_SELECTED: 123,
+                    LWI_ACTION_BUINESS_POFILE_ITEM_SELECTED: 124,
+                    LWI_ACTION_CONTINUE_TO_AD_SETTINGS_WITH_RECOMMENDED_BUSINESS_PROFILE_SELECTED: 125,
+                    LWI_ACTION_CONTINUE_TO_AD_SETTINGS_WITH_BUSINESS_PROFILE_SELECTED: 126,
+                    LWI_ACTION_EDIT_IMAGE_DONE: 127,
+                    LWI_ACTION_WA_PAGELESS_BUTTON_TAPPED: 128,
+                    LWI_ACTION_SWITCH_FACEBOOK_ACCOUNT_BUTTON_TAPPED: 129,
+                    LWI_ACTION_TRY_AGAIN_DIALOG_BUTTON_TAPPED: 130,
+                    LWI_ACTION_CANCEL_DIALOG_BUTTON_TAPPED: 131,
+                    LWI_PAGE_PERMISSION_ERROR_RESOLVED: 132,
+                    LWI_PAGE_PERMISSION_ERROR_UNRESOLVED: 133,
+                    LWI_ACTION_PROMOTE_TEXT_TAPPED: 134,
+                    LWI_ACTION_EXIT_CONF_SHOWN: 135,
+                    LWI_ACTION_EXIT_CONF_EXIT_TAPPED: 136,
+                    LWI_ACTION_EXIT_CONF_RETURN_TO_AD_TAPPED: 137,
+                    AD_WITH_ALERT_DISPLAYED: 138,
+                    LWI_ACTION_CONTINUE_TO_AD_SETTINGS_WITH_CAMERA_SELECTED: 139,
+                    LWI_ACTION_CONTINUE_TO_AD_SETTINGS_WITH_GALLERY_SELECTED: 140,
+                    LWI_ACTION_CAMERA_ITEM_SELECTED: 141,
+                    LWI_ACTION_GALLERY_ITEM_SELECTED: 142,
+                    LWI_ACTION_CHOOSE_DIFFERENT_MEDIA_CLICKED: 143,
+                    LWI_ACTION_GET_STARTED_CLICKED: 144,
+                    LWI_ACTION_SELECT_PHOTO_FROM_GALLERY: 145,
+                    LWI_ACTION_PUBLISH_FB_PAGE_BUTTON_TAPPED: 146,
+                    LWI_ACTION_ADMIN_RIGHTS_SUB_STEP_VIEW: 147,
+                    LWI_ACTION_SEND_CODE_BUTTON_TAPPED: 148,
+                    LWI_ACTION_OPEN_EMAIL_APP_TAPPED: 149,
+                    LWI_ACTION_CHANGE_EMAIL_TAPPED: 150,
+                    LWI_ACTION_RESEND_TAPPED: 151,
+                    LWI_ACTION_NONCE_SUBMIT: 152,
+                    LWI_ACTION_VERIFY_SUCCESS: 153,
+                    LWI_ACTION_CODE_FIELD_TAPPED: 154,
+                    LWI_ACTION_AD_ACC_SETTINGS_MENU_OPT_TAPPED: 155,
+                    LWI_ACTION_AD_PAYMENTS_ROW_TAPPED: 156,
+                    LWI_ACTION_AD_DESIGN_UPDATE_TAPPED: 157,
+                    LWI_ACTION_AD_SETTINGS_UPDATE_TAPPED: 158,
+                    LWI_ACTION_CANCEL_BUTTON_TAPPED: 159,
+                    LWI_ACTION_SAVE_BUTTON_TAPPED: 160,
+                    LWI_EDIT_AD_ACC_EMAIL_SUCCESS: 161,
+                    LWI_ACTION_AD_APPEAL_BANNER_SHOWN: 164,
+                    LWI_ACTION_APPEAL_REQUEST_REVIEW_TAPPED: 165,
+                    LWI_ACTION_APPEAL_VIEW_STATUS_TAPPED: 166,
+                    LWI_ACTION_APPEAL_LEARN_MORE_TAPPED: 167,
+                    LWI_ACTION_AD_ACCOUNT_APPEAL_BANNER_SHOWN: 168,
+                    LWI_ACTION_SUBMIT_TAPPED: 169,
+                    LWI_MEDIA_PARSING_STARTED: 170,
+                    LWI_MEDIA_PARSING_SUCCESS: 171,
+                    LWI_MEDIA_PARSING_FAILURE: 172,
+                    LWI_ACTION_VIDEO_AD_PREVIEW_AUDIO_MUTE_TAPPED: 174,
+                    LWI_ACTION_VIDEO_AD_PREVIEW_AUDIO_UNMUTE_TAPPED: 175,
+                    SMB_STATUS_UPSELL_BOTTOM_SHEET_DISMISS: 178,
+                    LWI_ACTION_ITEM_SELECTED: 179,
+                    LWI_ACTION_CONTEXTUAL_HELP_OPENED: 180,
+                    LWI_ACTION_EMAIL_INPUT_STARTED: 181,
+                    LWI_ACTION_SEARCH_ADDRESS_TAPPED: 182,
+                    LWI_ACTION_SAVE_MAP_AUDIENCE_TAPPED: 183,
+                    LWI_ACTION_MAP_RADIUS_SELECTED: 184,
+                    LWI_ACTION_MAP_LOCATION_ITEM_TAPPED: 185,
+                    LWI_ACTION_SAVE_MAP_AUDIENCE_SUCCESS: 186,
+                    LWI_ACTION_AUDIENCE_REGION_OPTION_SELECTED: 187,
+                    LWI_ACTION_AUDIENCE_MAP_OPTION_SELECTED: 188,
+                    LWI_ACTION_EDIT_MAP_AUDIENCE_TAPPED: 189,
+                    LWI_ACTION_ESTIMATED_REACH_SUCCESS: 190,
+                    LWI_ACTION_CONTINUE_TO_STATUS_PICKER_SELECTED: 191,
+                    LWI_ACTION_ITEM_DESELECT: 192,
+                    LWI_ACTION_EDIT_MEDIA_CLICKED: 193,
+                    LWI_ACTION_EDIT_MEDIA_COMPLETE: 194,
+                    LWI_ACTION_EDIT_MEDIA_CANCELLED: 195,
+                    LWI_ACTION_AD_CREATION_HUB_DRAFT_AD_TAP: 196,
+                    LWI_ACTION_AD_CREATION_DRAFT_AD_SAVED: 197,
+                    LWI_NEW_MANAGE_ADS_TAB_STARTED_LOADING_ADS: 198,
+                    LWI_MANAGE_ADS_ITEM_MAIN_CTA_IMPRESSION: 199,
+                    LWI_MANAGE_ADS_ITEM_MAIN_CTA_TAP: 200,
+                    LWI_ACTION_WEB_LINK_CLICKED: 201,
+                    LWI_ACTION_NON_DISCRIMINATION_POLICY_HEC_CLICKED: 202,
+                    LWI_ACTION_NON_DISCRIMINATION_POLICY_FULL_CLICKED: 203,
+                    LWI_ACTION_BUDGET_DURATION_INFO_ICON_TAPPED: 204,
+                    LWI_ACTION_AUDIENCE_INFO_ICON_TAPPED: 205,
+                    LWI_ACTION_REVIEW_AD_TAPPED: 206,
+                    LWI_SIMPLIFIED_LOADER_AUTO_DISMISSED: 207,
+                    LWI_PENDING_PAYMENT_REQUEST_STARTED: 208,
+                    LWI_ACTION_LOGIN_PROMPT_FOR_MAP_OPTION_SHOWN: 209,
+                    LWI_ACTION_MAP_USE_CURRENT_LOCATION_TAPPED: 210,
+                    LWI_ACTION_LOCATION_PERMISSION_ACCESS_ALLOW_TAPPED: 211,
+                    LWI_ACTION_LOCATION_PERMISSION_ACCESS_DENY_TAPPED: 212,
+                    LWI_ACTION_ITEM_DESELECTED: 213,
+                    LWI_ACTION_MEDIA_FILTER_APPLIED: 214,
+                    LWI_ACTION_MEDIA_FILTER_CLEARED: 215,
+                    LWI_ACTION_SCREEN_DESTROYED: 216,
+                    LWI_ACTION_GALLERY_REQUEST_PERMISSION_DIALOG_SHOWN: 217,
+                    LWI_ACTION_GALLERY_REQUEST_GRANTED: 218,
+                    LWI_ACTION_GALLERY_REQUEST_DENIED: 219,
+                    LWI_FAST_TRACK_STEP_LOADED: 220,
+                    LWI_FAST_TRACK_STEP_CLOSED: 221,
+                    LWI_CUSTOM_TAB_OPENED: 222,
+                    LWI_CUSTOM_TAB_REDIRECT_RECEIVED: 223,
+                    LWI_ACTION_CURRENT_LOCATION_APPLIED: 224,
+                    LWI_ACTION_PADDED_STATUS_IMAGE_DISPLAYED: 225,
+                    LWI_ACTION_GOOGLE_DIALOG_CANCELLED: 226,
+                    LWI_ACTION_GOOGLE_ACCOUNT_SELECTED: 227,
+                    LWI_ACTION_GOOGLE_SIGNIN_TAPPED: 228,
+                    LWI_ACTION_GOOGLE_ACCOUNT_SELECTION_FAILED: 229,
+                    LWI_ACTION_GOOGLE_ACCOUNT_ONBOARDING_FAILED: 230,
+                    LWI_ACTION_GOOGLE_ACCOUNT_ONBOARDING_SUCCESS: 231,
+                    LWI_ACTION_AD_STATUS_ISSUE_BANNER_SHOWN: 232,
+                    LWI_ACTION_AD_STATUS_ISSUE_BANNER_LEARN_MORE_TAPPED: 233,
+                    LWI_ACTION_CROP_MEDIA_CLICKED: 234,
+                    LWI_ACTION_CROP_MEDIA_COMPLETE: 235,
+                    LWI_ACTION_CROP_MEDIA_CANCELLED: 236,
+                    LWI_ACTION_USE_EMAIL_TAPPED: 237,
+                    LWI_ACTION_USE_FB_TAPPED: 238,
+                    LWI_ACTION_COUPON_PROMOTION_NUX_CONTINUE_TAPPED: 239,
+                    LWI_ACTION_SAVE_CHANGES_DIALOG_OPTION_TAPPED: 240,
+                    LWI_ACTION_GO_BACK_DIALOG_OPTION_TAPPED: 241,
+                    LWI_ACTION_LOCATION_SYSTEM_SETTING_TURN_ON_OK_TAPPED: 242,
+                    LWI_ACTION_LOCATION_SYSTEM_SETTING_TURN_ON_NO_THANKS_TAPPED: 243,
+                },
+            ],
+            lwiScreenReference: [
+                4,
+                {
+                    LWI_SCREEN_ADSCREATION_HUB: 1,
+                    LWI_SCREEN_PRODUCT_SELECTOR: 2,
+                    LWI_SCREEN_CATALOG_LIST: 3,
+                    LWI_SCREEN_CONTENT_SELECTOR: 4,
+                    LWI_SCREEN_HELP: 5,
+                    LWI_SCREEN_STATUS_SELECTOR: 6,
+                    LWI_SCREEN_MULTI_PRODUCT_SELECTOR: 7,
+                    LWI_SCREEN_NUX_EDUCATION: 8,
+                    LWI_SCREEN_ADSCREATION_HUB_V2: 9,
+                    LWI_SCREEN_AD_DETAILS: 10,
+                    LWI_SCREEN_FB_CONSENT_CONFIRM: 11,
+                    LWI_SCREEN_ADSCREATION_HUB_MANAGE: 12,
+                    LWI_SCREEN_INSTAGRAM_AD_PREVIEW: 13,
+                    LWI_SCREEN_AD_BUDGET: 14,
+                    LWI_SCREEN_AD_AUDIENCE: 15,
+                    LWI_SCREEN_AD_AUDIENCE_LOCATION: 16,
+                    LWI_SCREEN_AD_SETTINGS: 17,
+                    LWI_SCREEN_WEB_PAYMENT: 18,
+                    LWI_SCREEN_MEDIA_SELECTION_FLOW: 19,
+                    LWI_SCREEN_IMAGE_CROPPING: 20,
+                    LWI_SCREEN_FB_WEB_LOGIN_CONSENT_CONFIRM: 21,
+                    LWI_SCREEN_FB_WEB_LOGIN: 22,
+                    LWI_MANAGE_ADS_TAB: 23,
+                    LWI_MANAGE_ADS_FB_CONSENT: 24,
+                    LWI_MANAGE_ADS_FB_CONSENT_NOT_LOGGED_IN: 25,
+                    LWI_SCREEN_AD_AUDIENCE_LIST: 26,
+                    LWI_SCREEN_NATIVE_NON_DISCRIMINATION_CERTIFICATION: 27,
+                    LWI_MANAGE_AD_DETAILS_PAGE: 28,
+                    LWI_SCREEN_AD_PREVIEW: 29,
+                    LWI_NATIVE_ADS_STEPPED_FLOW_DESIGN_AD: 30,
+                    LWI_NATIVE_ADS_STEPPED_FLOW_AD_SETTINGS: 31,
+                    LWI_NATIVE_ADS_STEPPED_FLOW_AD_REVIEW: 32,
+                    LWI_SCREEN_IMAGE_EDITING: 33,
+                    LWI_FAST_TRACK_PAGE_PERMISSION: 34,
+                    LWI_FAST_TRACK_HOST: 35,
+                    LWI_NATIVE_ADS_NUX_EDUCATION_WITH_MEDIA: 36,
+                    LWI_PUBLISH_FB_PAGE: 37,
+                    LWI_SCREEN_AD_ACCOUNT_EMAIL_SUBMIT: 38,
+                    LWI_SCREEN_NONCE_SUBMIT: 39,
+                    LWI_SCREEN_AD_ACCOUNTS_SETTINGS: 40,
+                    LWI_SCREEN_BILLING_HUB: 41,
+                    LWI_SCREEN_EDIT_AD_ACC_EMAIL: 42,
+                    LWI_SCREEN_RECOVERY_AD_ACCOUNT: 43,
+                    LWI_SCREEN_MULTI_STATUS_SELECTOR: 44,
+                    LWI_SCREEN_APPEAL_REJECTED_AD: 45,
+                    LWI_SCREEN_APPEAL_AD_ACCOUNT_BAN: 46,
+                    LWI_SCREEN_AD_APPEAL_STATUS: 47,
+                    LWI_SCREEN_AD_ACCOUNT_APPEAL_STATUS: 48,
+                    LWI_DIALOG_GALLERY_MEDIA_SOURCE_SELECTOR: 49,
+                    LWI_SCREEN_NATIVE_EDIT_MAP_AUDIENCE: 50,
+                    LWI_SCREEN_MEDIA_PICKER_RECENTLY_USED: 51,
+                    LWI_SCREEN_MEDIA_PICKER_STATUSES: 52,
+                    LWI_SCREEN_MEDIA_PICKER_CATALOG: 53,
+                    LWI_NEW_MANAGE_ADS: 54,
+                    LWI_SCREEN_NON_DISCRIMINATION_NATIVE: 55,
+                    LWI_SCREEN_NON_DISCRIMINATION_HEC_NATIVE: 56,
+                    LWI_SCREEN_NON_DISCRIMINATION_FULL_NATIVE: 57,
+                    LWI_SCREEN_SIMPLIFIED_LOADER: 58,
+                    LWI_SCREEN_SIMPLIFIED_EXPLAINER: 59,
+                    LWI_SCREEN_PENDING_AD_VALIDATION: 60,
+                    LWI_SCREEN_MESSAGING_GUIDE: 61,
+                    LWI_SCREEN_MULTISOURCE_PICKER: 62,
+                    LWI_SCREEN_PAYMENT_SUMMARY: 63,
+                    LWI_SCREEN_EDUCATIVE_LOADER: 64,
+                    LWI_SCREEN_FB_LOGIN_APP_REDIRECT_CONSENT: 65,
+                    LWI_SCREEN_BENEFICIARY_INFO_SCREEN: 66,
+                    LWI_SCREEN_FB_LOGIN_APP_REDIRECT_CONSENT_MANAGE_ADS: 67,
+                    LWI_SCREEN_FB_CUSTOM_TAB_WEB_LOGIN: 68,
+                    LWI_SCREEN_GOOGLE_AUTH_SYSTEM_DIALOG: 69,
+                    LWI_WA_AD_ACCOUNT_RECOVERY_PLACEHOLDER: 70,
+                    LWI_SCREEN_CONSENT_HOST: 71,
+                    LWI_SCREEN_COUPON_PROMOTION_NUX: 72,
+                    LWI_DIALOG_LOCATION_PERMISSION: 73,
+                    LWI_DIALOG_SYSTEM_LOCATION_SETTINGS_RESOLUTION: 74,
+                },
+            ],
+            lwiTargetingSpec: [21, 'string'],
+            lwiTotalCtwaAds: [26, 'integer'],
+            lwiViewerHasEditPermission: [28, 'boolean'],
+            lwiViewerHasPromotePermission: [32, 'boolean'],
+            mediaEdited: [49, 'boolean'],
+            onboardingEntryPoint: [
+                38,
+                {
+                    ONBOARDING_ENTRY_POINT_FAST_TRACK: 1,
+                    ONBOARDING_ENTRY_POINT_AD_REVIEW_SCREEN: 2,
+                    ONBOARDING_ENTRY_POINT_CONSENT_HOST: 3,
+                },
+            ],
+            paymentMethodSet: [13, 'boolean'],
+            productId: [3, 'string'],
+            selectedProductsIdsList: [8, 'string'],
+            totalMediaCount: [50, 'integer'],
+            usedSavedAudience: [31, 'boolean'],
+            userHasAdvancedAudience: [35, 'boolean'],
+            userHasBpCredentials: [43, 'boolean'],
+            userHasCatalogItemsToPromote: [10, 'boolean'],
+            userHasChangedDefaultCityLevelAudience: [56, 'boolean'],
+            userHasLinkedFbPage: [7, 'boolean'],
+            userHasMultisourceMedia: [60, 'boolean'],
+            userHasSeenRecommendedBudget: [34, 'boolean'],
+            userHasStatusToPromote: [11, 'boolean'],
+            userProvidedFbConsent: [14, 'boolean'],
+            userWentThroughFbWebLogin: [23, 'boolean'],
+            validationStatus: [
+                37,
+                {
+                    UNKNOWN: 1,
+                    NO_ACTION_REQUIRED: 2,
+                    HAS_ERRORS: 3,
+                },
+            ],
+            waAdAccountId: [44, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ManageAdsEntryPointImpression',
+        id: 4124,
+        props: {
+            manageAdsEntryPoint: [
+                1,
+                {
+                    WEB_OVERFLOW_MENU: 1,
+                    SMB_CHAT_LIST_CTWA_BANNER: 2,
+                    SMB_NATIVE_ADS_MANAGEMENT: 3,
+                    SMB_BUSINESS_TOOLS_MANAGE_ADS_LIST_ITEM: 4,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ManageAdsEntryPointTap',
+        id: 4126,
+        props: {
+            manageAdsEntryPoint: [
+                1,
+                {
+                    WEB_OVERFLOW_MENU: 1,
+                    SMB_CHAT_LIST_CTWA_BANNER: 2,
+                    SMB_NATIVE_ADS_MANAGEMENT: 3,
+                    SMB_BUSINESS_TOOLS_MANAGE_ADS_LIST_ITEM: 4,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'SmbDataSharingConsentScreen',
+        id: 3972,
+        props: {
+            smbDataSharingConsentScreenEntryPoint: [
+                3,
+                {
+                    NEW_ORDER: 0,
+                    CART: 1,
+                    LABEL_CHAT: 2,
+                    LABEL_MESSAGE: 3,
+                },
+            ],
+            smbDataSharingConsentScreenType: [
+                1,
+                {
+                    SMB_DATA_SHARING_CONSENT_SCREEN_VIEW: 0,
+                    SMB_DATA_SHARING_CONSENT_SCREEN_AGREE: 1,
+                    SMB_DATA_SHARING_CONSENT_SCREEN_DISAGREE: 2,
+                    SMB_DATA_SHARING_CONSENT_SCREEN_CANCEL: 3,
+                },
+            ],
+            smbDataSharingConsentScreenVersion: [2, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'SuspendedGroupDelete',
+        id: 4342,
+        props: {
+            deleteBtnSource: [
+                1,
+                {
+                    BOTTOM_SHEET_BTN: 1,
+                    BLOCKED_COMPOSER_BTN: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 0,
+    },
+    {
+        name: 'SupportAiSession',
+        id: 4970,
+        props: {
+            contactUsEntryPoint: [2, 'string'],
+            supportAiEventType: [
+                1,
+                {
+                    CONTACT_US_CLICKED: 1,
+                    START_CHAT_CLICKED: 2,
+                    CONTACT_US_VIA_EMAIL_MENU_ITEM_CLICKED: 3,
+                    FALLBACK_EMAIL_DIALOG_SHOWN: 4,
+                    FALLBACK_EMAIL_BUTTON_CLICKED: 5,
+                    NO_INTERNET_DIALOG_SHOWN: 6,
+                    TICKET_CREATION_DIALOG_SHOWN: 7,
+                    REVIEW_INFORMATION_LEARN_MORE_CLICKED: 8,
+                    SUPPORT_AI_SCREEN_SHOWN: 9,
+                    THUMB_UP_CLICKED: 10,
+                    THUMB_DOWN_CLICKED: 11,
+                    SUBMIT_MESSAGE_FEEDBACK: 12,
+                    SUBMIT_MESSAGE_FEEDBACK_FAILED: 13,
+                    SUBMIT_MESSAGE_FEEDBACK_SUCCEEDED: 14,
+                    NEGATIVE_FEEDBACK_OPTIONS_SCREEN_CANCELLED: 15,
+                    NEGATIVE_FEEDBACK_OPTIONS_SCREEN_SHOWN: 16,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'BannerEvent',
+        id: 1578,
+        props: {
+            bannerId: [3, 'string'],
+            bannerOperation: [
+                2,
+                {
+                    SHOWN: 1,
+                    CLICK: 2,
+                    DISMISS: 3,
+                    ELIGIBLE: 4,
+                    REVOKED: 5,
+                    RENDERED: 6,
+                },
+            ],
+            bannerType: [
+                1,
+                {
+                    GROUP: 1,
+                    SMB_WELCOME: 2,
+                    SMB_VERIFIED: 3,
+                    SMB_EDIT_PROFILE: 4,
+                    SMB_EDIT_DESCRIPTION: 5,
+                    SMB_EDIT_CATEGORY: 6,
+                    SMB_EDIT_HOURS: 7,
+                    SMB_EDIT_EMAIL: 8,
+                    SMB_CATALOG: 9,
+                    SMB_CATALOG_SHARE_BANNER: 10,
+                    CROSS_SELL_PROFILE_INTERSTITIAL: 11,
+                    CROSS_SELL_CHATS_INTERSTITIAL: 12,
+                    CROSS_SELL_CHATS_BANNER: 13,
+                    BUSINESS_ACCOUNT_SYSTEM_MESSAGE: 14,
+                    SMB_CATALOG_CART_INTERSTITIAL: 15,
+                    PAYMENTS_ONBOARD_BANNER: 16,
+                    SMB_DIRECTORY_UPSELL: 17,
+                    SMB_CATALG_LIST_LWI_ADVERTISE_BANNER: 18,
+                    SMB_LWI_AD_HUB_EDUCATIONAL_BANNER: 19,
+                    SMB_COLLECTION_CREATION: 20,
+                    SMB_AWAY_MESSAGE: 21,
+                    SMB_GREETING_MESSAGE: 22,
+                    PAYMENTS_INCENTIVE_BANNER: 23,
+                    SMB_ADSCREATION_CONVERSATIONS_BANNER_WITH_VALID_PRODUCT: 24,
+                    SMB_ADSCREATION_CONVERSATIONS_BANNER_WITHOUT_VALID_PRODUCT: 25,
+                    SMB_MD_AWARENESS: 26,
+                    BACKUP_QUOTA: 27,
+                    SMB_ADD_COVER_PHOTO: 28,
+                    PAYMENTS_MERCHANT_ONBOARDING_BANNER: 29,
+                    SMB_PAYMENTS_MERCHANT_ACCOUNT_STATUS_BANNER: 30,
+                    SMB_CTWA_AD_ACTION_BANNER: 31,
+                    BIZ_INTEGRITY_WARNING_BANNER: 32,
+                    SMB_CTWA_AUTO_LABEL_BANNER: 33,
+                    SMB_UPDATE_CATEGORY_BANNER: 34,
+                    SMB_PREMIUM_UPSELL_CHAT_BANNER: 35,
+                    SMB_PREMIUM_SUBS_PAYMENT_FAILED_BANNER: 36,
+                    SMB_PREMIUM_SUBS_UNINTENTIONAL_CANCELED_BANNER: 37,
+                    SMB_CLICK_GET_PAID_ON_WA: 38,
+                    SMB_CONTINUE_AD_CREATION_REMINDER_BANNER: 39,
+                    SMB_CONTINUE_AD_CREATION_REMINDER_BOTTOM_SHEET: 40,
+                    P2M_ORDER_HOME_BANNER: 41,
+                    SMB_ADSCREATION_HOME_BANNER: 42,
+                    PRIORITY_INBOX_BANNER: 43,
+                    SMB_BUSINESS_HOME_BANNER: 44,
+                    SMB_CHAT_LIST_QP_BANNER: 45,
+                    SMB_ARCHIVE_STATUS_SETTINGS_BANNER: 46,
+                    QP_BANNER_GROUP_INFO: 47,
+                    P2M_TOOLS_ORDERS: 48,
+                    PRIVACY_CHECKUP: 49,
+                    QP_BANNER_PROFILE: 50,
+                    ANDROID_BACKUP_SETTINGS_BANNER: 51,
+                    ORDERS_UPSELL_BANNER_FROM_ORDERS_HOME: 52,
+                    BACKUP_ERROR: 53,
+                    CURRENT_LOCATION_BANNER: 54,
+                    ORDERS_EDUCATION_BANNER_FROM_ORDERS_HOME: 55,
+                    COLOR_REFRESH_NUX_BANNER: 56,
+                    MV_ONBOARD_FROM_BIZ_PROFILE: 57,
+                    MV_BIZ_TOOLS_SUBSCRIPTION_ACTIVATED: 58,
+                    MV_BIZ_TOOLS_SUBSCRIPTION_NOT_ACTIVE: 59,
+                    MV_BIZ_TOOLS_SUBSCRIPTION_CANCELED: 60,
+                    MV_BIZ_TOOLS_PENDING_BIZ_VERIFICATION: 61,
+                    MANAGE_GOOGLE_STORAGE_BUTTON: 62,
+                    GOOGLE_STORAGE_80_PERCENT_FULL: 63,
+                    GOOGLE_STORAGE_90_PERCENT_FULL: 64,
+                    GOOGLE_BACKUP_GB_THRESHOLD: 65,
+                    PAYMENTS_PIX_ONBOARDING_BANNER: 66,
+                    P2M_PIX_ORDER_HOME_BANNER: 67,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ViewBusinessProfile',
+        id: 1522,
+        props: {
+            bizFbSize: [
+                9,
+                {
+                    B0: 1,
+                    B1: 2,
+                    B2: 3,
+                    B11: 4,
+                    B51: 5,
+                    B101: 6,
+                    B501: 7,
+                    B1K: 8,
+                    B10K: 9,
+                    B100K: 10,
+                    B1M: 11,
+                },
+            ],
+            bizIgSize: [
+                10,
+                {
+                    B0: 1,
+                    B1: 2,
+                    B2: 3,
+                    B11: 4,
+                    B51: 5,
+                    B101: 6,
+                    B501: 7,
+                    B1K: 8,
+                    B10K: 9,
+                    B100K: 10,
+                    B1M: 11,
+                },
+            ],
+            businessProfileJid: [3, 'string'],
+            catalogSessionId: [6, 'string'],
+            hasCoverPhoto: [12, 'boolean'],
+            isProfileLinked: [11, 'boolean'],
+            isSelfView: [7, 'boolean'],
+            linkedAccount: [
+                5,
+                {
+                    FACEBOOK: 0,
+                    INSTAGRAM: 1,
+                },
+            ],
+            profileEntryPoint: [
+                8,
+                {
+                    CONTACT_CARD: 1,
+                    CHAT_HEADER: 2,
+                    CHAT_MENU: 3,
+                    GROUP_MEMBERSHIP_SCREEN: 4,
+                    STATUS: 5,
+                    CALLS: 6,
+                    BROADCAST_LIST: 7,
+                    PRODUCT: 8,
+                    CATALOG: 9,
+                    SETTINGS: 10,
+                    SPAM_BLOCK: 11,
+                    CHATS_HOME: 12,
+                    SHOPS: 13,
+                    MENTION: 14,
+                    EPHEMERAL_SETTINGS_MESSAGE: 15,
+                    MAP: 16,
+                    SEARCH: 17,
+                    PAYMENT_TRANSACTION_DETAILS: 18,
+                    CUSTOM_URL_LINK: 19,
+                    CUSTOM_URL_QR_CODE: 20,
+                    NOTIFICATION_BLOCK_ACTION: 21,
+                    REPORT_TO_ADMIN_PARTICIPANTS_SCREEN: 22,
+                    MISSED_CALL_NOTIFICATION_BLOCK_ACTION: 23,
+                    INTEROP: 24,
+                    FORWARDED_BIZ_MSG_DIRECT_TAP: 25,
+                    FORWARDED_BIZ_MSG_CHAT_HEADER: 26,
+                },
+            ],
+            scrollDepth: [4, 'integer'],
+            viewBusinessProfileAction: [
+                1,
+                {
+                    ACTION_IMPRESSION: 1,
+                    ACTION_CLICK_WEBSITE: 2,
+                    ACTION_CLICK_LOCATION: 3,
+                    ACTION_CLICK_HOURS: 4,
+                    ACTION_CLICK_DESCRIPTION: 5,
+                    ACTION_CLICK_EMAIL: 6,
+                    ACTION_CLICK_ADDTOCONTACT: 7,
+                    ACTION_CLICK_MORE_BIZ_PROFILE: 8,
+                    ACTION_CLICK_MESSAGE: 9,
+                    ACTION_CLICK_VOICE_CALL: 10,
+                    ACTION_CLICK_VIDEO_CALL: 11,
+                    ACTION_CLICK_FORWARD: 12,
+                    ACTION_CLICK_CATALOG_ICON: 13,
+                    ACTION_CLICK_SHOPS_ICON: 14,
+                    ACTION_CLICK_APP_LINK: 15,
+                    ACTION_APP_IMPRESSION: 16,
+                    ACTION_CLICK_STATUS: 17,
+                    ACTION_EXIT: 18,
+                    ACTION_COVER_PHOTO_IMPRESSION: 19,
+                },
+            ],
+            websiteSource: [
+                2,
+                {
+                    SOURCE_OTHER: 1,
+                    SOURCE_INSTAGRAM: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'DisappearingMessageKeepInChat',
+        id: 3482,
+        props: {
+            canEditDmSettings: [16, 'boolean'],
+            chatEphemeralityDuration: [1, 'integer'],
+            isAGroup: [2, 'boolean'],
+            isAdmin: [3, 'boolean'],
+            keptCount: [15, 'integer'],
+            keptDelta: [4, 'integer'],
+            kicActionName: [
+                5,
+                {
+                    KEEP_MESSAGE: 1,
+                    UNKEEP_MESSAGE: 2,
+                    VIEW_KEPT_MESSAGES: 3,
+                    SEARCH_RESULTS_DISPLAY: 4,
+                    SEARCH_RESULTS_TAP: 5,
+                },
+            ],
+            kicActor: [
+                6,
+                {
+                    SENDER: 1,
+                    RECIPIENT: 2,
+                },
+            ],
+            kicEntryPoint: [
+                7,
+                {
+                    CHAT_INFO: 1,
+                    SEARCH: 2,
+                    CHAT: 3,
+                    MEDIA: 4,
+                    DOCS: 5,
+                    LINKS: 6,
+                },
+            ],
+            mediaType: [
+                8,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messageExpiredOnUnkeep: [9, 'boolean'],
+            messageExpiryTimer: [10, 'integer'],
+            messagesInFolder: [11, 'integer'],
+            messagesSelected: [12, 'integer'],
+            threadId: [13, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MdBootstrapHistoryDataReceived',
+        id: 2998,
+        props: {
+            historySyncChunkOrder: [6, 'integer'],
+            historySyncStageProgress: [5, 'integer'],
+            mdBootstrapHistoryPayloadType: [
+                3,
+                {
+                    INITIAL: 1,
+                    RECENT_HISTORY: 2,
+                    FULL_HISTORY: 3,
+                    PUSHNAME: 4,
+                    STATUS_V3: 5,
+                    NON_BLOCKING_DATA: 6,
+                    ON_DEMAND: 7,
+                },
+            ],
+            mdBootstrapPayloadType: [
+                2,
+                {
+                    CRITICAL: 1,
+                    NON_CRITICAL: 2,
+                },
+            ],
+            mdSessionId: [1, 'string'],
+            mdTimestamp: [4, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'AttachmentTrayActions',
+        id: 3980,
+        props: {
+            actionDurationMs: [1, 'integer'],
+            attachmentTrayAction: [
+                2,
+                {
+                    CLICK: 1,
+                    SEND: 2,
+                    CANCEL: 3,
+                },
+            ],
+            attachmentTrayActionTarget: [
+                3,
+                {
+                    ATTACHMENT_TRAY: 1,
+                    DOCUMENT: 2,
+                    CAMERA: 3,
+                    CAMERA_LIBRARY: 4,
+                    GALLERY: 5,
+                    PHOTO_AND_VIDEO_LIBRARY: 6,
+                    AUDIO: 7,
+                    LOCATION: 8,
+                    CONTACT: 9,
+                    POLL: 10,
+                    PAYMENT: 11,
+                    SHOP: 12,
+                    ORDER: 13,
+                    CATALOG: 14,
+                    QUICK_REPLY: 15,
+                    STICKER_MAKER: 16,
+                },
+            ],
+            groupSizeBucket: [
+                4,
+                {
+                    SMALL: 1,
+                    MEDIUM: 2,
+                    LARGE: 3,
+                    EXTRA_LARGE: 4,
+                    XX_LARGE: 5,
+                    XXX_LARGE: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            isAGroup: [5, 'boolean'],
+            isSuccessful: [6, 'boolean'],
+            sendMediaType: [
+                7,
+                {
+                    PHOTO: 1,
+                    VIDEO: 2,
+                    MIXED: 3,
+                },
+            ],
+            sendTime: [8, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'AutoMuteLargeGroupActions',
+        id: 3880,
+        props: {
+            autoMuteAction: [
+                1,
+                {
+                    AUTO_MUTE_EXISTING_GROUP: 1,
+                    AUTO_MUTE_GROWING_GROUP: 2,
+                    AUTO_MUTE_NEW_GROUP: 3,
+                    USER_DIALOG_VIEW: 4,
+                    USER_ADMIT_BY_OK: 5,
+                    USER_ADMIT_BY_MESSAGE_SEND: 6,
+                    USER_DISMISS_BY_UNMUTE: 7,
+                },
+            ],
+            autoMuteGroupId: [2, 'string'],
+            autoMuteGroupSize: [3, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'BusinessMute',
+        id: 1376,
+        props: {
+            muteT: [2, 'timer'],
+            muteeId: [1, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'BusinessUnmute',
+        id: 1378,
+        props: {
+            muteeId: [1, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChannelOpen',
+        id: 4316,
+        props: {
+            channelDirectorySessionId: [8, 'integer'],
+            channelEntryPoint: [
+                1,
+                {
+                    UNKNOWN: 0,
+                    UPDATES_TAB: 1,
+                    DIRECTORY: 2,
+                    LINK: 3,
+                    DEEPLINK: 4,
+                    FORWARDED_MESSAGE: 5,
+                    DIRECTORY_SEARCH: 6,
+                    RECOMMENDED_LIST: 7,
+                    NOTIFICATION: 8,
+                    UPDATES_TAB_SEARCH: 9,
+                    STATUS: 10,
+                    ADMIN_INVITE_MESSAGE: 11,
+                    MEDIA_BROWSER: 12,
+                    SIMILAR_CHANNEL: 13,
+                },
+            ],
+            channelEntryPointMetadata: [
+                9,
+                {
+                    STATUS_HEADER: 1,
+                    LINK_TOOLTIP: 2,
+                    LINK_BUTTON: 3,
+                    POST_TOOLTIP: 4,
+                },
+            ],
+            channelSessionId: [3, 'integer'],
+            channelUserType: [
+                4,
+                {
+                    OWNER: 1,
+                    ADMIN: 2,
+                    FOLLOWER: 3,
+                    GUEST: 4,
+                },
+            ],
+            cid: [6, 'string'],
+            hasNetworkConnection: [7, 'boolean'],
+            similarChannelsSessionId: [11, 'integer'],
+            unreadMessages: [5, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'GroupCatchUp',
+        id: 3058,
+        props: {
+            mentionsCountPendingPercentage: [4, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'InlineVideoPlaybackClosed',
+        id: 2032,
+        props: {
+            inlineVideoCancelBeforePlayStateT: [7, 'timer'],
+            inlineVideoComplete: [8, 'boolean'],
+            inlineVideoCompletionRate: [9, 'integer'],
+            inlineVideoCtaClick: [
+                10,
+                {
+                    LOGO: 1,
+                    MUSIC: 2,
+                    AUTHOR: 3,
+                    WATCH_MORE_END: 4,
+                },
+            ],
+            inlineVideoDurationT: [2, 'timer'],
+            inlineVideoError: [11, 'string'],
+            inlineVideoPlayStartT: [6, 'timer'],
+            inlineVideoPlayed: [3, 'boolean'],
+            inlineVideoStallT: [4, 'timer'],
+            inlineVideoType: [
+                1,
+                {
+                    FACEBOOK: 1,
+                    FACEBOOK_WATCH: 2,
+                    INSTAGRAM: 3,
+                    YOUTUBE: 4,
+                    STREAMABLE: 5,
+                    NETFLIX: 6,
+                    LASSO: 7,
+                    SHARECHAT: 8,
+                },
+            ],
+            inlineVideoWatchT: [5, 'timer'],
+            messageType: [
+                12,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MessageDeleteActions',
+        id: 3626,
+        props: {
+            deleteActionType: [
+                1,
+                {
+                    DELETE_FOR_ME: 0,
+                    DELETE_FOR_EVERYONE: 1,
+                },
+            ],
+            isAGroup: [2, 'boolean'],
+            mediaType: [
+                6,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messagesDeleted: [3, 'integer'],
+            threadId: [4, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'Ptt',
+        id: 458,
+        props: {
+            pttDraftPlayCnt: [7, 'integer'],
+            pttDraftSeekCnt: [8, 'integer'],
+            pttDuration: [5, 'timer'],
+            pttLock: [4, 'boolean'],
+            pttPauseCnt: [9, 'integer'],
+            pttResult: [
+                1,
+                {
+                    SENT: 1,
+                    CANCELLED: 2,
+                    TOO_SHORT: 3,
+                },
+            ],
+            pttSize: [3, 'number'],
+            pttSource: [
+                2,
+                {
+                    FROM_CONVERSATION: 0,
+                    FROM_VOICEMAIL: 1,
+                },
+            ],
+            pttStop: [6, 'boolean'],
+            pttStopTapCnt: [10, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'SnackbarDeleteUndo',
+        id: 3628,
+        props: {
+            isAGroup: [1, 'boolean'],
+            mediaType: [
+                6,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messagesUndeleted: [2, 'integer'],
+            snackbarActionType: [
+                3,
+                {
+                    SNACKBAR_SHOWN: 0,
+                    MESSAGE_UNDELETE: 1,
+                },
+            ],
+            threadId: [4, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebInternDogfoodingUpsell',
+        id: 5072,
+        props: {
+            webInternDogfoodingUpsellAction: [
+                3,
+                {
+                    SHOWN: 0,
+                    ACCEPT: 1,
+                    DISMISS: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcChatOpen',
+        id: 864,
+        props: {
+            webcChatOpenBeforePaintT: [7, 'timer'],
+            webcChatOpenPaintedT: [6, 'timer'],
+            webcChatOpenT: [2, 'timer'],
+            webcFinalRenderedMessageCount: [5, 'integer'],
+            webcRenderedMessageCount: [4, 'integer'],
+            webcUnreadCount: [1, 'number'],
+            webcWindowHeightFloat: [8, 'number'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcElectronDeprecationCta',
+        id: 4642,
+        props: {
+            webcElectronDeprecationCtaEventType: [
+                1,
+                {
+                    IMPRESSION: 1,
+                    CTA_BTN_CLICK: 2,
+                    CTA_DISMISS: 3,
+                },
+            ],
+            webcElectronDeprecationCtaSource: [
+                2,
+                {
+                    INTRO_PANEL: 1,
+                    BUTTERBAR: 2,
+                    LINK_DEVICE_BANNER: 3,
+                },
+            ],
+            webcElectronDeprecationCtaType: [
+                3,
+                {
+                    SOFT_MIGRATION: 1,
+                    APP_EXPIRY_NOTICE: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcLogin',
+        id: 1664,
+        props: {
+            webcBrowserNetworkType: [14, 'string'],
+            webcBrowserStorageQuotaBytes: [15, 'integer'],
+            webcBrowserStorageQuotaUsedBytes: [16, 'integer'],
+            webcLoginT: [3, 'timer'],
+            webcPersistentLoginEnabled: [17, 'boolean'],
+            webcQrCodes: [1, 'integer'],
+            webcQrLoadT: [2, 'timer'],
+            webcSyncChatCount: [8, 'integer'],
+            webcSyncChatSize: [10, 'integer'],
+            webcSyncChatT: [9, 'timer'],
+            webcSyncContactCount: [11, 'integer'],
+            webcSyncContactSize: [13, 'integer'],
+            webcSyncContactT: [12, 'timer'],
+            webcSyncMessageCount: [5, 'integer'],
+            webcSyncMessageSize: [7, 'integer'],
+            webcSyncMessageT: [6, 'timer'],
+            webcSyncT: [4, 'timer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcMemoryStat',
+        id: 1188,
+        props: {
+            hasVerifiedNumber: [12, 'boolean'],
+            jsHeapSizeLimit: [9, 'integer'],
+            numMessages: [8, 'number'],
+            totalJsHeapSize: [10, 'integer'],
+            uptime: [6, 'number'],
+            usedJsHeapSize: [11, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcMenu',
+        id: 2504,
+        props: {
+            webcMenuAction: [
+                2,
+                {
+                    THREADS_SCREEN_CLICK: 1,
+                    CHAT_SCREEN_CLICK: 2,
+                    SETTINGS_SCREEN_CLICK: 3,
+                },
+            ],
+            webcMenuItemLabel: [
+                3,
+                {
+                    NEW_GROUP: 1,
+                    CREATE_A_ROOM: 2,
+                    PROFILE: 3,
+                    CATALOG: 4,
+                    ARCHIVED: 5,
+                    STARRED: 6,
+                    LABELS: 7,
+                    SETTINGS: 8,
+                    LOG_OUT: 9,
+                    CONTACT_INFO: 10,
+                    SELECT_MESSAGES: 11,
+                    CLOSE_CHAT: 12,
+                    MUTE_NOTIFICATIONS: 13,
+                    CLEAR_MESSAGES: 14,
+                    DELETE_CHAT: 15,
+                    REPORT_BUSINESS: 16,
+                    BLOCK: 17,
+                    SETTINGS_NOTIFICATIONS: 18,
+                    SETTINGS_THEME: 19,
+                    SETTINGS_CHAT_WALLPAPER: 20,
+                    SETTINGS_BLOCKED: 21,
+                    SETTINGS_HELP: 22,
+                    OPEN: 23,
+                    CLOSE: 24,
+                    BUSINESS_TOOLS: 25,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChatFolderOpen',
+        id: 2808,
+        props: {
+            activityIndicatorCount: [2, 'integer'],
+            folderType: [1, 'string'],
+            hasImportantMessages: [3, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'OrderDetailsActionsSmb',
+        id: 3456,
+        props: {
+            acceptedPayMethods: [1, 'string'],
+            actionCategory: [2, 'string'],
+            entryPointConversionSource: [13, 'string'],
+            extraAttributes: [3, 'string'],
+            hasAddedPrice: [4, 'boolean'],
+            hasCatalog: [5, 'boolean'],
+            hasNote: [6, 'boolean'],
+            lastMessageDirection: [
+                14,
+                {
+                    OPPOSITE_PARTY_INITIATED: 0,
+                    SELF_INITIATED: 1,
+                },
+            ],
+            messageDepth: [15, 'integer'],
+            orderDetailEntryPoint: [7, 'string'],
+            orderDetailsCreationAction: [
+                8,
+                {
+                    CLICK_VIEW_RECEIVED_CART: 1,
+                    SEND_DECLINE_CART: 2,
+                    USER_DELETED_CART: 3,
+                    CLICK_CREATE_ORDER_DETAILS_FROM_CART: 4,
+                    CLICK_ORDER_FROM_ICON_MENU: 5,
+                    CLICK_CREATE_ORDER_DETAILS_FROM_FAB: 6,
+                    SEND_ORDER_DETAILS: 7,
+                    VIEW_ORDER_DETAILS_HUB: 8,
+                    VIEW_ORDER_DETAILS: 9,
+                    CLICK_SORT_ORDERS: 10,
+                    CLICK_UPDATE_ORDER_STATUS: 11,
+                    SEND_ORDER_STATUS: 12,
+                    CLICK_PAYMENT_DETAILS: 13,
+                    SEND_MARK_AS_PAID: 14,
+                    SEND_MARK_AS_UNPAID: 15,
+                    CLICK_HELP: 16,
+                    CLICK_MESSAGE_CUSTOMER: 17,
+                    CLICK_ADD_PAYMENT_OPTION: 18,
+                    CLICK_SAVE_ADD_PAYMENT_OPTION: 19,
+                    CLICK_SAVE_EDIT_PAYMENT_OPTION: 20,
+                    CLICK_EDIT_PAYMENT_OPTION: 21,
+                    CLICK_DELETE_PAYMENT_OPTION: 22,
+                    CLICK_GET_PAID_ON_WA: 23,
+                    CLICK_SEE_ALL_OTHER_ORDERS: 24,
+                    ADD_PAYMENT_OPTION_TO_OD: 25,
+                    EDIT_PAYMENT_OPTION_IN_OD: 26,
+                    CLICK_ADD_CUSTOM_ITEM_TO_ORDER: 27,
+                    ADD_ADDITIONAL_CHARGES_TO_ORDER: 28,
+                    CLICK_ADD_ITEM: 29,
+                    CLICK_ADD_ADDITIONAL_CHARGES: 30,
+                    VIEW_EPHEMERAL_MESSAGES_PROMPT: 31,
+                    CONFIRM_SENDING_ORDER_DETAILS: 32,
+                    CANCEL_SENDING_ORDER_DETAILS: 33,
+                    DO_NOT_SHOW_EPHEMERAL_MESSAGES_PROMPT: 34,
+                    DISMISS_EPHEMERAL_MESSAGES_PROMPT: 35,
+                    VIEW_EVENT_SHARING_TOS_PROMPT: 37,
+                    DISMISS_EVENT_SHARING_TOS_PROMPT: 38,
+                    CLICK_EVENT_SHARING_TOS: 39,
+                    ACCEPT_EVENT_SHARING_TOS: 40,
+                    REJECT_EVENT_SHARING_TOS: 41,
+                    VIEW_CREATE_ORDER: 42,
+                    DISPLAY_ORDER_STATUS_SHARING_TOS: 43,
+                    CLICK_ORDER_STATUS_SHARING_TOS: 44,
+                    CLICK_EDIT_INSTALLMENTS: 45,
+                    VIEW_EDIT_INSTALLMENTS_PROMPT: 46,
+                    SET_DEFAULT_INSTALLMENTS: 47,
+                    SAVE_DEFAULT_INSTALLMENTS: 48,
+                    DISMISS_EDIT_INSTALLMENTS_PROMPT: 49,
+                    VIEW_ORDERS_VALUE_PROP: 50,
+                    CONTINUE_FROM_ORDERS_VALUE_PROP: 51,
+                    DISMISS_ORDERS_VALUE_PROP: 52,
+                    CLICK_SEE_ALL_ORDER_REQUESTS: 53,
+                    BIZ_ACTION_BAR: 54,
+                    CLICK_ADD_ITEMS: 55,
+                    CANCEL_ORDER_REQUEST: 56,
+                    CONTINUE_ORDER_REQUEST: 57,
+                    VIEW_PROMPT: 58,
+                    CLICK_PROCEED_WITHOUT_CATALOG: 59,
+                    CLICK_CREATE_ORDER_DETAILS_FROM_PAYMENT_METHOD_ADDED_PROMPT: 60,
+                },
+            ],
+            orderEligibleToSend: [11, 'boolean'],
+            paymentStatus: [9, 'boolean'],
+            paymentType: [10, 'string'],
+            sharingOrderStatusEvents: [12, 'boolean'],
+            threadIdHmac: [16, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcStickerMakerEvents',
+        id: 3104,
+        props: {
+            stickerMakerEventName: [
+                1,
+                {
+                    STICKER_MAKER_BUTTON_TAP: 0,
+                    IMAGE_UPLOADED: 1,
+                    IMAGE_CROPPED: 2,
+                    EMOJI_ADDED: 3,
+                    STICKER_ADDED: 4,
+                    TEXT_ADDED: 5,
+                    IMAGE_OUTLINED: 6,
+                    SEND_STICKER: 7,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'QuickReply',
+        id: 1468,
+        props: {
+            attachmentGifCount: [7, 'integer'],
+            attachmentImageCount: [5, 'integer'],
+            attachmentVideoCount: [6, 'integer'],
+            isSmartDefault: [10, 'boolean'],
+            labelThreadId: [12, 'string'],
+            lastMessageDirection: [
+                16,
+                {
+                    OPPOSITE_PARTY_INITIATED: 0,
+                    SELF_INITIATED: 1,
+                },
+            ],
+            messageDepth: [17, 'integer'],
+            quickReplyAction: [
+                1,
+                {
+                    ACTION_SETTINGS_IMPRESSION: 1,
+                    ACTION_SETTINGS_ADD_CLICK: 2,
+                    ACTION_SETTINGS_ADD_ABANDONED: 3,
+                    ACTION_SETTINGS_ADDED: 4,
+                    ACTION_SETTINGS_DELETED: 5,
+                    ACTION_CHAT_IMPRESSION: 6,
+                    ACTION_CHAT_CLICK: 7,
+                    ACTION_SETTINGS_EDITED: 8,
+                    ACTION_CHAT_INVALID_ATTACHMENTS: 9,
+                    ACTION_SETTINGS_INVALID_ATTACHMENTS: 10,
+                    ACTION_SETTINGS_MEDIA_TRANSCODE: 11,
+                    ACTION_CHAT_CLICK_CANCEL: 12,
+                    ACTION_SMART_DEFAULT_CLICK: 13,
+                    QUICK_REPLY_MESSAGE_SENT: 14,
+                },
+            ],
+            quickReplyCount: [2, 'integer'],
+            quickReplyEntryPoint: [
+                11,
+                {
+                    QUICK_REPLY_ENTRY_POINT_KEYBOARD: 1,
+                    QUICK_REPLY_ENTRY_POINT_ATTACHMENT_PANEL: 2,
+                    QUICK_REPLY_ENTRY_POINT_SETTINGS_MENU: 3,
+                    QUICK_REPLY_ENTRY_POINT_BANNERS: 4,
+                    QUICK_REPLY_ENTRY_POINT_NUX: 5,
+                    QUICK_REPLY_ENTRY_POINT_ACTION_BAR: 6,
+                },
+            ],
+            quickReplyKeywordCount: [3, 'integer'],
+            quickReplyKeywordMatched: [4, 'boolean'],
+            quickReplyOrigin: [
+                9,
+                {
+                    UNKNOWN: 0,
+                    CONVERSATIONS: 1,
+                    BUTTON: 2,
+                    KEYBOARD: 3,
+                },
+            ],
+            quickReplyTranscodeResult: [
+                8,
+                {
+                    QUICK_REPLY_TRANSCODE_RESULT_OK: 1,
+                    QUICK_REPLY_TRANSCODE_RESULT_CANCELLED: 2,
+                    QUICK_REPLY_TRANSCODE_RESULT_FAIL_IMAGE_UNKNOWN: 3,
+                    QUICK_REPLY_TRANSCODE_RESULT_FAIL_IMAGE_ENCODING: 4,
+                    QUICK_REPLY_TRANSCODE_RESULT_FAIL_IMAGE_FILE_COPY: 5,
+                    QUICK_REPLY_TRANSCODE_RESULT_FAIL_VIDEO_UNKNOWN: 6,
+                },
+            ],
+            threadCreationDate: [14, 'string'],
+            threadEntryPoint: [13, 'string'],
+            threadIdHmac: [15, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'UserNotice',
+        id: 2472,
+        props: {
+            noticeTriggeredBy: [
+                5,
+                {
+                    AUTO_START: 0,
+                    BANNER: 1,
+                    DEEP_LINK: 2,
+                    JUST_IN_TIME: 3,
+                },
+            ],
+            noticeType: [
+                4,
+                {
+                    LEGACY_USER_NOTICE: 0,
+                    BADGED_USER_NOTICE: 1,
+                    PDFN_DISCLOSURE: 2,
+                },
+            ],
+            userNoticeContentVersion: [2, 'integer'],
+            userNoticeEvent: [
+                3,
+                {
+                    TRIGGERED: 0,
+                    BANNER_APPEAR: 1,
+                    BANNER_SELECT: 2,
+                    MODAL_APPEAR: 3,
+                    MODAL_DISMISS: 4,
+                    MODAL_LINK_FOLLOW: 5,
+                    MODAL_ACCEPT: 6,
+                    BLOCKING_MODAL_APPEAR: 7,
+                    BLOCKING_MODAL_LINK_FOLLOW: 8,
+                    BLOCKING_MODAL_ACCEPT: 9,
+                    BANNER_DISMISS: 10,
+                    EDUCATION_1_APPEAR: 11,
+                    EDUCATION_1_DISMISS: 12,
+                    EDUCATION_1_CONTINUE: 13,
+                    MODAL_BACK: 14,
+                    BLOCKING_MODAL_BACK: 15,
+                    STARTED: 100,
+                    PDFN_SHOWN_0: 105,
+                    BADGE_APPEARED_NEXT_TO_SETTINGS: 110,
+                    PDFN_SHOWN_1: 111,
+                    PDFN_SHOWN_2: 112,
+                    PDFN_SHOWN_3: 113,
+                    PDFN_SHOWN_4: 114,
+                    PDFN_SHOWN_5: 115,
+                    PDFN_SHOWN_6: 116,
+                    PDFN_SHOWN_7: 117,
+                    PDFN_SHOWN_8: 118,
+                    PDFN_SHOWN_9: 119,
+                    BADGE_APPEARED_NEXT_TO_HELP: 120,
+                    BADGE_SHOWN_IN_HELP: 130,
+                    PDFN_DISMISSED: 145,
+                    BADGE_EXPIRED: 150,
+                    PDFN_OK: 155,
+                    PDFN_SOFT_OPT_IN: 160,
+                    PDFN_SOFT_OPT_OUT: 162,
+                    PDFN_DENIED: 165,
+                    BADGE_SELECTED: 170,
+                    PDFN_ACCEPTED: 175,
+                    PDFN_FAILED_TO_DOWNLOAD: 400,
+                    PDFN_PARTIAL_DOWNLOAD: 410,
+                    PDFN_ERROR_MISMATCHED_TEMPLATE: 420,
+                    PDFN_ERROR_UNKNOWN: 499,
+                    FINAL_END: 999,
+                    PDFN_0_SECONDARY_BTN_CLICKED: 1014,
+                    PDFN_1_SECONDARY_BTN_CLICKED: 1015,
+                    PDFN_2_SECONDARY_BTN_CLICKED: 1016,
+                    PDFN_3_SECONDARY_BTN_CLICKED: 1017,
+                    PDFN_4_SECONDARY_BTN_CLICKED: 1018,
+                    PDFN_5_SECONDARY_BTN_CLICKED: 1019,
+                    PDFN_6_SECONDARY_BTN_CLICKED: 1020,
+                    PDFN_7_SECONDARY_BTN_CLICKED: 1021,
+                    PDFN_8_SECONDARY_BTN_CLICKED: 1022,
+                    PDFN_9_SECONDARY_BTN_CLICKED: 1023,
+                },
+            ],
+            userNoticeId: [1, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MessageContextMenuActions',
+        id: 3694,
+        props: {
+            isAGroup: [1, 'boolean'],
+            isMultiAction: [2, 'boolean'],
+            isOriginalSender: [3, 'boolean'],
+            messageContextMenuAction: [
+                4,
+                {
+                    OPEN: 1,
+                    CLICK: 2,
+                    COMPLETE: 3,
+                    CANCEL: 4,
+                },
+            ],
+            messageContextMenuOption: [
+                5,
+                {
+                    UNKNOWN: 1,
+                    OVERFLOW: 2,
+                    FORWARD: 3,
+                    DELETE: 4,
+                    REPLY: 5,
+                    REPLY_PRIVATELY: 6,
+                    STAR_OR_UNSTAR: 7,
+                    COPY: 8,
+                    REPORT: 9,
+                    MESSAGE_CONTACT: 10,
+                    MESSAGE_INFO: 11,
+                    EDIT: 12,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WaFsGroupJoinRequestAction',
+        id: 3944,
+        props: {
+            groupJid: [1, 'string'],
+            groupJoinRequestAction: [
+                2,
+                {
+                    MEMBERSHIP_REQUEST_CREATE: 1,
+                    VIEW_PENDING_PARTICIPANTS: 2,
+                    MEMBERSHIP_REQUEST_APPROVAL_MODE_ON: 3,
+                    MEMBERSHIP_REQUEST_APPROVAL_MODE_OFF: 4,
+                    MEMBERSHIP_REQUEST_APPROVE: 5,
+                    MEMBERSHIP_REQUEST_REJECT: 6,
+                    MEMBERSHIP_REQUEST_CANCEL: 7,
+                },
+            ],
+            groupJoinRequestGroupsInCommon: [5, 'integer'],
+            isSuccessful: [3, 'boolean'],
+            serverResponseTime: [4, 'timer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ReportToAdminEvents',
+        id: 4420,
+        props: {
+            reportToAdminInteraction: [
+                1,
+                {
+                    CLICK_OPEN_ADMIN_DASHBOARD: 0,
+                    CLICK_SEND_FOR_ADMIN_REVIEW: 1,
+                    CLICK_CONFIRM_SEND_FOR_ADMIN_REVIEW: 2,
+                    CLICK_CANCEL_SEND_FOR_ADMIN_REVIEW: 3,
+                },
+            ],
+            rtaGroupId: [2, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChatAction',
+        id: 2312,
+        props: {
+            chatActionChatType: [
+                3,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BUSINESS: 3,
+                    BROADCAST_LIST: 4,
+                },
+            ],
+            chatActionEntryPoint: [
+                2,
+                {
+                    CONVERSATION_LIST: 1,
+                    CONTACT_INFO: 2,
+                    GROUP_INFO: 3,
+                    SEARCH_LIST: 4,
+                    CONVERSATION_LIST_BULK_EDIT: 5,
+                    CONVERSATION_MENU: 6,
+                    WEB_ACTION: 7,
+                    SYSTEM_NOTIFICATIONS: 8,
+                },
+            ],
+            chatActionMuteDuration: [4, 'timer'],
+            chatActionType: [
+                1,
+                {
+                    MUTE: 1,
+                    UNMUTE: 2,
+                    ARCHIVE: 3,
+                    CLEAR: 4,
+                    EXIT_GROUP: 5,
+                    DELETE: 6,
+                    PIN: 7,
+                    UNREAD: 8,
+                    READ: 9,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'LabelEvent',
+        id: 1422,
+        props: {
+            customLabelTitle: [9, 'string'],
+            entryPointConversionSource: [10, 'string'],
+            itemsLabeledCount: [5, 'integer'],
+            labelCount: [4, 'integer'],
+            labelOperation: [
+                2,
+                {
+                    ADD: 1,
+                    EDIT: 2,
+                    DELETE: 3,
+                    VIEW: 4,
+                    CLICK_POSITIVE: 5,
+                    CLICK_NEGATIVE: 6,
+                    UPDATE_LABEL_COUNT: 7,
+                    AUTO_ADDED: 8,
+                },
+            ],
+            labelOperationEntryPoint: [6, 'string'],
+            labelTarget: [
+                1,
+                {
+                    LABEL: 1,
+                    MESSAGE: 2,
+                    CONTACT: 3,
+                    LABELS_SCREEN: 4,
+                    LABEL_DETAILS_SCREEN: 5,
+                    EDIT_LABEL_DIALOG: 6,
+                    DELETE_LABEL_DIALOG: 7,
+                    LABEL_MESSAGE_DIALOG: 8,
+                    LABEL_CHAT_DIALOG: 9,
+                    ADD_LABEL_DIALOG: 10,
+                    BULK_UNLABEL_DIALOG: 11,
+                    LABEL_COMBINED_DIALOG: 12,
+                    GROUP: 13,
+                    BROADCAST: 14,
+                },
+            ],
+            lastMessageDirection: [
+                14,
+                {
+                    OPPOSITE_PARTY_INITIATED: 0,
+                    SELF_INITIATED: 1,
+                },
+            ],
+            messageDepth: [15, 'integer'],
+            predefinedLabelNumber: [3, 'integer'],
+            threadCreationDate: [11, 'string'],
+            threadId: [12, 'string'],
+            threadIdHmac: [13, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'StatusReportingEvents',
+        id: 3920,
+        props: {
+            statusReportInteraction: [
+                1,
+                {
+                    CLICK_REPORT: 0,
+                    CLICK_SUBMIT_REPORT: 1,
+                    CLICK_CANCEL_REPORT: 2,
+                    CLICK_SUBMIT_REPORT_BLOCK: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'BusinessInteraction',
+        id: 3450,
+        props: {
+            businessInteractionAction: [
+                1,
+                {
+                    ACTION_CLICK: 1,
+                    ACTION_MSG_SENT: 2,
+                },
+            ],
+            businessInteractionTargetScreen: [
+                2,
+                {
+                    INDIVIDUAL_CHAT: 1,
+                    LANDING_PAGE: 2,
+                    OTHER: 3,
+                },
+            ],
+            businessJid: [3, 'string'],
+            entryPointApp: [
+                4,
+                {
+                    FACEBOOK: 1,
+                    INSTAGRAM: 2,
+                    WHATSAPP: 3,
+                    EXTERNAL: 4,
+                },
+            ],
+            entryPointSource: [
+                5,
+                {
+                    CLICK_TO_CHAT_LINK: 1,
+                    MESSAGE_SHORT_LINK: 2,
+                    QR_CODE: 3,
+                    CUSTOM_LINK: 4,
+                    CUSTOM_QR_CODE_LINK: 5,
+                },
+            ],
+            internalEntryPoint: [
+                6,
+                {
+                    STATUS: 1,
+                    INDIVIDUAL_CHAT: 2,
+                    GROUP: 3,
+                    OTHER: 4,
+                    OUTSIDE_OF_WA: 5,
+                    CHANNEL: 6,
+                },
+            ],
+            sequenceNumber: [7, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 113760892,
+    },
+    {
+        name: 'BusinessToolsClick',
+        id: 2218,
+        props: {
+            businessToolsEntryPoint: [
+                5,
+                {
+                    ENTRY_BANNER: 0,
+                    ENTRY_REGISTRATION_ONBOARDING: 1,
+                    ENTRY_CONVERSATIONS: 2,
+                    ENTRY_SETTINGS: 3,
+                    ENTRY_DEEPLINK: 4,
+                    ENTRY_STATUS_TAB_MENU: 5,
+                    ENTRY_CALLS_TAB_MENU: 6,
+                    ENTRY_BUSINESS_TOOLS_TAB: 7,
+                },
+            ],
+            businessToolsItem: [
+                3,
+                {
+                    OVERFLOW: 0,
+                    PROFILE: 1,
+                    CATALOG: 2,
+                    AWAY_MESSAGE: 3,
+                    GREETING_MESSAGE: 4,
+                    QUICK_REPLIES: 5,
+                    LABELS: 6,
+                    LINKED_ACCOUNTS: 7,
+                    SHORT_LINK: 8,
+                    STATISTICS: 9,
+                    CREATE_ACCOUNT_LINK: 10,
+                    MANAGE_CTA: 11,
+                    CREATE_AD: 12,
+                    CONTINUE_PROMPT: 13,
+                    ADVERTISE_LIST_ITEM: 14,
+                    SHOPS: 15,
+                    DISABLED_CATALOG: 16,
+                    BANNED_SHOP: 17,
+                    PREMIUM_TOOLS: 18,
+                    BUSINESS_DIRECTORY: 19,
+                    MANAGE_ADS: 20,
+                    META_VERIFIED: 21,
+                },
+            ],
+            businessToolsSequenceNumber: [2, 'integer'],
+            businessToolsSessionId: [1, 'string'],
+            linkingTarget: [
+                4,
+                {
+                    FACEBOOK: 0,
+                    INSTAGRAM: 1,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'BusinessToolsEntry',
+        id: 2216,
+        props: {
+            businessToolsEntryPoint: [
+                3,
+                {
+                    ENTRY_BANNER: 0,
+                    ENTRY_REGISTRATION_ONBOARDING: 1,
+                    ENTRY_CONVERSATIONS: 2,
+                    ENTRY_SETTINGS: 3,
+                    ENTRY_DEEPLINK: 4,
+                    ENTRY_STATUS_TAB_MENU: 5,
+                    ENTRY_CALLS_TAB_MENU: 6,
+                    ENTRY_BUSINESS_TOOLS_TAB: 7,
+                },
+            ],
+            businessToolsSequenceNumber: [2, 'integer'],
+            businessToolsSessionId: [1, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'BusinessToolsImpression',
+        id: 2220,
+        props: {
+            businessToolsEntryPoint: [
+                4,
+                {
+                    ENTRY_BANNER: 0,
+                    ENTRY_REGISTRATION_ONBOARDING: 1,
+                    ENTRY_CONVERSATIONS: 2,
+                    ENTRY_SETTINGS: 3,
+                    ENTRY_DEEPLINK: 4,
+                    ENTRY_STATUS_TAB_MENU: 5,
+                    ENTRY_CALLS_TAB_MENU: 6,
+                    ENTRY_BUSINESS_TOOLS_TAB: 7,
+                },
+            ],
+            businessToolsSequenceNumber: [2, 'integer'],
+            businessToolsSessionId: [1, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'CadminDemote',
+        id: 3426,
+        props: {
+            cadminDemoteOrigin: [
+                1,
+                {
+                    PROMOTION_NOTIFICATION: 1,
+                    MEMBER_LIST: 2,
+                },
+            ],
+            cadminDemoteResult: [
+                2,
+                {
+                    SUCCESS: 1,
+                    FAILURE: 2,
+                    CANCEL: 3,
+                    RETRY_SUCCESS: 4,
+                    RETRY_FAILURE: 5,
+                    RETRY_CANCEL: 6,
+                },
+            ],
+            isLastCadminOrCreator: [4, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChannelAdmin',
+        id: 4556,
+        props: {
+            adminFlowActionSequenceNumber: [1, 'integer'],
+            adminFlowType: [
+                2,
+                {
+                    CREATION: 1,
+                    EDIT: 2,
+                },
+            ],
+            channelAdminAction: [
+                3,
+                {
+                    CHANNEL_CREATION_TAP: 1,
+                    CHANNEL_CREATE_LAUNCH_SUCCESS: 2,
+                    CHANNEL_CREATE_LAUNCH_ERROR: 3,
+                    CHANNEL_CREATE_LAUNCH_BLOCKED: 4,
+                    EDIT_CHANNEL_TAP: 5,
+                    CHANNEL_NAME_SET: 6,
+                    CHANNEL_ICON_SET_CAMERA: 7,
+                    CHANNEL_ICON_SET_GALLERY: 8,
+                    CHANNEL_ICON_SET_EMOJI_STICKER: 9,
+                    CHANNEL_ICON_SET_WEB: 10,
+                    CHANNEL_DESCRIPTION_SET: 11,
+                    CHANNEL_ADMIN_FLOW_CONFIRMATION_TAP: 12,
+                    CHANNEL_ADMIN_FLOW_SUCCESS: 13,
+                    CHANNEL_ADMIN_FLOW_FAILURE: 14,
+                    SEARCH_FOLLOWER: 15,
+                    REACTIONS_SET_TO_ANY_EMOJI: 16,
+                    REACTIONS_SET_TO_DEFAULT_EMOJI: 17,
+                    REACTIONS_SET_TO_NONE_EMOJI: 18,
+                },
+            ],
+            channelAdminSessionId: [4, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChannelDyi',
+        id: 4726,
+        props: {
+            channelDyiEventType: [
+                1,
+                {
+                    CHANNEL_REPORT_REQUEST: 1,
+                    CHANNEL_REPORT_DOWNLOAD: 2,
+                    CHANNEL_REPORT_EXPORT: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ChatFilterEvent',
+        id: 1616,
+        props: {
+            actionType: [
+                1,
+                {
+                    OPEN: 1,
+                    SELECT_FILTER: 2,
+                    SEARCH_WITH_FILTER: 3,
+                    SEARCH: 4,
+                    SEARCH_ITEM_SELECTED: 5,
+                    SEARCH_MSG_SENT: 6,
+                    UNSELECT_FILTER: 7,
+                    AUTO_CLEAR_FILTER: 8,
+                    VIEW: 9,
+                    GROUP_NAVIGATION: 10,
+                    GROUP_DISCOVERY: 11,
+                    GROUP_JOIN: 12,
+                    SUBGROUP_SWITCHER_CLICK: 13,
+                    SUBGROUP_MENTION_CLICK: 14,
+                    COMMUNITY_RICH_SYSTEM_MESSAGE_CLICK: 15,
+                    GROUP_SYSTEM_MESSAGE_CLICK: 16,
+                    NESTING_VIEW_COMMUNITY_CLICK: 17,
+                    SELECT_COMMUNITY_ADMINS_CAN_ADD_GROUPS: 18,
+                    SELECT_EVERYONE_CAN_ADD_GROUPS: 19,
+                    GROUP_JOIN_REQUEST: 20,
+                    NOTIFICATION_RECEIVED: 21,
+                    NOTIFICATION_RENDERED: 22,
+                    TAP_TO_OPEN: 23,
+                    TAP_TO_REPLY: 24,
+                    VOIP_CALLBACK: 25,
+                    VOIP_MESSAGE: 26,
+                    VOIP_DECLINE: 27,
+                    MARK_AS_READ: 28,
+                    AI_NEW_CHAT_CLICK: 29,
+                    AI_TAB_SELECTION_CLICK: 30,
+                    AI_PERSONA_SELECTION_CLICK: 31,
+                    AI_TOS_VIEW: 32,
+                    AI_TOS_ACCEPT_CLICK: 33,
+                    AI_TOS_DISMISS_CLICK: 34,
+                    AI_NEW_UGC_CLICK: 35,
+                    AI_UGC_CREATION_START_CLICK: 36,
+                    AI_GENDER_AGE_SELECTION_CLICK: 37,
+                    AI_PERSONALITY_SELECTION_CLICK: 38,
+                    AI_INTEREST_SELECTION_CLICK: 39,
+                    AI_AVATAR_SELECTION_CLICK: 40,
+                    AI_NAME_SELECTION_CLICK: 41,
+                    AI_UGC_CREATION_FINISH_CLICK: 42,
+                    REQUEST_WAITLIST_DIALOG_APPEAR: 43,
+                    REQUEST_WAITLIST_SELECT: 44,
+                    FILTER_VIEWED: 45,
+                    FILTER_EMPTY_STATE_VIEWED: 46,
+                    BUSINESS_SERP_LOADED: 47,
+                    BIZ_SEE_MORE_CLICKED: 48,
+                    IMPRESSION: 49,
+                    BIZ_SEARCH_SET_LOCATION_CLICKED: 50,
+                    CLOSE_BTN_CLICKED: 51,
+                    AI_CHAT_CLICK: 52,
+                    NEW_CHAT_CLICK: 53,
+                    SERP_LOADED: 54,
+                },
+            ],
+            activitySessionId: [6, 'string'],
+            filterType: [
+                2,
+                {
+                    NONE: 0,
+                    OTHER_LABELS: 1,
+                    UNREAD: 2,
+                    GROUP: 3,
+                    BROADCAST_LIST: 4,
+                    NEW_CUSTOMER: 5,
+                    NEW_ORDER: 6,
+                    PENDING_PAYMENT: 7,
+                    PAID: 8,
+                    ORDER_COMPLETE: 9,
+                    CONTACT: 10,
+                    NON_CONTACT: 11,
+                    PHOTOS: 12,
+                    GIFS: 13,
+                    LINKS: 14,
+                    VIDEOS: 15,
+                    DOCUMENTS: 16,
+                    AUDIOS: 17,
+                    ASSIGNED_TO_YOU: 18,
+                    PERSONAL: 19,
+                    BUSINESS: 20,
+                    LABEL: 21,
+                    FAVORITES: 22,
+                },
+            ],
+            labelName: [11, 'string'],
+            metadata: [7, 'string'],
+            predefinedId: [10, 'integer'],
+            searchQueryId: [8, 'string'],
+            searchRequestId: [9, 'string'],
+            searchResultType: [
+                4,
+                {
+                    CONTACT: 0,
+                    CHAT: 1,
+                    GROUP: 2,
+                    BROADCAST_LIST: 3,
+                    MESSAGE: 4,
+                    BUSINESS: 5,
+                },
+            ],
+            sessionId: [3, 'integer'],
+            targetScreen: [
+                5,
+                {
+                    CHAT_LIST: 0,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'CommunityCreation',
+        id: 3492,
+        props: {
+            communityCreationActionCount: [1, 'integer'],
+            communityCreationActionTaken: [
+                2,
+                {
+                    ENTER: 1,
+                    GET_STARTED: 2,
+                    DISMISS: 3,
+                    NEXT: 4,
+                    CREATE_GROUP: 5,
+                    LINK_GROUP: 6,
+                    CREATE_COMMUNITY: 7,
+                    EXIT: 8,
+                    UNLINK_GROUP: 9,
+                    CREATE_COMMUNITY_SUCCESS: 10,
+                    CREATE_COMMUNITY_FAIL: 11,
+                    HELP_ICON_CLICK: 12,
+                    LINK_GROUP_CONFIRMATION_OK: 13,
+                    LINK_GROUP_CONFIRMATION_CANCEL: 14,
+                },
+            ],
+            communityCreationCurrentScreen: [
+                3,
+                {
+                    CHATS_TAB: 1,
+                    COMMUNITIES_TAB: 2,
+                    COMMUNITY_NUX: 3,
+                    COMMUNITY_INFO: 4,
+                    COMMUNITY_GROUPS_SUMMARY: 5,
+                    DEEP_LINK: 6,
+                    BANNER: 7,
+                    GROUP_INFO: 8,
+                    LINK_GROUP_CONFIRMATION: 9,
+                },
+            ],
+            communityCreationEntrypoint: [
+                5,
+                {
+                    CHATS_TAB: 1,
+                    COMMUNITIES_TAB: 2,
+                    GROUP_INFO: 3,
+                    DEEP_LINK: 4,
+                    DEEP_LINK_BANNER: 5,
+                    DEEP_LINK_PSA: 6,
+                    DEEP_LINK_CHAT: 7,
+                    DEEP_LINK_CHANNEL: 8,
+                },
+            ],
+            communityCreationSessionId: [4, 'string'],
+            communityId: [6, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ContactUsSession',
+        id: 470,
+        props: {
+            contactUsAutomaticEmail: [3, 'boolean'],
+            contactUsExitState: [
+                1,
+                {
+                    PROBLEM_DESCRIPTION: 1,
+                    SUGGESTED_FAQ: 2,
+                    EMAIL_SEND: 3,
+                    IN_APP_FAQ: 4,
+                    CANCELLED: 5,
+                    FAQ: 6,
+                },
+            ],
+            contactUsFaq: [2, 'boolean'],
+            contactUsLogs: [4, 'boolean'],
+            contactUsMenuFaqT: [12, 'timer'],
+            contactUsOutage: [5, 'boolean'],
+            contactUsOutageEmail: [6, 'boolean'],
+            contactUsScreenshotC: [19, 'number'],
+            contactUsT: [11, 'timer'],
+            languageCode: [21, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'DeepLinkMsgSent',
+        id: 3198,
+        props: {
+            deepLinkAction: [
+                1,
+                {
+                    MSG_SENT: 1,
+                },
+            ],
+            deepLinkSessionId: [2, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'DeepLinkOpen',
+        id: 2136,
+        props: {
+            deepLinkOpenFrom: [
+                2,
+                {
+                    DEEP_LINK_EXTERNAL: 1,
+                    DEEP_LINK_WA_LINK_CLICK: 2,
+                    QR_CODE_SHEET: 3,
+                    DEEP_LINK_BANNER: 4,
+                    DEEP_LINK_SMB_NOTIFICATION: 5,
+                    DEEP_LINK_MESSENGER_APP: 6,
+                },
+            ],
+            deepLinkSessionId: [6, 'string'],
+            deepLinkType: [
+                3,
+                {
+                    DEEP_LINK_UNKNOWN: 1,
+                    DEEP_LINK_CHAT: 2,
+                    DEEP_LINK_CONTACT_QR_CODE: 3,
+                    DEEP_LINK_PAYMENT: 4,
+                    DEEP_LINK_PRODUCT: 5,
+                    DEEP_LINK_CATALOG: 6,
+                    DEEP_LINK_FUTURE_PROOF: 7,
+                    DEEP_LINK_GROUP_INVITE: 8,
+                    DEEP_LINK_MSG_FORWARD: 9,
+                    DEEP_LINK_MESSAGE_QR_CODE: 10,
+                    DEEP_LINK_OPT_IN_QR_CODE: 11,
+                    DEEP_LINK_CTWA: 12,
+                    DEEP_LINK_STICKERPACK: 13,
+                    DEEP_LINK_NOVI_HUB: 14,
+                    DEEP_LINK_NOVI_ADD_DEBIT_CARD: 15,
+                    DEEP_LINK_NOVI_ADD_BANK_ACCOUNT: 16,
+                    DEEP_LINK_NOVI_WITHDRAW: 17,
+                    DEEP_LINK_NOVI_RESET_PASSWORD: 18,
+                    DEEP_LINK_PAYMENT_SIGNUP: 19,
+                    DEEP_LINK_BIZTOOLS_ACCOUNTS: 20,
+                    DEEP_LINK_PAYMENT_VIRALITY: 21,
+                    DEEP_LINK_SETTINGS_ACCOUNT_DELETE: 22,
+                    DEEP_LINK_SETTINGS_ACCOUNT_REQUEST_INFO: 23,
+                    DEEP_LINK_SETTINGS_CHATS_HISTORY: 24,
+                    DEEP_LINK_DISAPPEARING_MODE: 25,
+                    DEEP_LINK_ARCHIVE_SETTINGS: 26,
+                    DEEP_LINK_TOS: 27,
+                    DEEP_LINK_NOVI_CARE: 28,
+                    DEEP_LINK_NOVI_TPP_ACCOUNT_LINKING: 29,
+                    DEEP_LINK_CONTACT_SUPPORT: 30,
+                    DEEP_LINK_BIZTOOLS_DIRECTORY: 31,
+                    DEEP_LINK_DIRECTORY: 32,
+                    DEEP_LINK_CALL: 33,
+                    DEEP_LINK_DIRECTORY_DEEPER_CATEGORY_SELECTION: 34,
+                    DEEP_LINK_PHOENIX: 35,
+                    DEEP_LINK_HELP_CENTER_TO_SETTINGS_CHATS: 36,
+                    DEEP_LINK_CREATE_COMMUNITY: 37,
+                    DEEP_LINK_SMB_AD_CREATION: 38,
+                    DEEP_LINK_SMB_MANAGE_ADS: 39,
+                    DEEP_LINK_SMB_MANAGE_ADS_DETAIL: 40,
+                    DEEP_LINK_STATUS_SHARE: 41,
+                    DEEP_LINK_PREMIUM: 42,
+                    DEEP_LINK_SETTINGS_LINKED_DEVICES: 43,
+                    DEEP_LINK_SMB_AD_CREATION_FROM_CATALOG: 44,
+                    DEEP_LINK_SMB_AD_CREATION_FROM_BIZTAB: 45,
+                    DEEP_LINK_SMB_EDIT_PROFILE: 46,
+                    DEEP_LINK_EDIT_PROFILE_PIC: 47,
+                    DEEP_LINK_SMB_EDIT_CATALOG: 48,
+                    DEEP_LINK_SMB_BIZ_HOURS: 49,
+                    DEEP_LINK_SMB_LOCATION: 50,
+                    DEEP_LINK_SMB_LINKED_ACCOUNTS: 51,
+                    DEEP_LINK_PRIVACY_SETTINGS: 52,
+                    DEEP_LINK_SMB_EDIT_DESCRIPTION: 53,
+                    DEEP_LINK_SMB_AD_CREATION_RESUME: 54,
+                    DEEP_LINK_PRIVACY_DISCLOSURE: 55,
+                    DEEP_LINK_CHANNEL: 56,
+                    DEEPLINK_SMB_BIZ_WEBSITE: 57,
+                    DEEP_LINK_PRIVACY_CHECKUP: 58,
+                    DEEP_LINK_SMB_SELF_CATALOG: 59,
+                    DEEP_LINK_SCAN_MIGRATION_QR_CODE: 60,
+                    DEEP_LINK_PROXY: 61,
+                    DEEP_LINK_HELP: 62,
+                    DEEP_LINK_PRICE_TIER: 63,
+                    DEEP_LINK_CALLING_PRIVACY: 64,
+                    DEEP_LINK_PAYMENTS_PUSH_PROVISIONING: 65,
+                    DEEP_LINK_FB_EVENT_LINK: 66,
+                    DEEP_LINK_SETTINGS_ACCOUNT_2FA: 67,
+                    DEEP_LINK_SMB_ADVERTISE_PROFILE: 68,
+                    DEEP_LINK_SMB_LABELS_WITH_BIZTAB: 69,
+                    DEEP_LINK_SMB_GREETING_MESSAGE_WITH_BIZTAB: 70,
+                    DEEP_LINK_SMB_AWAY_MESSAGE_WITH_BIZTAB: 71,
+                    DEEP_LINK_SMB_ADVERTISE_LATEST_STATUS: 72,
+                    DEEP_LINK_SMB_PROFILE_COMPLETENESS: 73,
+                    DEEP_LINK_SMB_AD_DETAILS: 74,
+                    DEEP_LINK_SETTINGS_ACCOUNT_SWITCHER: 75,
+                    DEEP_LINK_CHAT_TRANSFER: 76,
+                    DEEP_LINK_CODE_LINKING: 77,
+                    DEEP_LINK_MARKETING_MESSAGE: 78,
+                    DEEP_LINK_HOME_CHATS: 79,
+                    DEEP_LINK_MESSAGE_YOURSELF: 80,
+                    DEEP_LINK_SETTINGS_ACCOUNT_EMAIL: 81,
+                    DEEP_LINK_EDIT_AD: 82,
+                    DEEP_LINK_MESSAGING_GUIDE: 83,
+                    DEEP_LINK_SMB_DRAFT_AD: 84,
+                    DEEP_LINK_CALLING_AWARENESS_VOICE_CHAT: 85,
+                    DEEP_LINK_CALLING_AWARENESS_SCHEDULED_CALL: 86,
+                    DEEP_LINK_COEXISTENCE_ONBOARDING: 87,
+                    DEEP_LINK_SETTINGS_STORAGE_MANAGEMENT: 88,
+                    DEEP_LINK_PAYMENT_BRAZIL_MERCHANT: 89,
+                    DEEP_LINK_PAYMENT_BRAZIL_BUYER: 90,
+                    DEEP_LINK_PRIVACY_GROUPS: 91,
+                    DEEP_LINK_PRIVACY_PROFILE: 92,
+                    DEEP_LINK_AIS: 93,
+                    DEEP_LINK_PENDING_AD_PAYMENT: 94,
+                    DEEP_LINK_PENDING_AD_REVIEW: 95,
+                    DEEP_LINK_SETTINGS_ACCOUNT_VERIFY_EMAIL: 96,
+                    DEEP_LINK_CTWA_EXTERNAL: 97,
+                    DEEP_LINK_SMB_BIZ_SEARCH_ONBOARDING_SHEET: 98,
+                    DEEP_LINK_CALLING_AWARENESS_GROUP_CALL: 99,
+                    DEEP_LINK_SMB_ORDERS_HOME: 100,
+                    DEEP_LINK_ADS_DATA_SHARING: 101,
+                    DEEP_LINK_VIDEO_PROMOTION: 102,
+                    DEEP_LINK_CTWA_RECENTLY_SHARED_MEDIA: 103,
+                    DEEP_LINK_MARKETING_MESSAGE_OPT_IN: 104,
+                    DEEP_LINK_GROUPS_PRIVACY: 105,
+                    DEEP_LINK_PROFILE_PRIVACY: 106,
+                    DEEP_LINK_ORDERS_EDUCATION_VIDEO: 107,
+                    DEEP_LINK_META_VERIFIED: 108,
+                    DEEP_LINK_SMB_AGENT_ONBOARDING: 109,
+                    DEEP_LINK_SETTINGS_CHATS_BACKUP: 110,
+                    DEEP_LINK_COUPONS_PROMOTION_IMPRESSION: 111,
+                    DEEP_LINK_INVITE_A_FRIEND: 112,
+                    DEEP_LINK_UPDATES: 113,
+                    DEEP_LINK_CONTACTS_PERMISSION: 114,
+                    DEEP_LINK_NOTIFICATIONS_PERMISSION: 115,
+                    DEEP_LINK_WABAI_ONBOARDING: 116,
+                    DEEP_LINK_CHAT_LIST: 117,
+                },
+            ],
+            isContact: [4, 'boolean'],
+            linkOwnerType: [
+                5,
+                {
+                    CONSUMER: 1,
+                    SMB: 2,
+                    ENT: 3,
+                },
+            ],
+            sourceSurface: [7, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'DisappearingMessageChatPicker',
+        id: 3398,
+        props: {
+            chatsSelected: [1, 'integer'],
+            dmChatPickerEntryPoint: [
+                2,
+                {
+                    DEFAULT_MODE_SETTING: 0,
+                    STORAGE_SETTING: 1,
+                    PRIVACY_SETTING: 2,
+                },
+            ],
+            dmChatPickerEventName: [
+                3,
+                {
+                    CHAT_PICKER_LINK_IMPRESSION: 0,
+                    CHAT_PICKER_TRAY_OPEN: 1,
+                    CHAT_PICKER_TRAY_EXIT: 2,
+                    CHAT_PICKER_CHATS_SELECTED: 3,
+                },
+            ],
+            ephemeralityDuration: [4, 'integer'],
+            groupChatsSelected: [5, 'integer'],
+            groupSizeDistributionJson: [9, 'string'],
+            newlyEphemeralChats: [7, 'integer'],
+            totalChatsInChatPicker: [8, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'DisappearingModeSettingChange',
+        id: 3056,
+        props: {
+            disappearingModeEntryPoint: [
+                4,
+                {
+                    ACCOUNT_SETTINGS: 1,
+                    SYSTEM_MESSAGE: 2,
+                    INDIVIDUAL_CHAT_DISAPPEARING_MESSAGES_SETTING: 3,
+                    GROUP_CHAT_DISAPPEARING_MESSAGES_SETTING: 4,
+                    DEEP_LINK: 5,
+                    STORAGE_SETTINGS: 6,
+                    PRIVACY_SETTINGS: 7,
+                },
+            ],
+            lastToggleTimestamp: [3, 'integer'],
+            newEphemeralityDuration: [2, 'integer'],
+            previousEphemeralityDuration: [1, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'DisappearingModeSettingEvents',
+        id: 3446,
+        props: {
+            disappearingModeEntryPoint: [
+                5,
+                {
+                    ACCOUNT_SETTINGS: 1,
+                    SYSTEM_MESSAGE: 2,
+                    INDIVIDUAL_CHAT_DISAPPEARING_MESSAGES_SETTING: 3,
+                    GROUP_CHAT_DISAPPEARING_MESSAGES_SETTING: 4,
+                    DEEP_LINK: 5,
+                    STORAGE_SETTINGS: 6,
+                    PRIVACY_SETTINGS: 7,
+                },
+            ],
+            disappearingModeSettingEventName: [
+                1,
+                {
+                    DEFAULT_MESSAGE_TIMER_OPEN: 1,
+                    DEFAULT_MESSAGE_TIMER_SET: 2,
+                    DEFAULT_MESSAGE_TIMER_EXIT: 3,
+                    LEARN_MORE_CLICK: 4,
+                },
+            ],
+            lastToggleTimestamp: [2, 'integer'],
+            newEphemeralityDuration: [3, 'integer'],
+            previousEphemeralityDuration: [4, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'EditBusinessProfile',
+        id: 1466,
+        props: {
+            businessProfileEntryPoint: [
+                10,
+                {
+                    REGISTRATION: 1,
+                    SETTINGS: 2,
+                    COMPLIANCE: 3,
+                    QUICK_REPLY_SMART_DEFAULT: 4,
+                    WA_PAGES: 5,
+                    PROFILE_COMPLETENESS: 6,
+                    DIRECTORY_ONBOARDING: 7,
+                },
+            ],
+            editBusinessProfileSessionId: [2, 'string'],
+            editProfileAction: [
+                1,
+                {
+                    ACTION_OPEN: 1,
+                    ACTION_SAVE: 2,
+                    ACTION_DISCARD: 3,
+                    ACTION_PROFILE_FIELD_OPEN: 4,
+                    ACTION_PROFILE_FIELD_SAVE: 5,
+                    ACTION_PROFILE_FIELD_DISCARD: 6,
+                    ACTION_FACEBOOK_ENABLED: 7,
+                    ACTION_FACEBOOK_DISABLED: 8,
+                    ACTION_INSTAGRAM_ENABLED: 9,
+                    ACTION_INSTAGRAM_DISABLED: 10,
+                    ACTION_FB_IG_POP_SHOWN: 11,
+                    ACTION_EDIT_COVER_PHOTO_CLICK: 12,
+                    ACTION_REMOVE_COVER_PHOTO: 13,
+                    UPGRADE_TO_CUSTOM_LINK_CLICK: 14,
+                    DIALOG_BOX_GEOCODE_IMPRESSION: 15,
+                    DIALOG_BOX_GEOCODE_ACCEPT: 16,
+                    DIALOG_BOX_GEOCODE_REVOKE: 17,
+                },
+            ],
+            editProfileActionField: [
+                9,
+                {
+                    DESCRIPTION: 1,
+                    HOURS: 2,
+                    ADDRESS: 3,
+                    EMAIL: 4,
+                    WEBSITE: 5,
+                    CATEGORY: 6,
+                    PROFILE: 7,
+                },
+            ],
+            hasAddress: [5, 'boolean'],
+            hasCategory: [4, 'boolean'],
+            hasDescription: [3, 'boolean'],
+            hasEmail: [7, 'boolean'],
+            hasHours: [6, 'boolean'],
+            hasWebsite: [8, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'EphemeralSettingChange',
+        id: 2370,
+        props: {
+            chatEphemeralityDuration: [1, 'integer'],
+            ephemeralSettingEntryPoint: [
+                3,
+                {
+                    CHAT_INFO: 1,
+                    SYSTEM_MESSAGE: 2,
+                    CHAT_OVERFLOW: 3,
+                    CHAT_PICKER: 4,
+                    EPHEMERAL_NUX: 5,
+                    CHAT_PICKER_DISAPPEARING_MODE_TIMER: 6,
+                    CHAT_PICKER_STORAGE_SETTING: 7,
+                },
+            ],
+            ephemeralSettingGroupSize: [
+                5,
+                {
+                    LT4: 1,
+                    LT8: 2,
+                    LT16: 3,
+                    LT32: 4,
+                    LT64: 5,
+                    LT128: 6,
+                    LT256: 7,
+                    LT512: 8,
+                    LT1000: 9,
+                    LT1500: 10,
+                    LT2000: 11,
+                    LT2500: 12,
+                    LT3000: 13,
+                    LT3500: 14,
+                    LT4000: 15,
+                    LT4500: 16,
+                    LT5000: 17,
+                    LARGEST_BUCKET: 18,
+                },
+            ],
+            previousEphemeralityDuration: [2, 'integer'],
+            threadId: [6, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'GifFromProviderSent',
+        id: 1124,
+        props: {
+            gifSearchProvider: [
+                1,
+                {
+                    GIPHY: 0,
+                    TENOR: 1,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'GifSearchCancelled',
+        id: 1126,
+        props: {
+            gifSearchProvider: [
+                1,
+                {
+                    GIPHY: 0,
+                    TENOR: 1,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'GifSearchNoResults',
+        id: 1128,
+        props: {
+            gifSearchProvider: [
+                1,
+                {
+                    GIPHY: 0,
+                    TENOR: 1,
+                },
+            ],
+            inputLanguageCode: [3, 'string'],
+            languageCode: [2, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'GifSearchResultTapped',
+        id: 1122,
+        props: {
+            gifSearchProvider: [
+                1,
+                {
+                    GIPHY: 0,
+                    TENOR: 1,
+                },
+            ],
+            rank: [2, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'GifSearchSessionStarted',
+        id: 1134,
+        props: {
+            gifSearchProvider: [
+                1,
+                {
+                    GIPHY: 0,
+                    TENOR: 1,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'KeepInChatErrors',
+        id: 3698,
+        props: {
+            canEditDmSettings: [7, 'boolean'],
+            isAGroup: [2, 'boolean'],
+            isAdmin: [3, 'boolean'],
+            kicAction: [
+                4,
+                {
+                    KEEP_MESSAGE: 1,
+                    UNKEEP_MESSAGE: 2,
+                },
+            ],
+            kicErrorCode: [
+                5,
+                {
+                    NONE: 1,
+                    MESSAGE_MISSING: 2,
+                    MESSAGE_REVOKED: 3,
+                    SENDER_UNKEPT: 4,
+                    OLDER_REQUEST: 5,
+                    ORPHAN_EXPIRED: 6,
+                    TIE_BREAK_IGNORED: 7,
+                    MESSAGE_EXPIRED: 8,
+                    NO_PERMISSION_TO_EDIT: 9,
+                    MESSAGE_FROM_EX_MEMBER: 10,
+                    OFFLINE: 11,
+                    SENDER_DISABLED: 12,
+                    KEPT_BEYOND_EXPIRY: 13,
+                    NOT_PART_OF_THE_GROUP: 14,
+                    CONTACT_BLOCKED: 15,
+                    UNKNOWN: 999,
+                },
+            ],
+            kicMessageEphemeralityDuration: [6, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'KeepInChatPerf',
+        id: 3488,
+        props: {
+            chatEphemeralityDuration: [1, 'integer'],
+            kicErrorCode: [
+                2,
+                {
+                    NONE: 1,
+                    MESSAGE_MISSING: 2,
+                    MESSAGE_REVOKED: 3,
+                    SENDER_UNKEPT: 4,
+                    OLDER_REQUEST: 5,
+                    ORPHAN_EXPIRED: 6,
+                    TIE_BREAK_IGNORED: 7,
+                    MESSAGE_EXPIRED: 8,
+                    NO_PERMISSION_TO_EDIT: 9,
+                    MESSAGE_FROM_EX_MEMBER: 10,
+                    OFFLINE: 11,
+                    SENDER_DISABLED: 12,
+                    KEPT_BEYOND_EXPIRY: 13,
+                    NOT_PART_OF_THE_GROUP: 14,
+                    CONTACT_BLOCKED: 15,
+                    UNKNOWN: 999,
+                },
+            ],
+            kicMessageEphemeralityDuration: [3, 'integer'],
+            kicRequestType: [
+                4,
+                {
+                    KEEP: 1,
+                    UNKEEP: 2,
+                },
+            ],
+            requestSendTime: [5, 'integer'],
+            response: [
+                6,
+                {
+                    SUCCESS: 1,
+                    ERROR: 2,
+                },
+            ],
+            threadId: [7, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MessagingUserJourney',
+        id: 5134,
+        props: {
+            appSessionId: [1, 'string'],
+            isSelfPin: [8, 'boolean'],
+            mediaType: [
+                9,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messagingActionType: [
+                2,
+                {
+                    NOT_NOW: 0,
+                    ALLOW: 1,
+                    CONTINUE: 2,
+                    RESTORE: 3,
+                    SKIP: 4,
+                    NEXT: 5,
+                    TAPPED: 6,
+                    NO_TAP: 7,
+                    SET_PHOTO: 8,
+                    DID_NOT_SET: 9,
+                    SUCCESSFUL: 10,
+                    FAILED: 11,
+                    UNKNOWN: 12,
+                    GOOGLE_MIGRATE_CONFIRM_SKIP_IMPORT: 13,
+                    GOOGLE_MIGRATE_ATTEMPT_TO_SKIP_IMPORT: 14,
+                    GOOGLE_MIGRATE_CONFIRM_CONTINUE_IMPORT: 15,
+                    GOOGLE_MIGRATE_ACCEPTED_PERMISSION: 16,
+                    GOOGLE_MIGRATE_IMPORT_COMPLETE_NEXT: 17,
+                    GOOGLE_MIGRATE_REJECTED_CONTACT_AND_STORAGE_PERMISSION: 18,
+                    GOOGLE_MIGRATE_REJECTED_CONTACT_PERMISSION: 19,
+                    GOOGLE_MIGRATE_REJECTED_STORAGE_PERMISSION: 20,
+                    AD_TIMEOUT: 21,
+                    CONFIRM_WITH_SECOND_SMS: 22,
+                    BACK: 23,
+                    EULA_TOS_ACCEPTED: 24,
+                    MIGRATE_PHONE_NUMBER_ACCEPT: 25,
+                    MIGRATE_PHONE_NUMBER_SKIP_NEW: 26,
+                    CLICK_VERIFICATION_COMPLETE_DIALOG_LEARN_MORE: 27,
+                    CLICK_VERIFICATION_COMPLETE_DIALOG_CONTINUE: 28,
+                    TRY_AGAIN: 29,
+                    WRONG_NUMBER: 30,
+                    VERIFY_WITH_SMS: 31,
+                    CLICK_EMAIL_OTP_DEEP_LINK: 32,
+                    VERIFY_ANOTHER_WAY: 33,
+                    WFS_FB: 34,
+                    WFS_IG: 35,
+                    LOGIN_WFS: 36,
+                    CLICK_PIN: 37,
+                    DISPLAY: 38,
+                    SELECT_OPTION: 39,
+                    CLICK_UNPIN: 40,
+                },
+            ],
+            pinInChatExpirySecs: [3, 'integer'],
+            threadType: [
+                4,
+                {
+                    GROUP: 1,
+                    BROADCAST: 2,
+                    INDIVIDUAL: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    SUB_GROUP: 6,
+                    DEFAULT_SUB_GROUP: 7,
+                    PARENT_GROUP: 8,
+                },
+            ],
+            uiSurface: [
+                5,
+                {
+                    UNKNOWN: 1,
+                    COMMUNITY_HOME: 2,
+                    COMMUNITY_TAB: 3,
+                    CHAT_THREAD: 4,
+                    CHAT_INFO_PAGE: 5,
+                    CHAT_LIST: 6,
+                    COMMUNITY_NAVIGATION: 7,
+                    BACKGROUND: 8,
+                    RESIGN: 9,
+                    SUBGROUP_SWITCHER: 10,
+                    COMMUNITY_COMPOSER: 11,
+                    MEDIA_VIEWER: 12,
+                    ALL_MEDIA: 13,
+                    STREAMING_MEDIA_VIEWER: 14,
+                    CALLS_HOME_TAB: 15,
+                    IN_CALL_UI: 16,
+                    STATUS_HOME_TAB: 17,
+                    STATUS_COMPOSER: 18,
+                    STATUS_VIEW: 19,
+                    CAMERA: 20,
+                    PHOTO_VIDEO_LIBRARY: 21,
+                    SETTINGS_HOME_TAB: 22,
+                    TOOLS_TAB: 23,
+                    COMMUNITY_SETTINGS: 24,
+                    CHANNEL_UPDATES_HOME: 25,
+                    CHANNEL_THREAD: 26,
+                    CHANNEL_DIRECTORY: 27,
+                    CHANNEL_PROFILE: 28,
+                    CHANNEL_FORWARD: 29,
+                    CHANNEL_PRODUCER_MEDIA_EDITOR: 30,
+                    CHANNEL_CREATE: 31,
+                    CHANNEL_EDIT: 32,
+                    CHANNEL_DELETE: 33,
+                    STATUS_COMPOSER_TEXT: 34,
+                    LIGHTWEIGHT_CALL_UI: 35,
+                    AI_HOME: 36,
+                    LIGHTWEIGHT_CALL_BANNER: 37,
+                    LIGHTWEIGHT_CALL_NUX: 38,
+                    CALL_INFO_PAGE: 39,
+                    SMB_CATALOG: 40,
+                    SMB_CATALOG_SHARE_LINK: 41,
+                    SMB_CATALOG_SHARE_PRODUCT_LINK: 42,
+                    SMB_CATALOG_SETTINGS: 43,
+                    SMB_CATALOG_PRODUCT: 44,
+                    SMB_CATALOG_NEW_COLLECTION: 45,
+                    SMB_CATALOG_EDIT_COLLECTION: 46,
+                    SMB_CATALOG_CREATE_PRODUCT: 47,
+                    SMB_CATALOG_EDIT_PRODUCT: 48,
+                    SMB_CATALOG_NEW_COLLECTION_ADD_ITEMS: 49,
+                    SMB_CATALOG_COLLECTION_UPDATE_ITEMS: 50,
+                    SMB_CATALOG_COLLECTIONS: 51,
+                    SMB_CATALOG_COLLECTION_REORDER: 52,
+                    SMB_CATALOG_COLLECTION_PRODUCTS: 53,
+                    SMB_CATALOG_COLLECTION_PRODUCTS_REORDER: 54,
+                    CREATE_EVENT: 55,
+                    EVENT_PAGE: 56,
+                    EVENTS_IN_GROUP: 57,
+                    CATALOG_HOME: 59,
+                    CATALOG_COLLECTION: 60,
+                    CATALOG_ITEM: 61,
+                    CATALOG_CART: 62,
+                    FLOWS_EXPERIENCE: 63,
+                    BUSINESS_PROFILE_EDIT: 64,
+                    BUSINESS_PROFILE_EDIT_NAME: 65,
+                    BUSINESS_PROFILE_EDIT_CATEGORIES: 66,
+                    BUSINESS_PROFILE_EDIT_DESCRIPTION: 67,
+                    BUSINESS_PROFILE_EDIT_WEBSITE: 68,
+                    BUSINESS_PROFILE_EDIT_EMAIL: 69,
+                    BUSINESS_PROFILE_EDIT_ADDRESS: 70,
+                    BUSINESS_PROFILE_EDIT_HOURS: 71,
+                    BUSINESS_PROFILE_EDIT_COVER_PHOTO: 72,
+                    BUSINESS_PROFILE_LINK_FB_IG: 73,
+                    BUSINESS_PROFILE_HELP_PAGE_LINK_FB_IG: 74,
+                    PAYMENTS_HOME: 75,
+                    PAYMENTS_HOME_TRANSACTIONS: 76,
+                    PAYMENTS_HOME_RECENT_MERCHANTS: 77,
+                    PAYMENTS_HOME_INVITE_OTHERS: 78,
+                    PAYMENTS_HOME_HELP: 79,
+                    MESSAGE_MENU: 80,
+                    PIN_MESSAGE_REPLACEMENT_DIALOG: 81,
+                    PIN_MESSAGE_EXPIRATION_DIALOG: 82,
+                    MY_STATUS_LIST: 83,
+                    ALL_STATUS_LIST: 84,
+                    PIN_BANNER: 85,
+                    CALL_BANNER: 86,
+                    LANDING_SCREEN: 87,
+                    NEW_CHAT: 88,
+                    GROUP_MEMBER_ADD_GROUP_CREATION: 89,
+                    GROUP_MEMBER_ADD_EXISTING_GROUP: 90,
+                    GROUP_CHAT: 91,
+                    GROUP_CREATION: 92,
+                },
+            ],
+            userJourneyFunnelId: [6, 'string'],
+            userRole: [
+                7,
+                {
+                    MEMBER: 0,
+                    ADMIN: 1,
+                    CADMIN: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'MetaVerifiedInteraction',
+        id: 4870,
+        props: {
+            businessOwnerJid: [1, 'string'],
+            businessOwnerPlatform: [
+                2,
+                {
+                    SMBA: 1,
+                    SMBI: 2,
+                    ENT: 3,
+                },
+            ],
+            metaVerifiedInteractionAction: [
+                3,
+                {
+                    MV_INTERACTION_ACTION_CLICK_MV_BADGE: 1,
+                    MV_INTERACTION_ACTION_VIEW_MV_EDUCATION_BOTTOM_SHEET: 2,
+                    MV_INTERACTION_ACTION_CLICK_MV_EDUCATION_LINK: 3,
+                    MV_INTERACTION_ACTION_VIEW_CROSS_SELL_PROFILE_INTERSTITIAL: 4,
+                    MV_INTERACTION_ACTION_CLICK_MV_MORE_LINK: 5,
+                    MV_INTERACTION_ACTION_CLICK_GET_WA_BUSINESS: 6,
+                    MV_INTERACTION_ACTION_CLICK_SUPPORT: 7,
+                    MV_INTERACTION_ACTION_CLICK_CUSTOM_WEBPAGE_AND_LINK: 8,
+                    MV_INTERACTION_ACTION_CLICK_MULTI_DEVICE: 9,
+                    MV_INTERACTION_ACTION_CLICK_MV_LEARN_MORE: 10,
+                    MV_INTERACTION_ACTION_CLICK_MV_HOME: 11,
+                },
+            ],
+            metaVerifiedInteractionAssetType: [
+                4,
+                {
+                    CHANNEL: 1,
+                    SMB: 2,
+                    ENT: 3,
+                    PERSONAL: 4,
+                },
+            ],
+            metaVerifiedInteractionReferral: [
+                5,
+                {
+                    CHAT_PROFILE: 1,
+                    CONTACT_CARD: 2,
+                    SETTINGS: 3,
+                    BUSINESS_TOOLS: 4,
+                    NOTIFICATION: 5,
+                },
+            ],
+            metaVerifiedInteractionSurface: [
+                6,
+                {
+                    BUSINESS_PROFILE: 1,
+                    MV_EDUCATION_BOTTOM_SHEET: 2,
+                    CROSS_SELL_PROFILE_INTERSTITIAL: 3,
+                    META_VERIFIED_HOME: 4,
+                    SETTINGS: 5,
+                    BUSINESS_TOOLS: 6,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 113760892,
+    },
+    {
+        name: 'PaidMessagingUserInteractionsLogger',
+        id: 4740,
+        props: {
+            pmxActionTarget: [
+                1,
+                {
+                    NONE: 0,
+                    HEADER: 1,
+                    CTA_COPY_CODE: 2,
+                    CTA_URL: 3,
+                    QUICK_REPLY: 4,
+                    CTA_CALL: 5,
+                    CTA_REMINDER: 6,
+                    SEE_ALL: 7,
+                    THUMBNAIL: 8,
+                },
+            ],
+            pmxActionType: [
+                2,
+                {
+                    VIEW: 0,
+                    CLICK: 1,
+                    READ: 2,
+                },
+            ],
+            pmxComponentType: [
+                3,
+                {
+                    NONE: 0,
+                    HEADER: 1,
+                    BUTTON: 2,
+                },
+            ],
+            pmxHashedMessageKey: [11, 'integer'],
+            pmxHeaderMediaType: [
+                4,
+                {
+                    TEXT: 0,
+                    IMAGE: 1,
+                    VIDEO: 2,
+                    LOCATION: 3,
+                    DOCUMENT: 4,
+                    GIF: 5,
+                },
+            ],
+            pmxHostStorage: [
+                8,
+                {
+                    NONE: 0,
+                    ON_PREMISE: 1,
+                    FACEBOOK: 2,
+                },
+            ],
+            pmxMarketingFormat: [
+                5,
+                {
+                    CAROUSEL: 0,
+                    MPM: 1,
+                    CUSTOM: 2,
+                },
+            ],
+            pmxMessageDeliveredTs: [10, 'integer'],
+            pmxQueryParams: [6, 'string'],
+            pmxSenderCountryCode: [9, 'string'],
+            templateId: [7, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 113760892,
+    },
+    {
+        name: 'PinInChatInteraction',
+        id: 4436,
+        props: {
+            groupRole: [
+                1,
+                {
+                    ADMIN: 1,
+                    MEMBER: 2,
+                },
+            ],
+            groupSize: [2, 'integer'],
+            groupTypeClient: [
+                3,
+                {
+                    REGULAR_GROUP: 1,
+                    SUB_GROUP: 2,
+                    DEFAULT_SUB_GROUP: 3,
+                    PARENT_GROUP: 4,
+                },
+            ],
+            isAGroup: [4, 'boolean'],
+            isSelfPin: [8, 'boolean'],
+            mediaType: [
+                5,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            pinCount: [6, 'integer'],
+            pinInChatInteractionType: [
+                7,
+                {
+                    TAP_ON_BANNER: 1,
+                },
+            ],
+            pinIndex: [9, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PinInChatMessageSend',
+        id: 4438,
+        props: {
+            groupRole: [
+                1,
+                {
+                    ADMIN: 1,
+                    MEMBER: 2,
+                },
+            ],
+            groupTypeClient: [
+                2,
+                {
+                    REGULAR_GROUP: 1,
+                    SUB_GROUP: 2,
+                    DEFAULT_SUB_GROUP: 3,
+                    PARENT_GROUP: 4,
+                },
+            ],
+            isAGroup: [3, 'boolean'],
+            isSelfParentMessage: [7, 'boolean'],
+            isSelfPin: [8, 'boolean'],
+            mediaType: [
+                4,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            pinInChatExpirySecs: [5, 'integer'],
+            pinInChatType: [
+                6,
+                {
+                    PIN_FOR_ALL: 1,
+                    UNPIN_FOR_ALL: 2,
+                },
+            ],
+            timeRemainingToExpirySecs: [9, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PnhRequestRevealAction',
+        id: 3808,
+        props: {
+            pnhAction: [
+                1,
+                {
+                    SEE_MASKED_PN_AT_CHAT_CREATION: 1,
+                    REQUEST_DIALOG_APPEAR: 2,
+                    SEND_REQUEST: 3,
+                    SHARE_PN_SHEET_APPEAR: 4,
+                    DISMISS: 5,
+                    SHARE_NUMBER: 6,
+                },
+            ],
+            pnhChatParty: [
+                2,
+                {
+                    BIZ: 1,
+                    CONSUMER: 2,
+                },
+            ],
+            pnhChatType: [
+                3,
+                {
+                    CTWA: 1,
+                },
+            ],
+            pnhEntryPoint: [
+                4,
+                {
+                    CHAT_CREATION: 1,
+                    CHAT_INFO_REQUEST: 2,
+                    AUDIO: 3,
+                    VIDEO: 4,
+                    PN_REQUEST: 5,
+                    SYSTEM_MESSAGE: 6,
+                    CHAT_INFO_PN_VISIBILITY: 7,
+                },
+            ],
+            threadId: [5, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PollsActions',
+        id: 3676,
+        props: {
+            chatType: [
+                8,
+                {
+                    OTHER: 0,
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    STATUS: 3,
+                    BROADCAST: 4,
+                    CHANNEL: 5,
+                },
+            ],
+            groupSizeBucket: [
+                1,
+                {
+                    SMALL: 1,
+                    MEDIUM: 2,
+                    LARGE: 3,
+                    EXTRA_LARGE: 4,
+                    XX_LARGE: 5,
+                    XXX_LARGE: 6,
+                    LT1024: 16,
+                    LT1500: 7,
+                    LT2000: 8,
+                    LT2500: 9,
+                    LT3000: 10,
+                    LT3500: 11,
+                    LT4000: 12,
+                    LT4500: 13,
+                    LT5000: 14,
+                    LARGEST_BUCKET: 15,
+                },
+            ],
+            isAGroup: [6, 'boolean'],
+            isAdmin: [2, 'boolean'],
+            pollAction: [
+                3,
+                {
+                    OPEN_CREATE_MODAL: 1,
+                    CREATE_POLL: 2,
+                    VIEW_RESULTS_MODAL: 4,
+                    REMOVE_VOTE: 5,
+                    VOTE: 6,
+                    CHANGE_VOTE: 7,
+                },
+            ],
+            pollCreationDs: [4, 'integer'],
+            pollOptionsCount: [5, 'integer'],
+            typeOfGroup: [
+                7,
+                {
+                    GROUP: 1,
+                    SUBGROUP: 2,
+                    DEFAULT_SUBGROUP: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PrivacySettingsClick',
+        id: 3726,
+        props: {
+            privacyControlEntryPoint: [
+                1,
+                {
+                    PRIVACY_SETTINGS: 0,
+                    PROFILE_PHOTO_JIT: 1,
+                    SETTINGS_SEARCH: 2,
+                    DEEP_LINK: 3,
+                    PRIVACY_CHECKUP_BANNER: 4,
+                    PRIVACY_CHECKUP_DEEP_LINK: 5,
+                    PRIVACY_CHECKUP_WA_CHAT: 6,
+                    PRIVACY_CHECKUP_SETTINGS_SEARCH: 7,
+                },
+            ],
+            privacyControlItem: [
+                2,
+                {
+                    LAST_SEEN_AND_ONLINE: 0,
+                    PROFILE_PHOTO: 1,
+                    ABOUT: 2,
+                    GROUPS: 3,
+                    STATUS: 4,
+                    READ_RECEIPT: 5,
+                    BLOCKED: 6,
+                    LIVE_LOCATION: 7,
+                    SCREEN_LOCK: 8,
+                    DDM_TIMER: 9,
+                    CALLS: 10,
+                    FINGERPRINT_LOCK: 11,
+                    DISAPPEARING_MESSAGES: 12,
+                    UNKNOWN: 13,
+                    CHECKUP: 14,
+                    SHOW_PREVIEW: 15,
+                    E2EE_BACKUPS: 16,
+                    TWO_STEP_VERIFICATION: 17,
+                    FACE_AND_HAND_EFFECTS: 18,
+                    ADVANCED: 19,
+                    CHAT_LOCK: 20,
+                    AVATAR: 21,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PttPlayback',
+        id: 2044,
+        props: {
+            pttDuration: [12, 'timer'],
+            pttMainThreadBlock: [7, 'boolean'],
+            pttMiniPlayerClick: [15, 'integer'],
+            pttMiniPlayerClose: [16, 'boolean'],
+            pttMiniPlayerPauseCnt: [17, 'integer'],
+            pttPlayRequestT: [1, 'timer'],
+            pttPlaybackFailed: [8, 'boolean'],
+            pttPlaybackOverallT: [4, 'timer'],
+            pttPlaybackSpeed: [
+                10,
+                {
+                    SPEED_1: 0,
+                    SPEED_1_5: 1,
+                    SPEED_2: 2,
+                },
+            ],
+            pttPlaybackSpeedCnt: [11, 'integer'],
+            pttPlayedOutOfChat: [18, 'boolean'],
+            pttPlayedPct: [14, 'number'],
+            pttPlayer: [
+                9,
+                {
+                    AUDIO_QUEUE: 0,
+                    AVPLAYER: 1,
+                    AVAUDIOPLAYER: 2,
+                    OPUSPLAYER: 3,
+                    ANDROIDPLAYER: 4,
+                    EXOPLAYER: 5,
+                    UWPPLAYER: 6,
+                    VOIPPLAYER: 7,
+                },
+            ],
+            pttPlayerInitT: [2, 'timer'],
+            pttPlayerPlayT: [3, 'timer'],
+            pttSeekCnt: [13, 'integer'],
+            pttTrigger: [
+                5,
+                {
+                    MANUAL: 0,
+                    SEQUENTIAL: 1,
+                },
+            ],
+            pttType: [
+                6,
+                {
+                    UNKNOWN: 0,
+                    AAC: 1,
+                    MP3: 2,
+                    AMR_NB: 3,
+                    AMR_WB: 4,
+                    OPUS: 5,
+                    MULTIPLE_TRACKS: 6,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ReactionActions',
+        id: 3184,
+        props: {
+            mediaType: [
+                3,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            messageType: [
+                1,
+                {
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    BROADCAST: 3,
+                    STATUS: 4,
+                    CHANNEL: 5,
+                    INTEROP: 6,
+                },
+            ],
+            reactionAction: [
+                2,
+                {
+                    OPEN_TRAY: 1,
+                    DELETE: 2,
+                    UPDATE: 3,
+                },
+            ],
+        },
+        weight: 20,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'SettingsClick',
+        id: 2214,
+        props: {
+            settingsClickEntryPoint: [
+                2,
+                {
+                    SETTINGS_SCREEN: 0,
+                    SETTINGS_SEARCH: 1,
+                    DEEP_LINK: 2,
+                    PRIVACY_CHECKUP: 3,
+                    METAB_SCREEN: 4,
+                },
+            ],
+            settingsItem: [
+                1,
+                {
+                    PROFILE: 0,
+                    BUSINESS_TOOLS: 1,
+                    ACCOUNT: 2,
+                    CHATS: 3,
+                    NOTIFICATIONS: 4,
+                    DATA_STORAGE_USAGE: 5,
+                    HELP: 6,
+                    INVITE_FRIEND: 7,
+                    STARRED_MESSAGES: 8,
+                    WHATSAPP_WEB: 9,
+                    PREMIUM_SUBSCRIPTION: 10,
+                    PRIVACY: 11,
+                    SECURITY: 12,
+                    THEME: 13,
+                    CHAT_WALLPAPER: 14,
+                    MEDIA_AUTO_DOWNLOAD: 15,
+                    REQUEST_ACCOUNT_INFO: 16,
+                    KEYBOARD_SHORTCUTS: 17,
+                    DEVELOPER: 18,
+                    DATA_SHARING: 19,
+                    DESKTOP_SETTINGS: 20,
+                    LINKED_DEVICES: 21,
+                    UNKNOWN: 22,
+                    QR_CODE: 23,
+                    DEVICES: 24,
+                    PROFILE_CARD: 25,
+                    PRIVACY_CARD: 26,
+                    CONTACTS_CARD: 27,
+                    AVATAR: 28,
+                    PAYMENTS: 29,
+                    LOGOUT: 30,
+                    META_VERIFIED: 31,
+                    TEXT_STATUS: 32,
+                    THIRD_PARTY: 33,
+                },
+            ],
+            settingsPageType: [
+                3,
+                {
+                    SETTINGS: 0,
+                    ME_TAB: 1,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'SettingsSearchInitiate',
+        id: 4014,
+        props: {
+            settingsPageType: [
+                1,
+                {
+                    SETTINGS: 0,
+                    ME_TAB: 1,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'SettingsSearchTap',
+        id: 4016,
+        props: {
+            tapItemName: [1, 'string'],
+            topLevelParentSetting: [
+                2,
+                {
+                    PROFILE: 0,
+                    BUSINESS_TOOLS: 1,
+                    ACCOUNT: 2,
+                    CHATS: 3,
+                    NOTIFICATIONS: 4,
+                    DATA_STORAGE_USAGE: 5,
+                    HELP: 6,
+                    INVITE_FRIEND: 7,
+                    STARRED_MESSAGES: 8,
+                    WHATSAPP_WEB: 9,
+                    PREMIUM_SUBSCRIPTION: 10,
+                    PRIVACY: 11,
+                    SECURITY: 12,
+                    THEME: 13,
+                    CHAT_WALLPAPER: 14,
+                    MEDIA_AUTO_DOWNLOAD: 15,
+                    REQUEST_ACCOUNT_INFO: 16,
+                    KEYBOARD_SHORTCUTS: 17,
+                    DEVELOPER: 18,
+                    DATA_SHARING: 19,
+                    DESKTOP_SETTINGS: 20,
+                    LINKED_DEVICES: 21,
+                    UNKNOWN: 22,
+                    QR_CODE: 23,
+                    DEVICES: 24,
+                    PROFILE_CARD: 25,
+                    PRIVACY_CARD: 26,
+                    CONTACTS_CARD: 27,
+                    AVATAR: 28,
+                    PAYMENTS: 29,
+                    LOGOUT: 30,
+                    META_VERIFIED: 31,
+                    TEXT_STATUS: 32,
+                    THIRD_PARTY: 33,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'SmbDataSharingConsentSetting',
+        id: 3974,
+        props: {
+            smbDataSharingConsentSettingEntryPoint: [
+                1,
+                {
+                    ENTRY_POINT_ORDER_SCREEN: 0,
+                    ENTRY_POINT_SETTINGS_SCREEN: 1,
+                    ENTRY_POINT_LABELS_SCREEN: 2,
+                },
+            ],
+            smbDataSharingConsentSettingType: [2, 'boolean'],
+            smbDataSharingConsentSettingVersion: [3, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'StatusItemView',
+        id: 1658,
+        props: {
+            isPosterBiz: [23, 'boolean'],
+            isPosterInAddressBook: [25, 'boolean'],
+            mediaType: [
+                4,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            psaCampaignId: [17, 'string'],
+            psaCampaignItemIndex: [18, 'integer'],
+            psaLinkAvailable: [19, 'boolean'],
+            psaLinkClick: [22, 'boolean'],
+            psaLinkLoadTime: [21, 'timer'],
+            psaLinkOpenResult: [
+                20,
+                {
+                    SUCCESS: 1,
+                    CANCEL: 2,
+                    ERROR: 3,
+                },
+            ],
+            statusItemImpressionCount: [14, 'integer'],
+            statusItemIndex: [16, 'integer'],
+            statusItemLength: [7, 'timer'],
+            statusItemLoadTime: [5, 'timer'],
+            statusItemReplied: [8, 'integer'],
+            statusItemUnread: [9, 'boolean'],
+            statusItemViewCount: [10, 'integer'],
+            statusItemViewResult: [
+                3,
+                {
+                    OK: 1,
+                    CANCELLED: 2,
+                    ERROR_UNKNOWN: 3,
+                    MEDIA_ERROR_UNKNOWN: 4,
+                    MEDIA_ERROR_DNS: 5,
+                    MEDIA_ERROR_TIMEOUT: 6,
+                    MEDIA_ERROR_INSUFFICIENT_SPACE: 7,
+                    MEDIA_ERROR_TOO_OLD: 8,
+                    MEDIA_ERROR_CANNOT_RESUME: 9,
+                    MEDIA_ERROR_HASH_MISMATCH: 10,
+                    MEDIA_ERROR_INVALID_URL: 11,
+                    MEDIA_ERROR_OUTPUT_STREAM: 12,
+                    MEDIA_ERROR_MEDIA_CONN: 13,
+                    MEDIA_ERROR_THROTTLE: 14,
+                    MEDIA_DOWNLOAD_CANCEL: 15,
+                    MEDIA_PREFETCH_END: 16,
+                    MEDIA_ERROR_WATLS: 17,
+                    MEDIA_ERROR_SERVER: 18,
+                    MEDIA_ERROR_WAMSYS: 19,
+                    MEDIA_ERROR_NETWORK: 20,
+                    MEDIA_ERROR_CONNECT: 21,
+                    MEDIE_HOST_SWTICH_REQUIRED: 22,
+                    MEDIA_INVALID_CODE: 23,
+                    MEDIA_SUSPICIOUS_CONTENT: 24,
+                    MEDIA_ERROR_CRONET: 25,
+                    PARTIAL_IMAGE_DOWNLOAD: 26,
+                },
+            ],
+            statusItemViewTime: [6, 'timer'],
+            statusRowIndex: [2, 'integer'],
+            statusRowSection: [
+                11,
+                {
+                    RECENT_STORIES: 1,
+                    PREVIOUS_STORIES: 2,
+                    MUTED_STORIES: 3,
+                    MY_STATUS: 4,
+                    CHAT_LIST: 5,
+                    GROUP_PARTICIPANT: 6,
+                    CONTACT_CARD: 7,
+                    PROFILE_PAGE: 8,
+                    CHAT_LIST_SEARCH: 9,
+                    UPDATES_TAB_SEARCH: 10,
+                    CHAT_TOP_BAR: 11,
+                    SEE_ALL_RECENT: 12,
+                    SEE_ALL_VIEWED: 13,
+                    SEE_ALL_MUTED: 14,
+                    SEE_ALL_SEARCH: 15,
+                },
+            ],
+            statusViewerSessionId: [1, 'integer'],
+            urlStatusClicked: [
+                26,
+                {
+                    ONE_CLICK: 1,
+                    TWO_CLICKS: 2,
+                    NO_CLICK: 3,
+                },
+            ],
+            urlStatusType: [
+                27,
+                {
+                    NO_PREVIEW: 1,
+                    TRUNCATED: 2,
+                    NON_TRUNCATED: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'StatusReply',
+        id: 1180,
+        props: {
+            isPosterBiz: [4, 'boolean'],
+            isPosterInAddressBook: [6, 'boolean'],
+            statusReplyMessageType: [
+                3,
+                {
+                    UNKNOWN: 1,
+                    TEXT: 2,
+                    IMAGE: 3,
+                    VOICE: 4,
+                    DOCUMENT: 5,
+                    AUDIO: 6,
+                    STICKER: 7,
+                    LOCATION: 8,
+                    PRODUCT: 9,
+                    CONTACT: 10,
+                    CONTACT_ARRAY: 11,
+                    CAMERA_CAPTURE_IMAGE: 12,
+                    MEDIA_GALLERY: 13,
+                    GIF_VIDEO: 14,
+                    QUICK_REPLY: 15,
+                    POLL: 16,
+                    AVATAR_QUICK_REPLY: 17,
+                },
+            ],
+            statusReplyResult: [
+                2,
+                {
+                    OK: 1,
+                    CANCELLED: 2,
+                    ERROR_UNKNOWN: 3,
+                },
+            ],
+            statusSessionId: [1, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'StatusRowView',
+        id: 1656,
+        props: {
+            psaCampaigns: [8, 'string'],
+            statusRowEntryMethod: [
+                5,
+                {
+                    DIRECT_ROW_TAP: 1,
+                    BACKWARDS_SWIPE: 2,
+                    FOWARDS_SWIPE: 3,
+                    BACKWARDS_TAP: 4,
+                    FOWARDS_TAP: 5,
+                    PREVIOUS_ROW_TIMEOUT: 6,
+                },
+            ],
+            statusRowIndex: [4, 'integer'],
+            statusRowSection: [
+                3,
+                {
+                    RECENT_STORIES: 1,
+                    PREVIOUS_STORIES: 2,
+                    MUTED_STORIES: 3,
+                    MY_STATUS: 4,
+                    CHAT_LIST: 5,
+                    GROUP_PARTICIPANT: 6,
+                    CONTACT_CARD: 7,
+                    PROFILE_PAGE: 8,
+                    CHAT_LIST_SEARCH: 9,
+                    UPDATES_TAB_SEARCH: 10,
+                    CHAT_TOP_BAR: 11,
+                    SEE_ALL_RECENT: 12,
+                    SEE_ALL_VIEWED: 13,
+                    SEE_ALL_MUTED: 14,
+                    SEE_ALL_SEARCH: 15,
+                },
+            ],
+            statusRowUnreadItemCount: [7, 'integer'],
+            statusRowViewCount: [6, 'integer'],
+            statusSessionId: [1, 'integer'],
+            statusViewerSessionId: [2, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'UiRevokeAction',
+        id: 3298,
+        props: {
+            messageAction: [
+                1,
+                {
+                    MESSAGE_SELECTED: 0,
+                    TRASH_CAN_SELECTED: 1,
+                    ADMIN_DELETE_FOR_EVERYONE: 2,
+                    SENDER_DELETE_FOR_EVERYONE: 3,
+                    ADMIN_AND_SENDER_DELETE_FOR_EVERYONE: 4,
+                    DELETE_FOR_EVERYONE_SELECTED: 5,
+                },
+            ],
+            uiRevokeActionDuration: [2, 'integer'],
+            uiRevokeActionSessionId: [3, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WaShopsManagement',
+        id: 2908,
+        props: {
+            isShopsProductPreviewVisible: [2, 'boolean'],
+            shopsManagementAction: [
+                1,
+                {
+                    ACTION_CLICK_SHOPS_SETTING: 1,
+                    ACTION_CLICK_CATALOG_SETTING: 2,
+                    ACTION_CLICK_COMMERCE_MANAGER_IN_CATALOG_SETTING: 3,
+                    ACTION_CLICK_CANCEL_IN_CATALOG_SETTING: 4,
+                    ACTION_CLICK_VIEW_SHOPS_IN_SHOPS_SETTING: 5,
+                    ACTION_CLICK_COMMERCE_MANAGER_IN_SHOPS_SETTING: 6,
+                    ACTION_CLICK_CANCEL_IN_SHOPS_SETTING: 7,
+                    ACTION_SHOPS_PRODUCT_PREVIEW_VISIBLE: 8,
+                    ACTION_CLICK_SHOPS_PRODUCT_PREVIEW_TILE: 9,
+                    ACTION_CLICK_MANAGE_SHOPS: 10,
+                    ACTION_SHARE_SHOPS: 11,
+                    ACTION_CLICK_VIEW_SHOPS_FROM_EDIT_BIZ_PROFILE: 12,
+                    ACTION_CLICK_COMMERCE_MANAGER_FROM_EDIT_BIZ_PROFILE: 13,
+                    ACTION_CLICK_CANCEL_FROM_EDIT_BIZ_PROFILE: 14,
+                },
+            ],
+            shopsSellerJid: [3, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcButterbarEvent',
+        id: 3932,
+        props: {
+            webcButterbarAction: [
+                1,
+                {
+                    IMPRESSION: 1,
+                    CLICK_CTA: 2,
+                    CLICK_DISMISS: 3,
+                    AUTO_DISMISS: 4,
+                },
+            ],
+            webcButterbarType: [
+                2,
+                {
+                    OFFLINE: 1,
+                    RESUME_CONNECTING: 2,
+                    RESUME_LOADING_MSGS_PROGRESS: 3,
+                    UPDATE_DUE_TO_SOFT_MIN: 4,
+                    UWP_UPSELL: 5,
+                    NOTIFICATION: 6,
+                    OFFLINE_NOTIFICATION: 7,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcEmojiOpen',
+        id: 1166,
+        props: {
+            webcEmojiOpenTab: [1, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcLinkPreviewDisplay',
+        id: 3864,
+        props: {
+            didFallbackNonHq: [2, 'boolean'],
+            didRequestHq: [3, 'boolean'],
+            didRespondHqPreview: [4, 'boolean'],
+            webcDisplayStatus: [
+                1,
+                {
+                    SHOWED_PREVIEW_TO_USER: 1,
+                    PREVIEW_TIMEOUT: 2,
+                    PREVIEW_MALFORMED: 3,
+                    PREVIEW_NOT_FOUND: 4,
+                    PREVIEW_GENERAL_ERROR: 5,
+                    PREVIEW_DECRYPTION_ERROR: 6,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WhatsappQuickPromotionClientEligibilityWaterfall',
+        id: 4360,
+        props: {
+            eligibilityStatus: [1, 'boolean'],
+            instanceLogData: [5, 'string'],
+            promotionId: [2, 'string'],
+            qpFailureReason: [3, 'string'],
+            step: [4, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'GatedChatOpened',
+        id: 3150,
+        props: {
+            chatGatedReason: [
+                1,
+                {
+                    TOS3: 1,
+                    COUNTRY: 2,
+                },
+            ],
+            selfInitiated: [2, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'HfmTextSearchComplete',
+        id: 2186,
+        props: {},
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'SmbPaidMessagesButtonLogger',
+        id: 4508,
+        props: {
+            businessPhoneNumber: [1, 'integer'],
+            pmButtonCount: [2, 'integer'],
+            pmButtonEventType: [
+                3,
+                {
+                    CLICK: 0,
+                },
+            ],
+            pmButtonIndex: [4, 'integer'],
+            pmButtonType: [
+                5,
+                {
+                    QUICK_REPLY: 0,
+                    CTA_URL: 1,
+                    CTA_CALL: 2,
+                    CTA_CATALOG: 3,
+                    CTA_CATALOG_ITEM: 4,
+                },
+            ],
+            pmIsTrackableLink: [7, 'string'],
+            pmServerCampaignId: [6, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 113760892,
+    },
+    {
+        name: 'SystemMessageClick',
+        id: 5082,
+        props: {
+            isAGroup: [1, 'boolean'],
+            isANewThread: [2, 'boolean'],
+            systemMessageCategory: [
+                3,
+                {
+                    PRIVACY: 1,
+                    GROUPS: 2,
+                },
+            ],
+            systemMessageType: [
+                4,
+                {
+                    E2E_ENCRYPTED_MESSAGES_CALLS: 1,
+                    E2E_ENCRYPTED_MESSAGES: 2,
+                    E2E_ENCRYPTED_BROADCAST_LIST: 3,
+                    E2E_ENCRYPTED_MESSAGE_YOURSELF: 4,
+                    OFFICIAL_ACCOUNT_INFO: 8,
+                    GROUP_ADD: 9,
+                    GROUP_RESET_INVITE: 10,
+                    COMMUNITY_DESCRIPTION_CHANGED: 11,
+                    GROUP_DESCRIPTION_CHANGED: 12,
+                    GROUP_PARTICIPANTS_CHANGED: 13,
+                    COMMUNITY_MEMBERS_CHANGED: 14,
+                    GROUP_INVITE_LINK_UNAVAILABLE: 15,
+                    GROUP_INVITE_LINK_AVAILABLE: 16,
+                    GROUP_JOIN_REQUEST: 17,
+                    GROUP_SUGGEST: 18,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'ViewOnceScreenshotActions',
+        id: 3606,
+        props: {
+            isAGroup: [1, 'boolean'],
+            threadId: [2, 'string'],
+            voMessageType: [
+                3,
+                {
+                    PHOTO: 1,
+                    VIDEO: 2,
+                    PTT: 3,
+                },
+            ],
+            voSsAction: [
+                4,
+                {
+                    SENDER_NUX_TYPE_C_IMPRESSION: 1,
+                    SENDER_NUX_TYPE_D_IMPRESSION: 2,
+                    SCREENSHOT_SENDER_NUX_TYPE_D_IMPRESSION: 3,
+                    RECIPIENT_OPEN_NUX_TYPE_C_IMPRESSION: 4,
+                    RECIPIENT_OPEN_NUX_TYPE_D_IMPRESSION: 5,
+                    SENDER_NUX_TYPE_C_LEARN_MORE_TAP: 6,
+                    SENDER_NUX_TYPE_D_LEARN_MORE_TAP: 7,
+                    SCREENSHOT_SENDER_NUX_TYPE_D_LEARN_MORE_TAP: 8,
+                    RECIPIENT_OPEN_NUX_TYPE_C_LEARN_MORE_TAP: 9,
+                    RECIPIENT_OPEN_NUX_TYPE_D_LEARN_MORE_TAP: 10,
+                    SCREENSHOT_BLOCKED: 11,
+                    SCREENSHOT_TAKEN: 12,
+                    SCREEN_RECORDING_BLOCKED: 13,
+                    SCREEN_RECORDING_STARTED: 14,
+                    PLACEHOLDER_MESSAGE_LEARN_MORE_TAP: 15,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'CtwaConsumerDisclosure',
+        id: 4406,
+        props: {
+            ctwaConsumerDisclosureVersion: [3, 'integer'],
+            disclosureAction: [
+                1,
+                {
+                    SCREEN_VIEW: 0,
+                    CLICK_ON_CONTINUE: 1,
+                    CANCEL: 2,
+                    BACK_BUTTON_TOOLBAR: 3,
+                    BACK_BUTTON_SYSTEM: 4,
+                    DISMISS: 5,
+                    DISCLOSURE_INFO_VIEW: 6,
+                },
+            ],
+            disclosureType: [
+                2,
+                {
+                    NON_BLOCKING: 0,
+                    BLOCKING: 1,
+                    INFO: 2,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 0,
+    },
+    {
+        name: 'Ctwa3pdConversion',
+        id: 5138,
+        props: {
+            ctwa3pdConversionMetadata: [1, 'string'],
+            ctwa3pdConversionSubtype: [2, 'string'],
+            ctwa3pdConversionType: [3, 'string'],
+            ctwa3pdSchemaVersion: [4, 'integer'],
+            ctwa3pdSurfaceType: [5, 'string'],
+            ctwaTrackingPayload: [6, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'CtwaLabelSignal',
+        id: 4662,
+        props: {
+            ctwaLabelSignalVersion: [1, 'integer'],
+            ctwaLabelTarget: [
+                2,
+                {
+                    CHAT: 0,
+                    MESSAGE: 1,
+                },
+            ],
+            ctwaLabelType: [
+                3,
+                {
+                    NEW_ORDER: 0,
+                    PENDING_PAYMENT: 1,
+                    PAID: 2,
+                    ORDER_COMPLETE: 3,
+                },
+            ],
+            deepLinkConversionData: [4, 'string'],
+            deepLinkConversionSource: [5, 'string'],
+            eventSharingSettingEnabled: [6, 'boolean'],
+            globalSharingSettingEnabled: [7, 'boolean'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'CtwaOrderSignal',
+        id: 4264,
+        props: {
+            ctwaOrderSignalVersion: [1, 'integer'],
+            deepLinkConversionData: [2, 'string'],
+            deepLinkConversionSource: [3, 'string'],
+            eventSharingSettingEnabled: [4, 'boolean'],
+            globalSharingSettingEnabled: [5, 'boolean'],
+            orderPaid: [8, 'boolean'],
+            orderSignalType: [
+                6,
+                {
+                    CREATED: 0,
+                    UPDATED: 1,
+                },
+            ],
+            orderStatus: [
+                7,
+                {
+                    PROCESSING: 0,
+                    SHIPPED: 1,
+                    COMPLETED: 2,
+                    CANCELLED: 3,
+                    PENDING: 4,
+                    PARTIALLY_SHIPPED: 5,
+                    PAID_CHANGE: 6,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'PsChannelPostForward',
+        id: 4746,
+        props: {
+            channelForwardContentType: [
+                6,
+                {
+                    UPDATE: 0,
+                    UPDATE_CARD: 1,
+                },
+            ],
+            channelForwardGroupType: [
+                1,
+                {
+                    OTHER: 0,
+                    INDIVIDUAL: 1,
+                    GROUP: 2,
+                    STATUS: 3,
+                    BROADCAST: 4,
+                    CHANNEL: 5,
+                },
+            ],
+            cid: [2, 'string'],
+            mediaType: [
+                3,
+                {
+                    NONE: 1,
+                    PHOTO: 2,
+                    VIDEO: 3,
+                    AUDIO: 4,
+                    PTT: 5,
+                    LOCATION: 6,
+                    CONTACT: 7,
+                    DOCUMENT: 8,
+                    URL: 9,
+                    CALL: 10,
+                    GIF: 11,
+                    FUTURE: 12,
+                    CONTACT_ARRAY: 13,
+                    LIVE_LOCATION: 14,
+                    PROFILE_PIC: 15,
+                    STICKER: 16,
+                    HSM: 17,
+                    PRODUCT_IMAGE: 18,
+                    TEMPLATE: 19,
+                    MD_APP_STATE: 20,
+                    MD_HISTORY_SYNC: 21,
+                    CATALOG_LINK: 22,
+                    PRODUCT_LINK: 23,
+                    ORDER: 24,
+                    LIST: 25,
+                    LIST_REPLY: 26,
+                    BUTTON_MESSAGE: 27,
+                    BUTTON_RESPONSE_MESSAGE: 28,
+                    PRODUCT_LIST: 29,
+                    BUTTON_NFM: 30,
+                    VIEW_ONCE_IMAGE: 31,
+                    VIEW_ONCE_VIDEO: 32,
+                    SHOP_STOREFRONT: 33,
+                    REACTION: 34,
+                    INTERACTIVE_NFM: 35,
+                    INTERACTIVE_RESPONSE_NFM: 36,
+                    POLL_CREATE: 37,
+                    POLL_VOTE: 38,
+                    TEXT: 39,
+                    KEEP: 40,
+                    UNKEEP: 41,
+                    INVISIBLE_HELLO: 42,
+                    MEDIA_EXPRESS_NOTIFY: 43,
+                    UNDECRYPTED_MEDIA: 44,
+                    UNDECRYPTED_TEXT: 45,
+                    UNDECRYPTED_PAY: 46,
+                    UNDECRYPTED_POLL: 47,
+                    UNDECRYPTED_REACTION: 48,
+                    UNDECRYPTED_MEDIA_NOTIFY: 49,
+                    VIEW_ONCE_AUDIO: 50,
+                    SCHEDULED_CALL_CREATE: 51,
+                    SCHEDULED_CALL_CANCEL: 52,
+                    PUSH_TO_VIDEO: 53,
+                    PIN_IN_CHAT: 54,
+                    INTERACTIVE_CAROUSEL: 55,
+                    COMMENT: 56,
+                    EPHEMERAL_SYNC_RESPONSE: 57,
+                    EVENT_CREATE: 58,
+                    EVENT_RESPOND: 59,
+                    LOTTIE_STICKER: 60,
+                    INTERACTIVE_PRODUCT_CAROUSEL: 61,
+                    INTERACTIVE_PRODUCT: 62,
+                },
+            ],
+            postId: [4, 'string'],
+        },
+        weight: 1,
+        wamChannel: 'private',
+        privateStatsIdInt: 0,
+    },
+    {
+        name: 'WebContactListStartNewChat',
+        id: 4560,
+        props: {
+            webContactListStartNewChatSearch: [1, 'boolean'],
+            webContactListStartNewChatType: [
+                2,
+                {
+                    CONTACT: 1,
+                    GROUP: 2,
+                    CONTACTLESS: 3,
+                },
+            ],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+    {
+        name: 'WebcMediaEditorSend',
+        id: 2890,
+        props: {
+            blurImageCount: [7, 'integer'],
+            editedImageCount: [2, 'integer'],
+            emojiLayerCount: [5, 'integer'],
+            imageCount: [1, 'integer'],
+            paintedImageCount: [3, 'integer'],
+            stickerLayerCount: [6, 'integer'],
+            textLayerCount: [4, 'integer'],
+        },
+        weight: 1,
+        wamChannel: 'regular',
+        privateStatsIdInt: -1,
+    },
+];
+exports.WEB_GLOBALS = [
+    {
+        'name': 'abKey2',
+        'id': 4473,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'appBuild',
+        'id': 1657,
+        'type': {
+            'DEBUG': 1,
+            'ALPHA': 2,
+            'BETA': 3,
+            'RELEASE': 4
+        },
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'appIsBetaRelease',
+        'id': 21,
+        'type': 'boolean',
+        'validator': 'boolean',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'appVersion',
+        'id': 17,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'browser',
+        'id': 779,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'browserVersion',
+        'id': 295,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'datacenter',
+        'id': 2795,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'deviceClassification',
+        'id': 14507,
+        'type': {
+            'MOBILE': 0,
+            'TABLET': 1,
+            'WEARABLES': 2,
+            'VR': 3,
+            'DESKTOP': 4,
+            'FOLDABLE': 5,
+            'AR_GLASS': 6,
+            'UNDEFINED': 100
+        },
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'deviceName',
+        'id': 13,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'deviceVersion',
+        'id': 4505,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'expoKey',
+        'id': 5029,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'mcc',
+        'id': 5,
+        'type': 'integer',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'memClass',
+        'id': 655,
+        'type': 'integer',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'mnc',
+        'id': 3,
+        'type': 'integer',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'networkIsWifi',
+        'id': 23,
+        'type': 'boolean',
+        'validator': 'boolean',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'ocVersion',
+        'id': 6251,
+        'type': 'integer',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'osVersion',
+        'id': 15,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'platform',
+        'id': 11,
+        'type': {
+            'IPHONE': 1,
+            'ANDROID': 2,
+            'BB': 3,
+            'BBX': 7,
+            'S40': 4,
+            'SYMBIAN': 5,
+            'WP': 6,
+            'WEBCLIENT': 8,
+            'OSMETA': 11,
+            'ENT': 12,
+            'SMBA': 13,
+            'KAIOS': 14,
+            'SMBI': 15,
+            'WINDOWS': 16,
+            'WEB': 17,
+            'PORTAL': 18,
+            'BLOKS': 19,
+            'BLUEA': 20,
+            'BLUEI': 21,
+            'FBLITEA': 22,
+            'GREENA': 23,
+            'GREENI': 24,
+            'IGDA': 25,
+            'IGDI': 26,
+            'IGLITEA': 27,
+            'MLITEA': 28,
+            'MSGRA': 29,
+            'MSGRI': 30,
+            'MSGRP': 31,
+            'MSGRW': 32,
+            'IGDW': 33,
+            'PAGE': 34,
+            'MSGRDM': 35,
+            'MSGRDW': 36,
+            'MSGROM': 37,
+            'MSGROC': 38,
+            'MSGRM': 43,
+            'IGDM': 44,
+            'WEARM': 45,
+            'CAPI': 46,
+            'XR': 47,
+            'MACOS': 48,
+            'WAMETA_REPL': 49,
+            'ARDEV': 50,
+            'WEAROS': 51,
+            'MSGRVR': 52,
+            'BLUEW': 53,
+            'IPHONEWAMETATEST': 54,
+            'MSGRAR': 57,
+            'IPAD': 58,
+            'WAVOIP_CLI': 59,
+            'MSGRT': 60,
+            'IGDT': 61,
+            'ANDROIDWAMETATEST': 62,
+            'MSGRSG': 63,
+            'IGDSG': 64,
+            'INTEROP': 65,
+            'INTEROP_MSGR': 66,
+            'TEST': 9,
+            'UNKNOWN': 10
+        },
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'psCountryCode',
+        'id': 6833,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'private'
+        ]
+    },
+    {
+        'name': 'psId',
+        'id': 6005,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'private'
+        ]
+    },
+    {
+        'name': 'serviceImprovementOptOut',
+        'id': 13293,
+        'type': 'boolean',
+        'validator': 'boolean',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'streamId',
+        'id': 3543,
+        'type': 'integer',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'wametaLoggerTestFilter',
+        'id': 15881,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'webcBucket',
+        'id': 875,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcEnv',
+        'id': 633,
+        'type': {
+            'PROD': 0,
+            'INTERN': 1,
+            'DEV': 2,
+            'E2E': 3
+        },
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcNativeAutolaunch',
+        'id': 1009,
+        'type': 'boolean',
+        'validator': 'boolean',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcNativeBetaUpdates',
+        'id': 1007,
+        'type': 'boolean',
+        'validator': 'boolean',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcPhoneAppVersion',
+        'id': 1005,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcPhoneCharging',
+        'id': 783,
+        'type': 'boolean',
+        'validator': 'boolean',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcPhoneDeviceManufacturer',
+        'id': 829,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcPhoneDeviceModel',
+        'id': 831,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcPhoneOsBuildNumber',
+        'id': 833,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcPhoneOsVersion',
+        'id': 835,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcPhonePlatform',
+        'id': 707,
+        'type': {
+            'IPHONE': 1,
+            'ANDROID': 2,
+            'BB': 3,
+            'BBX': 7,
+            'S40': 4,
+            'SYMBIAN': 5,
+            'WP': 6,
+            'WEBCLIENT': 8,
+            'OSMETA': 11,
+            'ENT': 12,
+            'SMBA': 13,
+            'KAIOS': 14,
+            'SMBI': 15,
+            'WINDOWS': 16,
+            'WEB': 17,
+            'PORTAL': 18,
+            'BLOKS': 19,
+            'BLUEA': 20,
+            'BLUEI': 21,
+            'FBLITEA': 22,
+            'GREENA': 23,
+            'GREENI': 24,
+            'IGDA': 25,
+            'IGDI': 26,
+            'IGLITEA': 27,
+            'MLITEA': 28,
+            'MSGRA': 29,
+            'MSGRI': 30,
+            'MSGRP': 31,
+            'MSGRW': 32,
+            'IGDW': 33,
+            'PAGE': 34,
+            'MSGRDM': 35,
+            'MSGRDW': 36,
+            'MSGROM': 37,
+            'MSGROC': 38,
+            'MSGRM': 43,
+            'IGDM': 44,
+            'WEARM': 45,
+            'CAPI': 46,
+            'XR': 47,
+            'MACOS': 48,
+            'WAMETA_REPL': 49,
+            'ARDEV': 50,
+            'WEAROS': 51,
+            'MSGRVR': 52,
+            'BLUEW': 53,
+            'IPHONEWAMETATEST': 54,
+            'MSGRAR': 57,
+            'IPAD': 58,
+            'WAVOIP_CLI': 59,
+            'MSGRT': 60,
+            'IGDT': 61,
+            'ANDROIDWAMETATEST': 62,
+            'MSGRSG': 63,
+            'IGDSG': 64,
+            'INTEROP': 65,
+            'INTEROP_MSGR': 66,
+            'TEST': 9,
+            'UNKNOWN': 10
+        },
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcTabId',
+        'id': 3727,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcWebArch',
+        'id': 6605,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcWebDeviceManufacturer',
+        'id': 6599,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcWebDeviceModel',
+        'id': 6601,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcWebOsReleaseNumber',
+        'id': 6603,
+        'type': 'string',
+        'validator': 'string',
+        'channels': [
+            'regular'
+        ]
+    },
+    {
+        'name': 'webcWebPlatform',
+        'id': 899,
+        'type': {
+            'WEB': 1,
+            'WIN32': 2,
+            'DARWIN': 3,
+            'IOS_TABLET': 4,
+            'ANDROID_TABLET': 5,
+            'WINSTORE': 6,
+            'MACSTORE': 7,
+            'DARWIN_BETA': 8,
+            'WIN32_BETA': 9,
+            'PWA': 10
+        },
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'yearClass',
+        'id': 689,
+        'type': 'integer',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'yearClass2016',
+        'id': 2617,
+        'type': 'integer',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'commitTime',
+        'id': 47,
+        'type': 'integer',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    },
+    {
+        'name': 'sequenceNumber',
+        'id': 3433,
+        'type': 'integer',
+        'channels': [
+            'regular',
+            'private'
+        ]
+    }
+];
+exports.FLAG_BYTE = 8, exports.FLAG_GLOBAL = 0, exports.FLAG_EVENT = 1, exports.FLAG_FIELD = 2, exports.FLAG_EXTENDED = 4;
diff --git a/node_modules/@whiskeysockets/baileys/lib/WAM/encode.d.ts b/node_modules/@whiskeysockets/baileys/lib/WAM/encode.d.ts
new file mode 100644
index 0000000..93626a3
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WAM/encode.d.ts
@@ -0,0 +1,3 @@
+/// <reference types="node" />
+import { BinaryInfo } from './BinaryInfo';
+export declare const encodeWAM: (binaryInfo: BinaryInfo) => Buffer;
diff --git a/node_modules/@whiskeysockets/baileys/lib/WAM/encode.js b/node_modules/@whiskeysockets/baileys/lib/WAM/encode.js
new file mode 100644
index 0000000..7013d7d
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WAM/encode.js
@@ -0,0 +1,155 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.encodeWAM = void 0;
+const constants_1 = require("./constants");
+const getHeaderBitLength = (key) => (key < 256 ? 2 : 3);
+const encodeWAM = (binaryInfo) => {
+    binaryInfo.buffer = [];
+    encodeWAMHeader(binaryInfo);
+    encodeEvents(binaryInfo);
+    console.log(binaryInfo.buffer);
+    const totalSize = binaryInfo.buffer
+        .map((a) => a.length)
+        .reduce((a, b) => a + b);
+    const buffer = Buffer.alloc(totalSize);
+    let offset = 0;
+    binaryInfo.buffer.forEach((buffer_) => {
+        buffer_.copy(buffer, offset);
+        offset += buffer_.length;
+    });
+    return buffer;
+};
+exports.encodeWAM = encodeWAM;
+function encodeWAMHeader(binaryInfo) {
+    const headerBuffer = Buffer.alloc(8); // starting buffer
+    headerBuffer.write('WAM', 0, 'utf8');
+    headerBuffer.writeUInt8(binaryInfo.protocolVersion, 3);
+    headerBuffer.writeUInt8(1, 4); //random flag
+    headerBuffer.writeUInt16BE(binaryInfo.sequence, 5);
+    headerBuffer.writeUInt8(0, 7); // regular channel
+    binaryInfo.buffer.push(headerBuffer);
+}
+function encodeGlobalAttributes(binaryInfo, globals) {
+    for (const [key, _value] of Object.entries(globals)) {
+        const id = constants_1.WEB_GLOBALS.find(a => (a === null || a === void 0 ? void 0 : a.name) === key).id;
+        let value = _value;
+        if (typeof value === 'boolean') {
+            value = value ? 1 : 0;
+        }
+        binaryInfo.buffer.push(serializeData(id, value, constants_1.FLAG_GLOBAL));
+    }
+}
+function encodeEvents(binaryInfo) {
+    for (const [name, { props, globals },] of binaryInfo.events.map((a) => Object.entries(a)[0])) {
+        encodeGlobalAttributes(binaryInfo, globals);
+        const event = constants_1.WEB_EVENTS.find((a) => a.name === name);
+        const props_ = Object.entries(props);
+        let extended = false;
+        for (const [, value] of props_) {
+            extended || (extended = value !== null);
+        }
+        const eventFlag = extended ? constants_1.FLAG_EVENT : constants_1.FLAG_EVENT | constants_1.FLAG_EXTENDED;
+        binaryInfo.buffer.push(serializeData(event.id, -event.weight, eventFlag));
+        for (let i = 0; i < props_.length; i++) {
+            const [key, _value] = props_[i];
+            const id = (event.props)[key][0];
+            extended = i < (props_.length - 1);
+            let value = _value;
+            if (typeof value === 'boolean') {
+                value = value ? 1 : 0;
+            }
+            const fieldFlag = extended ? constants_1.FLAG_EVENT : constants_1.FLAG_FIELD | constants_1.FLAG_EXTENDED;
+            binaryInfo.buffer.push(serializeData(id, value, fieldFlag));
+        }
+    }
+}
+function serializeData(key, value, flag) {
+    const bufferLength = getHeaderBitLength(key);
+    let buffer;
+    let offset = 0;
+    if (value === null) {
+        if (flag === constants_1.FLAG_GLOBAL) {
+            buffer = Buffer.alloc(bufferLength);
+            offset = serializeHeader(buffer, offset, key, flag);
+            return buffer;
+        }
+    }
+    else if (typeof value === 'number' && Number.isInteger(value)) {
+        // is number
+        if (value === 0 || value === 1) {
+            buffer = Buffer.alloc(bufferLength);
+            offset = serializeHeader(buffer, offset, key, flag | ((value + 1) << 4));
+            return buffer;
+        }
+        else if (-128 <= value && value < 128) {
+            buffer = Buffer.alloc(bufferLength + 1);
+            offset = serializeHeader(buffer, offset, key, flag | (3 << 4));
+            buffer.writeInt8(value, offset);
+            return buffer;
+        }
+        else if (-32768 <= value && value < 32768) {
+            buffer = Buffer.alloc(bufferLength + 2);
+            offset = serializeHeader(buffer, offset, key, flag | (4 << 4));
+            buffer.writeInt16LE(value, offset);
+            return buffer;
+        }
+        else if (-2147483648 <= value && value < 2147483648) {
+            buffer = Buffer.alloc(bufferLength + 4);
+            offset = serializeHeader(buffer, offset, key, flag | (5 << 4));
+            buffer.writeInt32LE(value, offset);
+            return buffer;
+        }
+        else {
+            buffer = Buffer.alloc(bufferLength + 8);
+            offset = serializeHeader(buffer, offset, key, flag | (7 << 4));
+            buffer.writeDoubleLE(value, offset);
+            return buffer;
+        }
+    }
+    else if (typeof value === 'number') {
+        // is float
+        buffer = Buffer.alloc(bufferLength + 8);
+        offset = serializeHeader(buffer, offset, key, flag | (7 << 4));
+        buffer.writeDoubleLE(value, offset);
+        return buffer;
+    }
+    else if (typeof value === 'string') {
+        // is string
+        const utf8Bytes = Buffer.byteLength(value, 'utf8');
+        if (utf8Bytes < 256) {
+            buffer = Buffer.alloc(bufferLength + 1 + utf8Bytes);
+            offset = serializeHeader(buffer, offset, key, flag | (8 << 4));
+            buffer.writeUint8(utf8Bytes, offset++);
+        }
+        else if (utf8Bytes < 65536) {
+            buffer = Buffer.alloc(bufferLength + 2 + utf8Bytes);
+            offset = serializeHeader(buffer, offset, key, flag | (9 << 4));
+            buffer.writeUInt16LE(utf8Bytes, offset);
+            offset += 2;
+        }
+        else {
+            buffer = Buffer.alloc(bufferLength + 4 + utf8Bytes);
+            offset = serializeHeader(buffer, offset, key, flag | (10 << 4));
+            buffer.writeUInt32LE(utf8Bytes, offset);
+            offset += 4;
+        }
+        buffer.write(value, offset, 'utf8');
+        return buffer;
+    }
+    throw 'missing';
+}
+function serializeHeader(buffer, offset, key, flag) {
+    if (key < 256) {
+        buffer.writeUInt8(flag, offset);
+        offset += 1;
+        buffer.writeUInt8(key, offset);
+        offset += 1;
+    }
+    else {
+        buffer.writeUInt8(flag | constants_1.FLAG_BYTE, offset);
+        offset += 1;
+        buffer.writeUInt16LE(key, offset);
+        offset += 2;
+    }
+    return offset;
+}
diff --git a/node_modules/@whiskeysockets/baileys/lib/WAM/index.d.ts b/node_modules/@whiskeysockets/baileys/lib/WAM/index.d.ts
new file mode 100644
index 0000000..7ccc1de
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WAM/index.d.ts
@@ -0,0 +1,3 @@
+export * from './constants';
+export * from './encode';
+export * from './BinaryInfo';
diff --git a/node_modules/@whiskeysockets/baileys/lib/WAM/index.js b/node_modules/@whiskeysockets/baileys/lib/WAM/index.js
new file mode 100644
index 0000000..ebb3fa4
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/WAM/index.js
@@ -0,0 +1,19 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __exportStar = (this && this.__exportStar) || function(m, exports) {
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+__exportStar(require("./constants"), exports);
+__exportStar(require("./encode"), exports);
+__exportStar(require("./BinaryInfo"), exports);
diff --git a/node_modules/@whiskeysockets/baileys/lib/index.d.ts b/node_modules/@whiskeysockets/baileys/lib/index.d.ts
new file mode 100644
index 0000000..5a520c5
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/index.d.ts
@@ -0,0 +1,11 @@
+import makeWASocket from './Socket';
+export * from '../WAProto';
+export * from './Utils';
+export * from './Types';
+export * from './Store';
+export * from './Defaults';
+export * from './WABinary';
+export * from './WAM';
+export type WASocket = ReturnType<typeof makeWASocket>;
+export { makeWASocket };
+export default makeWASocket;
diff --git a/node_modules/@whiskeysockets/baileys/lib/index.js b/node_modules/@whiskeysockets/baileys/lib/index.js
new file mode 100644
index 0000000..8fe029f
--- /dev/null
+++ b/node_modules/@whiskeysockets/baileys/lib/index.js
@@ -0,0 +1,30 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __exportStar = (this && this.__exportStar) || function(m, exports) {
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.makeWASocket = void 0;
+const Socket_1 = __importDefault(require("./Socket"));
+exports.makeWASocket = Socket_1.default;
+__exportStar(require("../WAProto"), exports);
+__exportStar(require("./Utils"), exports);
+__exportStar(require("./Types"), exports);
+__exportStar(require("./Store"), exports);
+__exportStar(require("./Defaults"), exports);
+__exportStar(require("./WABinary"), exports);
+__exportStar(require("./WAM"), exports);
+exports.default = Socket_1.default;
diff --git a/node_modules/@whiskeysockets/baileys/proto-extract/.npmignore b/node_modules/@whiskeysockets/baileys/proto-extract/.npmignore
deleted file mode 100644
index 28f1ba7..0000000
--- a/node_modules/@whiskeysockets/baileys/proto-extract/.npmignore
+++ /dev/null
@@ -1,2 +0,0 @@
-node_modules
-.DS_Store
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/proto-extract/README.md b/node_modules/@whiskeysockets/baileys/proto-extract/README.md
deleted file mode 100644
index fc9e603..0000000
--- a/node_modules/@whiskeysockets/baileys/proto-extract/README.md
+++ /dev/null
@@ -1,8 +0,0 @@
-# Proto Extract
-
-Derived initially from `whatseow`'s proto extract, this version generates a predictable diff friendly protobuf. It also does not rely on a hardcoded set of modules to look for but finds all proto modules on its own and extracts the proto from there.
-
-## Usage
-1. Install dependencies with `yarn` (or `npm install`)
-2. `yarn start`
-3. The script will update `../WAProto/WAProto.proto` (except if something is broken)
diff --git a/node_modules/@whiskeysockets/baileys/proto-extract/index.js b/node_modules/@whiskeysockets/baileys/proto-extract/index.js
deleted file mode 100644
index c780612..0000000
--- a/node_modules/@whiskeysockets/baileys/proto-extract/index.js
+++ /dev/null
@@ -1,382 +0,0 @@
-const request = require('request-promise-native')
-const acorn = require('acorn')
-const walk = require('acorn-walk')
-const fs = require('fs/promises')
-
-const addPrefix = (lines, prefix) => lines.map(line => prefix + line)
-
-const extractAllExpressions = (node) => {
-	const expressions = [node]
-	const exp = node.expression
-	if(exp) {
-		expressions.push(exp)
-	}
-
-	if(node.expression?.expressions?.length) {
-		for(const exp of node.expression?.expressions) {
-			expressions.push(...extractAllExpressions(exp))
-		}
-	}
-
-	return expressions
-}
-
-async function findAppModules() {
-	const ua = {
-		headers: {
-			'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:100.0) Gecko/20100101 Firefox/100.0',
-			'Sec-Fetch-Dest': 'script',
-			'Sec-Fetch-Mode': 'no-cors',
-			'Sec-Fetch-Site': 'same-origin',
-			'Referer': 'https://web.whatsapp.com/',
-			'Accept': '*/*',
-			'Accept-Language': 'Accept-Language: en-US,en;q=0.5',
-		}
-	}
-	const baseURL = 'https://web.whatsapp.com'
-	const serviceworker = await request.get(`${baseURL}/serviceworker.js`, ua)
-
-	const versions = [...serviceworker.matchAll(/assets-manifest-([\d\.]+).json/g)].map(r => r[1])
-	const version = versions[0]
-
-	let bootstrapQRURL = ''
-	if(version) {
-		const asset = await request.get(`${baseURL}/assets-manifest-${version}.json`, ua)
-		const hashFiles = JSON.parse(asset)
-		const files = Object.keys(hashFiles)
-		const app = files.find(f => /^app\./.test(f))
-		bootstrapQRURL = `${baseURL}/${app}`
-	} else {
-		const index = await request.get(baseURL, ua)
-		const bootstrapQRID = index.match(/src="\/app.([0-9a-z]{10,}).js"/)[1]
-		bootstrapQRURL = baseURL + '/app.' + bootstrapQRID + '.js'
-	}
-
-	console.error('Found source JS URL:', bootstrapQRURL)
-
-	const qrData = await request.get(bootstrapQRURL, ua)
-	const waVersion = qrData.match(/(?:appVersion:|VERSION_STR=)"(\d\.\d+\.\d+)"/)[1]
-	console.log('Current version:', waVersion)
-	// This one list of types is so long that it's split into two JavaScript declarations.
-	// The module finder below can't handle it, so just patch it manually here.
-	const patchedQrData = qrData.replace('t.ActionLinkSpec=void 0,t.TemplateButtonSpec', 't.ActionLinkSpec=t.TemplateButtonSpec')
-	//const patchedQrData = qrData.replace("Spec=void 0,t.", "Spec=t.")
-	const qrModules = acorn.parse(patchedQrData).body[0].expression.arguments[0].elements[1].properties
-
-	const result = qrModules.filter(m => {
-		const hasProto = !!m.value.body.body.find(b => {
-			const expressions = extractAllExpressions(b)
-			return expressions?.find(e => e?.left?.property?.name === 'internalSpec')
-		})
-		if(hasProto) {
-			return true
-		}
-	})
-
-	return result
-}
-
-(async() => {
-	const unspecName = name => name.endsWith('Spec') ? name.slice(0, -4) : name
-	const unnestName = name => name.split('$').slice(-1)[0]
-	const getNesting = name => name.split('$').slice(0, -1).join('$')
-	const makeRenameFunc = () => (
-		name => {
-			name = unspecName(name)
-			return name// .replaceAll('$', '__')
-			//  return renames[name] ?? unnestName(name)
-		}
-	)
-	// The constructor IDs that can be used for enum types
-	// const enumConstructorIDs = [76672, 54302]
-
-	const modules = await findAppModules()
-
-	// Sort modules so that whatsapp module id changes don't change the order in the output protobuf schema
-	// const modules = []
-	// for (const mod of wantedModules) {
-	//     modules.push(unsortedModules.find(node => node.key.value === mod))
-	// }
-
-	// find aliases of cross references between the wanted modules
-	const modulesInfo = {}
-	const moduleIndentationMap = {}
-	modules.forEach(({ key, value }) => {
-		const requiringParam = value.params[2].name
-		modulesInfo[key.value] = { crossRefs: [] }
-		walk.simple(value, {
-			VariableDeclarator(node) {
-				if(node.init && node.init.type === 'CallExpression' && node.init.callee.name === requiringParam && node.init.arguments.length === 1) {
-					modulesInfo[key.value].crossRefs.push({ alias: node.id.name, module: node.init.arguments[0].value })
-				}
-			}
-		})
-	})
-
-	// find all identifiers and, for enums, their array of values
-	for(const mod of modules) {
-		const modInfo = modulesInfo[mod.key.value]
-		const rename = makeRenameFunc(mod.key.value)
-
-		// all identifiers will be initialized to "void 0" (i.e. "undefined") at the start, so capture them here
-		walk.ancestor(mod, {
-			UnaryExpression(node, anc) {
-				if(!modInfo.identifiers && node.operator === 'void') {
-					const assignments = []
-					let i = 1
-					anc.reverse()
-					while(anc[i].type === 'AssignmentExpression') {
-						assignments.push(anc[i++].left)
-					}
-
-					const makeBlankIdent = a => {
-						const key = rename(a.property.name)
-						const indentation = getNesting(key)
-						const value = { name: key }
-
-						moduleIndentationMap[key] = moduleIndentationMap[key] || { }
-						moduleIndentationMap[key].indentation = indentation
-
-						if(indentation.length) {
-							moduleIndentationMap[indentation] = moduleIndentationMap[indentation] || { }
-							moduleIndentationMap[indentation].members = moduleIndentationMap[indentation].members || new Set()
-							moduleIndentationMap[indentation].members.add(key)
-						}
-
-						return [key, value]
-					}
-
-					modInfo.identifiers = Object.fromEntries(assignments.map(makeBlankIdent).reverse())
-
-				}
-			}
-		})
-		const enumAliases = {}
-		// enums are defined directly, and both enums and messages get a one-letter alias
-		walk.simple(mod, {
-			VariableDeclarator(node) {
-				if(
-					node.init?.type === 'CallExpression'
-                    // && enumConstructorIDs.includes(node.init.callee?.arguments?.[0]?.value)
-                    && !!node.init.arguments.length
-                    && node.init.arguments[0].type === 'ObjectExpression'
-                    && node.init.arguments[0].properties.length
-				) {
-					const values = node.init.arguments[0].properties.map(p => ({
-						name: p.key.name,
-						id: p.value.value
-					}))
-					enumAliases[node.id.name] = values
-				}
-			},
-			AssignmentExpression(node) {
-				if(node.left.type === 'MemberExpression' && modInfo.identifiers[rename(node.left.property.name)]) {
-					const ident = modInfo.identifiers[rename(node.left.property.name)]
-					ident.alias = node.right.name
-					// enumAliases[ident.alias] = enumAliases[ident.alias] || []
-					ident.enumValues = enumAliases[ident.alias]
-				}
-			},
-		})
-	}
-
-	// find the contents for all protobuf messages
-	for(const mod of modules) {
-		const modInfo = modulesInfo[mod.key.value]
-		const rename = makeRenameFunc(mod.key.value)
-
-		// message specifications are stored in a "internalSpec" attribute of the respective identifier alias
-		walk.simple(mod, {
-			AssignmentExpression(node) {
-				if(node.left.type === 'MemberExpression' && node.left.property.name === 'internalSpec' && node.right.type === 'ObjectExpression') {
-					const targetIdent = Object.values(modInfo.identifiers).find(v => v.alias === node.left.object.name)
-					if(!targetIdent) {
-						console.warn(`found message specification for unknown identifier alias: ${node.left.object.name}`)
-						return
-					}
-
-					// partition spec properties by normal members and constraints (like "__oneofs__") which will be processed afterwards
-					const constraints = []
-					let members = []
-					for(const p of node.right.properties) {
-						p.key.name = p.key.type === 'Identifier' ? p.key.name : p.key.value
-						const arr = p.key.name.substr(0, 2) === '__' ? constraints : members
-						arr.push(p)
-					}
-
-					members = members.map(({ key: { name }, value: { elements } }) => {
-						let type
-						const flags = []
-						const unwrapBinaryOr = n => (n.type === 'BinaryExpression' && n.operator === '|') ? [].concat(unwrapBinaryOr(n.left), unwrapBinaryOr(n.right)) : [n]
-
-						// find type and flags
-						unwrapBinaryOr(elements[1]).forEach(m => {
-							if(m.type === 'MemberExpression' && m.object.type === 'MemberExpression') {
-								if(m.object.property.name === 'TYPES') {
-									type = m.property.name.toLowerCase()
-								} else if(m.object.property.name === 'FLAGS') {
-									flags.push(m.property.name.toLowerCase())
-								}
-							}
-						})
-
-						// determine cross reference name from alias if this member has type "message" or "enum"
-						if(type === 'message' || type === 'enum') {
-							const currLoc = ` from member '${name}' of message '${targetIdent.name}'`
-							if(elements[2].type === 'Identifier') {
-								type = Object.values(modInfo.identifiers).find(v => v.alias === elements[2].name)?.name
-								if(!type) {
-									console.warn(`unable to find reference of alias '${elements[2].name}'` + currLoc)
-								}
-							} else if(elements[2].type === 'MemberExpression') {
-								const crossRef = modInfo.crossRefs.find(r => r.alias === elements[2].object.name)
-								if(crossRef && modulesInfo[crossRef.module].identifiers[rename(elements[2].property.name)]) {
-									type = rename(elements[2].property.name)
-								} else {
-									console.warn(`unable to find reference of alias to other module '${elements[2].object.name}' or to message ${elements[2].property.name} of this module` + currLoc)
-								}
-							}
-						}
-
-						return { name, id: elements[0].value, type, flags }
-					})
-
-					// resolve constraints for members
-					constraints.forEach(c => {
-						if(c.key.name === '__oneofs__' && c.value.type === 'ObjectExpression') {
-							const newOneOfs = c.value.properties.map(p => ({
-								name: p.key.name,
-								type: '__oneof__',
-								members: p.value.elements.map(e => {
-									const idx = members.findIndex(m => m.name === e.value)
-									const member = members[idx]
-									members.splice(idx, 1)
-									return member
-								})
-							}))
-							members.push(...newOneOfs)
-						}
-					})
-
-					targetIdent.members = members
-				}
-			}
-		})
-	}
-
-	const decodedProtoMap = { }
-	const spaceIndent = ' '.repeat(4)
-	for(const mod of modules) {
-		const modInfo = modulesInfo[mod.key.value]
-		const identifiers = Object.values(modInfo.identifiers)
-
-		// enum stringifying function
-		const stringifyEnum = (ident, overrideName = null) => [].concat(
-			[`enum ${overrideName || ident.displayName || ident.name} {`],
-			addPrefix(ident.enumValues.map(v => `${v.name} = ${v.id};`), spaceIndent),
-			['}']
-		)
-
-		// message specification member stringifying function
-		const stringifyMessageSpecMember = (info, completeFlags, parentName = undefined) => {
-			if(info.type === '__oneof__') {
-				return [].concat(
-					[`oneof ${info.name} {`],
-					addPrefix([].concat(...info.members.map(m => stringifyMessageSpecMember(m, false))), spaceIndent),
-					['}']
-				)
-			} else {
-				if(info.flags.includes('packed')) {
-					info.flags.splice(info.flags.indexOf('packed'))
-					info.packed = ' [packed=true]'
-				}
-
-				if(completeFlags && info.flags.length === 0) {
-					info.flags.push('optional')
-				}
-
-				const ret = []
-				const indentation = moduleIndentationMap[info.type]?.indentation
-				let typeName = unnestName(info.type)
-				if(indentation !== parentName && indentation) {
-					typeName = `${indentation.replaceAll('$', '.')}.${typeName}`
-				}
-
-				// if(info.enumValues) {
-				//     // typeName = unnestName(info.type)
-				//     ret = stringifyEnum(info, typeName)
-				// }
-
-				ret.push(`${info.flags.join(' ') + (info.flags.length === 0 ? '' : ' ')}${typeName} ${info.name} = ${info.id}${info.packed || ''};`)
-				return ret
-			}
-		}
-
-		// message specification stringifying function
-		const stringifyMessageSpec = (ident) => {
-			const members = moduleIndentationMap[ident.name]?.members
-			const result = []
-			result.push(
-				`message ${ident.displayName || ident.name} {`,
-				...addPrefix([].concat(...ident.members.map(m => stringifyMessageSpecMember(m, true, ident.name))), spaceIndent),
-			)
-
-			if(members?.size) {
-				const sortedMembers = Array.from(members).sort()
-				for(const memberName of sortedMembers) {
-					let entity = modInfo.identifiers[memberName]
-					if(entity) {
-						const displayName = entity.name.slice(ident.name.length + 1)
-						entity = { ...entity, displayName }
-						result.push(...addPrefix(getEntity(entity), spaceIndent))
-					} else {
-						console.log('missing nested entity ', memberName)
-					}
-				}
-			}
-
-			result.push('}')
-			result.push('')
-
-			return result
-		}
-
-		const getEntity = (v) => {
-			let result
-			if(v.members) {
-				result = stringifyMessageSpec(v)
-			} else if(v.enumValues?.length) {
-				result = stringifyEnum(v)
-			} else {
-				result = ['// Unknown entity ' + v.name]
-			}
-
-			return result
-		}
-
-		const stringifyEntity = v => {
-			return {
-				content: getEntity(v).join('\n'),
-				name: v.name
-			}
-		}
-
-		for(const value of identifiers) {
-			const { name, content } = stringifyEntity(value)
-			if(!moduleIndentationMap[name]?.indentation?.length) {
-				decodedProtoMap[name] = content
-			}
-			// decodedProtoMap[name] = content
-		}
-	}
-
-	// console.log(moduleIndentationMap)
-	const decodedProto = Object.keys(decodedProtoMap).sort()
-	const sortedStr = decodedProto.map(d => decodedProtoMap[d]).join('\n')
-
-	const decodedProtoStr = `syntax = "proto2";\npackage proto;\n\n${sortedStr}`
-	const destinationPath = '../WAProto/WAProto.proto'
-	await fs.writeFile(destinationPath, decodedProtoStr)
-
-	console.log(`Extracted protobuf schema to "${destinationPath}"`)
-})()
diff --git a/node_modules/@whiskeysockets/baileys/proto-extract/package.json b/node_modules/@whiskeysockets/baileys/proto-extract/package.json
deleted file mode 100644
index 97ed950..0000000
--- a/node_modules/@whiskeysockets/baileys/proto-extract/package.json
+++ /dev/null
@@ -1,15 +0,0 @@
-{
-  "name": "whatsapp-web-protobuf-extractor",
-  "version": "1.0.0",
-  "main": "index.js",
-  "scripts": {
-    "start": "node index.js"
-  },
-  "dependencies": {
-    "acorn": "^6.4.1",
-    "acorn-walk": "^6.1.1",
-    "request": "^2.88.0",
-    "request-promise-core": "^1.1.2",
-    "request-promise-native": "^1.0.7"
-  }
-}
diff --git a/node_modules/@whiskeysockets/baileys/proto-extract/yarn.lock b/node_modules/@whiskeysockets/baileys/proto-extract/yarn.lock
deleted file mode 100644
index ca6342c..0000000
--- a/node_modules/@whiskeysockets/baileys/proto-extract/yarn.lock
+++ /dev/null
@@ -1,357 +0,0 @@
-# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
-# yarn lockfile v1
-
-
-acorn-walk@^6.1.1:
-  version "6.2.0"
-  resolved "https://registry.yarnpkg.com/acorn-walk/-/acorn-walk-6.2.0.tgz#123cb8f3b84c2171f1f7fb252615b1c78a6b1a8c"
-  integrity sha512-7evsyfH1cLOCdAzZAd43Cic04yKydNx0cF+7tiA19p1XnLLPU4dpCQOqpjqwokFe//vS0QqfqqjCS2JkiIs0cA==
-
-acorn@^6.4.1:
-  version "6.4.2"
-  resolved "https://registry.yarnpkg.com/acorn/-/acorn-6.4.2.tgz#35866fd710528e92de10cf06016498e47e39e1e6"
-  integrity sha512-XtGIhXwF8YM8bJhGxG5kXgjkEuNGLTkoYqVE+KMR+aspr4KGYmKYg7yUe3KghyQ9yheNwLnjmzh/7+gfDBmHCQ==
-
-ajv@^6.12.3:
-  version "6.12.6"
-  resolved "https://registry.yarnpkg.com/ajv/-/ajv-6.12.6.tgz#baf5a62e802b07d977034586f8c3baf5adf26df4"
-  integrity sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==
-  dependencies:
-    fast-deep-equal "^3.1.1"
-    fast-json-stable-stringify "^2.0.0"
-    json-schema-traverse "^0.4.1"
-    uri-js "^4.2.2"
-
-asn1@~0.2.3:
-  version "0.2.4"
-  resolved "https://registry.yarnpkg.com/asn1/-/asn1-0.2.4.tgz#8d2475dfab553bb33e77b54e59e880bb8ce23136"
-  integrity sha512-jxwzQpLQjSmWXgwaCZE9Nz+glAG01yF1QnWgbhGwHI5A6FRIEY6IVqtHhIepHqI7/kyEyQEagBC5mBEFlIYvdg==
-  dependencies:
-    safer-buffer "~2.1.0"
-
-assert-plus@1.0.0, assert-plus@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/assert-plus/-/assert-plus-1.0.0.tgz#f12e0f3c5d77b0b1cdd9146942e4e96c1e4dd525"
-  integrity sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=
-
-asynckit@^0.4.0:
-  version "0.4.0"
-  resolved "https://registry.yarnpkg.com/asynckit/-/asynckit-0.4.0.tgz#c79ed97f7f34cb8f2ba1bc9790bcc366474b4b79"
-  integrity sha1-x57Zf380y48robyXkLzDZkdLS3k=
-
-aws-sign2@~0.7.0:
-  version "0.7.0"
-  resolved "https://registry.yarnpkg.com/aws-sign2/-/aws-sign2-0.7.0.tgz#b46e890934a9591f2d2f6f86d7e6a9f1b3fe76a8"
-  integrity sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg=
-
-aws4@^1.8.0:
-  version "1.11.0"
-  resolved "https://registry.yarnpkg.com/aws4/-/aws4-1.11.0.tgz#d61f46d83b2519250e2784daf5b09479a8b41c59"
-  integrity sha512-xh1Rl34h6Fi1DC2WWKfxUTVqRsNnr6LsKz2+hfwDxQJWmrx8+c7ylaqBMcHfl1U1r2dsifOvKX3LQuLNZ+XSvA==
-
-bcrypt-pbkdf@^1.0.0:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz#a4301d389b6a43f9b67ff3ca11a3f6637e360e9e"
-  integrity sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=
-  dependencies:
-    tweetnacl "^0.14.3"
-
-caseless@~0.12.0:
-  version "0.12.0"
-  resolved "https://registry.yarnpkg.com/caseless/-/caseless-0.12.0.tgz#1b681c21ff84033c826543090689420d187151dc"
-  integrity sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw=
-
-combined-stream@^1.0.6, combined-stream@~1.0.6:
-  version "1.0.8"
-  resolved "https://registry.yarnpkg.com/combined-stream/-/combined-stream-1.0.8.tgz#c3d45a8b34fd730631a110a8a2520682b31d5a7f"
-  integrity sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==
-  dependencies:
-    delayed-stream "~1.0.0"
-
-core-util-is@1.0.2:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/core-util-is/-/core-util-is-1.0.2.tgz#b5fd54220aa2bc5ab57aab7140c940754503c1a7"
-  integrity sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=
-
-dashdash@^1.12.0:
-  version "1.14.1"
-  resolved "https://registry.yarnpkg.com/dashdash/-/dashdash-1.14.1.tgz#853cfa0f7cbe2fed5de20326b8dd581035f6e2f0"
-  integrity sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=
-  dependencies:
-    assert-plus "^1.0.0"
-
-delayed-stream@~1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/delayed-stream/-/delayed-stream-1.0.0.tgz#df3ae199acadfb7d440aaae0b29e2272b24ec619"
-  integrity sha1-3zrhmayt+31ECqrgsp4icrJOxhk=
-
-ecc-jsbn@~0.1.1:
-  version "0.1.2"
-  resolved "https://registry.yarnpkg.com/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz#3a83a904e54353287874c564b7549386849a98c9"
-  integrity sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=
-  dependencies:
-    jsbn "~0.1.0"
-    safer-buffer "^2.1.0"
-
-extend@~3.0.2:
-  version "3.0.2"
-  resolved "https://registry.yarnpkg.com/extend/-/extend-3.0.2.tgz#f8b1136b4071fbd8eb140aff858b1019ec2915fa"
-  integrity sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==
-
-extsprintf@1.3.0:
-  version "1.3.0"
-  resolved "https://registry.yarnpkg.com/extsprintf/-/extsprintf-1.3.0.tgz#96918440e3041a7a414f8c52e3c574eb3c3e1e05"
-  integrity sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=
-
-extsprintf@^1.2.0:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/extsprintf/-/extsprintf-1.4.0.tgz#e2689f8f356fad62cca65a3a91c5df5f9551692f"
-  integrity sha1-4mifjzVvrWLMplo6kcXfX5VRaS8=
-
-fast-deep-equal@^3.1.1:
-  version "3.1.3"
-  resolved "https://registry.yarnpkg.com/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz#3a7d56b559d6cbc3eb512325244e619a65c6c525"
-  integrity sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==
-
-fast-json-stable-stringify@^2.0.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz#874bf69c6f404c2b5d99c481341399fd55892633"
-  integrity sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==
-
-forever-agent@~0.6.1:
-  version "0.6.1"
-  resolved "https://registry.yarnpkg.com/forever-agent/-/forever-agent-0.6.1.tgz#fbc71f0c41adeb37f96c577ad1ed42d8fdacca91"
-  integrity sha1-+8cfDEGt6zf5bFd60e1C2P2sypE=
-
-form-data@~2.3.2:
-  version "2.3.3"
-  resolved "https://registry.yarnpkg.com/form-data/-/form-data-2.3.3.tgz#dcce52c05f644f298c6a7ab936bd724ceffbf3a6"
-  integrity sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==
-  dependencies:
-    asynckit "^0.4.0"
-    combined-stream "^1.0.6"
-    mime-types "^2.1.12"
-
-getpass@^0.1.1:
-  version "0.1.7"
-  resolved "https://registry.yarnpkg.com/getpass/-/getpass-0.1.7.tgz#5eff8e3e684d569ae4cb2b1282604e8ba62149fa"
-  integrity sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=
-  dependencies:
-    assert-plus "^1.0.0"
-
-har-schema@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/har-schema/-/har-schema-2.0.0.tgz#a94c2224ebcac04782a0d9035521f24735b7ec92"
-  integrity sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI=
-
-har-validator@~5.1.3:
-  version "5.1.5"
-  resolved "https://registry.yarnpkg.com/har-validator/-/har-validator-5.1.5.tgz#1f0803b9f8cb20c0fa13822df1ecddb36bde1efd"
-  integrity sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==
-  dependencies:
-    ajv "^6.12.3"
-    har-schema "^2.0.0"
-
-http-signature@~1.2.0:
-  version "1.2.0"
-  resolved "https://registry.yarnpkg.com/http-signature/-/http-signature-1.2.0.tgz#9aecd925114772f3d95b65a60abb8f7c18fbace1"
-  integrity sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=
-  dependencies:
-    assert-plus "^1.0.0"
-    jsprim "^1.2.2"
-    sshpk "^1.7.0"
-
-is-typedarray@~1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/is-typedarray/-/is-typedarray-1.0.0.tgz#e479c80858df0c1b11ddda6940f96011fcda4a9a"
-  integrity sha1-5HnICFjfDBsR3dppQPlgEfzaSpo=
-
-isstream@~0.1.2:
-  version "0.1.2"
-  resolved "https://registry.yarnpkg.com/isstream/-/isstream-0.1.2.tgz#47e63f7af55afa6f92e1500e690eb8b8529c099a"
-  integrity sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=
-
-jsbn@~0.1.0:
-  version "0.1.1"
-  resolved "https://registry.yarnpkg.com/jsbn/-/jsbn-0.1.1.tgz#a5e654c2e5a2deb5f201d96cefbca80c0ef2f513"
-  integrity sha1-peZUwuWi3rXyAdls77yoDA7y9RM=
-
-json-schema-traverse@^0.4.1:
-  version "0.4.1"
-  resolved "https://registry.yarnpkg.com/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz#69f6a87d9513ab8bb8fe63bdb0979c448e684660"
-  integrity sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==
-
-json-schema@0.2.3:
-  version "0.2.3"
-  resolved "https://registry.yarnpkg.com/json-schema/-/json-schema-0.2.3.tgz#b480c892e59a2f05954ce727bd3f2a4e882f9e13"
-  integrity sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM=
-
-json-stringify-safe@~5.0.1:
-  version "5.0.1"
-  resolved "https://registry.yarnpkg.com/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz#1296a2d58fd45f19a0f6ce01d65701e2c735b6eb"
-  integrity sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=
-
-jsprim@^1.2.2:
-  version "1.4.1"
-  resolved "https://registry.yarnpkg.com/jsprim/-/jsprim-1.4.1.tgz#313e66bc1e5cc06e438bc1b7499c2e5c56acb6a2"
-  integrity sha1-MT5mvB5cwG5Di8G3SZwuXFastqI=
-  dependencies:
-    assert-plus "1.0.0"
-    extsprintf "1.3.0"
-    json-schema "0.2.3"
-    verror "1.10.0"
-
-lodash@^4.17.19:
-  version "4.17.21"
-  resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz#679591c564c3bffaae8454cf0b3df370c3d6911c"
-  integrity sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==
-
-mime-db@1.50.0:
-  version "1.50.0"
-  resolved "https://registry.yarnpkg.com/mime-db/-/mime-db-1.50.0.tgz#abd4ac94e98d3c0e185016c67ab45d5fde40c11f"
-  integrity sha512-9tMZCDlYHqeERXEHO9f/hKfNXhre5dK2eE/krIvUjZbS2KPcqGDfNShIWS1uW9XOTKQKqK6qbeOci18rbfW77A==
-
-mime-types@^2.1.12, mime-types@~2.1.19:
-  version "2.1.33"
-  resolved "https://registry.yarnpkg.com/mime-types/-/mime-types-2.1.33.tgz#1fa12a904472fafd068e48d9e8401f74d3f70edb"
-  integrity sha512-plLElXp7pRDd0bNZHw+nMd52vRYjLwQjygaNg7ddJ2uJtTlmnTCjWuPKxVu6//AdaRuME84SvLW91sIkBqGT0g==
-  dependencies:
-    mime-db "1.50.0"
-
-oauth-sign@~0.9.0:
-  version "0.9.0"
-  resolved "https://registry.yarnpkg.com/oauth-sign/-/oauth-sign-0.9.0.tgz#47a7b016baa68b5fa0ecf3dee08a85c679ac6455"
-  integrity sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==
-
-performance-now@^2.1.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/performance-now/-/performance-now-2.1.0.tgz#6309f4e0e5fa913ec1c69307ae364b4b377c9e7b"
-  integrity sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns=
-
-psl@^1.1.28:
-  version "1.8.0"
-  resolved "https://registry.yarnpkg.com/psl/-/psl-1.8.0.tgz#9326f8bcfb013adcc005fdff056acce020e51c24"
-  integrity sha512-RIdOzyoavK+hA18OGGWDqUTsCLhtA7IcZ/6NCs4fFJaHBDab+pDDmDIByWFRQJq2Cd7r1OoQxBGKOaztq+hjIQ==
-
-punycode@^2.1.0, punycode@^2.1.1:
-  version "2.1.1"
-  resolved "https://registry.yarnpkg.com/punycode/-/punycode-2.1.1.tgz#b58b010ac40c22c5657616c8d2c2c02c7bf479ec"
-  integrity sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==
-
-qs@~6.5.2:
-  version "6.5.2"
-  resolved "https://registry.yarnpkg.com/qs/-/qs-6.5.2.tgz#cb3ae806e8740444584ef154ce8ee98d403f3e36"
-  integrity sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==
-
-request-promise-core@1.1.4, request-promise-core@^1.1.2:
-  version "1.1.4"
-  resolved "https://registry.yarnpkg.com/request-promise-core/-/request-promise-core-1.1.4.tgz#3eedd4223208d419867b78ce815167d10593a22f"
-  integrity sha512-TTbAfBBRdWD7aNNOoVOBH4pN/KigV6LyapYNNlAPA8JwbovRti1E88m3sYAwsLi5ryhPKsE9APwnjFTgdUjTpw==
-  dependencies:
-    lodash "^4.17.19"
-
-request-promise-native@^1.0.7:
-  version "1.0.9"
-  resolved "https://registry.yarnpkg.com/request-promise-native/-/request-promise-native-1.0.9.tgz#e407120526a5efdc9a39b28a5679bf47b9d9dc28"
-  integrity sha512-wcW+sIUiWnKgNY0dqCpOZkUbF/I+YPi+f09JZIDa39Ec+q82CpSYniDp+ISgTTbKmnpJWASeJBPZmoxH84wt3g==
-  dependencies:
-    request-promise-core "1.1.4"
-    stealthy-require "^1.1.1"
-    tough-cookie "^2.3.3"
-
-request@^2.88.0:
-  version "2.88.2"
-  resolved "https://registry.yarnpkg.com/request/-/request-2.88.2.tgz#d73c918731cb5a87da047e207234146f664d12b3"
-  integrity sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==
-  dependencies:
-    aws-sign2 "~0.7.0"
-    aws4 "^1.8.0"
-    caseless "~0.12.0"
-    combined-stream "~1.0.6"
-    extend "~3.0.2"
-    forever-agent "~0.6.1"
-    form-data "~2.3.2"
-    har-validator "~5.1.3"
-    http-signature "~1.2.0"
-    is-typedarray "~1.0.0"
-    isstream "~0.1.2"
-    json-stringify-safe "~5.0.1"
-    mime-types "~2.1.19"
-    oauth-sign "~0.9.0"
-    performance-now "^2.1.0"
-    qs "~6.5.2"
-    safe-buffer "^5.1.2"
-    tough-cookie "~2.5.0"
-    tunnel-agent "^0.6.0"
-    uuid "^3.3.2"
-
-safe-buffer@^5.0.1, safe-buffer@^5.1.2:
-  version "5.2.1"
-  resolved "https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.2.1.tgz#1eaf9fa9bdb1fdd4ec75f58f9cdb4e6b7827eec6"
-  integrity sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==
-
-safer-buffer@^2.0.2, safer-buffer@^2.1.0, safer-buffer@~2.1.0:
-  version "2.1.2"
-  resolved "https://registry.yarnpkg.com/safer-buffer/-/safer-buffer-2.1.2.tgz#44fa161b0187b9549dd84bb91802f9bd8385cd6a"
-  integrity sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==
-
-sshpk@^1.7.0:
-  version "1.16.1"
-  resolved "https://registry.yarnpkg.com/sshpk/-/sshpk-1.16.1.tgz#fb661c0bef29b39db40769ee39fa70093d6f6877"
-  integrity sha512-HXXqVUq7+pcKeLqqZj6mHFUMvXtOJt1uoUx09pFW6011inTMxqI8BA8PM95myrIyyKwdnzjdFjLiE6KBPVtJIg==
-  dependencies:
-    asn1 "~0.2.3"
-    assert-plus "^1.0.0"
-    bcrypt-pbkdf "^1.0.0"
-    dashdash "^1.12.0"
-    ecc-jsbn "~0.1.1"
-    getpass "^0.1.1"
-    jsbn "~0.1.0"
-    safer-buffer "^2.0.2"
-    tweetnacl "~0.14.0"
-
-stealthy-require@^1.1.1:
-  version "1.1.1"
-  resolved "https://registry.yarnpkg.com/stealthy-require/-/stealthy-require-1.1.1.tgz#35b09875b4ff49f26a777e509b3090a3226bf24b"
-  integrity sha1-NbCYdbT/SfJqd35QmzCQoyJr8ks=
-
-tough-cookie@^2.3.3, tough-cookie@~2.5.0:
-  version "2.5.0"
-  resolved "https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-2.5.0.tgz#cd9fb2a0aa1d5a12b473bd9fb96fa3dcff65ade2"
-  integrity sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==
-  dependencies:
-    psl "^1.1.28"
-    punycode "^2.1.1"
-
-tunnel-agent@^0.6.0:
-  version "0.6.0"
-  resolved "https://registry.yarnpkg.com/tunnel-agent/-/tunnel-agent-0.6.0.tgz#27a5dea06b36b04a0a9966774b290868f0fc40fd"
-  integrity sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=
-  dependencies:
-    safe-buffer "^5.0.1"
-
-tweetnacl@^0.14.3, tweetnacl@~0.14.0:
-  version "0.14.5"
-  resolved "https://registry.yarnpkg.com/tweetnacl/-/tweetnacl-0.14.5.tgz#5ae68177f192d4456269d108afa93ff8743f4f64"
-  integrity sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=
-
-uri-js@^4.2.2:
-  version "4.4.1"
-  resolved "https://registry.yarnpkg.com/uri-js/-/uri-js-4.4.1.tgz#9b1a52595225859e55f669d928f88c6c57f2a77e"
-  integrity sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==
-  dependencies:
-    punycode "^2.1.0"
-
-uuid@^3.3.2:
-  version "3.4.0"
-  resolved "https://registry.yarnpkg.com/uuid/-/uuid-3.4.0.tgz#b23e4358afa8a202fe7a100af1f5f883f02007ee"
-  integrity sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==
-
-verror@1.10.0:
-  version "1.10.0"
-  resolved "https://registry.yarnpkg.com/verror/-/verror-1.10.0.tgz#3a105ca17053af55d6e270c1f8288682e18da400"
-  integrity sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=
-  dependencies:
-    assert-plus "^1.0.0"
-    core-util-is "1.0.2"
-    extsprintf "^1.2.0"
diff --git a/node_modules/@whiskeysockets/baileys/src/Defaults/baileys-version.json b/node_modules/@whiskeysockets/baileys/src/Defaults/baileys-version.json
deleted file mode 100644
index cbf24c7..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Defaults/baileys-version.json
+++ /dev/null
@@ -1,3 +0,0 @@
-{
-	"version": [2, 2413, 1]
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Defaults/index.ts b/node_modules/@whiskeysockets/baileys/src/Defaults/index.ts
deleted file mode 100644
index 564581f..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Defaults/index.ts
+++ /dev/null
@@ -1,131 +0,0 @@
-import { createHash } from 'crypto'
-import { proto } from '../../WAProto'
-import { makeLibSignalRepository } from '../Signal/libsignal'
-import type { AuthenticationState, MediaType, SocketConfig, WAVersion } from '../Types'
-import { Browsers } from '../Utils'
-import logger from '../Utils/logger'
-import { version } from './baileys-version.json'
-import phoneNumberMCC from './phonenumber-mcc.json'
-
-export const UNAUTHORIZED_CODES = [401, 403, 419]
-
-export const PHONENUMBER_MCC = phoneNumberMCC
-
-export const DEFAULT_ORIGIN = 'https://web.whatsapp.com'
-export const MOBILE_ENDPOINT = 'g.whatsapp.net'
-export const MOBILE_PORT = 443
-export const DEF_CALLBACK_PREFIX = 'CB:'
-export const DEF_TAG_PREFIX = 'TAG:'
-export const PHONE_CONNECTION_CB = 'CB:Pong'
-
-export const WA_DEFAULT_EPHEMERAL = 7 * 24 * 60 * 60
-
-const WA_VERSION = '2.24.6.77'
-
-const WA_VERSION_HASH = createHash('md5').update(WA_VERSION).digest('hex')
-export const MOBILE_TOKEN = Buffer.from('0a1mLfGUIBVrMKF1RdvLI5lkRBvof6vn0fD2QRSM' + WA_VERSION_HASH)
-export const MOBILE_REGISTRATION_ENDPOINT = 'https://v.whatsapp.net/v2'
-export const MOBILE_USERAGENT = `WhatsApp/${WA_VERSION} iOS/15.3.1 Device/Apple-iPhone_7`
-export const REGISTRATION_PUBLIC_KEY = Buffer.from([
-	5, 142, 140, 15, 116, 195, 235, 197, 215, 166, 134, 92, 108, 60, 132, 56, 86, 176, 97, 33, 204, 232, 234, 119, 77,
-	34, 251, 111, 18, 37, 18, 48, 45,
-])
-export const NOISE_MODE = 'Noise_XX_25519_AESGCM_SHA256\0\0\0\0'
-export const DICT_VERSION = 2
-export const KEY_BUNDLE_TYPE = Buffer.from([5])
-export const NOISE_WA_HEADER = Buffer.from(
-	[ 87, 65, 6, DICT_VERSION ]
-) // last is "DICT_VERSION"
-export const PROTOCOL_VERSION = [5, 2]
-export const MOBILE_NOISE_HEADER = Buffer.concat([Buffer.from('WA'), Buffer.from(PROTOCOL_VERSION)])
-/** from: https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url */
-export const URL_REGEX = /(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/
-
-export const WA_CERT_DETAILS = {
-	SERIAL: 0,
-}
-
-export const PROCESSABLE_HISTORY_TYPES = [
-	proto.Message.HistorySyncNotification.HistorySyncType.INITIAL_BOOTSTRAP,
-	proto.Message.HistorySyncNotification.HistorySyncType.PUSH_NAME,
-	proto.Message.HistorySyncNotification.HistorySyncType.RECENT,
-	proto.Message.HistorySyncNotification.HistorySyncType.FULL
-]
-
-export const DEFAULT_CONNECTION_CONFIG: SocketConfig = {
-	version: version as WAVersion,
-	browser: Browsers.ubuntu('Chrome'),
-	waWebSocketUrl: 'wss://web.whatsapp.com/ws/chat',
-	connectTimeoutMs: 20_000,
-	keepAliveIntervalMs: 30_000,
-	logger: logger.child({ class: 'baileys' }),
-	printQRInTerminal: false,
-	emitOwnEvents: true,
-	defaultQueryTimeoutMs: 60_000,
-	customUploadHosts: [],
-	retryRequestDelayMs: 250,
-	maxMsgRetryCount: 5,
-	fireInitQueries: true,
-	auth: undefined as unknown as AuthenticationState,
-	markOnlineOnConnect: true,
-	syncFullHistory: false,
-	patchMessageBeforeSending: msg => msg,
-	shouldSyncHistoryMessage: () => true,
-	shouldIgnoreJid: () => false,
-	linkPreviewImageThumbnailWidth: 192,
-	transactionOpts: { maxCommitRetries: 10, delayBetweenTriesMs: 3000 },
-	generateHighQualityLinkPreview: false,
-	options: { },
-	appStateMacVerification: {
-		patch: false,
-		snapshot: false,
-	},
-	getMessage: async() => undefined,
-	makeSignalRepository: makeLibSignalRepository
-}
-
-export const MEDIA_PATH_MAP: { [T in MediaType]?: string } = {
-	image: '/mms/image',
-	video: '/mms/video',
-	document: '/mms/document',
-	audio: '/mms/audio',
-	sticker: '/mms/image',
-	'thumbnail-link': '/mms/image',
-	'product-catalog-image': '/product/image',
-	'md-app-state': '',
-	'md-msg-hist': '/mms/md-app-state',
-}
-
-export const MEDIA_HKDF_KEY_MAPPING = {
-	'audio': 'Audio',
-	'document': 'Document',
-	'gif': 'Video',
-	'image': 'Image',
-	'ppic': '',
-	'product': 'Image',
-	'ptt': 'Audio',
-	'sticker': 'Image',
-	'video': 'Video',
-	'thumbnail-document': 'Document Thumbnail',
-	'thumbnail-image': 'Image Thumbnail',
-	'thumbnail-video': 'Video Thumbnail',
-	'thumbnail-link': 'Link Thumbnail',
-	'md-msg-hist': 'History',
-	'md-app-state': 'App State',
-	'product-catalog-image': '',
-	'payment-bg-image': 'Payment Background',
-	'ptv': 'Video'
-}
-
-export const MEDIA_KEYS = Object.keys(MEDIA_PATH_MAP) as MediaType[]
-
-export const MIN_PREKEY_COUNT = 5
-
-export const INITIAL_PREKEY_COUNT = 30
-
-export const DEFAULT_CACHE_TTLS = {
-	SIGNAL_STORE: 5 * 60, // 5 minutes
-	MSG_RETRY: 60 * 60, // 1 hour
-	CALL_OFFER: 5 * 60, // 5 minutes
-	USER_DEVICES: 5 * 60, // 5 minutes
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Defaults/phonenumber-mcc.json b/node_modules/@whiskeysockets/baileys/src/Defaults/phonenumber-mcc.json
deleted file mode 100644
index 2fd7c9f..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Defaults/phonenumber-mcc.json
+++ /dev/null
@@ -1,223 +0,0 @@
-{
-	"93": 412,
-	"355": 276,
-	"213": 603,
-	"1-684": 544,
-	"376": 213,
-	"244": 631,
-	"1-264": 365,
-	"1-268": 344,
-	"54": 722,
-	"374": 283,
-	"297": 363,
-	"61": 505,
-	"43": 232,
-	"994": 400,
-	"1-242": 364,
-	"973": 426,
-	"880": 470,
-	"1-246": 342,
-	"375": 257,
-	"32": 206,
-	"501": 702,
-	"229": 616,
-	"1-441": 350,
-	"975": 402,
-	"591": 736,
-	"387": 218,
-	"267": 652,
-	"55": 724,
-	"1-284": 348,
-	"673": 528,
-	"359": 284,
-	"226": 613,
-	"257": 642,
-	"855": 456,
-	"237": 624,
-	"238": 625,
-	"1-345": 346,
-	"236": 623,
-	"235": 622,
-	"56": 730,
-	"86": 454,
-	"57": 732,
-	"269": 654,
-	"682": 548,
-	"506": 712,
-	"385": 219,
-	"53": 368,
-	"357": 280,
-	"420": 230,
-	"243": 630,
-	"45": 238,
-	"253": 638,
-	"1-767": 366,
-	"1-809": 370,
-	"1-849": 370,
-	"1-829": 370,
-	"593": 740,
-	"20": 602,
-	"503": 706,
-	"240": 627,
-	"291": 657,
-	"372": 248,
-	"251": 636,
-	"500": 750,
-	"298": 288,
-	"679": 542,
-	"358": 244,
-	"33": 208,
-	"689": 547,
-	"241": 628,
-	"220": 607,
-	"995": 282,
-	"49": 262,
-	"233": 620,
-	"350": 266,
-	"30": 202,
-	"299": 290,
-	"1-473": 352,
-	"1-671": 535,
-	"502": 704,
-	"224": 537,
-	"592": 738,
-	"509": 372,
-	"504": 708,
-	"852": 454,
-	"36": 216,
-	"354": 274,
-	"91": 404,
-	"62": 510,
-	"98": 432,
-	"964": 418,
-	"353": 234,
-	"972": 425,
-	"39": 222,
-	"225": 612,
-	"1-876": 338,
-	"81": 440,
-	"962": 416,
-	"254": 639,
-	"686": 545,
-	"383": 221,
-	"965": 419,
-	"371": 247,
-	"961": 415,
-	"266": 651,
-	"231": 618,
-	"218": 606,
-	"423": 295,
-	"370": 246,
-	"352": 270,
-	"389": 294,
-	"261": 646,
-	"265": 650,
-	"60": 502,
-	"960": 472,
-	"223": 610,
-	"356": 278,
-	"692": 551,
-	"222": 609,
-	"230": 617,
-	"52": 334,
-	"691": 550,
-	"373": 259,
-	"377": 212,
-	"976": 428,
-	"382": 297,
-	"1-664": 354,
-	"212": 604,
-	"258": 643,
-	"95": 414,
-	"264": 649,
-	"674": 536,
-	"977": 429,
-	"31": 204,
-	"687": 546,
-	"64": 530,
-	"505": 710,
-	"227": 614,
-	"234": 621,
-	"683": 555,
-	"1-670": 534,
-	"47": 242,
-	"968": 226,
-	"92": 410,
-	"680": 552,
-	"970": 423,
-	"507": 714,
-	"675": 537,
-	"595": 744,
-	"51": 716,
-	"63": 515,
-	"48": 260,
-	"351": 268,
-	"1-787, 1-939": 330,
-	"974": 427,
-	"242": 630,
-	"40": 226,
-	"7": 250,
-	"250": 635,
-	"290": 658,
-	"1-869": 356,
-	"1-758": 358,
-	"508": 308,
-	"1-784": 360,
-	"685": 544,
-	"378": 292,
-	"239": 626,
-	"966": 420,
-	"221": 608,
-	"381": 220,
-	"248": 633,
-	"232": 619,
-	"65": 525,
-	"386": 293,
-	"677": 540,
-	"27": 655,
-	"211": 659,
-	"34": 214,
-	"94": 413,
-	"249": 634,
-	"597": 746,
-	"268": 653,
-	"46": 240,
-	"41": 228,
-	"963": 417,
-	"886": 466,
-	"992": 436,
-	"255": 640,
-	"66": 520,
-	"228": 615,
-	"690": 554,
-	"676": 539,
-	"1-868": 374,
-	"216": 605,
-	"90": 286,
-	"993": 438,
-	"1-649": 376,
-	"688": 553,
-	"1-340": 332,
-	"256": 641,
-	"380": 255,
-	"971": 424,
-	"44": 234,
-	"1": 310,
-	"598": 748,
-	"998": 434,
-	"678": 541,
-	"379": 225,
-	"58": 734,
-	"681": 543,
-	"967": 421,
-	"260": 645,
-	"263": 648,
-	"670": 514,
-	"245": 632,
-	"856": 457,
-	"599": 362,
-	"850": 467,
-	"262": 647,
-	"82": 450,
-	"84": 452
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Signal/libsignal.ts b/node_modules/@whiskeysockets/baileys/src/Signal/libsignal.ts
deleted file mode 100644
index 367cdb8..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Signal/libsignal.ts
+++ /dev/null
@@ -1,141 +0,0 @@
-import * as libsignal from 'libsignal'
-import { GroupCipher, GroupSessionBuilder, SenderKeyDistributionMessage, SenderKeyName, SenderKeyRecord } from '../../WASignalGroup'
-import { SignalAuthState } from '../Types'
-import { SignalRepository } from '../Types/Signal'
-import { generateSignalPubKey } from '../Utils'
-import { jidDecode } from '../WABinary'
-
-export function makeLibSignalRepository(auth: SignalAuthState): SignalRepository {
-	const storage = signalStorage(auth)
-	return {
-		decryptGroupMessage({ group, authorJid, msg }) {
-			const senderName = jidToSignalSenderKeyName(group, authorJid)
-			const cipher = new GroupCipher(storage, senderName)
-
-			return cipher.decrypt(msg)
-		},
-		async processSenderKeyDistributionMessage({ item, authorJid }) {
-			const builder = new GroupSessionBuilder(storage)
-			const senderName = jidToSignalSenderKeyName(item.groupId!, authorJid)
-
-			const senderMsg = new SenderKeyDistributionMessage(null, null, null, null, item.axolotlSenderKeyDistributionMessage)
-			const { [senderName]: senderKey } = await auth.keys.get('sender-key', [senderName])
-			if(!senderKey) {
-				await storage.storeSenderKey(senderName, new SenderKeyRecord())
-			}
-
-			await builder.process(senderName, senderMsg)
-		},
-		async decryptMessage({ jid, type, ciphertext }) {
-			const addr = jidToSignalProtocolAddress(jid)
-			const session = new libsignal.SessionCipher(storage, addr)
-			let result: Buffer
-			switch (type) {
-			case 'pkmsg':
-				result = await session.decryptPreKeyWhisperMessage(ciphertext)
-				break
-			case 'msg':
-				result = await session.decryptWhisperMessage(ciphertext)
-				break
-			}
-
-			return result
-		},
-		async encryptMessage({ jid, data }) {
-			const addr = jidToSignalProtocolAddress(jid)
-			const cipher = new libsignal.SessionCipher(storage, addr)
-
-			const { type: sigType, body } = await cipher.encrypt(data)
-			const type = sigType === 3 ? 'pkmsg' : 'msg'
-			return { type, ciphertext: Buffer.from(body, 'binary') }
-		},
-		async encryptGroupMessage({ group, meId, data }) {
-			const senderName = jidToSignalSenderKeyName(group, meId)
-			const builder = new GroupSessionBuilder(storage)
-
-			const { [senderName]: senderKey } = await auth.keys.get('sender-key', [senderName])
-			if(!senderKey) {
-				await storage.storeSenderKey(senderName, new SenderKeyRecord())
-			}
-
-			const senderKeyDistributionMessage = await builder.create(senderName)
-			const session = new GroupCipher(storage, senderName)
-			const ciphertext = await session.encrypt(data)
-
-			return {
-				ciphertext,
-				senderKeyDistributionMessage: senderKeyDistributionMessage.serialize(),
-			}
-		},
-		async injectE2ESession({ jid, session }) {
-			const cipher = new libsignal.SessionBuilder(storage, jidToSignalProtocolAddress(jid))
-			await cipher.initOutgoing(session)
-		},
-		jidToSignalProtocolAddress(jid) {
-			return jidToSignalProtocolAddress(jid).toString()
-		},
-	}
-}
-
-const jidToSignalProtocolAddress = (jid: string) => {
-	const { user, device } = jidDecode(jid)!
-	return new libsignal.ProtocolAddress(user, device || 0)
-}
-
-const jidToSignalSenderKeyName = (group: string, user: string): string => {
-	return new SenderKeyName(group, jidToSignalProtocolAddress(user)).toString()
-}
-
-function signalStorage({ creds, keys }: SignalAuthState) {
-	return {
-		loadSession: async(id: string) => {
-			const { [id]: sess } = await keys.get('session', [id])
-			if(sess) {
-				return libsignal.SessionRecord.deserialize(sess)
-			}
-		},
-		storeSession: async(id, session) => {
-			await keys.set({ 'session': { [id]: session.serialize() } })
-		},
-		isTrustedIdentity: () => {
-			return true
-		},
-		loadPreKey: async(id: number | string) => {
-			const keyId = id.toString()
-			const { [keyId]: key } = await keys.get('pre-key', [keyId])
-			if(key) {
-				return {
-					privKey: Buffer.from(key.private),
-					pubKey: Buffer.from(key.public)
-				}
-			}
-		},
-		removePreKey: (id: number) => keys.set({ 'pre-key': { [id]: null } }),
-		loadSignedPreKey: () => {
-			const key = creds.signedPreKey
-			return {
-				privKey: Buffer.from(key.keyPair.private),
-				pubKey: Buffer.from(key.keyPair.public)
-			}
-		},
-		loadSenderKey: async(keyId: string) => {
-			const { [keyId]: key } = await keys.get('sender-key', [keyId])
-			if(key) {
-				return new SenderKeyRecord(key)
-			}
-		},
-		storeSenderKey: async(keyId, key) => {
-			await keys.set({ 'sender-key': { [keyId]: key.serialize() } })
-		},
-		getOurRegistrationId: () => (
-			creds.registrationId
-		),
-		getOurIdentity: () => {
-			const { signedIdentityKey } = creds
-			return {
-				privKey: Buffer.from(signedIdentityKey.private),
-				pubKey: generateSignalPubKey(signedIdentityKey.public),
-			}
-		}
-	}
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Socket/Client/abstract-socket-client.ts b/node_modules/@whiskeysockets/baileys/src/Socket/Client/abstract-socket-client.ts
deleted file mode 100644
index 5d78298..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Socket/Client/abstract-socket-client.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-import { EventEmitter } from 'events'
-import { URL } from 'url'
-import { SocketConfig } from '../../Types'
-
-export abstract class AbstractSocketClient extends EventEmitter {
-	abstract get isOpen(): boolean
-	abstract get isClosed(): boolean
-	abstract get isClosing(): boolean
-	abstract get isConnecting(): boolean
-
-	constructor(public url: URL, public config: SocketConfig) {
-		super()
-		this.setMaxListeners(0)
-	}
-
-	abstract connect(): Promise<void>
-	abstract close(): Promise<void>
-	abstract send(str: Uint8Array | string, cb?: (err?: Error) => void): boolean;
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Socket/Client/index.ts b/node_modules/@whiskeysockets/baileys/src/Socket/Client/index.ts
deleted file mode 100644
index 8843b0a..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Socket/Client/index.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export * from './abstract-socket-client'
-export * from './mobile-socket-client'
-export * from './web-socket-client'
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Socket/Client/mobile-socket-client.ts b/node_modules/@whiskeysockets/baileys/src/Socket/Client/mobile-socket-client.ts
deleted file mode 100644
index 90cc63c..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Socket/Client/mobile-socket-client.ts
+++ /dev/null
@@ -1,66 +0,0 @@
-import { connect, Socket } from 'net'
-import { AbstractSocketClient } from './abstract-socket-client'
-
-export class MobileSocketClient extends AbstractSocketClient {
-	protected socket: Socket | null = null
-
-	get isOpen(): boolean {
-		return this.socket?.readyState === 'open'
-	}
-	get isClosed(): boolean {
-		return this.socket === null || this.socket?.readyState === 'closed'
-	}
-	get isClosing(): boolean {
-		return this.socket === null || this.socket?.readyState === 'closed'
-	}
-	get isConnecting(): boolean {
-		return this.socket?.readyState === 'opening'
-	}
-
-	async connect(): Promise<void> {
-		if(this.socket) {
-			return
-		}
-
-		if(this.config.agent) {
-
-			throw new Error('There are not support for proxy agent for mobile connection')
-		} else {
-			this.socket = connect({
-				host: this.url.hostname,
-				port: Number(this.url.port) || 443
-			})
-		}
-
-		this.socket.setMaxListeners(0)
-
-		const events = ['close', 'connect', 'data', 'drain', 'end', 'error', 'lookup', 'ready', 'timeout']
-
-		for(const event of events) {
-			this.socket?.on(event, (...args: any[]) => this.emit(event, ...args))
-		}
-
-		this.socket.on('data', (...args: any[]) => this.emit('message', ...args))
-		this.socket.on('ready', (...args: any[]) => this.emit('open', ...args))
-	}
-
-	async close(): Promise<void> {
-		if(!this.socket) {
-			return
-		}
-
-		return new Promise<void>(resolve => {
-			this.socket!.end(resolve)
-			this.socket = null
-		})
-	}
-
-	send(str: string | Uint8Array, cb?: (err?: Error) => void): boolean {
-		if(this.socket === null) {
-			return false
-		}
-
-		return this.socket.write(str, undefined, cb)
-	}
-
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Socket/Client/web-socket-client.ts b/node_modules/@whiskeysockets/baileys/src/Socket/Client/web-socket-client.ts
deleted file mode 100644
index 987d0af..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Socket/Client/web-socket-client.ts
+++ /dev/null
@@ -1,57 +0,0 @@
-import WebSocket from 'ws'
-import { DEFAULT_ORIGIN } from '../../Defaults'
-import { AbstractSocketClient } from './abstract-socket-client'
-
-export class WebSocketClient extends AbstractSocketClient {
-
-	protected socket: WebSocket | null = null
-
-	get isOpen(): boolean {
-		return this.socket?.readyState === WebSocket.OPEN
-	}
-	get isClosed(): boolean {
-		return this.socket === null || this.socket?.readyState === WebSocket.CLOSED
-	}
-	get isClosing(): boolean {
-		return this.socket === null || this.socket?.readyState === WebSocket.CLOSING
-	}
-	get isConnecting(): boolean {
-		return this.socket?.readyState === WebSocket.CONNECTING
-	}
-
-	async connect(): Promise<void> {
-		if(this.socket) {
-			return
-		}
-
-		this.socket = new WebSocket(this.url, {
-			origin: DEFAULT_ORIGIN,
-			headers: this.config.options?.headers as {},
-			handshakeTimeout: this.config.connectTimeoutMs,
-			timeout: this.config.connectTimeoutMs,
-			agent: this.config.agent,
-		})
-
-		this.socket.setMaxListeners(0)
-
-		const events = ['close', 'error', 'upgrade', 'message', 'open', 'ping', 'pong', 'unexpected-response']
-
-		for(const event of events) {
-			this.socket?.on(event, (...args: any[]) => this.emit(event, ...args))
-		}
-	}
-
-	async close(): Promise<void> {
-		if(!this.socket) {
-			return
-		}
-
-		this.socket.close()
-		this.socket = null
-	}
-	send(str: string | Uint8Array, cb?: (err?: Error) => void): boolean {
-		this.socket?.send(str, cb)
-
-		return Boolean(this.socket)
-	}
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Socket/business.ts b/node_modules/@whiskeysockets/baileys/src/Socket/business.ts
deleted file mode 100644
index c9dfdb1..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Socket/business.ts
+++ /dev/null
@@ -1,281 +0,0 @@
-import { GetCatalogOptions, ProductCreate, ProductUpdate, SocketConfig } from '../Types'
-import { parseCatalogNode, parseCollectionsNode, parseOrderDetailsNode, parseProductNode, toProductNode, uploadingNecessaryImagesOfProduct } from '../Utils/business'
-import { BinaryNode, jidNormalizedUser, S_WHATSAPP_NET } from '../WABinary'
-import { getBinaryNodeChild } from '../WABinary/generic-utils'
-import { makeMessagesRecvSocket } from './messages-recv'
-
-export const makeBusinessSocket = (config: SocketConfig) => {
-	const sock = makeMessagesRecvSocket(config)
-	const {
-		authState,
-		query,
-		waUploadToServer
-	} = sock
-
-	const getCatalog = async({ jid, limit, cursor }: GetCatalogOptions) => {
-		jid = jid || authState.creds.me?.id
-		jid = jidNormalizedUser(jid)
-
-		const queryParamNodes: BinaryNode[] = [
-			{
-				tag: 'limit',
-				attrs: { },
-				content: Buffer.from((limit || 10).toString())
-			},
-			{
-				tag: 'width',
-				attrs: { },
-				content: Buffer.from('100')
-			},
-			{
-				tag: 'height',
-				attrs: { },
-				content: Buffer.from('100')
-			},
-		]
-
-		if(cursor) {
-			queryParamNodes.push({
-				tag: 'after',
-				attrs: { },
-				content: cursor
-			})
-		}
-
-		const result = await query({
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				type: 'get',
-				xmlns: 'w:biz:catalog'
-			},
-			content: [
-				{
-					tag: 'product_catalog',
-					attrs: {
-						jid,
-						'allow_shop_source': 'true'
-					},
-					content: queryParamNodes
-				}
-			]
-		})
-		return parseCatalogNode(result)
-	}
-
-	const getCollections = async(jid?: string, limit = 51) => {
-		jid = jid || authState.creds.me?.id
-		jid = jidNormalizedUser(jid)
-		const result = await query({
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				type: 'get',
-				xmlns: 'w:biz:catalog',
-				'smax_id': '35'
-			},
-			content: [
-				{
-					tag: 'collections',
-					attrs: {
-						'biz_jid': jid,
-					},
-					content: [
-						{
-							tag: 'collection_limit',
-							attrs: { },
-							content: Buffer.from(limit.toString())
-						},
-						{
-							tag: 'item_limit',
-							attrs: { },
-							content: Buffer.from(limit.toString())
-						},
-						{
-							tag: 'width',
-							attrs: { },
-							content: Buffer.from('100')
-						},
-						{
-							tag: 'height',
-							attrs: { },
-							content: Buffer.from('100')
-						}
-					]
-				}
-			]
-		})
-
-		return parseCollectionsNode(result)
-	}
-
-	const getOrderDetails = async(orderId: string, tokenBase64: string) => {
-		const result = await query({
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				type: 'get',
-				xmlns: 'fb:thrift_iq',
-				'smax_id': '5'
-			},
-			content: [
-				{
-					tag: 'order',
-					attrs: {
-						op: 'get',
-						id: orderId
-					},
-					content: [
-						{
-							tag: 'image_dimensions',
-							attrs: { },
-							content: [
-								{
-									tag: 'width',
-									attrs: { },
-									content: Buffer.from('100')
-								},
-								{
-									tag: 'height',
-									attrs: { },
-									content: Buffer.from('100')
-								}
-							]
-						},
-						{
-							tag: 'token',
-							attrs: { },
-							content: Buffer.from(tokenBase64)
-						}
-					]
-				}
-			]
-		})
-
-		return parseOrderDetailsNode(result)
-	}
-
-	const productUpdate = async(productId: string, update: ProductUpdate) => {
-		update = await uploadingNecessaryImagesOfProduct(update, waUploadToServer)
-		const editNode = toProductNode(productId, update)
-
-		const result = await query({
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				type: 'set',
-				xmlns: 'w:biz:catalog'
-			},
-			content: [
-				{
-					tag: 'product_catalog_edit',
-					attrs: { v: '1' },
-					content: [
-						editNode,
-						{
-							tag: 'width',
-							attrs: { },
-							content: '100'
-						},
-						{
-							tag: 'height',
-							attrs: { },
-							content: '100'
-						}
-					]
-				}
-			]
-		})
-
-		const productCatalogEditNode = getBinaryNodeChild(result, 'product_catalog_edit')
-		const productNode = getBinaryNodeChild(productCatalogEditNode, 'product')
-
-		return parseProductNode(productNode!)
-	}
-
-	const productCreate = async(create: ProductCreate) => {
-		// ensure isHidden is defined
-		create.isHidden = !!create.isHidden
-		create = await uploadingNecessaryImagesOfProduct(create, waUploadToServer)
-		const createNode = toProductNode(undefined, create)
-
-		const result = await query({
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				type: 'set',
-				xmlns: 'w:biz:catalog'
-			},
-			content: [
-				{
-					tag: 'product_catalog_add',
-					attrs: { v: '1' },
-					content: [
-						createNode,
-						{
-							tag: 'width',
-							attrs: { },
-							content: '100'
-						},
-						{
-							tag: 'height',
-							attrs: { },
-							content: '100'
-						}
-					]
-				}
-			]
-		})
-
-		const productCatalogAddNode = getBinaryNodeChild(result, 'product_catalog_add')
-		const productNode = getBinaryNodeChild(productCatalogAddNode, 'product')
-
-		return parseProductNode(productNode!)
-	}
-
-	const productDelete = async(productIds: string[]) => {
-		const result = await query({
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				type: 'set',
-				xmlns: 'w:biz:catalog'
-			},
-			content: [
-				{
-					tag: 'product_catalog_delete',
-					attrs: { v: '1' },
-					content: productIds.map(
-						id => ({
-							tag: 'product',
-							attrs: { },
-							content: [
-								{
-									tag: 'id',
-									attrs: { },
-									content: Buffer.from(id)
-								}
-							]
-						})
-					)
-				}
-			]
-		})
-
-		const productCatalogDelNode = getBinaryNodeChild(result, 'product_catalog_delete')
-		return {
-			deleted: +(productCatalogDelNode?.attrs.deleted_count || 0)
-		}
-	}
-
-	return {
-		...sock,
-		logger: config.logger,
-		getOrderDetails,
-		getCatalog,
-		getCollections,
-		productCreate,
-		productDelete,
-		productUpdate
-	}
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Socket/chats.ts b/node_modules/@whiskeysockets/baileys/src/Socket/chats.ts
deleted file mode 100644
index cbfe361..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Socket/chats.ts
+++ /dev/null
@@ -1,996 +0,0 @@
-import { Boom } from '@hapi/boom'
-import { proto } from '../../WAProto'
-import { PROCESSABLE_HISTORY_TYPES } from '../Defaults'
-import { ALL_WA_PATCH_NAMES, ChatModification, ChatMutation, LTHashState, MessageUpsertType, PresenceData, SocketConfig, WABusinessHoursConfig, WABusinessProfile, WAMediaUpload, WAMessage, WAPatchCreate, WAPatchName, WAPresence, WAPrivacyOnlineValue, WAPrivacyValue, WAReadReceiptsValue } from '../Types'
-import { chatModificationToAppPatch, ChatMutationMap, decodePatches, decodeSyncdSnapshot, encodeSyncdPatch, extractSyncdPatches, generateProfilePicture, getHistoryMsg, newLTHashState, processSyncAction } from '../Utils'
-import { makeMutex } from '../Utils/make-mutex'
-import processMessage from '../Utils/process-message'
-import { BinaryNode, getBinaryNodeChild, getBinaryNodeChildren, jidNormalizedUser, reduceBinaryNodeToDictionary, S_WHATSAPP_NET } from '../WABinary'
-import { makeSocket } from './socket'
-
-const MAX_SYNC_ATTEMPTS = 2
-
-export const makeChatsSocket = (config: SocketConfig) => {
-	const {
-		logger,
-		markOnlineOnConnect,
-		fireInitQueries,
-		appStateMacVerification,
-		shouldIgnoreJid,
-		shouldSyncHistoryMessage,
-	} = config
-	const sock = makeSocket(config)
-	const {
-		ev,
-		ws,
-		authState,
-		generateMessageTag,
-		sendNode,
-		query,
-		onUnexpectedError,
-	} = sock
-
-	let privacySettings: { [_: string]: string } | undefined
-	let needToFlushWithAppStateSync = false
-	let pendingAppStateSync = false
-	/** this mutex ensures that the notifications (receipts, messages etc.) are processed in order */
-	const processingMutex = makeMutex()
-
-	/** helper function to fetch the given app state sync key */
-	const getAppStateSyncKey = async(keyId: string) => {
-		const { [keyId]: key } = await authState.keys.get('app-state-sync-key', [keyId])
-		return key
-	}
-
-	const fetchPrivacySettings = async(force = false) => {
-		if(!privacySettings || force) {
-			const { content } = await query({
-				tag: 'iq',
-				attrs: {
-					xmlns: 'privacy',
-					to: S_WHATSAPP_NET,
-					type: 'get'
-				},
-				content: [
-					{ tag: 'privacy', attrs: {} }
-				]
-			})
-			privacySettings = reduceBinaryNodeToDictionary(content?.[0] as BinaryNode, 'category')
-		}
-
-		return privacySettings
-	}
-
-	/** helper function to run a privacy IQ query */
-	const privacyQuery = async(name: string, value: string) => {
-		await query({
-			tag: 'iq',
-			attrs: {
-				xmlns: 'privacy',
-				to: S_WHATSAPP_NET,
-				type: 'set'
-			},
-			content: [{
-				tag: 'privacy',
-				attrs: {},
-				content: [
-					{
-						tag: 'category',
-						attrs: { name, value }
-					}
-				]
-			}]
-		})
-	}
-
-	const updateLastSeenPrivacy = async(value: WAPrivacyValue) => {
-		await privacyQuery('last', value)
-	}
-
-	const updateOnlinePrivacy = async(value: WAPrivacyOnlineValue) => {
-		await privacyQuery('online', value)
-	}
-
-	const updateProfilePicturePrivacy = async(value: WAPrivacyValue) => {
-		await privacyQuery('profile', value)
-	}
-
-	const updateStatusPrivacy = async(value: WAPrivacyValue) => {
-		await privacyQuery('status', value)
-	}
-
-	const updateReadReceiptsPrivacy = async(value: WAReadReceiptsValue) => {
-		await privacyQuery('readreceipts', value)
-	}
-
-	const updateGroupsAddPrivacy = async(value: WAPrivacyValue) => {
-		await privacyQuery('groupadd', value)
-	}
-
-	const updateDefaultDisappearingMode = async(duration: number) => {
-		await query({
-			tag: 'iq',
-			attrs: {
-				xmlns: 'disappearing_mode',
-				to: S_WHATSAPP_NET,
-				type: 'set'
-			},
-			content: [{
-				tag: 'disappearing_mode',
-				attrs: {
-					duration: duration.toString()
-				}
-			}]
-		})
-	}
-
-	/** helper function to run a generic IQ query */
-	const interactiveQuery = async(userNodes: BinaryNode[], queryNode: BinaryNode) => {
-		const result = await query({
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				type: 'get',
-				xmlns: 'usync',
-			},
-			content: [
-				{
-					tag: 'usync',
-					attrs: {
-						sid: generateMessageTag(),
-						mode: 'query',
-						last: 'true',
-						index: '0',
-						context: 'interactive',
-					},
-					content: [
-						{
-							tag: 'query',
-							attrs: {},
-							content: [queryNode]
-						},
-						{
-							tag: 'list',
-							attrs: {},
-							content: userNodes
-						}
-					]
-				}
-			],
-		})
-
-		const usyncNode = getBinaryNodeChild(result, 'usync')
-		const listNode = getBinaryNodeChild(usyncNode, 'list')
-		const users = getBinaryNodeChildren(listNode, 'user')
-
-		return users
-	}
-
-	const onWhatsApp = async(...jids: string[]) => {
-		const query = { tag: 'contact', attrs: {} }
-		const list = jids.map((jid) => {
-			// insures only 1 + is there
-			const content = `+${jid.replace('+', '')}`
-
-			return {
-				tag: 'user',
-				attrs: {},
-				content: [{
-					tag: 'contact',
-					attrs: {},
-					content,
-				}],
-			}
-		})
-		const results = await interactiveQuery(list, query)
-
-		return results.map(user => {
-			const contact = getBinaryNodeChild(user, 'contact')
-			return { exists: contact?.attrs.type === 'in', jid: user.attrs.jid }
-		}).filter(item => item.exists)
-	}
-
-	const fetchStatus = async(jid: string) => {
-		const [result] = await interactiveQuery(
-			[{ tag: 'user', attrs: { jid } }],
-			{ tag: 'status', attrs: {} }
-		)
-		if(result) {
-			const status = getBinaryNodeChild(result, 'status')
-			return {
-				status: status?.content!.toString(),
-				setAt: new Date(+(status?.attrs.t || 0) * 1000)
-			}
-		}
-	}
-
-	/** update the profile picture for yourself or a group */
-	const updateProfilePicture = async(jid: string, content: WAMediaUpload) => {
-		const { img } = await generateProfilePicture(content)
-		await query({
-			tag: 'iq',
-			attrs: {
-				to: jidNormalizedUser(jid),
-				type: 'set',
-				xmlns: 'w:profile:picture'
-			},
-			content: [
-				{
-					tag: 'picture',
-					attrs: { type: 'image' },
-					content: img
-				}
-			]
-		})
-	}
-
-	/** remove the profile picture for yourself or a group */
-	const removeProfilePicture = async(jid: string) => {
-		await query({
-			tag: 'iq',
-			attrs: {
-				to: jidNormalizedUser(jid),
-				type: 'set',
-				xmlns: 'w:profile:picture'
-			}
-		})
-	}
-
-	/** update the profile status for yourself */
-	const updateProfileStatus = async(status: string) => {
-		await query({
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				type: 'set',
-				xmlns: 'status'
-			},
-			content: [
-				{
-					tag: 'status',
-					attrs: {},
-					content: Buffer.from(status, 'utf-8')
-				}
-			]
-		})
-	}
-
-	const updateProfileName = async(name: string) => {
-		await chatModify({ pushNameSetting: name }, '')
-	}
-
-	const fetchBlocklist = async() => {
-		const result = await query({
-			tag: 'iq',
-			attrs: {
-				xmlns: 'blocklist',
-				to: S_WHATSAPP_NET,
-				type: 'get'
-			}
-		})
-
-		const listNode = getBinaryNodeChild(result, 'list')
-		return getBinaryNodeChildren(listNode, 'item')
-			.map(n => n.attrs.jid)
-	}
-
-	const updateBlockStatus = async(jid: string, action: 'block' | 'unblock') => {
-		await query({
-			tag: 'iq',
-			attrs: {
-				xmlns: 'blocklist',
-				to: S_WHATSAPP_NET,
-				type: 'set'
-			},
-			content: [
-				{
-					tag: 'item',
-					attrs: {
-						action,
-						jid
-					}
-				}
-			]
-		})
-	}
-
-	const getBusinessProfile = async(jid: string): Promise<WABusinessProfile | void> => {
-		const results = await query({
-			tag: 'iq',
-			attrs: {
-				to: 's.whatsapp.net',
-				xmlns: 'w:biz',
-				type: 'get'
-			},
-			content: [{
-				tag: 'business_profile',
-				attrs: { v: '244' },
-				content: [{
-					tag: 'profile',
-					attrs: { jid }
-				}]
-			}]
-		})
-
-		const profileNode = getBinaryNodeChild(results, 'business_profile')
-		const profiles = getBinaryNodeChild(profileNode, 'profile')
-		if(profiles) {
-			const address = getBinaryNodeChild(profiles, 'address')
-			const description = getBinaryNodeChild(profiles, 'description')
-			const website = getBinaryNodeChild(profiles, 'website')
-			const email = getBinaryNodeChild(profiles, 'email')
-			const category = getBinaryNodeChild(getBinaryNodeChild(profiles, 'categories'), 'category')
-			const businessHours = getBinaryNodeChild(profiles, 'business_hours')
-			const businessHoursConfig = businessHours
-				? getBinaryNodeChildren(businessHours, 'business_hours_config')
-				: undefined
-			const websiteStr = website?.content?.toString()
-			return {
-				wid: profiles.attrs?.jid,
-				address: address?.content?.toString(),
-				description: description?.content?.toString() || '',
-				website: websiteStr ? [websiteStr] : [],
-				email: email?.content?.toString(),
-				category: category?.content?.toString(),
-				'business_hours': {
-					timezone: businessHours?.attrs?.timezone,
-					'business_config': businessHoursConfig?.map(({ attrs }) => attrs as unknown as WABusinessHoursConfig)
-				}
-			}
-		}
-	}
-
-	const cleanDirtyBits = async(type: 'account_sync' | 'groups', fromTimestamp?: number | string) => {
-		logger.info({ fromTimestamp }, 'clean dirty bits ' + type)
-		await sendNode({
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				type: 'set',
-				xmlns: 'urn:xmpp:whatsapp:dirty',
-				id: generateMessageTag(),
-			},
-			content: [
-				{
-					tag: 'clean',
-					attrs: {
-						type,
-						...(fromTimestamp ? { timestamp: fromTimestamp.toString() } : null),
-					}
-				}
-			]
-		})
-	}
-
-	const newAppStateChunkHandler = (isInitialSync: boolean) => {
-		return {
-			onMutation(mutation: ChatMutation) {
-				processSyncAction(
-					mutation,
-					ev,
-					authState.creds.me!,
-					isInitialSync ? { accountSettings: authState.creds.accountSettings } : undefined,
-					logger
-				)
-			}
-		}
-	}
-
-	const resyncAppState = ev.createBufferedFunction(async(collections: readonly WAPatchName[], isInitialSync: boolean) => {
-		// we use this to determine which events to fire
-		// otherwise when we resync from scratch -- all notifications will fire
-		const initialVersionMap: { [T in WAPatchName]?: number } = {}
-		const globalMutationMap: ChatMutationMap = {}
-
-		await authState.keys.transaction(
-			async() => {
-				const collectionsToHandle = new Set<string>(collections)
-				// in case something goes wrong -- ensure we don't enter a loop that cannot be exited from
-				const attemptsMap: { [T in WAPatchName]?: number } = {}
-				// keep executing till all collections are done
-				// sometimes a single patch request will not return all the patches (God knows why)
-				// so we fetch till they're all done (this is determined by the "has_more_patches" flag)
-				while(collectionsToHandle.size) {
-					const states = {} as { [T in WAPatchName]: LTHashState }
-					const nodes: BinaryNode[] = []
-
-					for(const name of collectionsToHandle) {
-						const result = await authState.keys.get('app-state-sync-version', [name])
-						let state = result[name]
-
-						if(state) {
-							if(typeof initialVersionMap[name] === 'undefined') {
-								initialVersionMap[name] = state.version
-							}
-						} else {
-							state = newLTHashState()
-						}
-
-						states[name] = state
-
-						logger.info(`resyncing ${name} from v${state.version}`)
-
-						nodes.push({
-							tag: 'collection',
-							attrs: {
-								name,
-								version: state.version.toString(),
-								// return snapshot if being synced from scratch
-								'return_snapshot': (!state.version).toString()
-							}
-						})
-					}
-
-					const result = await query({
-						tag: 'iq',
-						attrs: {
-							to: S_WHATSAPP_NET,
-							xmlns: 'w:sync:app:state',
-							type: 'set'
-						},
-						content: [
-							{
-								tag: 'sync',
-								attrs: {},
-								content: nodes
-							}
-						]
-					})
-
-					// extract from binary node
-					const decoded = await extractSyncdPatches(result, config?.options)
-					for(const key in decoded) {
-						const name = key as WAPatchName
-						const { patches, hasMorePatches, snapshot } = decoded[name]
-						try {
-							if(snapshot) {
-								const { state: newState, mutationMap } = await decodeSyncdSnapshot(
-									name,
-									snapshot,
-									getAppStateSyncKey,
-									initialVersionMap[name],
-									appStateMacVerification.snapshot
-								)
-								states[name] = newState
-								Object.assign(globalMutationMap, mutationMap)
-
-								logger.info(`restored state of ${name} from snapshot to v${newState.version} with mutations`)
-
-								await authState.keys.set({ 'app-state-sync-version': { [name]: newState } })
-							}
-
-							// only process if there are syncd patches
-							if(patches.length) {
-								const { state: newState, mutationMap } = await decodePatches(
-									name,
-									patches,
-									states[name],
-									getAppStateSyncKey,
-									config.options,
-									initialVersionMap[name],
-									logger,
-									appStateMacVerification.patch
-								)
-
-								await authState.keys.set({ 'app-state-sync-version': { [name]: newState } })
-
-								logger.info(`synced ${name} to v${newState.version}`)
-								initialVersionMap[name] = newState.version
-
-								Object.assign(globalMutationMap, mutationMap)
-							}
-
-							if(hasMorePatches) {
-								logger.info(`${name} has more patches...`)
-							} else { // collection is done with sync
-								collectionsToHandle.delete(name)
-							}
-						} catch(error) {
-							// if retry attempts overshoot
-							// or key not found
-							const isIrrecoverableError = attemptsMap[name]! >= MAX_SYNC_ATTEMPTS
-								|| error.output?.statusCode === 404
-								|| error.name === 'TypeError'
-							logger.info(
-								{ name, error: error.stack },
-								`failed to sync state from version${isIrrecoverableError ? '' : ', removing and trying from scratch'}`
-							)
-							await authState.keys.set({ 'app-state-sync-version': { [name]: null } })
-							// increment number of retries
-							attemptsMap[name] = (attemptsMap[name] || 0) + 1
-
-							if(isIrrecoverableError) {
-								// stop retrying
-								collectionsToHandle.delete(name)
-							}
-						}
-					}
-				}
-			}
-		)
-
-		const { onMutation } = newAppStateChunkHandler(isInitialSync)
-		for(const key in globalMutationMap) {
-			onMutation(globalMutationMap[key])
-		}
-	})
-
-	/**
-	 * fetch the profile picture of a user/group
-	 * type = "preview" for a low res picture
-	 * type = "image for the high res picture"
-	 */
-	const profilePictureUrl = async(jid: string, type: 'preview' | 'image' = 'preview', timeoutMs?: number) => {
-		jid = jidNormalizedUser(jid)
-		const result = await query({
-			tag: 'iq',
-			attrs: {
-				to: jid,
-				type: 'get',
-				xmlns: 'w:profile:picture'
-			},
-			content: [
-				{ tag: 'picture', attrs: { type, query: 'url' } }
-			]
-		}, timeoutMs)
-		const child = getBinaryNodeChild(result, 'picture')
-		return child?.attrs?.url
-	}
-
-	const sendPresenceUpdate = async(type: WAPresence, toJid?: string) => {
-		const me = authState.creds.me!
-		if(type === 'available' || type === 'unavailable') {
-			if(!me.name) {
-				logger.warn('no name present, ignoring presence update request...')
-				return
-			}
-
-			ev.emit('connection.update', { isOnline: type === 'available' })
-
-			await sendNode({
-				tag: 'presence',
-				attrs: {
-					name: me.name,
-					type
-				}
-			})
-		} else {
-			await sendNode({
-				tag: 'chatstate',
-				attrs: {
-					from: me.id,
-					to: toJid!,
-				},
-				content: [
-					{
-						tag: type === 'recording' ? 'composing' : type,
-						attrs: type === 'recording' ? { media: 'audio' } : {}
-					}
-				]
-			})
-		}
-	}
-
-	/**
-	 * @param toJid the jid to subscribe to
-	 * @param tcToken token for subscription, use if present
-	 */
-	const presenceSubscribe = (toJid: string, tcToken?: Buffer) => (
-		sendNode({
-			tag: 'presence',
-			attrs: {
-				to: toJid,
-				id: generateMessageTag(),
-				type: 'subscribe'
-			},
-			content: tcToken
-				? [
-					{
-						tag: 'tctoken',
-						attrs: {},
-						content: tcToken
-					}
-				]
-				: undefined
-		})
-	)
-
-	const handlePresenceUpdate = ({ tag, attrs, content }: BinaryNode) => {
-		let presence: PresenceData | undefined
-		const jid = attrs.from
-		const participant = attrs.participant || attrs.from
-
-		if(shouldIgnoreJid(jid) && jid !== '@s.whatsapp.net') {
-			return
-		}
-
-		if(tag === 'presence') {
-			presence = {
-				lastKnownPresence: attrs.type === 'unavailable' ? 'unavailable' : 'available',
-				lastSeen: attrs.last && attrs.last !== 'deny' ? +attrs.last : undefined
-			}
-		} else if(Array.isArray(content)) {
-			const [firstChild] = content
-			let type = firstChild.tag as WAPresence
-			if(type === 'paused') {
-				type = 'available'
-			}
-
-			if(firstChild.attrs?.media === 'audio') {
-				type = 'recording'
-			}
-
-			presence = { lastKnownPresence: type }
-		} else {
-			logger.error({ tag, attrs, content }, 'recv invalid presence node')
-		}
-
-		if(presence) {
-			ev.emit('presence.update', { id: jid, presences: { [participant]: presence } })
-		}
-	}
-
-	const appPatch = async(patchCreate: WAPatchCreate) => {
-		const name = patchCreate.type
-		const myAppStateKeyId = authState.creds.myAppStateKeyId
-		if(!myAppStateKeyId) {
-			throw new Boom('App state key not present!', { statusCode: 400 })
-		}
-
-		let initial: LTHashState
-		let encodeResult: { patch: proto.ISyncdPatch, state: LTHashState }
-
-		await processingMutex.mutex(
-			async() => {
-				await authState.keys.transaction(
-					async() => {
-						logger.debug({ patch: patchCreate }, 'applying app patch')
-
-						await resyncAppState([name], false)
-
-						const { [name]: currentSyncVersion } = await authState.keys.get('app-state-sync-version', [name])
-						initial = currentSyncVersion || newLTHashState()
-
-						encodeResult = await encodeSyncdPatch(
-							patchCreate,
-							myAppStateKeyId,
-							initial,
-							getAppStateSyncKey,
-						)
-						const { patch, state } = encodeResult
-
-						const node: BinaryNode = {
-							tag: 'iq',
-							attrs: {
-								to: S_WHATSAPP_NET,
-								type: 'set',
-								xmlns: 'w:sync:app:state'
-							},
-							content: [
-								{
-									tag: 'sync',
-									attrs: {},
-									content: [
-										{
-											tag: 'collection',
-											attrs: {
-												name,
-												version: (state.version - 1).toString(),
-												'return_snapshot': 'false'
-											},
-											content: [
-												{
-													tag: 'patch',
-													attrs: {},
-													content: proto.SyncdPatch.encode(patch).finish()
-												}
-											]
-										}
-									]
-								}
-							]
-						}
-						await query(node)
-
-						await authState.keys.set({ 'app-state-sync-version': { [name]: state } })
-					}
-				)
-			}
-		)
-
-		if(config.emitOwnEvents) {
-			const { onMutation } = newAppStateChunkHandler(false)
-			const { mutationMap } = await decodePatches(
-				name,
-				[{ ...encodeResult!.patch, version: { version: encodeResult!.state.version }, }],
-				initial!,
-				getAppStateSyncKey,
-				config.options,
-				undefined,
-				logger,
-			)
-			for(const key in mutationMap) {
-				onMutation(mutationMap[key])
-			}
-		}
-	}
-
-	/** sending non-abt props may fix QR scan fail if server expects */
-	const fetchProps = async() => {
-		const resultNode = await query({
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				xmlns: 'w',
-				type: 'get',
-			},
-			content: [
-				{ tag: 'props', attrs: {
-					protocol: '2',
-					hash: authState?.creds?.lastPropHash || ''
-				} }
-			]
-		})
-
-		const propsNode = getBinaryNodeChild(resultNode, 'props')
-
-
-		let props: { [_: string]: string } = {}
-		if(propsNode) {
-			authState.creds.lastPropHash = propsNode?.attrs?.hash
-			ev.emit('creds.update', authState.creds)
-			props = reduceBinaryNodeToDictionary(propsNode, 'prop')
-		}
-
-		logger.debug('fetched props')
-
-		return props
-	}
-
-	/**
-	 * modify a chat -- mark unread, read etc.
-	 * lastMessages must be sorted in reverse chronologically
-	 * requires the last messages till the last message received; required for archive & unread
-	*/
-	const chatModify = (mod: ChatModification, jid: string) => {
-		const patch = chatModificationToAppPatch(mod, jid)
-		return appPatch(patch)
-	}
-
-	/**
-	 * Star or Unstar a message
-	 */
-	const star = (jid: string, messages: { id: string, fromMe?: boolean }[], star: boolean) => {
-		return chatModify({
-			star: {
-				messages,
-				star
-			}
-		}, jid)
-	}
-
-	/**
-	 * Adds label for the chats
-	 */
-	const addChatLabel = (jid: string, labelId: string) => {
-		return chatModify({
-			addChatLabel: {
-				labelId
-			}
-		}, jid)
-	}
-
-	/**
-	 * Removes label for the chat
-	 */
-	const removeChatLabel = (jid: string, labelId: string) => {
-		return chatModify({
-			removeChatLabel: {
-				labelId
-			}
-		}, jid)
-	}
-
-	/**
-	 * Adds label for the message
-	 */
-	const addMessageLabel = (jid: string, messageId: string, labelId: string) => {
-		return chatModify({
-			addMessageLabel: {
-				messageId,
-				labelId
-			}
-		}, jid)
-	}
-
-	/**
-	 * Removes label for the message
-	 */
-	const removeMessageLabel = (jid: string, messageId: string, labelId: string) => {
-		return chatModify({
-			removeMessageLabel: {
-				messageId,
-				labelId
-			}
-		}, jid)
-	}
-
-	/**
-	 * queries need to be fired on connection open
-	 * help ensure parity with WA Web
-	 * */
-	const executeInitQueries = async() => {
-		await Promise.all([
-			fetchProps(),
-			fetchBlocklist(),
-			fetchPrivacySettings(),
-		])
-	}
-
-	const upsertMessage = ev.createBufferedFunction(async(msg: WAMessage, type: MessageUpsertType) => {
-		ev.emit('messages.upsert', { messages: [msg], type })
-
-		if(!!msg.pushName) {
-			let jid = msg.key.fromMe ? authState.creds.me!.id : (msg.key.participant || msg.key.remoteJid)
-			jid = jidNormalizedUser(jid!)
-
-			if(!msg.key.fromMe) {
-				ev.emit('contacts.update', [{ id: jid, notify: msg.pushName, verifiedName: msg.verifiedBizName! }])
-			}
-
-			// update our pushname too
-			if(msg.key.fromMe && msg.pushName && authState.creds.me?.name !== msg.pushName) {
-				ev.emit('creds.update', { me: { ...authState.creds.me!, name: msg.pushName } })
-			}
-		}
-
-		const historyMsg = getHistoryMsg(msg.message!)
-		const shouldProcessHistoryMsg = historyMsg
-			? (
-				shouldSyncHistoryMessage(historyMsg)
-				&& PROCESSABLE_HISTORY_TYPES.includes(historyMsg.syncType!)
-			)
-			: false
-
-		if(historyMsg && !authState.creds.myAppStateKeyId) {
-			logger.warn('skipping app state sync, as myAppStateKeyId is not set')
-			pendingAppStateSync = true
-		}
-
-		await Promise.all([
-			(async() => {
-				if(
-					historyMsg
-					&& authState.creds.myAppStateKeyId
-				) {
-					pendingAppStateSync = false
-					await doAppStateSync()
-				}
-			})(),
-			processMessage(
-				msg,
-				{
-					shouldProcessHistoryMsg,
-					ev,
-					creds: authState.creds,
-					keyStore: authState.keys,
-					logger,
-					options: config.options,
-					getMessage: config.getMessage,
-				}
-			)
-		])
-
-		if(
-			msg.message?.protocolMessage?.appStateSyncKeyShare
-			&& pendingAppStateSync
-		) {
-			await doAppStateSync()
-			pendingAppStateSync = false
-		}
-
-		async function doAppStateSync() {
-			if(!authState.creds.accountSyncCounter) {
-				logger.info('doing initial app state sync')
-				await resyncAppState(ALL_WA_PATCH_NAMES, true)
-
-				const accountSyncCounter = (authState.creds.accountSyncCounter || 0) + 1
-				ev.emit('creds.update', { accountSyncCounter })
-
-				if(needToFlushWithAppStateSync) {
-					logger.debug('flushing with app state sync')
-					ev.flush()
-				}
-			}
-		}
-	})
-
-	ws.on('CB:presence', handlePresenceUpdate)
-	ws.on('CB:chatstate', handlePresenceUpdate)
-
-	ws.on('CB:ib,,dirty', async(node: BinaryNode) => {
-		const { attrs } = getBinaryNodeChild(node, 'dirty')!
-		const type = attrs.type
-		switch (type) {
-		case 'account_sync':
-			if(attrs.timestamp) {
-				let { lastAccountSyncTimestamp } = authState.creds
-				if(lastAccountSyncTimestamp) {
-					await cleanDirtyBits('account_sync', lastAccountSyncTimestamp)
-				}
-
-				lastAccountSyncTimestamp = +attrs.timestamp
-				ev.emit('creds.update', { lastAccountSyncTimestamp })
-			}
-
-			break
-		case 'groups':
-			// handled in groups.ts
-			break
-		default:
-			logger.info({ node }, 'received unknown sync')
-			break
-		}
-	})
-
-	ev.on('connection.update', ({ connection, receivedPendingNotifications }) => {
-		if(connection === 'open') {
-			if(fireInitQueries) {
-				executeInitQueries()
-					.catch(
-						error => onUnexpectedError(error, 'init queries')
-					)
-			}
-
-			sendPresenceUpdate(markOnlineOnConnect ? 'available' : 'unavailable')
-				.catch(
-					error => onUnexpectedError(error, 'presence update requests')
-				)
-		}
-
-		if(receivedPendingNotifications) {
-			// if we don't have the app state key
-			// we keep buffering events until we finally have
-			// the key and can sync the messages
-			if(!authState.creds?.myAppStateKeyId && !config.mobile) {
-				ev.buffer()
-				needToFlushWithAppStateSync = true
-			}
-		}
-	})
-
-	return {
-		...sock,
-		processingMutex,
-		fetchPrivacySettings,
-		upsertMessage,
-		appPatch,
-		sendPresenceUpdate,
-		presenceSubscribe,
-		profilePictureUrl,
-		onWhatsApp,
-		fetchBlocklist,
-		fetchStatus,
-		updateProfilePicture,
-		removeProfilePicture,
-		updateProfileStatus,
-		updateProfileName,
-		updateBlockStatus,
-		updateLastSeenPrivacy,
-		updateOnlinePrivacy,
-		updateProfilePicturePrivacy,
-		updateStatusPrivacy,
-		updateReadReceiptsPrivacy,
-		updateGroupsAddPrivacy,
-		updateDefaultDisappearingMode,
-		getBusinessProfile,
-		resyncAppState,
-		chatModify,
-		cleanDirtyBits,
-		addChatLabel,
-		removeChatLabel,
-		addMessageLabel,
-		removeMessageLabel,
-		star
-	}
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Socket/groups.ts b/node_modules/@whiskeysockets/baileys/src/Socket/groups.ts
deleted file mode 100644
index 226df38..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Socket/groups.ts
+++ /dev/null
@@ -1,356 +0,0 @@
-import { proto } from '../../WAProto'
-import { GroupMetadata, GroupParticipant, ParticipantAction, SocketConfig, WAMessageKey, WAMessageStubType } from '../Types'
-import { generateMessageID, unixTimestampSeconds } from '../Utils'
-import { BinaryNode, getBinaryNodeChild, getBinaryNodeChildren, getBinaryNodeChildString, jidEncode, jidNormalizedUser } from '../WABinary'
-import { makeChatsSocket } from './chats'
-
-export const makeGroupsSocket = (config: SocketConfig) => {
-	const sock = makeChatsSocket(config)
-	const { authState, ev, query, upsertMessage } = sock
-
-	const groupQuery = async(jid: string, type: 'get' | 'set', content: BinaryNode[]) => (
-		query({
-			tag: 'iq',
-			attrs: {
-				type,
-				xmlns: 'w:g2',
-				to: jid,
-			},
-			content
-		})
-	)
-
-	const groupMetadata = async(jid: string) => {
-		const result = await groupQuery(
-			jid,
-			'get',
-			[ { tag: 'query', attrs: { request: 'interactive' } } ]
-		)
-		return extractGroupMetadata(result)
-	}
-
-
-	const groupFetchAllParticipating = async() => {
-		const result = await query({
-			tag: 'iq',
-			attrs: {
-				to: '@g.us',
-				xmlns: 'w:g2',
-				type: 'get',
-			},
-			content: [
-				{
-					tag: 'participating',
-					attrs: { },
-					content: [
-						{ tag: 'participants', attrs: { } },
-						{ tag: 'description', attrs: { } }
-					]
-				}
-			]
-		})
-		const data: { [_: string]: GroupMetadata } = { }
-		const groupsChild = getBinaryNodeChild(result, 'groups')
-		if(groupsChild) {
-			const groups = getBinaryNodeChildren(groupsChild, 'group')
-			for(const groupNode of groups) {
-				const meta = extractGroupMetadata({
-					tag: 'result',
-					attrs: { },
-					content: [groupNode]
-				})
-				data[meta.id] = meta
-			}
-		}
-
-		sock.ev.emit('groups.update', Object.values(data))
-
-		return data
-	}
-
-	sock.ws.on('CB:ib,,dirty', async(node: BinaryNode) => {
-		const { attrs } = getBinaryNodeChild(node, 'dirty')!
-		if(attrs.type !== 'groups') {
-			return
-		}
-
-		await groupFetchAllParticipating()
-		await sock.cleanDirtyBits('groups')
-	})
-
-	return {
-		...sock,
-		groupMetadata,
-		groupCreate: async(subject: string, participants: string[]) => {
-			const key = generateMessageID()
-			const result = await groupQuery(
-				'@g.us',
-				'set',
-				[
-					{
-						tag: 'create',
-						attrs: {
-							subject,
-							key
-						},
-						content: participants.map(jid => ({
-							tag: 'participant',
-							attrs: { jid }
-						}))
-					}
-				]
-			)
-			return extractGroupMetadata(result)
-		},
-		groupLeave: async(id: string) => {
-			await groupQuery(
-				'@g.us',
-				'set',
-				[
-					{
-						tag: 'leave',
-						attrs: { },
-						content: [
-							{ tag: 'group', attrs: { id } }
-						]
-					}
-				]
-			)
-		},
-		groupUpdateSubject: async(jid: string, subject: string) => {
-			await groupQuery(
-				jid,
-				'set',
-				[
-					{
-						tag: 'subject',
-						attrs: { },
-						content: Buffer.from(subject, 'utf-8')
-					}
-				]
-			)
-		},
-		groupRequestParticipantsList: async(jid: string) => {
-			const result = await groupQuery(
-				jid,
-				'get',
-				[
-					{
-						tag: 'membership_approval_requests',
-						attrs: {}
-					}
-				]
-			)
-			const node = getBinaryNodeChild(result, 'membership_approval_requests')
-			const participants = getBinaryNodeChildren(node, 'membership_approval_request')
-			return participants.map(v => v.attrs)
-		},
-		groupRequestParticipantsUpdate: async(jid: string, participants: string[], action: 'approve' | 'reject') => {
-			const result = await groupQuery(
-				jid,
-				'set',
-				[{
-					tag: 'membership_requests_action',
-					attrs: {},
-					content: 				[
-						{
-							tag: action,
-							attrs: { },
-							content: participants.map(jid => ({
-								tag: 'participant',
-								attrs: { jid }
-							}))
-						}
-					]
-				}]
-			)
-			const node = getBinaryNodeChild(result, 'membership_requests_action')
-			const nodeAction = getBinaryNodeChild(node, action)
-			const participantsAffected = getBinaryNodeChildren(nodeAction, 'participant')
-			return participantsAffected.map(p => {
-				return { status: p.attrs.error || '200', jid: p.attrs.jid }
-			})
-		},
-		groupParticipantsUpdate: async(
-			jid: string,
-			participants: string[],
-			action: ParticipantAction
-		) => {
-			const result = await groupQuery(
-				jid,
-				'set',
-				[
-					{
-						tag: action,
-						attrs: { },
-						content: participants.map(jid => ({
-							tag: 'participant',
-							attrs: { jid }
-						}))
-					}
-				]
-			)
-			const node = getBinaryNodeChild(result, action)
-			const participantsAffected = getBinaryNodeChildren(node!, 'participant')
-			return participantsAffected.map(p => {
-				return { status: p.attrs.error || '200', jid: p.attrs.jid, content: p }
-			})
-		},
-		groupUpdateDescription: async(jid: string, description?: string) => {
-			const metadata = await groupMetadata(jid)
-			const prev = metadata.descId ?? null
-
-			await groupQuery(
-				jid,
-				'set',
-				[
-					{
-						tag: 'description',
-						attrs: {
-							...(description ? { id: generateMessageID() } : { delete: 'true' }),
-							...(prev ? { prev } : {})
-						},
-						content: description ? [
-							{ tag: 'body', attrs: {}, content: Buffer.from(description, 'utf-8') }
-						] : undefined
-					}
-				]
-			)
-		},
-		groupInviteCode: async(jid: string) => {
-			const result = await groupQuery(jid, 'get', [{ tag: 'invite', attrs: {} }])
-			const inviteNode = getBinaryNodeChild(result, 'invite')
-			return inviteNode?.attrs.code
-		},
-		groupRevokeInvite: async(jid: string) => {
-			const result = await groupQuery(jid, 'set', [{ tag: 'invite', attrs: {} }])
-			const inviteNode = getBinaryNodeChild(result, 'invite')
-			return inviteNode?.attrs.code
-		},
-		groupAcceptInvite: async(code: string) => {
-			const results = await groupQuery('@g.us', 'set', [{ tag: 'invite', attrs: { code } }])
-			const result = getBinaryNodeChild(results, 'group')
-			return result?.attrs.jid
-		},
-		/**
-		 * accept a GroupInviteMessage
-		 * @param key the key of the invite message, or optionally only provide the jid of the person who sent the invite
-		 * @param inviteMessage the message to accept
-		 */
-		groupAcceptInviteV4: ev.createBufferedFunction(async(key: string | WAMessageKey, inviteMessage: proto.Message.IGroupInviteMessage) => {
-			key = typeof key === 'string' ? { remoteJid: key } : key
-			const results = await groupQuery(inviteMessage.groupJid!, 'set', [{
-				tag: 'accept',
-				attrs: {
-					code: inviteMessage.inviteCode!,
-					expiration: inviteMessage.inviteExpiration!.toString(),
-					admin: key.remoteJid!
-				}
-			}])
-
-			// if we have the full message key
-			// update the invite message to be expired
-			if(key.id) {
-				// create new invite message that is expired
-				inviteMessage = proto.Message.GroupInviteMessage.fromObject(inviteMessage)
-				inviteMessage.inviteExpiration = 0
-				inviteMessage.inviteCode = ''
-				ev.emit('messages.update', [
-					{
-						key,
-						update: {
-							message: {
-								groupInviteMessage: inviteMessage
-							}
-						}
-					}
-				])
-			}
-
-			// generate the group add message
-			await upsertMessage(
-				{
-					key: {
-						remoteJid: inviteMessage.groupJid,
-						id: generateMessageID(),
-						fromMe: false,
-						participant: key.remoteJid,
-					},
-					messageStubType: WAMessageStubType.GROUP_PARTICIPANT_ADD,
-					messageStubParameters: [
-						authState.creds.me!.id
-					],
-					participant: key.remoteJid,
-					messageTimestamp: unixTimestampSeconds()
-				},
-				'notify'
-			)
-
-			return results.attrs.from
-		}),
-		groupGetInviteInfo: async(code: string) => {
-			const results = await groupQuery('@g.us', 'get', [{ tag: 'invite', attrs: { code } }])
-			return extractGroupMetadata(results)
-		},
-		groupToggleEphemeral: async(jid: string, ephemeralExpiration: number) => {
-			const content: BinaryNode = ephemeralExpiration ?
-				{ tag: 'ephemeral', attrs: { expiration: ephemeralExpiration.toString() } } :
-				{ tag: 'not_ephemeral', attrs: { } }
-			await groupQuery(jid, 'set', [content])
-		},
-		groupSettingUpdate: async(jid: string, setting: 'announcement' | 'not_announcement' | 'locked' | 'unlocked') => {
-			await groupQuery(jid, 'set', [ { tag: setting, attrs: { } } ])
-		},
-		groupMemberAddMode: async(jid: string, mode: 'admin_add' | 'all_member_add') => {
-			await groupQuery(jid, 'set', [ { tag: 'member_add_mode', attrs: { }, content: mode } ])
-		},
-		groupJoinApprovalMode: async(jid: string, mode: 'on' | 'off') => {
-			await groupQuery(jid, 'set', [ { tag: 'membership_approval_mode', attrs: { }, content: [ { tag: 'group_join', attrs: { state: mode } } ] } ])
-		},
-		groupFetchAllParticipating
-	}
-}
-
-
-export const extractGroupMetadata = (result: BinaryNode) => {
-	const group = getBinaryNodeChild(result, 'group')!
-	const descChild = getBinaryNodeChild(group, 'description')
-	let desc: string | undefined
-	let descId: string | undefined
-	if(descChild) {
-		desc = getBinaryNodeChildString(descChild, 'body')
-		descId = descChild.attrs.id
-	}
-
-	const groupId = group.attrs.id.includes('@') ? group.attrs.id : jidEncode(group.attrs.id, 'g.us')
-	const eph = getBinaryNodeChild(group, 'ephemeral')?.attrs.expiration
-	const memberAddMode = getBinaryNodeChildString(group, 'member_add_mode') === 'all_member_add'
-	const metadata: GroupMetadata = {
-		id: groupId,
-		subject: group.attrs.subject,
-		subjectOwner: group.attrs.s_o,
-		subjectTime: +group.attrs.s_t,
-		size: getBinaryNodeChildren(group, 'participant').length,
-		creation: +group.attrs.creation,
-		owner: group.attrs.creator ? jidNormalizedUser(group.attrs.creator) : undefined,
-		desc,
-		descId,
-		linkedParent: getBinaryNodeChild(group, 'linked_parent')?.attrs.jid || undefined,
-		restrict: !!getBinaryNodeChild(group, 'locked'),
-		announce: !!getBinaryNodeChild(group, 'announcement'),
-		isCommunity: !!getBinaryNodeChild(group, 'parent'),
-		isCommunityAnnounce: !!getBinaryNodeChild(group, 'default_sub_group'),
-		joinApprovalMode: !!getBinaryNodeChild(group, 'membership_approval_mode'),
-		memberAddMode,
-		participants: getBinaryNodeChildren(group, 'participant').map(
-			({ attrs }) => {
-				return {
-					id: attrs.jid,
-					admin: (attrs.type || null) as GroupParticipant['admin'],
-				}
-			}
-		),
-		ephemeralDuration: eph ? +eph : undefined
-	}
-	return metadata
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Socket/index.ts b/node_modules/@whiskeysockets/baileys/src/Socket/index.ts
deleted file mode 100644
index 7338c9c..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Socket/index.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-import { DEFAULT_CONNECTION_CONFIG } from '../Defaults'
-import { UserFacingSocketConfig } from '../Types'
-import { makeRegistrationSocket as _makeSocket } from './registration'
-
-// export the last socket layer
-const makeWASocket = (config: UserFacingSocketConfig) => (
-	_makeSocket({
-		...DEFAULT_CONNECTION_CONFIG,
-		...config
-	})
-)
-
-export default makeWASocket
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Socket/messages-recv.ts b/node_modules/@whiskeysockets/baileys/src/Socket/messages-recv.ts
deleted file mode 100644
index 6f1e4ae..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Socket/messages-recv.ts
+++ /dev/null
@@ -1,914 +0,0 @@
-
-import { Boom } from '@hapi/boom'
-import { randomBytes } from 'crypto'
-import NodeCache from 'node-cache'
-import { proto } from '../../WAProto'
-import { DEFAULT_CACHE_TTLS, KEY_BUNDLE_TYPE, MIN_PREKEY_COUNT } from '../Defaults'
-import { MessageReceiptType, MessageRelayOptions, MessageUserReceipt, SocketConfig, WACallEvent, WAMessageKey, WAMessageStatus, WAMessageStubType, WAPatchName } from '../Types'
-import {
-	aesDecryptCTR,
-	aesEncryptGCM,
-	Curve,
-	decodeMediaRetryNode,
-	decryptMessageNode,
-	delay,
-	derivePairingCodeKey,
-	encodeBigEndian,
-	encodeSignedDeviceIdentity,
-	getCallStatusFromNode,
-	getHistoryMsg,
-	getNextPreKeys,
-	getStatusFromReceiptType, hkdf,
-	unixTimestampSeconds,
-	xmppPreKey,
-	xmppSignedPreKey
-} from '../Utils'
-import { cleanMessage } from '../Utils'
-import { makeMutex } from '../Utils/make-mutex'
-import {
-	areJidsSameUser,
-	BinaryNode,
-	getAllBinaryNodeChildren,
-	getBinaryNodeChild,
-	getBinaryNodeChildBuffer,
-	getBinaryNodeChildren,
-	isJidGroup,
-	isJidUser,
-	jidDecode,
-	jidNormalizedUser,
-	S_WHATSAPP_NET
-} from '../WABinary'
-import { extractGroupMetadata } from './groups'
-import { makeMessagesSocket } from './messages-send'
-
-export const makeMessagesRecvSocket = (config: SocketConfig) => {
-	const {
-		logger,
-		retryRequestDelayMs,
-		maxMsgRetryCount,
-		getMessage,
-		shouldIgnoreJid
-	} = config
-	const sock = makeMessagesSocket(config)
-	const {
-		ev,
-		authState,
-		ws,
-		processingMutex,
-		signalRepository,
-		query,
-		upsertMessage,
-		resyncAppState,
-		onUnexpectedError,
-		assertSessions,
-		sendNode,
-		relayMessage,
-		sendReceipt,
-		uploadPreKeys,
-	} = sock
-
-	/** this mutex ensures that each retryRequest will wait for the previous one to finish */
-	const retryMutex = makeMutex()
-
-	const msgRetryCache = config.msgRetryCounterCache || new NodeCache({
-		stdTTL: DEFAULT_CACHE_TTLS.MSG_RETRY, // 1 hour
-		useClones: false
-	})
-	const callOfferCache = config.callOfferCache || new NodeCache({
-		stdTTL: DEFAULT_CACHE_TTLS.CALL_OFFER, // 5 mins
-		useClones: false
-	})
-
-	let sendActiveReceipts = false
-
-	const sendMessageAck = async({ tag, attrs, content }: BinaryNode) => {
-		const stanza: BinaryNode = {
-			tag: 'ack',
-			attrs: {
-				id: attrs.id,
-				to: attrs.from,
-				class: tag,
-			}
-		}
-
-		if(!!attrs.participant) {
-			stanza.attrs.participant = attrs.participant
-		}
-
-		if(!!attrs.recipient) {
-			stanza.attrs.recipient = attrs.recipient
-		}
-
-
-    		if(!!attrs.type && (tag !== 'message' || getBinaryNodeChild({ tag, attrs, content }, 'unavailable'))) {
-      			stanza.attrs.type = attrs.type
-    		}
-
-    		if(tag === 'message' && getBinaryNodeChild({ tag, attrs, content }, 'unavailable')) {
-      			stanza.attrs.from = authState.creds.me!.id
-    		}
-
-		logger.debug({ recv: { tag, attrs }, sent: stanza.attrs }, 'sent ack')
-		await sendNode(stanza)
-	}
-
-	const rejectCall = async(callId: string, callFrom: string) => {
-		const stanza: BinaryNode = ({
-			tag: 'call',
-			attrs: {
-				from: authState.creds.me!.id,
-				to: callFrom,
-			},
-			content: [{
-			    tag: 'reject',
-			    attrs: {
-					'call-id': callId,
-					'call-creator': callFrom,
-					count: '0',
-			    },
-			    content: undefined,
-			}],
-		})
-		await query(stanza)
-	}
-
-	const sendRetryRequest = async(node: BinaryNode, forceIncludeKeys = false) => {
-		const msgId = node.attrs.id
-
-		let retryCount = msgRetryCache.get<number>(msgId) || 0
-		if(retryCount >= maxMsgRetryCount) {
-			logger.debug({ retryCount, msgId }, 'reached retry limit, clearing')
-			msgRetryCache.del(msgId)
-			return
-		}
-
-		retryCount += 1
-		msgRetryCache.set(msgId, retryCount)
-
-		const { account, signedPreKey, signedIdentityKey: identityKey } = authState.creds
-
-		const deviceIdentity = encodeSignedDeviceIdentity(account!, true)
-		await authState.keys.transaction(
-			async() => {
-				const receipt: BinaryNode = {
-					tag: 'receipt',
-					attrs: {
-						id: msgId,
-						type: 'retry',
-						to: node.attrs.from
-					},
-					content: [
-						{
-							tag: 'retry',
-							attrs: {
-								count: retryCount.toString(),
-								id: node.attrs.id,
-								t: node.attrs.t,
-								v: '1'
-							}
-						},
-						{
-							tag: 'registration',
-							attrs: { },
-							content: encodeBigEndian(authState.creds.registrationId)
-						}
-					]
-				}
-
-				if(node.attrs.recipient) {
-					receipt.attrs.recipient = node.attrs.recipient
-				}
-
-				if(node.attrs.participant) {
-					receipt.attrs.participant = node.attrs.participant
-				}
-
-				if(retryCount > 1 || forceIncludeKeys) {
-					const { update, preKeys } = await getNextPreKeys(authState, 1)
-
-					const [keyId] = Object.keys(preKeys)
-					const key = preKeys[+keyId]
-
-					const content = receipt.content! as BinaryNode[]
-					content.push({
-						tag: 'keys',
-						attrs: { },
-						content: [
-							{ tag: 'type', attrs: { }, content: Buffer.from(KEY_BUNDLE_TYPE) },
-							{ tag: 'identity', attrs: { }, content: identityKey.public },
-							xmppPreKey(key, +keyId),
-							xmppSignedPreKey(signedPreKey),
-							{ tag: 'device-identity', attrs: { }, content: deviceIdentity }
-						]
-					})
-
-					ev.emit('creds.update', update)
-				}
-
-				await sendNode(receipt)
-
-				logger.info({ msgAttrs: node.attrs, retryCount }, 'sent retry receipt')
-			}
-		)
-	}
-
-	const handleEncryptNotification = async(node: BinaryNode) => {
-		const from = node.attrs.from
-		if(from === S_WHATSAPP_NET) {
-			const countChild = getBinaryNodeChild(node, 'count')
-			const count = +countChild!.attrs.value
-			const shouldUploadMorePreKeys = count < MIN_PREKEY_COUNT
-
-			logger.debug({ count, shouldUploadMorePreKeys }, 'recv pre-key count')
-			if(shouldUploadMorePreKeys) {
-				await uploadPreKeys()
-			}
-		} else {
-			const identityNode = getBinaryNodeChild(node, 'identity')
-			if(identityNode) {
-				logger.info({ jid: from }, 'identity changed')
-				// not handling right now
-				// signal will override new identity anyway
-			} else {
-				logger.info({ node }, 'unknown encrypt notification')
-			}
-		}
-	}
-
-	const handleGroupNotification = (
-		participant: string,
-		child: BinaryNode,
-		msg: Partial<proto.IWebMessageInfo>
-	) => {
-		switch (child?.tag) {
-		case 'create':
-			const metadata = extractGroupMetadata(child)
-
-			msg.messageStubType = WAMessageStubType.GROUP_CREATE
-			msg.messageStubParameters = [metadata.subject]
-			msg.key = { participant: metadata.owner }
-
-			ev.emit('chats.upsert', [{
-				id: metadata.id,
-				name: metadata.subject,
-				conversationTimestamp: metadata.creation,
-			}])
-			ev.emit('groups.upsert', [{
-				...metadata,
-				author: participant
-			}])
-			break
-		case 'ephemeral':
-		case 'not_ephemeral':
-			msg.message = {
-				protocolMessage: {
-					type: proto.Message.ProtocolMessage.Type.EPHEMERAL_SETTING,
-					ephemeralExpiration: +(child.attrs.expiration || 0)
-				}
-			}
-			break
-		case 'promote':
-		case 'demote':
-		case 'remove':
-		case 'add':
-		case 'leave':
-			const stubType = `GROUP_PARTICIPANT_${child.tag.toUpperCase()}`
-			msg.messageStubType = WAMessageStubType[stubType]
-
-			const participants = getBinaryNodeChildren(child, 'participant').map(p => p.attrs.jid)
-			if(
-				participants.length === 1 &&
-					// if recv. "remove" message and sender removed themselves
-					// mark as left
-					areJidsSameUser(participants[0], participant) &&
-					child.tag === 'remove'
-			) {
-				msg.messageStubType = WAMessageStubType.GROUP_PARTICIPANT_LEAVE
-			}
-
-			msg.messageStubParameters = participants
-			break
-		case 'subject':
-			msg.messageStubType = WAMessageStubType.GROUP_CHANGE_SUBJECT
-			msg.messageStubParameters = [ child.attrs.subject ]
-			break
-		case 'announcement':
-		case 'not_announcement':
-			msg.messageStubType = WAMessageStubType.GROUP_CHANGE_ANNOUNCE
-			msg.messageStubParameters = [ (child.tag === 'announcement') ? 'on' : 'off' ]
-			break
-		case 'locked':
-		case 'unlocked':
-			msg.messageStubType = WAMessageStubType.GROUP_CHANGE_RESTRICT
-			msg.messageStubParameters = [ (child.tag === 'locked') ? 'on' : 'off' ]
-			break
-		case 'invite':
-			msg.messageStubType = WAMessageStubType.GROUP_CHANGE_INVITE_LINK
-			msg.messageStubParameters = [ child.attrs.code ]
-			break
-		case 'member_add_mode':
-			const addMode = child.content
-			if(addMode) {
-				msg.messageStubType = WAMessageStubType.GROUP_MEMBER_ADD_MODE
-				msg.messageStubParameters = [ addMode.toString() ]
-			}
-
-			break
-		case 'membership_approval_mode':
-			const approvalMode: any = getBinaryNodeChild(child, 'group_join')
-			if(approvalMode) {
-				msg.messageStubType = WAMessageStubType.GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE
-				msg.messageStubParameters = [ approvalMode.attrs.state ]
-			}
-
-			break
-		}
-	}
-
-	const processNotification = async(node: BinaryNode) => {
-		const result: Partial<proto.IWebMessageInfo> = { }
-		const [child] = getAllBinaryNodeChildren(node)
-		const nodeType = node.attrs.type
-		const from = jidNormalizedUser(node.attrs.from)
-
-		switch (nodeType) {
-		case 'privacy_token':
-			const tokenList = getBinaryNodeChildren(child, 'token')
-			for(const { attrs, content } of tokenList) {
-				const jid = attrs.jid
-				ev.emit('chats.update', [
-					{
-						id: jid,
-						tcToken: content as Buffer
-					}
-				])
-
-				logger.debug({ jid }, 'got privacy token update')
-			}
-
-			break
-		case 'w:gp2':
-			handleGroupNotification(node.attrs.participant, child, result)
-			break
-		case 'mediaretry':
-			const event = decodeMediaRetryNode(node)
-			ev.emit('messages.media-update', [event])
-			break
-		case 'encrypt':
-			await handleEncryptNotification(node)
-			break
-		case 'devices':
-			const devices = getBinaryNodeChildren(child, 'device')
-			if(areJidsSameUser(child.attrs.jid, authState.creds.me!.id)) {
-				const deviceJids = devices.map(d => d.attrs.jid)
-				logger.info({ deviceJids }, 'got my own devices')
-			}
-
-			break
-		case 'server_sync':
-			const update = getBinaryNodeChild(node, 'collection')
-			if(update) {
-				const name = update.attrs.name as WAPatchName
-				await resyncAppState([name], false)
-			}
-
-			break
-		case 'picture':
-			const setPicture = getBinaryNodeChild(node, 'set')
-			const delPicture = getBinaryNodeChild(node, 'delete')
-
-			ev.emit('contacts.update', [{
-				id: jidNormalizedUser(node?.attrs?.jid) || ((setPicture || delPicture)?.attrs?.hash) || '',
-				imgUrl: setPicture ? 'changed' : 'removed'
-			}])
-
-			if(isJidGroup(from)) {
-				const node = setPicture || delPicture
-				result.messageStubType = WAMessageStubType.GROUP_CHANGE_ICON
-
-				if(setPicture) {
-					result.messageStubParameters = [setPicture.attrs.id]
-				}
-
-				result.participant = node?.attrs.author
-				result.key = {
-					...result.key || {},
-					participant: setPicture?.attrs.author
-				}
-			}
-
-			break
-		case 'account_sync':
-			if(child.tag === 'disappearing_mode') {
-				const newDuration = +child.attrs.duration
-				const timestamp = +child.attrs.t
-
-				logger.info({ newDuration }, 'updated account disappearing mode')
-
-				ev.emit('creds.update', {
-					accountSettings: {
-						...authState.creds.accountSettings,
-						defaultDisappearingMode: {
-							ephemeralExpiration: newDuration,
-							ephemeralSettingTimestamp: timestamp,
-						},
-					}
-				})
-			} else if(child.tag === 'blocklist') {
-				const blocklists = getBinaryNodeChildren(child, 'item')
-
-				for(const { attrs } of blocklists) {
-					const blocklist = [attrs.jid]
-					const type = (attrs.action === 'block') ? 'add' : 'remove'
-					ev.emit('blocklist.update', { blocklist, type })
-				}
-			}
-
-			break
-		case 'link_code_companion_reg':
-			const linkCodeCompanionReg = getBinaryNodeChild(node, 'link_code_companion_reg')
-			const ref = toRequiredBuffer(getBinaryNodeChildBuffer(linkCodeCompanionReg, 'link_code_pairing_ref'))
-			const primaryIdentityPublicKey = toRequiredBuffer(getBinaryNodeChildBuffer(linkCodeCompanionReg, 'primary_identity_pub'))
-			const primaryEphemeralPublicKeyWrapped = toRequiredBuffer(getBinaryNodeChildBuffer(linkCodeCompanionReg, 'link_code_pairing_wrapped_primary_ephemeral_pub'))
-			const codePairingPublicKey = decipherLinkPublicKey(primaryEphemeralPublicKeyWrapped)
-			const companionSharedKey = Curve.sharedKey(authState.creds.pairingEphemeralKeyPair.private, codePairingPublicKey)
-			const random = randomBytes(32)
-			const linkCodeSalt = randomBytes(32)
-			const linkCodePairingExpanded = hkdf(companionSharedKey, 32, {
-				salt: linkCodeSalt,
-				info: 'link_code_pairing_key_bundle_encryption_key'
-			})
-			const encryptPayload = Buffer.concat([Buffer.from(authState.creds.signedIdentityKey.public), primaryIdentityPublicKey, random])
-			const encryptIv = randomBytes(12)
-			const encrypted = aesEncryptGCM(encryptPayload, linkCodePairingExpanded, encryptIv, Buffer.alloc(0))
-			const encryptedPayload = Buffer.concat([linkCodeSalt, encryptIv, encrypted])
-			const identitySharedKey = Curve.sharedKey(authState.creds.signedIdentityKey.private, primaryIdentityPublicKey)
-			const identityPayload = Buffer.concat([companionSharedKey, identitySharedKey, random])
-			authState.creds.advSecretKey = hkdf(identityPayload, 32, { info: 'adv_secret' }).toString('base64')
-			await query({
-				tag: 'iq',
-				attrs: {
-					to: S_WHATSAPP_NET,
-					type: 'set',
-					id: sock.generateMessageTag(),
-					xmlns: 'md'
-				},
-				content: [
-					{
-						tag: 'link_code_companion_reg',
-						attrs: {
-							jid: authState.creds.me!.id,
-							stage: 'companion_finish',
-						},
-						content: [
-							{
-								tag: 'link_code_pairing_wrapped_key_bundle',
-								attrs: {},
-								content: encryptedPayload
-							},
-							{
-								tag: 'companion_identity_public',
-								attrs: {},
-								content: authState.creds.signedIdentityKey.public
-							},
-							{
-								tag: 'link_code_pairing_ref',
-								attrs: {},
-								content: ref
-							}
-						]
-					}
-				]
-			})
-			authState.creds.registered = true
-			ev.emit('creds.update', authState.creds)
-		}
-
-		if(Object.keys(result).length) {
-			return result
-		}
-	}
-
-	function decipherLinkPublicKey(data: Uint8Array | Buffer) {
-		const buffer = toRequiredBuffer(data)
-		const salt = buffer.slice(0, 32)
-		const secretKey = derivePairingCodeKey(authState.creds.pairingCode!, salt)
-		const iv = buffer.slice(32, 48)
-		const payload = buffer.slice(48, 80)
-		return aesDecryptCTR(payload, secretKey, iv)
-	}
-
-	function toRequiredBuffer(data: Uint8Array | Buffer | undefined) {
-		if(data === undefined) {
-			throw new Boom('Invalid buffer', { statusCode: 400 })
-		}
-
-		return data instanceof Buffer ? data : Buffer.from(data)
-	}
-
-	const willSendMessageAgain = (id: string, participant: string) => {
-		const key = `${id}:${participant}`
-		const retryCount = msgRetryCache.get<number>(key) || 0
-		return retryCount < maxMsgRetryCount
-	}
-
-	const updateSendMessageAgainCount = (id: string, participant: string) => {
-		const key = `${id}:${participant}`
-		const newValue = (msgRetryCache.get<number>(key) || 0) + 1
-		msgRetryCache.set(key, newValue)
-	}
-
-	const sendMessagesAgain = async(
-		key: proto.IMessageKey,
-		ids: string[],
-		retryNode: BinaryNode
-	) => {
-		const msgs = await Promise.all(ids.map(id => getMessage({ ...key, id })))
-		const remoteJid = key.remoteJid!
-		const participant = key.participant || remoteJid
-		// if it's the primary jid sending the request
-		// just re-send the message to everyone
-		// prevents the first message decryption failure
-		const sendToAll = !jidDecode(participant)?.device
-		await assertSessions([participant], true)
-
-		if(isJidGroup(remoteJid)) {
-			await authState.keys.set({ 'sender-key-memory': { [remoteJid]: null } })
-		}
-
-		logger.debug({ participant, sendToAll }, 'forced new session for retry recp')
-
-		for(let i = 0; i < msgs.length;i++) {
-			const msg = msgs[i]
-			if(msg) {
-				updateSendMessageAgainCount(ids[i], participant)
-				const msgRelayOpts: MessageRelayOptions = { messageId: ids[i] }
-
-				if(sendToAll) {
-					msgRelayOpts.useUserDevicesCache = false
-				} else {
-					msgRelayOpts.participant = {
-						jid: participant,
-						count: +retryNode.attrs.count
-					}
-				}
-
-				await relayMessage(key.remoteJid!, msg, msgRelayOpts)
-			} else {
-				logger.debug({ jid: key.remoteJid, id: ids[i] }, 'recv retry request, but message not available')
-			}
-		}
-	}
-
-	const handleReceipt = async(node: BinaryNode) => {
-		const { attrs, content } = node
-		const isLid = attrs.from.includes('lid')
-		const isNodeFromMe = areJidsSameUser(attrs.participant || attrs.from, isLid ? authState.creds.me?.lid : authState.creds.me?.id)
-		const remoteJid = !isNodeFromMe || isJidGroup(attrs.from) ? attrs.from : attrs.recipient
-		const fromMe = !attrs.recipient || (attrs.type === 'retry' && isNodeFromMe)
-
-		const key: proto.IMessageKey = {
-			remoteJid,
-			id: '',
-			fromMe,
-			participant: attrs.participant
-		}
-
-		if(shouldIgnoreJid(remoteJid) && remoteJid != '@s.whatsapp.net') {
-			logger.debug({ remoteJid }, 'ignoring receipt from jid')
-			await sendMessageAck(node)
-			return
-		}
-
-		const ids = [attrs.id]
-		if(Array.isArray(content)) {
-			const items = getBinaryNodeChildren(content[0], 'item')
-			ids.push(...items.map(i => i.attrs.id))
-		}
-
-		await Promise.all([
-			processingMutex.mutex(
-				async() => {
-					const status = getStatusFromReceiptType(attrs.type)
-					if(
-						typeof status !== 'undefined' &&
-						(
-							// basically, we only want to know when a message from us has been delivered to/read by the other person
-							// or another device of ours has read some messages
-							status > proto.WebMessageInfo.Status.DELIVERY_ACK ||
-							!isNodeFromMe
-						)
-					) {
-						if(isJidGroup(remoteJid)) {
-							if(attrs.participant) {
-								const updateKey: keyof MessageUserReceipt = status === proto.WebMessageInfo.Status.DELIVERY_ACK ? 'receiptTimestamp' : 'readTimestamp'
-								ev.emit(
-									'message-receipt.update',
-									ids.map(id => ({
-										key: { ...key, id },
-										receipt: {
-											userJid: jidNormalizedUser(attrs.participant),
-											[updateKey]: +attrs.t
-										}
-									}))
-								)
-							}
-						} else {
-							ev.emit(
-								'messages.update',
-								ids.map(id => ({
-									key: { ...key, id },
-									update: { status }
-								}))
-							)
-						}
-					}
-
-					if(attrs.type === 'retry') {
-						// correctly set who is asking for the retry
-						key.participant = key.participant || attrs.from
-						const retryNode = getBinaryNodeChild(node, 'retry')
-						if(willSendMessageAgain(ids[0], key.participant)) {
-							if(key.fromMe) {
-								try {
-									logger.debug({ attrs, key }, 'recv retry request')
-									await sendMessagesAgain(key, ids, retryNode!)
-								} catch(error) {
-									logger.error({ key, ids, trace: error.stack }, 'error in sending message again')
-								}
-							} else {
-								logger.info({ attrs, key }, 'recv retry for not fromMe message')
-							}
-						} else {
-							logger.info({ attrs, key }, 'will not send message again, as sent too many times')
-						}
-					}
-				}
-			),
-			sendMessageAck(node)
-		])
-	}
-
-	const handleNotification = async(node: BinaryNode) => {
-		const remoteJid = node.attrs.from
-		if(shouldIgnoreJid(remoteJid) && remoteJid !== '@s.whatsapp.net') {
-			logger.debug({ remoteJid, id: node.attrs.id }, 'ignored notification')
-			await sendMessageAck(node)
-			return
-		}
-
-		await Promise.all([
-			processingMutex.mutex(
-				async() => {
-					const msg = await processNotification(node)
-					if(msg) {
-						const fromMe = areJidsSameUser(node.attrs.participant || remoteJid, authState.creds.me!.id)
-						msg.key = {
-							remoteJid,
-							fromMe,
-							participant: node.attrs.participant,
-							id: node.attrs.id,
-							...(msg.key || {})
-						}
-						msg.participant ??= node.attrs.participant
-						msg.messageTimestamp = +node.attrs.t
-
-						const fullMsg = proto.WebMessageInfo.fromObject(msg)
-						await upsertMessage(fullMsg, 'append')
-					}
-				}
-			),
-			sendMessageAck(node)
-		])
-	}
-
-	const handleMessage = async(node: BinaryNode) => {
-		if(shouldIgnoreJid(node.attrs.from!) && node.attrs.from! !== '@s.whatsapp.net') {
-			logger.debug({ key: node.attrs.key }, 'ignored message')
-			await sendMessageAck(node)
-			return
-		}
-
-		const { fullMessage: msg, category, author, decrypt } = decryptMessageNode(
-			node,
-			authState.creds.me!.id,
-			authState.creds.me!.lid || '',
-			signalRepository,
-			logger,
-		)
-
-		if(msg.message?.protocolMessage?.type === proto.Message.ProtocolMessage.Type.SHARE_PHONE_NUMBER) {
-			if(node.attrs.sender_pn) {
-				ev.emit('chats.phoneNumberShare', { lid: node.attrs.from, jid: node.attrs.sender_pn })
-			}
-		}
-
-		await Promise.all([
-			processingMutex.mutex(
-				async() => {
-					await decrypt()
-					// message failed to decrypt
-					if(msg.messageStubType === proto.WebMessageInfo.StubType.CIPHERTEXT) {
-						retryMutex.mutex(
-							async() => {
-								if(ws.isOpen) {
-									const encNode = getBinaryNodeChild(node, 'enc')
-									await sendRetryRequest(node, !encNode)
-									if(retryRequestDelayMs) {
-										await delay(retryRequestDelayMs)
-									}
-								} else {
-									logger.debug({ node }, 'connection closed, ignoring retry req')
-								}
-							}
-						)
-					} else {
-						// no type in the receipt => message delivered
-						let type: MessageReceiptType = undefined
-						let participant = msg.key.participant
-						if(category === 'peer') { // special peer message
-							type = 'peer_msg'
-						} else if(msg.key.fromMe) { // message was sent by us from a different device
-							type = 'sender'
-							// need to specially handle this case
-							if(isJidUser(msg.key.remoteJid!)) {
-								participant = author
-							}
-						} else if(!sendActiveReceipts) {
-							type = 'inactive'
-						}
-
-						await sendReceipt(msg.key.remoteJid!, participant!, [msg.key.id!], type)
-
-						// send ack for history message
-						const isAnyHistoryMsg = getHistoryMsg(msg.message!)
-						if(isAnyHistoryMsg) {
-							const jid = jidNormalizedUser(msg.key.remoteJid!)
-							await sendReceipt(jid, undefined, [msg.key.id!], 'hist_sync')
-						}
-					}
-
-					cleanMessage(msg, authState.creds.me!.id)
-
-					await upsertMessage(msg, node.attrs.offline ? 'append' : 'notify')
-				}
-			),
-			sendMessageAck(node)
-		])
-	}
-
-	const handleCall = async(node: BinaryNode) => {
-		const { attrs } = node
-		const [infoChild] = getAllBinaryNodeChildren(node)
-		const callId = infoChild.attrs['call-id']
-		const from = infoChild.attrs.from || infoChild.attrs['call-creator']
-		const status = getCallStatusFromNode(infoChild)
-		const call: WACallEvent = {
-			chatId: attrs.from,
-			from,
-			id: callId,
-			date: new Date(+attrs.t * 1000),
-			offline: !!attrs.offline,
-			status,
-		}
-
-		if(status === 'offer') {
-			call.isVideo = !!getBinaryNodeChild(infoChild, 'video')
-			call.isGroup = infoChild.attrs.type === 'group' || !!infoChild.attrs['group-jid']
-			call.groupJid = infoChild.attrs['group-jid']
-			callOfferCache.set(call.id, call)
-		}
-
-		const existingCall = callOfferCache.get<WACallEvent>(call.id)
-
-		// use existing call info to populate this event
-		if(existingCall) {
-			call.isVideo = existingCall.isVideo
-			call.isGroup = existingCall.isGroup
-		}
-
-		// delete data once call has ended
-		if(status === 'reject' || status === 'accept' || status === 'timeout') {
-			callOfferCache.del(call.id)
-		}
-
-		ev.emit('call', [call])
-
-		await sendMessageAck(node)
-	}
-
-	const handleBadAck = async({ attrs }: BinaryNode) => {
-		const key: WAMessageKey = { remoteJid: attrs.from, fromMe: true, id: attrs.id }
-		// current hypothesis is that if pash is sent in the ack
-		// it means -- the message hasn't reached all devices yet
-		// we'll retry sending the message here
-		if(attrs.phash) {
-			logger.info({ attrs }, 'received phash in ack, resending message...')
-			const msg = await getMessage(key)
-			if(msg) {
-				await relayMessage(key.remoteJid!, msg, { messageId: key.id!, useUserDevicesCache: false })
-			} else {
-				logger.warn({ attrs }, 'could not send message again, as it was not found')
-			}
-		}
-
-		// error in acknowledgement,
-		// device could not display the message
-		if(attrs.error) {
-			logger.warn({ attrs }, 'received error in ack')
-			ev.emit(
-				'messages.update',
-				[
-					{
-						key,
-						update: {
-							status: WAMessageStatus.ERROR,
-							messageStubParameters: [
-								attrs.error
-							]
-						}
-					}
-				]
-			)
-		}
-	}
-
-	/// processes a node with the given function
-	/// and adds the task to the existing buffer if we're buffering events
-	const processNodeWithBuffer = async<T>(
-		node: BinaryNode,
-		identifier: string,
-		exec: (node: BinaryNode) => Promise<T>
-	) => {
-		ev.buffer()
-		await execTask()
-		ev.flush()
-
-		function execTask() {
-			return exec(node)
-				.catch(err => onUnexpectedError(err, identifier))
-		}
-	}
-
-	// recv a message
-	ws.on('CB:message', (node: BinaryNode) => {
-		processNodeWithBuffer(node, 'processing message', handleMessage)
-	})
-
-	ws.on('CB:call', async(node: BinaryNode) => {
-		processNodeWithBuffer(node, 'handling call', handleCall)
-	})
-
-	ws.on('CB:receipt', node => {
-		processNodeWithBuffer(node, 'handling receipt', handleReceipt)
-	})
-
-	ws.on('CB:notification', async(node: BinaryNode) => {
-		processNodeWithBuffer(node, 'handling notification', handleNotification)
-	})
-
-	ws.on('CB:ack,class:message', (node: BinaryNode) => {
-		handleBadAck(node)
-			.catch(error => onUnexpectedError(error, 'handling bad ack'))
-	})
-
-	ev.on('call', ([ call ]) => {
-		// missed call + group call notification message generation
-		if(call.status === 'timeout' || (call.status === 'offer' && call.isGroup)) {
-			const msg: proto.IWebMessageInfo = {
-				key: {
-					remoteJid: call.chatId,
-					id: call.id,
-					fromMe: false
-				},
-				messageTimestamp: unixTimestampSeconds(call.date),
-			}
-			if(call.status === 'timeout') {
-				if(call.isGroup) {
-					msg.messageStubType = call.isVideo ? WAMessageStubType.CALL_MISSED_GROUP_VIDEO : WAMessageStubType.CALL_MISSED_GROUP_VOICE
-				} else {
-					msg.messageStubType = call.isVideo ? WAMessageStubType.CALL_MISSED_VIDEO : WAMessageStubType.CALL_MISSED_VOICE
-				}
-			} else {
-				msg.message = { call: { callKey: Buffer.from(call.id) } }
-			}
-
-			const protoMsg = proto.WebMessageInfo.fromObject(msg)
-			upsertMessage(protoMsg, call.offline ? 'append' : 'notify')
-		}
-	})
-
-	ev.on('connection.update', ({ isOnline }) => {
-		if(typeof isOnline !== 'undefined') {
-			sendActiveReceipts = isOnline
-			logger.trace(`sendActiveReceipts set to "${sendActiveReceipts}"`)
-		}
-	})
-
-	return {
-		...sock,
-		sendMessageAck,
-		sendRetryRequest,
-		rejectCall
-	}
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Socket/messages-send.ts b/node_modules/@whiskeysockets/baileys/src/Socket/messages-send.ts
deleted file mode 100644
index 070a1f8..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Socket/messages-send.ts
+++ /dev/null
@@ -1,774 +0,0 @@
-
-import { Boom } from '@hapi/boom'
-import NodeCache from 'node-cache'
-import { proto } from '../../WAProto'
-import { DEFAULT_CACHE_TTLS, WA_DEFAULT_EPHEMERAL } from '../Defaults'
-import { AnyMessageContent, MediaConnInfo, MessageReceiptType, MessageRelayOptions, MiscMessageGenerationOptions, SocketConfig, WAMessageKey } from '../Types'
-import { aggregateMessageKeysNotFromMe, assertMediaContent, bindWaitForEvent, decryptMediaRetryData, encodeSignedDeviceIdentity, encodeWAMessage, encryptMediaRetryRequest, extractDeviceJids, generateMessageID, generateWAMessage, getStatusCodeForMediaRetry, getUrlFromDirectPath, getWAUploadToServer, parseAndInjectE2ESessions, unixTimestampSeconds } from '../Utils'
-import { getUrlInfo } from '../Utils/link-preview'
-import { areJidsSameUser, BinaryNode, BinaryNodeAttributes, getBinaryNodeChild, getBinaryNodeChildren, isJidGroup, isJidUser, jidDecode, jidEncode, jidNormalizedUser, JidWithDevice, S_WHATSAPP_NET } from '../WABinary'
-import { makeGroupsSocket } from './groups'
-import ListType = proto.Message.ListMessage.ListType;
-
-export const makeMessagesSocket = (config: SocketConfig) => {
-	const {
-		logger,
-		linkPreviewImageThumbnailWidth,
-		generateHighQualityLinkPreview,
-		options: axiosOptions,
-		patchMessageBeforeSending,
-	} = config
-	const sock = makeGroupsSocket(config)
-	const {
-		ev,
-		authState,
-		processingMutex,
-		signalRepository,
-		upsertMessage,
-		query,
-		fetchPrivacySettings,
-		generateMessageTag,
-		sendNode,
-		groupMetadata,
-		groupToggleEphemeral
-	} = sock
-
-	const userDevicesCache = config.userDevicesCache || new NodeCache({
-		stdTTL: DEFAULT_CACHE_TTLS.USER_DEVICES, // 5 minutes
-		useClones: false
-	})
-
-	let mediaConn: Promise<MediaConnInfo>
-	const refreshMediaConn = async(forceGet = false) => {
-		const media = await mediaConn
-		if(!media || forceGet || (new Date().getTime() - media.fetchDate.getTime()) > media.ttl * 1000) {
-			mediaConn = (async() => {
-				const result = await query({
-					tag: 'iq',
-					attrs: {
-						type: 'set',
-						xmlns: 'w:m',
-						to: S_WHATSAPP_NET,
-					},
-					content: [ { tag: 'media_conn', attrs: { } } ]
-				})
-				const mediaConnNode = getBinaryNodeChild(result, 'media_conn')
-				const node: MediaConnInfo = {
-					hosts: getBinaryNodeChildren(mediaConnNode, 'host').map(
-						({ attrs }) => ({
-							hostname: attrs.hostname,
-							maxContentLengthBytes: +attrs.maxContentLengthBytes,
-						})
-					),
-					auth: mediaConnNode!.attrs.auth,
-					ttl: +mediaConnNode!.attrs.ttl,
-					fetchDate: new Date()
-				}
-				logger.debug('fetched media conn')
-				return node
-			})()
-		}
-
-		return mediaConn
-	}
-
-	/**
-     * generic send receipt function
-     * used for receipts of phone call, read, delivery etc.
-     * */
-	const sendReceipt = async(jid: string, participant: string | undefined, messageIds: string[], type: MessageReceiptType) => {
-		const node: BinaryNode = {
-			tag: 'receipt',
-			attrs: {
-				id: messageIds[0],
-			},
-		}
-		const isReadReceipt = type === 'read' || type === 'read-self'
-		if(isReadReceipt) {
-			node.attrs.t = unixTimestampSeconds().toString()
-		}
-
-		if(type === 'sender' && isJidUser(jid)) {
-			node.attrs.recipient = jid
-			node.attrs.to = participant!
-		} else {
-			node.attrs.to = jid
-			if(participant) {
-				node.attrs.participant = participant
-			}
-		}
-
-		if(type) {
-			node.attrs.type = type
-		}
-
-		const remainingMessageIds = messageIds.slice(1)
-		if(remainingMessageIds.length) {
-			node.content = [
-				{
-					tag: 'list',
-					attrs: { },
-					content: remainingMessageIds.map(id => ({
-						tag: 'item',
-						attrs: { id }
-					}))
-				}
-			]
-		}
-
-		logger.debug({ attrs: node.attrs, messageIds }, 'sending receipt for messages')
-		await sendNode(node)
-	}
-
-	/** Correctly bulk send receipts to multiple chats, participants */
-	const sendReceipts = async(keys: WAMessageKey[], type: MessageReceiptType) => {
-		const recps = aggregateMessageKeysNotFromMe(keys)
-		for(const { jid, participant, messageIds } of recps) {
-			await sendReceipt(jid, participant, messageIds, type)
-		}
-	}
-
-	/** Bulk read messages. Keys can be from different chats & participants */
-	const readMessages = async(keys: WAMessageKey[]) => {
-		const privacySettings = await fetchPrivacySettings()
-		// based on privacy settings, we have to change the read type
-		const readType = privacySettings.readreceipts === 'all' ? 'read' : 'read-self'
-		await sendReceipts(keys, readType)
- 	}
-
-	/** Fetch all the devices we've to send a message to */
-	const getUSyncDevices = async(jids: string[], useCache: boolean, ignoreZeroDevices: boolean) => {
-		const deviceResults: JidWithDevice[] = []
-
-		if(!useCache) {
-			logger.debug('not using cache for devices')
-		}
-
-		const users: BinaryNode[] = []
-		jids = Array.from(new Set(jids))
-		for(let jid of jids) {
-			const user = jidDecode(jid)?.user
-			jid = jidNormalizedUser(jid)
-
-			const devices = userDevicesCache.get<JidWithDevice[]>(user!)
-			if(devices && useCache) {
-				deviceResults.push(...devices)
-
-				logger.trace({ user }, 'using cache for devices')
-			} else {
-				users.push({ tag: 'user', attrs: { jid } })
-			}
-		}
-
-		const iq: BinaryNode = {
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				type: 'get',
-				xmlns: 'usync',
-			},
-			content: [
-				{
-					tag: 'usync',
-					attrs: {
-						sid: generateMessageTag(),
-						mode: 'query',
-						last: 'true',
-						index: '0',
-						context: 'message',
-					},
-					content: [
-						{
-							tag: 'query',
-							attrs: { },
-							content: [
-								{
-									tag: 'devices',
-									attrs: { version: '2' }
-								}
-							]
-						},
-						{ tag: 'list', attrs: { }, content: users }
-					]
-				},
-			],
-		}
-		const result = await query(iq)
-		const extracted = extractDeviceJids(result, authState.creds.me!.id, ignoreZeroDevices)
-		const deviceMap: { [_: string]: JidWithDevice[] } = {}
-
-		for(const item of extracted) {
-			deviceMap[item.user] = deviceMap[item.user] || []
-			deviceMap[item.user].push(item)
-
-			deviceResults.push(item)
-		}
-
-		for(const key in deviceMap) {
-			userDevicesCache.set(key, deviceMap[key])
-		}
-
-		return deviceResults
-	}
-
-	const assertSessions = async(jids: string[], force: boolean) => {
-		let didFetchNewSession = false
-		let jidsRequiringFetch: string[] = []
-		if(force) {
-			jidsRequiringFetch = jids
-		} else {
-			const addrs = jids.map(jid => (
-				signalRepository
-					.jidToSignalProtocolAddress(jid)
-			))
-			const sessions = await authState.keys.get('session', addrs)
-			for(const jid of jids) {
-				const signalId = signalRepository
-					.jidToSignalProtocolAddress(jid)
-				if(!sessions[signalId]) {
-					jidsRequiringFetch.push(jid)
-				}
-			}
-		}
-
-		if(jidsRequiringFetch.length) {
-			logger.debug({ jidsRequiringFetch }, 'fetching sessions')
-			const result = await query({
-				tag: 'iq',
-				attrs: {
-					xmlns: 'encrypt',
-					type: 'get',
-					to: S_WHATSAPP_NET,
-				},
-				content: [
-					{
-						tag: 'key',
-						attrs: { },
-						content: jidsRequiringFetch.map(
-							jid => ({
-								tag: 'user',
-								attrs: { jid },
-							})
-						)
-					}
-				]
-			})
-			await parseAndInjectE2ESessions(result, signalRepository)
-
-			didFetchNewSession = true
-		}
-
-		return didFetchNewSession
-	}
-
-	const createParticipantNodes = async(
-		jids: string[],
-		message: proto.IMessage,
-		extraAttrs?: BinaryNode['attrs']
-	) => {
-		const patched = await patchMessageBeforeSending(message, jids)
-		const bytes = encodeWAMessage(patched)
-
-		let shouldIncludeDeviceIdentity = false
-		const nodes = await Promise.all(
-			jids.map(
-				async jid => {
-					const { type, ciphertext } = await signalRepository
-						.encryptMessage({ jid, data: bytes })
-					if(type === 'pkmsg') {
-						shouldIncludeDeviceIdentity = true
-					}
-
-					const node: BinaryNode = {
-						tag: 'to',
-						attrs: { jid },
-						content: [{
-							tag: 'enc',
-							attrs: {
-								v: '2',
-								type,
-								...extraAttrs || {}
-							},
-							content: ciphertext
-						}]
-					}
-					return node
-				}
-			)
-		)
-		return { nodes, shouldIncludeDeviceIdentity }
-	}
-
-	const relayMessage = async(
-		jid: string,
-		message: proto.IMessage,
-		{ messageId: msgId, participant, additionalAttributes, useUserDevicesCache, cachedGroupMetadata, statusJidList }: MessageRelayOptions
-	) => {
-		const meId = authState.creds.me!.id
-
-		let shouldIncludeDeviceIdentity = false
-
-		const { user, server } = jidDecode(jid)!
-		const statusJid = 'status@broadcast'
-		const isGroup = server === 'g.us'
-		const isStatus = jid === statusJid
-		const isLid = server === 'lid'
-
-		msgId = msgId || generateMessageID()
-		useUserDevicesCache = useUserDevicesCache !== false
-
-		const participants: BinaryNode[] = []
-		const destinationJid = (!isStatus) ? jidEncode(user, isLid ? 'lid' : isGroup ? 'g.us' : 's.whatsapp.net') : statusJid
-		const binaryNodeContent: BinaryNode[] = []
-		const devices: JidWithDevice[] = []
-
-		const meMsg: proto.IMessage = {
-			deviceSentMessage: {
-				destinationJid,
-				message
-			}
-		}
-
-		if(participant) {
-			// when the retry request is not for a group
-			// only send to the specific device that asked for a retry
-			// otherwise the message is sent out to every device that should be a recipient
-			if(!isGroup && !isStatus) {
-				additionalAttributes = { ...additionalAttributes, 'device_fanout': 'false' }
-			}
-
-			const { user, device } = jidDecode(participant.jid)!
-			devices.push({ user, device })
-		}
-
-		await authState.keys.transaction(
-			async() => {
-				const mediaType = getMediaType(message)
-				if(isGroup || isStatus) {
-					const [groupData, senderKeyMap] = await Promise.all([
-						(async() => {
-							let groupData = cachedGroupMetadata ? await cachedGroupMetadata(jid) : undefined
-							if(groupData) {
-								logger.trace({ jid, participants: groupData.participants.length }, 'using cached group metadata')
-							}
-
-							if(!groupData && !isStatus) {
-								groupData = await groupMetadata(jid)
-							}
-
-							return groupData
-						})(),
-						(async() => {
-							if(!participant && !isStatus) {
-								const result = await authState.keys.get('sender-key-memory', [jid])
-								return result[jid] || { }
-							}
-
-							return { }
-						})()
-					])
-
-					if(!participant) {
-						const participantsList = (groupData && !isStatus) ? groupData.participants.map(p => p.id) : []
-						if(isStatus && statusJidList) {
-							participantsList.push(...statusJidList)
-						}
-
-						const additionalDevices = await getUSyncDevices(participantsList, !!useUserDevicesCache, false)
-						devices.push(...additionalDevices)
-					}
-
-					const patched = await patchMessageBeforeSending(message, devices.map(d => jidEncode(d.user, isLid ? 'lid' : 's.whatsapp.net', d.device)))
-					const bytes = encodeWAMessage(patched)
-
-					const { ciphertext, senderKeyDistributionMessage } = await signalRepository.encryptGroupMessage(
-						{
-							group: destinationJid,
-							data: bytes,
-							meId,
-						}
-					)
-
-					const senderKeyJids: string[] = []
-					// ensure a connection is established with every device
-					for(const { user, device } of devices) {
-						const jid = jidEncode(user, isLid ? 'lid' : 's.whatsapp.net', device)
-						if(!senderKeyMap[jid] || !!participant) {
-							senderKeyJids.push(jid)
-							// store that this person has had the sender keys sent to them
-							senderKeyMap[jid] = true
-						}
-					}
-
-					// if there are some participants with whom the session has not been established
-					// if there are, we re-send the senderkey
-					if(senderKeyJids.length) {
-						logger.debug({ senderKeyJids }, 'sending new sender key')
-
-						const senderKeyMsg: proto.IMessage = {
-							senderKeyDistributionMessage: {
-								axolotlSenderKeyDistributionMessage: senderKeyDistributionMessage,
-								groupId: destinationJid
-							}
-						}
-
-						await assertSessions(senderKeyJids, false)
-
-						const result = await createParticipantNodes(senderKeyJids, senderKeyMsg, mediaType ? { mediatype: mediaType } : undefined)
-						shouldIncludeDeviceIdentity = shouldIncludeDeviceIdentity || result.shouldIncludeDeviceIdentity
-
-						participants.push(...result.nodes)
-					}
-
-					binaryNodeContent.push({
-						tag: 'enc',
-						attrs: { v: '2', type: 'skmsg' },
-						content: ciphertext
-					})
-
-					await authState.keys.set({ 'sender-key-memory': { [jid]: senderKeyMap } })
-				} else {
-					const { user: meUser, device: meDevice } = jidDecode(meId)!
-
-					if(!participant) {
-						devices.push({ user })
-						// do not send message to self if the device is 0 (mobile)
-						if(meDevice !== undefined && meDevice !== 0) {
-							devices.push({ user: meUser })
-						}
-
-						const additionalDevices = await getUSyncDevices([ meId, jid ], !!useUserDevicesCache, true)
-						devices.push(...additionalDevices)
-					}
-
-					const allJids: string[] = []
-					const meJids: string[] = []
-					const otherJids: string[] = []
-					for(const { user, device } of devices) {
-						const isMe = user === meUser
-						const jid = jidEncode(isMe && isLid ? authState.creds?.me?.lid!.split(':')[0] || user : user, isLid ? 'lid' : 's.whatsapp.net', device)
-						if(isMe) {
-							meJids.push(jid)
-						} else {
-							otherJids.push(jid)
-						}
-
-						allJids.push(jid)
-					}
-
-					await assertSessions(allJids, false)
-
-					const [
-						{ nodes: meNodes, shouldIncludeDeviceIdentity: s1 },
-						{ nodes: otherNodes, shouldIncludeDeviceIdentity: s2 }
-					] = await Promise.all([
-						createParticipantNodes(meJids, meMsg, mediaType ? { mediatype: mediaType } : undefined),
-						createParticipantNodes(otherJids, message, mediaType ? { mediatype: mediaType } : undefined)
-					])
-					participants.push(...meNodes)
-					participants.push(...otherNodes)
-
-					shouldIncludeDeviceIdentity = shouldIncludeDeviceIdentity || s1 || s2
-				}
-
-				if(participants.length) {
-					binaryNodeContent.push({
-						tag: 'participants',
-						attrs: { },
-						content: participants
-					})
-				}
-
-				const stanza: BinaryNode = {
-					tag: 'message',
-					attrs: {
-						id: msgId!,
-						type: 'text',
-						...(additionalAttributes || {})
-					},
-					content: binaryNodeContent
-				}
-				// if the participant to send to is explicitly specified (generally retry recp)
-				// ensure the message is only sent to that person
-				// if a retry receipt is sent to everyone -- it'll fail decryption for everyone else who received the msg
-				if(participant) {
-					if(isJidGroup(destinationJid)) {
-						stanza.attrs.to = destinationJid
-						stanza.attrs.participant = participant.jid
-					} else if(areJidsSameUser(participant.jid, meId)) {
-						stanza.attrs.to = participant.jid
-						stanza.attrs.recipient = destinationJid
-					} else {
-						stanza.attrs.to = participant.jid
-					}
-				} else {
-					stanza.attrs.to = destinationJid
-				}
-
-				if(shouldIncludeDeviceIdentity) {
-					(stanza.content as BinaryNode[]).push({
-						tag: 'device-identity',
-						attrs: { },
-						content: encodeSignedDeviceIdentity(authState.creds.account!, true)
-					})
-
-					logger.debug({ jid }, 'adding device identity')
-				}
-
-				const buttonType = getButtonType(message)
-				if(buttonType) {
-					(stanza.content as BinaryNode[]).push({
-						tag: 'biz',
-						attrs: { },
-						content: [
-							{
-								tag: buttonType,
-								attrs: getButtonArgs(message),
-							}
-						]
-					})
-
-					logger.debug({ jid }, 'adding business node')
-				}
-
-				logger.debug({ msgId }, `sending message to ${participants.length} devices`)
-
-				await sendNode(stanza)
-			}
-		)
-
-		return msgId
-	}
-
-	const getMediaType = (message: proto.IMessage) => {
-		if(message.imageMessage) {
-			return 'image'
-		} else if(message.videoMessage) {
-			return message.videoMessage.gifPlayback ? 'gif' : 'video'
-		} else if(message.audioMessage) {
-			return message.audioMessage.ptt ? 'ptt' : 'audio'
-		} else if(message.contactMessage) {
-			return 'vcard'
-		} else if(message.documentMessage) {
-			return 'document'
-		} else if(message.contactsArrayMessage) {
-			return 'contact_array'
-		} else if(message.liveLocationMessage) {
-			return 'livelocation'
-		} else if(message.stickerMessage) {
-			return 'sticker'
-		} else if(message.listMessage) {
-			return 'list'
-		} else if(message.listResponseMessage) {
-			return 'list_response'
-		} else if(message.buttonsResponseMessage) {
-			return 'buttons_response'
-		} else if(message.orderMessage) {
-			return 'order'
-		} else if(message.productMessage) {
-			return 'product'
-		} else if(message.interactiveResponseMessage) {
-			return 'native_flow_response'
-		}
-	}
-
-	const getButtonType = (message: proto.IMessage) => {
-		if(message.buttonsMessage) {
-			return 'buttons'
-		} else if(message.buttonsResponseMessage) {
-			return 'buttons_response'
-		} else if(message.interactiveResponseMessage) {
-			return 'interactive_response'
-		} else if(message.listMessage) {
-			return 'list'
-		} else if(message.listResponseMessage) {
-			return 'list_response'
-		}
-	}
-
-	const getButtonArgs = (message: proto.IMessage): BinaryNode['attrs'] => {
-		if(message.templateMessage) {
-			// TODO: Add attributes
-			return {}
-		} else if(message.listMessage) {
-			const type = message.listMessage.listType
-			if(!type) {
-				throw new Boom('Expected list type inside message')
-			}
-
-			return { v: '2', type: ListType[type].toLowerCase() }
-		} else {
-			return {}
-		}
-	}
-
-	const getPrivacyTokens = async(jids: string[]) => {
-		const t = unixTimestampSeconds().toString()
-		const result = await query({
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				type: 'set',
-				xmlns: 'privacy'
-			},
-			content: [
-				{
-					tag: 'tokens',
-					attrs: { },
-					content: jids.map(
-						jid => ({
-							tag: 'token',
-							attrs: {
-								jid: jidNormalizedUser(jid),
-								t,
-								type: 'trusted_contact'
-							}
-						})
-					)
-				}
-			]
-		})
-
-		return result
-	}
-
-	const waUploadToServer = getWAUploadToServer(config, refreshMediaConn)
-
-	const waitForMsgMediaUpdate = bindWaitForEvent(ev, 'messages.media-update')
-
-	return {
-		...sock,
-		getPrivacyTokens,
-		assertSessions,
-		relayMessage,
-		sendReceipt,
-		sendReceipts,
-		getButtonArgs,
-		readMessages,
-		refreshMediaConn,
-	    	waUploadToServer,
-		fetchPrivacySettings,
-		updateMediaMessage: async(message: proto.IWebMessageInfo) => {
-			const content = assertMediaContent(message.message)
-			const mediaKey = content.mediaKey!
-			const meId = authState.creds.me!.id
-			const node = encryptMediaRetryRequest(message.key, mediaKey, meId)
-
-			let error: Error | undefined = undefined
-			await Promise.all(
-				[
-					sendNode(node),
-					waitForMsgMediaUpdate(update => {
-						const result = update.find(c => c.key.id === message.key.id)
-						if(result) {
-							if(result.error) {
-								error = result.error
-							} else {
-								try {
-									const media = decryptMediaRetryData(result.media!, mediaKey, result.key.id!)
-									if(media.result !== proto.MediaRetryNotification.ResultType.SUCCESS) {
-										const resultStr = proto.MediaRetryNotification.ResultType[media.result]
-										throw new Boom(
-											`Media re-upload failed by device (${resultStr})`,
-											{ data: media, statusCode: getStatusCodeForMediaRetry(media.result) || 404 }
-										)
-									}
-
-									content.directPath = media.directPath
-									content.url = getUrlFromDirectPath(content.directPath!)
-
-									logger.debug({ directPath: media.directPath, key: result.key }, 'media update successful')
-								} catch(err) {
-									error = err
-								}
-							}
-
-							return true
-						}
-					})
-				]
-			)
-
-			if(error) {
-				throw error
-			}
-
-			ev.emit('messages.update', [
-				{ key: message.key, update: { message: message.message } }
-			])
-
-			return message
-		},
-		sendMessage: async(
-			jid: string,
-			content: AnyMessageContent,
-			options: MiscMessageGenerationOptions = { }
-		) => {
-			const userJid = authState.creds.me!.id
-			if(
-				typeof content === 'object' &&
-				'disappearingMessagesInChat' in content &&
-				typeof content['disappearingMessagesInChat'] !== 'undefined' &&
-				isJidGroup(jid)
-			) {
-				const { disappearingMessagesInChat } = content
-				const value = typeof disappearingMessagesInChat === 'boolean' ?
-					(disappearingMessagesInChat ? WA_DEFAULT_EPHEMERAL : 0) :
-					disappearingMessagesInChat
-				await groupToggleEphemeral(jid, value)
-			} else {
-				const fullMsg = await generateWAMessage(
-					jid,
-					content,
-					{
-						logger,
-						userJid,
-						getUrlInfo: text => getUrlInfo(
-							text,
-							{
-								thumbnailWidth: linkPreviewImageThumbnailWidth,
-								fetchOpts: {
-									timeout: 3_000,
-									...axiosOptions || { }
-								},
-								logger,
-								uploadImage: generateHighQualityLinkPreview
-									? waUploadToServer
-									: undefined
-							},
-						),
-						upload: waUploadToServer,
-						mediaCache: config.mediaCache,
-						options: config.options,
-						...options,
-					}
-				)
-				const isDeleteMsg = 'delete' in content && !!content.delete
-				const isEditMsg = 'edit' in content && !!content.edit
-				const additionalAttributes: BinaryNodeAttributes = { }
-				// required for delete
-				if(isDeleteMsg) {
-					// if the chat is a group, and I am not the author, then delete the message as an admin
-					if(isJidGroup(content.delete?.remoteJid as string) && !content.delete?.fromMe) {
-						additionalAttributes.edit = '8'
-					} else {
-						additionalAttributes.edit = '7'
-					}
-				} else if(isEditMsg) {
-					additionalAttributes.edit = '1'
-				}
-
-				await relayMessage(jid, fullMsg.message!, { messageId: fullMsg.key.id!, cachedGroupMetadata: options.cachedGroupMetadata, additionalAttributes, statusJidList: options.statusJidList })
-				if(config.emitOwnEvents) {
-					process.nextTick(() => {
-						processingMutex.mutex(() => (
-							upsertMessage(fullMsg, 'append')
-						))
-					})
-				}
-
-				return fullMsg
-			}
-		}
-	}
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Socket/registration.ts b/node_modules/@whiskeysockets/baileys/src/Socket/registration.ts
deleted file mode 100644
index 6562855..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Socket/registration.ts
+++ /dev/null
@@ -1,250 +0,0 @@
-/* eslint-disable camelcase */
-import axios, { AxiosRequestConfig } from 'axios'
-import { MOBILE_REGISTRATION_ENDPOINT, MOBILE_TOKEN, MOBILE_USERAGENT, REGISTRATION_PUBLIC_KEY } from '../Defaults'
-import { KeyPair, SignedKeyPair, SocketConfig } from '../Types'
-import { aesEncryptGCM, Curve, md5 } from '../Utils/crypto'
-import { jidEncode } from '../WABinary'
-import { makeBusinessSocket } from './business'
-
-function urlencode(str: string) {
-	return str.replace(/-/g, '%2d').replace(/_/g, '%5f').replace(/~/g, '%7e')
-}
-
-const validRegistrationOptions = (config: RegistrationOptions) => config?.phoneNumberCountryCode &&
-	config.phoneNumberNationalNumber &&
-	config.phoneNumberMobileCountryCode
-
-export const makeRegistrationSocket = (config: SocketConfig) => {
-	const sock = makeBusinessSocket(config)
-
-	const register = async(code: string) => {
-		if(!validRegistrationOptions(config.auth.creds.registration)) {
-			throw new Error('please specify the registration options')
-		}
-
-		const result = await mobileRegister({ ...sock.authState.creds, ...sock.authState.creds.registration as RegistrationOptions, code }, config.options)
-
-		sock.authState.creds.me = {
-			id: jidEncode(result.login!, 's.whatsapp.net'),
-			name: '~'
-		}
-
-		sock.authState.creds.registered = true
-		sock.ev.emit('creds.update', sock.authState.creds)
-
-		return result
-	}
-
-	const requestRegistrationCode = async(registrationOptions?: RegistrationOptions) => {
-		registrationOptions = registrationOptions || config.auth.creds.registration
-		if(!validRegistrationOptions(registrationOptions)) {
-			throw new Error('Invalid registration options')
-		}
-
-		sock.authState.creds.registration = registrationOptions
-
-		sock.ev.emit('creds.update', sock.authState.creds)
-
-		return mobileRegisterCode({ ...config.auth.creds, ...registrationOptions }, config.options)
-	}
-
-	return {
-		...sock,
-		register,
-		requestRegistrationCode,
-	}
-}
-
-// Backup_token: Base64.getEncoder().encodeToString(Arrays.copyOfRange(Base64.getDecoder().decode(UUID.randomUUID().toString().replace('-','')),0,15))
-
-export interface RegistrationData {
-	registrationId: number
-	signedPreKey: SignedKeyPair
-	noiseKey: KeyPair
-	signedIdentityKey: KeyPair
-	identityId: Buffer
-	phoneId: string
-	deviceId: string
-	backupToken: Buffer
-}
-
-export interface RegistrationOptions {
-	/** your phone number */
-	phoneNumber?: string
-	/** the country code of your phone number */
-	phoneNumberCountryCode: string
-	/** your phone number without country code */
-	phoneNumberNationalNumber: string
-	/** the country code of your mobile network
-	 * @see {@link https://de.wikipedia.org/wiki/Mobile_Country_Code}
-	 */
-	phoneNumberMobileCountryCode: string
-	/** the network code of your mobile network
-	 * @see {@link https://de.wikipedia.org/wiki/Mobile_Network_Code}
-	 */
-	phoneNumberMobileNetworkCode: string
-	/**
-	 * How to send the one time code
-	 */
-	method?: 'sms' | 'voice' | 'captcha'
-	/**
-	 * The captcha code if it was requested
-	 */
-	captcha?: string
-}
-
-export type RegistrationParams = RegistrationData & RegistrationOptions
-
-function convertBufferToUrlHex(buffer: Buffer) {
-	var id = ''
-
-	buffer.forEach((x) => {
-		// encode random identity_id buffer as percentage url encoding
-		id += `%${x.toString(16).padStart(2, '0').toLowerCase()}`
-	})
-
-	return id
-}
-
-export function registrationParams(params: RegistrationParams) {
-	const e_regid = Buffer.alloc(4)
-	e_regid.writeInt32BE(params.registrationId)
-
-	const e_skey_id = Buffer.alloc(3)
-	e_skey_id.writeInt16BE(params.signedPreKey.keyId)
-
-	params.phoneNumberCountryCode = params.phoneNumberCountryCode.replace('+', '').trim()
-	params.phoneNumberNationalNumber = params.phoneNumberNationalNumber.replace(/[/-\s)(]/g, '').trim()
-
-	return {
-		cc: params.phoneNumberCountryCode,
-		in: params.phoneNumberNationalNumber,
-		Rc: '0',
-		lg: 'en',
-		lc: 'GB',
-		mistyped: '6',
-		authkey: Buffer.from(params.noiseKey.public).toString('base64url'),
-		e_regid: e_regid.toString('base64url'),
-		e_keytype: 'BQ',
-		e_ident: Buffer.from(params.signedIdentityKey.public).toString('base64url'),
-		// e_skey_id: e_skey_id.toString('base64url'),
-		e_skey_id: 'AAAA',
-		e_skey_val: Buffer.from(params.signedPreKey.keyPair.public).toString('base64url'),
-		e_skey_sig: Buffer.from(params.signedPreKey.signature).toString('base64url'),
-		fdid: params.phoneId,
-		network_ratio_type: '1',
-		expid: params.deviceId,
-		simnum: '1',
-		hasinrc: '1',
-		pid: Math.floor(Math.random() * 1000).toString(),
-		id: convertBufferToUrlHex(params.identityId),
-		backup_token: convertBufferToUrlHex(params.backupToken),
-		token: md5(Buffer.concat([MOBILE_TOKEN, Buffer.from(params.phoneNumberNationalNumber)])).toString('hex'),
-		fraud_checkpoint_code: params.captcha,
-	}
-}
-
-/**
- * Requests a registration code for the given phone number.
- */
-export function mobileRegisterCode(params: RegistrationParams, fetchOptions?: AxiosRequestConfig) {
-	return mobileRegisterFetch('/code', {
-		params: {
-			...registrationParams(params),
-			mcc: `${params.phoneNumberMobileCountryCode}`.padStart(3, '0'),
-			mnc: `${params.phoneNumberMobileNetworkCode || '001'}`.padStart(3, '0'),
-			sim_mcc: '000',
-			sim_mnc: '000',
-			method: params?.method || 'sms',
-			reason: '',
-			hasav: '1'
-		},
-		...fetchOptions,
-	})
-}
-
-export function mobileRegisterExists(params: RegistrationParams, fetchOptions?: AxiosRequestConfig) {
-	return mobileRegisterFetch('/exist', {
-		params: registrationParams(params),
-		...fetchOptions
-	})
-}
-
-/**
- * Registers the phone number on whatsapp with the received OTP code.
- */
-export async function mobileRegister(params: RegistrationParams & { code: string }, fetchOptions?: AxiosRequestConfig) {
-	//const result = await mobileRegisterFetch(`/reg_onboard_abprop?cc=${params.phoneNumberCountryCode}&in=${params.phoneNumberNationalNumber}&rc=0`)
-
-	return mobileRegisterFetch('/register', {
-		params: { ...registrationParams(params), code: params.code.replace('-', '') },
-		...fetchOptions,
-	})
-}
-
-/**
- * Encrypts the given string as AEAD aes-256-gcm with the public whatsapp key and a random keypair.
- */
-export function mobileRegisterEncrypt(data: string) {
-	const keypair = Curve.generateKeyPair()
-	const key = Curve.sharedKey(keypair.private, REGISTRATION_PUBLIC_KEY)
-
-	const buffer = aesEncryptGCM(Buffer.from(data), new Uint8Array(key), Buffer.alloc(12), Buffer.alloc(0))
-
-	return Buffer.concat([Buffer.from(keypair.public), buffer]).toString('base64url')
-}
-
-export async function mobileRegisterFetch(path: string, opts: AxiosRequestConfig = {}) {
-	let url = `${MOBILE_REGISTRATION_ENDPOINT}${path}`
-
-	if(opts.params) {
-		const parameter = [] as string[]
-
-		for(const param in opts.params) {
-			if(opts.params[param] !== null && opts.params[param] !== undefined) {
-				parameter.push(param + '=' + urlencode(opts.params[param]))
-			}
-		}
-
-		url += `?${parameter.join('&')}`
-		delete opts.params
-	}
-
-	if(!opts.headers) {
-		opts.headers = {}
-	}
-
-	opts.headers['User-Agent'] = MOBILE_USERAGENT
-
-	const response = await axios(url, opts)
-
-	var json = response.data
-
-	if(response.status > 300 || json.reason) {
-		throw json
-	}
-
-	if(json.status && !['ok', 'sent'].includes(json.status)) {
-		throw json
-	}
-
-	return json as ExistsResponse
-}
-
-
-export interface ExistsResponse {
-	status: 'fail' | 'sent'
-	voice_length?: number
-	voice_wait?: number
-	sms_length?: number
-	sms_wait?: number
-	reason?: 'incorrect' | 'missing_param' | 'code_checkpoint'
-	login?: string
-	flash_type?: number
-	ab_hash?: string
-	ab_key?: string
-	exp_cfg?: string
-	lid?: string
-	image_blob?: string
-	audio_blob?: string
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Socket/socket.ts b/node_modules/@whiskeysockets/baileys/src/Socket/socket.ts
deleted file mode 100644
index 823b763..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Socket/socket.ts
+++ /dev/null
@@ -1,777 +0,0 @@
-import { Boom } from '@hapi/boom'
-import { randomBytes } from 'crypto'
-import { URL } from 'url'
-import { promisify } from 'util'
-import { proto } from '../../WAProto'
-import {
-	DEF_CALLBACK_PREFIX,
-	DEF_TAG_PREFIX,
-	INITIAL_PREKEY_COUNT,
-	MIN_PREKEY_COUNT,
-	MOBILE_ENDPOINT,
-	MOBILE_NOISE_HEADER,
-	MOBILE_PORT,
-	NOISE_WA_HEADER
-} from '../Defaults'
-import { DisconnectReason, SocketConfig } from '../Types'
-import {
-	addTransactionCapability,
-	aesEncryptCTR,
-	bindWaitForConnectionUpdate,
-	bytesToCrockford,
-	configureSuccessfulPairing,
-	Curve,
-	derivePairingCodeKey,
-	generateLoginNode,
-	generateMdTagPrefix,
-	generateMobileNode,
-	generateRegistrationNode,
-	getCodeFromWSError,
-	getErrorCodeFromStreamError,
-	getNextPreKeysNode,
-	makeEventBuffer,
-	makeNoiseHandler,
-	printQRIfNecessaryListener,
-	promiseTimeout
-} from '../Utils'
-import {
-	assertNodeErrorFree,
-	BinaryNode,
-	binaryNodeToString,
-	encodeBinaryNode,
-	getBinaryNodeChild,
-	getBinaryNodeChildren,
-	jidEncode,
-	S_WHATSAPP_NET
-} from '../WABinary'
-import { MobileSocketClient, WebSocketClient } from './Client'
-
-/**
- * Connects to WA servers and performs:
- * - simple queries (no retry mechanism, wait for connection establishment)
- * - listen to messages and emit events
- * - query phone connection
- */
-
-export const makeSocket = (config: SocketConfig) => {
-	const {
-		waWebSocketUrl,
-		connectTimeoutMs,
-		logger,
-		keepAliveIntervalMs,
-		browser,
-		auth: authState,
-		printQRInTerminal,
-		defaultQueryTimeoutMs,
-		transactionOpts,
-		qrTimeout,
-		makeSignalRepository,
-	} = config
-
-	let url = typeof waWebSocketUrl === 'string' ? new URL(waWebSocketUrl) : waWebSocketUrl
-
-	config.mobile = config.mobile || url.protocol === 'tcp:'
-
-	if(config.mobile && url.protocol !== 'tcp:') {
-		url = new URL(`tcp://${MOBILE_ENDPOINT}:${MOBILE_PORT}`)
-	}
-
-	if(!config.mobile && url.protocol === 'wss' && authState?.creds?.routingInfo) {
-		url.searchParams.append('ED', authState.creds.routingInfo.toString('base64url'))
-	}
-
-	const ws = config.socket ? config.socket : config.mobile ? new MobileSocketClient(url, config) : new WebSocketClient(url, config)
-
-	ws.connect()
-
-	const ev = makeEventBuffer(logger)
-	/** ephemeral key pair used to encrypt/decrypt communication. Unique for each connection */
-	const ephemeralKeyPair = Curve.generateKeyPair()
-	/** WA noise protocol wrapper */
-	const noise = makeNoiseHandler({
-		keyPair: ephemeralKeyPair,
-		NOISE_HEADER: config.mobile ? MOBILE_NOISE_HEADER : NOISE_WA_HEADER,
-		mobile: config.mobile,
-		logger,
-		routingInfo: authState?.creds?.routingInfo
-	})
-
-	const { creds } = authState
-	// add transaction capability
-	const keys = addTransactionCapability(authState.keys, logger, transactionOpts)
-	const signalRepository = makeSignalRepository({ creds, keys })
-
-	let lastDateRecv: Date
-	let epoch = 1
-	let keepAliveReq: NodeJS.Timeout
-	let qrTimer: NodeJS.Timeout
-	let closed = false
-
-	const uqTagId = generateMdTagPrefix()
-	const generateMessageTag = () => `${uqTagId}${epoch++}`
-
-	const sendPromise = promisify(ws.send)
-	/** send a raw buffer */
-	const sendRawMessage = async(data: Uint8Array | Buffer) => {
-		if(!ws.isOpen) {
-			throw new Boom('Connection Closed', { statusCode: DisconnectReason.connectionClosed })
-		}
-
-		const bytes = noise.encodeFrame(data)
-		await promiseTimeout<void>(
-			connectTimeoutMs,
-			async(resolve, reject) => {
-				try {
-					await sendPromise.call(ws, bytes)
-					resolve()
-				} catch(error) {
-					reject(error)
-				}
-			}
-		)
-	}
-
-	/** send a binary node */
-	const sendNode = (frame: BinaryNode) => {
-		if(logger.level === 'trace') {
-			logger.trace({ xml: binaryNodeToString(frame), msg: 'xml send' })
-		}
-
-		const buff = encodeBinaryNode(frame)
-		return sendRawMessage(buff)
-	}
-
-	/** log & process any unexpected errors */
-	const onUnexpectedError = (err: Error | Boom, msg: string) => {
-		logger.error(
-			{ err },
-			`unexpected error in '${msg}'`
-		)
-	}
-
-	/** await the next incoming message */
-	const awaitNextMessage = async<T>(sendMsg?: Uint8Array) => {
-		if(!ws.isOpen) {
-			throw new Boom('Connection Closed', {
-				statusCode: DisconnectReason.connectionClosed
-			})
-		}
-
-		let onOpen: (data: T) => void
-		let onClose: (err: Error) => void
-
-		const result = promiseTimeout<T>(connectTimeoutMs, (resolve, reject) => {
-			onOpen = resolve
-			onClose = mapWebSocketError(reject)
-			ws.on('frame', onOpen)
-			ws.on('close', onClose)
-			ws.on('error', onClose)
-		})
-			.finally(() => {
-				ws.off('frame', onOpen)
-				ws.off('close', onClose)
-				ws.off('error', onClose)
-			})
-
-		if(sendMsg) {
-			sendRawMessage(sendMsg).catch(onClose!)
-		}
-
-		return result
-	}
-
-	/**
-	 * Wait for a message with a certain tag to be received
-	 * @param msgId the message tag to await
-	 * @param timeoutMs timeout after which the promise will reject
-	 */
-	const waitForMessage = async<T>(msgId: string, timeoutMs = defaultQueryTimeoutMs) => {
-		let onRecv: (json) => void
-		let onErr: (err) => void
-		try {
-			return await promiseTimeout<T>(timeoutMs,
-				(resolve, reject) => {
-					onRecv = resolve
-					onErr = err => {
-						reject(err || new Boom('Connection Closed', { statusCode: DisconnectReason.connectionClosed }))
-					}
-
-					ws.on(`TAG:${msgId}`, onRecv)
-					ws.on('close', onErr) // if the socket closes, you'll never receive the message
-					ws.off('error', onErr)
-				},
-			)
-		} finally {
-			ws.off(`TAG:${msgId}`, onRecv!)
-			ws.off('close', onErr!) // if the socket closes, you'll never receive the message
-			ws.off('error', onErr!)
-		}
-	}
-
-	/** send a query, and wait for its response. auto-generates message ID if not provided */
-	const query = async(node: BinaryNode, timeoutMs?: number) => {
-		if(!node.attrs.id) {
-			node.attrs.id = generateMessageTag()
-		}
-
-		const msgId = node.attrs.id
-		const wait = waitForMessage(msgId, timeoutMs)
-
-		await sendNode(node)
-
-		const result = await (wait as Promise<BinaryNode>)
-		if('tag' in result) {
-			assertNodeErrorFree(result)
-		}
-
-		return result
-	}
-
-	/** connection handshake */
-	const validateConnection = async() => {
-		let helloMsg: proto.IHandshakeMessage = {
-			clientHello: { ephemeral: ephemeralKeyPair.public }
-		}
-		helloMsg = proto.HandshakeMessage.fromObject(helloMsg)
-
-		logger.info({ browser, helloMsg }, 'connected to WA')
-
-		const init = proto.HandshakeMessage.encode(helloMsg).finish()
-
-		const result = await awaitNextMessage<Uint8Array>(init)
-		const handshake = proto.HandshakeMessage.decode(result)
-
-		logger.trace({ handshake }, 'handshake recv from WA')
-
-		const keyEnc = noise.processHandshake(handshake, creds.noiseKey)
-
-		let node: proto.IClientPayload
-		if(config.mobile) {
-			node = generateMobileNode(config)
-		} else if(!creds.me) {
-			node = generateRegistrationNode(creds, config)
-			logger.info({ node }, 'not logged in, attempting registration...')
-		} else {
-			node = generateLoginNode(creds.me.id, config)
-			logger.info({ node }, 'logging in...')
-		}
-
-		const payloadEnc = noise.encrypt(
-			proto.ClientPayload.encode(node).finish()
-		)
-		await sendRawMessage(
-			proto.HandshakeMessage.encode({
-				clientFinish: {
-					static: keyEnc,
-					payload: payloadEnc,
-				},
-			}).finish()
-		)
-		noise.finishInit()
-		startKeepAliveRequest()
-	}
-
-	const getAvailablePreKeysOnServer = async() => {
-		const result = await query({
-			tag: 'iq',
-			attrs: {
-				id: generateMessageTag(),
-				xmlns: 'encrypt',
-				type: 'get',
-				to: S_WHATSAPP_NET
-			},
-			content: [
-				{ tag: 'count', attrs: {} }
-			]
-		})
-		const countChild = getBinaryNodeChild(result, 'count')
-		return +countChild!.attrs.value
-	}
-
-	/** generates and uploads a set of pre-keys to the server */
-	const uploadPreKeys = async(count = INITIAL_PREKEY_COUNT) => {
-		await keys.transaction(
-			async() => {
-				logger.info({ count }, 'uploading pre-keys')
-				const { update, node } = await getNextPreKeysNode({ creds, keys }, count)
-
-				await query(node)
-				ev.emit('creds.update', update)
-
-				logger.info({ count }, 'uploaded pre-keys')
-			}
-		)
-	}
-
-	const uploadPreKeysToServerIfRequired = async() => {
-		const preKeyCount = await getAvailablePreKeysOnServer()
-		logger.info(`${preKeyCount} pre-keys found on server`)
-		if(preKeyCount <= MIN_PREKEY_COUNT) {
-			await uploadPreKeys()
-		}
-	}
-
-	const onMessageReceived = (data: Buffer) => {
-		noise.decodeFrame(data, frame => {
-			// reset ping timeout
-			lastDateRecv = new Date()
-
-			let anyTriggered = false
-
-			anyTriggered = ws.emit('frame', frame)
-			// if it's a binary node
-			if(!(frame instanceof Uint8Array)) {
-				const msgId = frame.attrs.id
-
-				if(logger.level === 'trace') {
-					logger.trace({ xml: binaryNodeToString(frame), msg: 'recv xml' })
-				}
-
-				/* Check if this is a response to a message we sent */
-				anyTriggered = ws.emit(`${DEF_TAG_PREFIX}${msgId}`, frame) || anyTriggered
-				/* Check if this is a response to a message we are expecting */
-				const l0 = frame.tag
-				const l1 = frame.attrs || {}
-				const l2 = Array.isArray(frame.content) ? frame.content[0]?.tag : ''
-
-				Object.keys(l1).forEach(key => {
-					anyTriggered = ws.emit(`${DEF_CALLBACK_PREFIX}${l0},${key}:${l1[key]},${l2}`, frame) || anyTriggered
-					anyTriggered = ws.emit(`${DEF_CALLBACK_PREFIX}${l0},${key}:${l1[key]}`, frame) || anyTriggered
-					anyTriggered = ws.emit(`${DEF_CALLBACK_PREFIX}${l0},${key}`, frame) || anyTriggered
-				})
-				anyTriggered = ws.emit(`${DEF_CALLBACK_PREFIX}${l0},,${l2}`, frame) || anyTriggered
-				anyTriggered = ws.emit(`${DEF_CALLBACK_PREFIX}${l0}`, frame) || anyTriggered
-
-				if(!anyTriggered && logger.level === 'debug') {
-					logger.debug({ unhandled: true, msgId, fromMe: false, frame }, 'communication recv')
-				}
-			}
-		})
-	}
-
-	const end = (error: Error | undefined) => {
-		if(closed) {
-			logger.trace({ trace: error?.stack }, 'connection already closed')
-			return
-		}
-
-		closed = true
-		logger.info(
-			{ trace: error?.stack },
-			error ? 'connection errored' : 'connection closed'
-		)
-
-		clearInterval(keepAliveReq)
-		clearTimeout(qrTimer)
-
-		ws.removeAllListeners('close')
-		ws.removeAllListeners('error')
-		ws.removeAllListeners('open')
-		ws.removeAllListeners('message')
-
-		if(!ws.isClosed && !ws.isClosing) {
-			try {
-				ws.close()
-			} catch{ }
-		}
-
-		ev.emit('connection.update', {
-			connection: 'close',
-			lastDisconnect: {
-				error,
-				date: new Date()
-			}
-		})
-		ev.removeAllListeners('connection.update')
-	}
-
-	const waitForSocketOpen = async() => {
-		if(ws.isOpen) {
-			return
-		}
-
-		if(ws.isClosed || ws.isClosing) {
-			throw new Boom('Connection Closed', { statusCode: DisconnectReason.connectionClosed })
-		}
-
-		let onOpen: () => void
-		let onClose: (err: Error) => void
-		await new Promise((resolve, reject) => {
-			onOpen = () => resolve(undefined)
-			onClose = mapWebSocketError(reject)
-			ws.on('open', onOpen)
-			ws.on('close', onClose)
-			ws.on('error', onClose)
-		})
-			.finally(() => {
-				ws.off('open', onOpen)
-				ws.off('close', onClose)
-				ws.off('error', onClose)
-			})
-	}
-
-	const startKeepAliveRequest = () => (
-		keepAliveReq = setInterval(() => {
-			if(!lastDateRecv) {
-				lastDateRecv = new Date()
-			}
-
-			const diff = Date.now() - lastDateRecv.getTime()
-			/*
-				check if it's been a suspicious amount of time since the server responded with our last seen
-				it could be that the network is down
-			*/
-			if(diff > keepAliveIntervalMs + 5000) {
-				end(new Boom('Connection was lost', { statusCode: DisconnectReason.connectionLost }))
-			} else if(ws.isOpen) {
-				// if its all good, send a keep alive request
-				query(
-					{
-						tag: 'iq',
-						attrs: {
-							id: generateMessageTag(),
-							to: S_WHATSAPP_NET,
-							type: 'get',
-							xmlns: 'w:p',
-						},
-						content: [{ tag: 'ping', attrs: {} }]
-					}
-				)
-					.catch(err => {
-						logger.error({ trace: err.stack }, 'error in sending keep alive')
-					})
-			} else {
-				logger.warn('keep alive called when WS not open')
-			}
-		}, keepAliveIntervalMs)
-	)
-	/** i have no idea why this exists. pls enlighten me */
-	const sendPassiveIq = (tag: 'passive' | 'active') => (
-		query({
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				xmlns: 'passive',
-				type: 'set',
-			},
-			content: [
-				{ tag, attrs: {} }
-			]
-		})
-	)
-
-	/** logout & invalidate connection */
-	const logout = async(msg?: string) => {
-		const jid = authState.creds.me?.id
-		if(jid) {
-			await sendNode({
-				tag: 'iq',
-				attrs: {
-					to: S_WHATSAPP_NET,
-					type: 'set',
-					id: generateMessageTag(),
-					xmlns: 'md'
-				},
-				content: [
-					{
-						tag: 'remove-companion-device',
-						attrs: {
-							jid,
-							reason: 'user_initiated'
-						}
-					}
-				]
-			})
-		}
-
-		end(new Boom(msg || 'Intentional Logout', { statusCode: DisconnectReason.loggedOut }))
-	}
-
-	const requestPairingCode = async(phoneNumber: string): Promise<string> => {
-		authState.creds.pairingCode = bytesToCrockford(randomBytes(5))
-		authState.creds.me = {
-			id: jidEncode(phoneNumber, 's.whatsapp.net'),
-			name: '~'
-		}
-		ev.emit('creds.update', authState.creds)
-		await sendNode({
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				type: 'set',
-				id: generateMessageTag(),
-				xmlns: 'md'
-			},
-			content: [
-				{
-					tag: 'link_code_companion_reg',
-					attrs: {
-						jid: authState.creds.me.id,
-						stage: 'companion_hello',
-						// eslint-disable-next-line camelcase
-						should_show_push_notification: 'true'
-					},
-					content: [
-						{
-							tag: 'link_code_pairing_wrapped_companion_ephemeral_pub',
-							attrs: {},
-							content: await generatePairingKey()
-						},
-						{
-							tag: 'companion_server_auth_key_pub',
-							attrs: {},
-							content: authState.creds.noiseKey.public
-						},
-						{
-							tag: 'companion_platform_id',
-							attrs: {},
-							content: '49' // Chrome
-						},
-						{
-							tag: 'companion_platform_display',
-							attrs: {},
-							content: `${browser[1]} (${browser[0]})`
-						},
-						{
-							tag: 'link_code_pairing_nonce',
-							attrs: {},
-							content: '0'
-						}
-					]
-				}
-			]
-		})
-		return authState.creds.pairingCode
-	}
-
-	async function generatePairingKey() {
-		const salt = randomBytes(32)
-		const randomIv = randomBytes(16)
-		const key = derivePairingCodeKey(authState.creds.pairingCode!, salt)
-		const ciphered = aesEncryptCTR(authState.creds.pairingEphemeralKeyPair.public, key, randomIv)
-		return Buffer.concat([salt, randomIv, ciphered])
-	}
-
-	const sendWAMBuffer = (wamBuffer: Buffer) => {
-		return query({
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				id: generateMessageTag(),
-				xmlns: 'w:stats'
-			},
-			content: [
-				{
-					tag: 'add',
-					attrs: {},
-					content: wamBuffer
-				}
-			]
-		})
-	}
-
-	ws.on('message', onMessageReceived)
-
-	ws.on('open', async() => {
-		try {
-			await validateConnection()
-		} catch(err) {
-			logger.error({ err }, 'error in validating connection')
-			end(err)
-		}
-	})
-	ws.on('error', mapWebSocketError(end))
-	ws.on('close', () => end(new Boom('Connection Terminated', { statusCode: DisconnectReason.connectionClosed })))
-	// the server terminated the connection
-	ws.on('CB:xmlstreamend', () => end(new Boom('Connection Terminated by Server', { statusCode: DisconnectReason.connectionClosed })))
-	// QR gen
-	ws.on('CB:iq,type:set,pair-device', async(stanza: BinaryNode) => {
-		const iq: BinaryNode = {
-			tag: 'iq',
-			attrs: {
-				to: S_WHATSAPP_NET,
-				type: 'result',
-				id: stanza.attrs.id,
-			}
-		}
-		await sendNode(iq)
-
-		const pairDeviceNode = getBinaryNodeChild(stanza, 'pair-device')
-		const refNodes = getBinaryNodeChildren(pairDeviceNode, 'ref')
-		const noiseKeyB64 = Buffer.from(creds.noiseKey.public).toString('base64')
-		const identityKeyB64 = Buffer.from(creds.signedIdentityKey.public).toString('base64')
-		const advB64 = creds.advSecretKey
-
-		let qrMs = qrTimeout || 60_000 // time to let a QR live
-		const genPairQR = () => {
-			if(!ws.isOpen) {
-				return
-			}
-
-			const refNode = refNodes.shift()
-			if(!refNode) {
-				end(new Boom('QR refs attempts ended', { statusCode: DisconnectReason.timedOut }))
-				return
-			}
-
-			const ref = (refNode.content as Buffer).toString('utf-8')
-			const qr = [ref, noiseKeyB64, identityKeyB64, advB64].join(',')
-
-			ev.emit('connection.update', { qr })
-
-			qrTimer = setTimeout(genPairQR, qrMs)
-			qrMs = qrTimeout || 20_000 // shorter subsequent qrs
-		}
-
-		genPairQR()
-	})
-	// device paired for the first time
-	// if device pairs successfully, the server asks to restart the connection
-	ws.on('CB:iq,,pair-success', async(stanza: BinaryNode) => {
-		logger.debug('pair success recv')
-		try {
-			const { reply, creds: updatedCreds } = configureSuccessfulPairing(stanza, creds)
-
-			logger.info(
-				{ me: updatedCreds.me, platform: updatedCreds.platform },
-				'pairing configured successfully, expect to restart the connection...'
-			)
-
-			ev.emit('creds.update', updatedCreds)
-			ev.emit('connection.update', { isNewLogin: true, qr: undefined })
-
-			await sendNode(reply)
-		} catch(error) {
-			logger.info({ trace: error.stack }, 'error in pairing')
-			end(error)
-		}
-	})
-	// login complete
-	ws.on('CB:success', async(node: BinaryNode) => {
-		await uploadPreKeysToServerIfRequired()
-		await sendPassiveIq('active')
-
-		logger.info('opened connection to WA')
-		clearTimeout(qrTimer) // will never happen in all likelyhood -- but just in case WA sends success on first try
-
-		ev.emit('creds.update', { me: { ...authState.creds.me!, lid: node.attrs.lid } })
-
-		ev.emit('connection.update', { connection: 'open' })
-	})
-
-	ws.on('CB:stream:error', (node: BinaryNode) => {
-		logger.error({ node }, 'stream errored out')
-
-		const { reason, statusCode } = getErrorCodeFromStreamError(node)
-
-		end(new Boom(`Stream Errored (${reason})`, { statusCode, data: node }))
-	})
-	// stream fail, possible logout
-	ws.on('CB:failure', (node: BinaryNode) => {
-		const reason = +(node.attrs.reason || 500)
-		end(new Boom('Connection Failure', { statusCode: reason, data: node.attrs }))
-	})
-
-	ws.on('CB:ib,,downgrade_webclient', () => {
-		end(new Boom('Multi-device beta not joined', { statusCode: DisconnectReason.multideviceMismatch }))
-	})
-
-	ws.on('CB:ib,,edge_routing', (node: BinaryNode) => {
-		const edgeRoutingNode = getBinaryNodeChild(node, 'edge_routing')
-		const routingInfo = getBinaryNodeChild(edgeRoutingNode, 'routing_info')
-		if(routingInfo?.content) {
-			authState.creds.routingInfo = Buffer.from(routingInfo?.content as Uint8Array)
-		}
-	})
-
-	let didStartBuffer = false
-	process.nextTick(() => {
-		if(creds.me?.id) {
-			// start buffering important events
-			// if we're logged in
-			ev.buffer()
-			didStartBuffer = true
-		}
-
-		ev.emit('connection.update', { connection: 'connecting', receivedPendingNotifications: false, qr: undefined })
-	})
-
-	// called when all offline notifs are handled
-	ws.on('CB:ib,,offline', (node: BinaryNode) => {
-		const child = getBinaryNodeChild(node, 'offline')
-		const offlineNotifs = +(child?.attrs.count || 0)
-
-		logger.info(`handled ${offlineNotifs} offline messages/notifications`)
-		if(didStartBuffer) {
-			ev.flush()
-			logger.trace('flushed events for initial buffer')
-		}
-
-		ev.emit('connection.update', { receivedPendingNotifications: true })
-	})
-
-	// update credentials when required
-	ev.on('creds.update', update => {
-		const name = update.me?.name
-		// if name has just been received
-		if(creds.me?.name !== name) {
-			logger.debug({ name }, 'updated pushName')
-			sendNode({
-				tag: 'presence',
-				attrs: { name: name! }
-			})
-				.catch(err => {
-					logger.warn({ trace: err.stack }, 'error in sending presence update on name change')
-				})
-		}
-
-		Object.assign(creds, update)
-	})
-
-	if(printQRInTerminal) {
-		printQRIfNecessaryListener(ev, logger)
-	}
-
-	return {
-		type: 'md' as 'md',
-		ws,
-		ev,
-		authState: { creds, keys },
-		signalRepository,
-		get user() {
-			return authState.creds.me
-		},
-		generateMessageTag,
-		query,
-		waitForMessage,
-		waitForSocketOpen,
-		sendRawMessage,
-		sendNode,
-		logout,
-		end,
-		onUnexpectedError,
-		uploadPreKeys,
-		uploadPreKeysToServerIfRequired,
-		requestPairingCode,
-		/** Waits for the connection to WA to reach a state */
-		waitForConnectionUpdate: bindWaitForConnectionUpdate(ev),
-		sendWAMBuffer,
-	}
-}
-
-/**
- * map the websocket error to the right type
- * so it can be retried by the caller
- * */
-function mapWebSocketError(handler: (err: Error) => void) {
-	return (error: Error) => {
-		handler(
-			new Boom(
-				`WebSocket Error (${error?.message})`,
-				{ statusCode: getCodeFromWSError(error), data: error }
-			)
-		)
-	}
-}
-
-export type Socket = ReturnType<typeof makeSocket>
diff --git a/node_modules/@whiskeysockets/baileys/src/Store/index.ts b/node_modules/@whiskeysockets/baileys/src/Store/index.ts
deleted file mode 100644
index 74be5a3..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Store/index.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-import makeCacheManagerAuthState from './make-cache-manager-store'
-import makeInMemoryStore from './make-in-memory-store'
-export { makeInMemoryStore, makeCacheManagerAuthState }
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Store/make-cache-manager-store.ts b/node_modules/@whiskeysockets/baileys/src/Store/make-cache-manager-store.ts
deleted file mode 100644
index c93ccc0..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Store/make-cache-manager-store.ts
+++ /dev/null
@@ -1,100 +0,0 @@
-import { caching, Storage } from 'cache-manager'
-import { proto } from '../../WAProto'
-import { AuthenticationCreds } from '../Types'
-import { BufferJSON, initAuthCreds } from '../Utils'
-import logger from '../Utils/logger'
-
-const makeCacheManagerAuthState = async(store: Storage, sessionKey: string) => {
-	const defaultKey = (file: string): string => `${sessionKey}:${file}`
-
-	const databaseConn = await caching(store)
-
-	const writeData = async(file: string, data: object) => {
-		let ttl: number | undefined = undefined
-		if(file === 'creds') {
-			ttl = 63115200 // 2 years
-		}
-
-		await databaseConn.set(
-			defaultKey(file),
-			JSON.stringify(data, BufferJSON.replacer),
-			ttl
-		)
-	}
-
-	const readData = async(file: string): Promise<AuthenticationCreds | null> => {
-		try {
-			const data = await databaseConn.get(defaultKey(file))
-
-			if(data) {
-				return JSON.parse(data as string, BufferJSON.reviver)
-			}
-
-			return null
-		} catch(error) {
-			logger.error(error)
-			return null
-		}
-	}
-
-	const removeData = async(file: string) => {
-		try {
-			return await databaseConn.del(defaultKey(file))
-		} catch{
-			logger.error(`Error removing ${file} from session ${sessionKey}`)
-		}
-	}
-
-	const clearState = async() => {
-		try {
-			const result = await databaseConn.store.keys(`${sessionKey}*`)
-			await Promise.all(
-				result.map(async(key) => await databaseConn.del(key))
-			)
-		} catch(err) {
-		}
-	}
-
-	const creds: AuthenticationCreds = (await readData('creds')) || initAuthCreds()
-
-	return {
-		clearState,
-		saveCreds: () => writeData('creds', creds),
-		state: {
-			creds,
-			keys: {
-				get: async(type: string, ids: string[]) => {
-					const data = {}
-					await Promise.all(
-						ids.map(async(id) => {
-							let value: proto.Message.AppStateSyncKeyData | AuthenticationCreds | null =
-                                await readData(`${type}-${id}`)
-							if(type === 'app-state-sync-key' && value) {
-								value = proto.Message.AppStateSyncKeyData.fromObject(value)
-							}
-
-							data[id] = value
-						})
-					)
-
-					return data
-				},
-				set: async(data) => {
-					// eslint-disable-next-line @typescript-eslint/no-explicit-any
-					const tasks: Promise<any>[] = []
-					for(const category in data) {
-						for(const id in data[category]) {
-							const value = data[category][id]
-							const key = `${category}-${id}`
-							tasks.push(value ? writeData(key, value) : removeData(key))
-						}
-					}
-
-					await Promise.all(tasks)
-				},
-			}
-		}
-	}
-}
-
-export default makeCacheManagerAuthState
diff --git a/node_modules/@whiskeysockets/baileys/src/Store/make-in-memory-store.ts b/node_modules/@whiskeysockets/baileys/src/Store/make-in-memory-store.ts
deleted file mode 100644
index 165fd2b..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Store/make-in-memory-store.ts
+++ /dev/null
@@ -1,475 +0,0 @@
-import type KeyedDB from '@adiwajshing/keyed-db'
-import type { Comparable } from '@adiwajshing/keyed-db/lib/Types'
-import type { Logger } from 'pino'
-import { proto } from '../../WAProto'
-import { DEFAULT_CONNECTION_CONFIG } from '../Defaults'
-import type makeMDSocket from '../Socket'
-import type { BaileysEventEmitter, Chat, ConnectionState, Contact, GroupMetadata, PresenceData, WAMessage, WAMessageCursor, WAMessageKey } from '../Types'
-import { Label } from '../Types/Label'
-import { LabelAssociation, LabelAssociationType, MessageLabelAssociation } from '../Types/LabelAssociation'
-import { md5, toNumber, updateMessageWithReaction, updateMessageWithReceipt } from '../Utils'
-import { jidDecode, jidNormalizedUser } from '../WABinary'
-import makeOrderedDictionary from './make-ordered-dictionary'
-import { ObjectRepository } from './object-repository'
-
-type WASocket = ReturnType<typeof makeMDSocket>
-
-export const waChatKey = (pin: boolean) => ({
-	key: (c: Chat) => (pin ? (c.pinned ? '1' : '0') : '') + (c.archived ? '0' : '1') + (c.conversationTimestamp ? c.conversationTimestamp.toString(16).padStart(8, '0') : '') + c.id,
-	compare: (k1: string, k2: string) => k2.localeCompare(k1)
-})
-
-export const waMessageID = (m: WAMessage) => m.key.id || ''
-
-export const waLabelAssociationKey: Comparable<LabelAssociation, string> = {
-	key: (la: LabelAssociation) => (la.type === LabelAssociationType.Chat ? la.chatId + la.labelId : la.chatId + la.messageId + la.labelId),
-	compare: (k1: string, k2: string) => k2.localeCompare(k1)
-}
-
-export type BaileysInMemoryStoreConfig = {
-	chatKey?: Comparable<Chat, string>
-	labelAssociationKey?: Comparable<LabelAssociation, string>
-	logger?: Logger
-	socket?: WASocket
-}
-
-const makeMessagesDictionary = () => makeOrderedDictionary(waMessageID)
-
-export default (config: BaileysInMemoryStoreConfig) => {
-	const socket = config.socket
-	const chatKey = config.chatKey || waChatKey(true)
-	const labelAssociationKey = config.labelAssociationKey || waLabelAssociationKey
-	const logger: Logger = config.logger || DEFAULT_CONNECTION_CONFIG.logger.child({ stream: 'in-mem-store' })
-	const KeyedDB = require('@adiwajshing/keyed-db').default
-
-	const chats = new KeyedDB(chatKey, c => c.id) as KeyedDB<Chat, string>
-	const messages: { [_: string]: ReturnType<typeof makeMessagesDictionary> } = {}
-	const contacts: { [_: string]: Contact } = {}
-	const groupMetadata: { [_: string]: GroupMetadata } = {}
-	const presences: { [id: string]: { [participant: string]: PresenceData } } = {}
-	const state: ConnectionState = { connection: 'close' }
-	const labels = new ObjectRepository<Label>()
-	const labelAssociations = new KeyedDB(labelAssociationKey, labelAssociationKey.key) as KeyedDB<LabelAssociation, string>
-
-	const assertMessageList = (jid: string) => {
-		if(!messages[jid]) {
-			messages[jid] = makeMessagesDictionary()
-		}
-
-		return messages[jid]
-	}
-
-	const contactsUpsert = (newContacts: Contact[]) => {
-		const oldContacts = new Set(Object.keys(contacts))
-		for(const contact of newContacts) {
-			oldContacts.delete(contact.id)
-			contacts[contact.id] = Object.assign(
-				contacts[contact.id] || {},
-				contact
-			)
-		}
-
-		return oldContacts
-	}
-
-	const labelsUpsert = (newLabels: Label[]) => {
-		for(const label of newLabels) {
-			labels.upsertById(label.id, label)
-		}
-	}
-
-	/**
-	 * binds to a BaileysEventEmitter.
-	 * It listens to all events and constructs a state that you can query accurate data from.
-	 * Eg. can use the store to fetch chats, contacts, messages etc.
-	 * @param ev typically the event emitter from the socket connection
-	 */
-	const bind = (ev: BaileysEventEmitter) => {
-		ev.on('connection.update', update => {
-			Object.assign(state, update)
-		})
-
-		ev.on('messaging-history.set', ({
-			chats: newChats,
-			contacts: newContacts,
-			messages: newMessages,
-			isLatest
-		}) => {
-			if(isLatest) {
-				chats.clear()
-
-				for(const id in messages) {
-					delete messages[id]
-				}
-			}
-
-			const chatsAdded = chats.insertIfAbsent(...newChats).length
-			logger.debug({ chatsAdded }, 'synced chats')
-
-			const oldContacts = contactsUpsert(newContacts)
-			if(isLatest) {
-				for(const jid of oldContacts) {
-					delete contacts[jid]
-				}
-			}
-
-			logger.debug({ deletedContacts: isLatest ? oldContacts.size : 0, newContacts }, 'synced contacts')
-
-			for(const msg of newMessages) {
-				const jid = msg.key.remoteJid!
-				const list = assertMessageList(jid)
-				list.upsert(msg, 'prepend')
-			}
-
-			logger.debug({ messages: newMessages.length }, 'synced messages')
-		})
-
-		ev.on('contacts.upsert', contacts => {
-			contactsUpsert(contacts)
-		})
-
-		ev.on('contacts.update', async updates => {
-			for(const update of updates) {
-				let contact: Contact
-				if(contacts[update.id!]) {
-					contact = contacts[update.id!]
-				} else {
-					const contactHashes = await Promise.all(Object.keys(contacts).map(async contactId => {
-						const { user } = jidDecode(contactId)!
-						return [contactId, (await md5(Buffer.from(user + 'WA_ADD_NOTIF', 'utf8'))).toString('base64').slice(0, 3)]
-					}))
-					contact = contacts[contactHashes.find(([, b]) => b === update.id)?.[0] || ''] // find contact by attrs.hash, when user is not saved as a contact
-				}
-
-				if(contact) {
-					if(update.imgUrl === 'changed') {
-						contact.imgUrl = socket ? await socket?.profilePictureUrl(contact.id) : undefined
-					} else if(update.imgUrl === 'removed') {
-						delete contact.imgUrl
-					}
-				} else {
-					return logger.debug({ update }, 'got update for non-existant contact')
-				}
-
-				Object.assign(contacts[contact.id], contact)
-			}
-		})
-		ev.on('chats.upsert', newChats => {
-			chats.upsert(...newChats)
-		})
-		ev.on('chats.update', updates => {
-			for(let update of updates) {
-				const result = chats.update(update.id!, chat => {
-					if(update.unreadCount! > 0) {
-						update = { ...update }
-						update.unreadCount = (chat.unreadCount || 0) + update.unreadCount!
-					}
-
-					Object.assign(chat, update)
-				})
-				if(!result) {
-					logger.debug({ update }, 'got update for non-existant chat')
-				}
-			}
-		})
-
-		ev.on('labels.edit', (label: Label) => {
-			if(label.deleted) {
-				return labels.deleteById(label.id)
-			}
-
-			// WhatsApp can store only up to 20 labels
-			if(labels.count() < 20) {
-				return labels.upsertById(label.id, label)
-			}
-
-			logger.error('Labels count exceed')
-		})
-
-		ev.on('labels.association', ({ type, association }) => {
-			switch (type) {
-			case 'add':
-				labelAssociations.upsert(association)
-				break
-			case 'remove':
-				labelAssociations.delete(association)
-				break
-			default:
-				console.error(`unknown operation type [${type}]`)
-			}
-		})
-
-		ev.on('presence.update', ({ id, presences: update }) => {
-			presences[id] = presences[id] || {}
-			Object.assign(presences[id], update)
-		})
-		ev.on('chats.delete', deletions => {
-			for(const item of deletions) {
-				if(chats.get(item)) {
-					chats.deleteById(item)
-				}
-			}
-		})
-		ev.on('messages.upsert', ({ messages: newMessages, type }) => {
-			switch (type) {
-			case 'append':
-			case 'notify':
-				for(const msg of newMessages) {
-					const jid = jidNormalizedUser(msg.key.remoteJid!)
-					const list = assertMessageList(jid)
-					list.upsert(msg, 'append')
-
-					if(type === 'notify') {
-						if(!chats.get(jid)) {
-							ev.emit('chats.upsert', [
-								{
-									id: jid,
-									conversationTimestamp: toNumber(msg.messageTimestamp),
-									unreadCount: 1
-								}
-							])
-						}
-					}
-				}
-
-				break
-			}
-		})
-		ev.on('messages.update', updates => {
-			for(const { update, key } of updates) {
-				const list = assertMessageList(jidNormalizedUser(key.remoteJid!))
-				if(update?.status) {
-					const listStatus = list.get(key.id!)?.status
-					if(listStatus && update?.status <= listStatus) {
-						logger.debug({ update, storedStatus: listStatus }, 'status stored newer then update')
-						delete update.status
-						logger.debug({ update }, 'new update object')
-					}
-				}
-
-				const result = list.updateAssign(key.id!, update)
-				if(!result) {
-					logger.debug({ update }, 'got update for non-existent message')
-				}
-			}
-		})
-		ev.on('messages.delete', item => {
-			if('all' in item) {
-				const list = messages[item.jid]
-				list?.clear()
-			} else {
-				const jid = item.keys[0].remoteJid!
-				const list = messages[jid]
-				if(list) {
-					const idSet = new Set(item.keys.map(k => k.id))
-					list.filter(m => !idSet.has(m.key.id))
-				}
-			}
-		})
-
-		ev.on('groups.update', updates => {
-			for(const update of updates) {
-				const id = update.id!
-				if(groupMetadata[id]) {
-					Object.assign(groupMetadata[id], update)
-				} else {
-					logger.debug({ update }, 'got update for non-existant group metadata')
-				}
-			}
-		})
-
-		ev.on('group-participants.update', ({ id, participants, action }) => {
-			const metadata = groupMetadata[id]
-			if(metadata) {
-				switch (action) {
-				case 'add':
-					metadata.participants.push(...participants.map(id => ({ id, isAdmin: false, isSuperAdmin: false })))
-					break
-				case 'demote':
-				case 'promote':
-					for(const participant of metadata.participants) {
-						if(participants.includes(participant.id)) {
-							participant.isAdmin = action === 'promote'
-						}
-					}
-
-					break
-				case 'remove':
-					metadata.participants = metadata.participants.filter(p => !participants.includes(p.id))
-					break
-				}
-			}
-		})
-
-		ev.on('message-receipt.update', updates => {
-			for(const { key, receipt } of updates) {
-				const obj = messages[key.remoteJid!]
-				const msg = obj?.get(key.id!)
-				if(msg) {
-					updateMessageWithReceipt(msg, receipt)
-				}
-			}
-		})
-
-		ev.on('messages.reaction', (reactions) => {
-			for(const { key, reaction } of reactions) {
-				const obj = messages[key.remoteJid!]
-				const msg = obj?.get(key.id!)
-				if(msg) {
-					updateMessageWithReaction(msg, reaction)
-				}
-			}
-		})
-	}
-
-	const toJSON = () => ({
-		chats,
-		contacts,
-		messages,
-		labels,
-		labelAssociations
-	})
-
-	const fromJSON = (json: {chats: Chat[], contacts: { [id: string]: Contact }, messages: { [id: string]: WAMessage[] }, labels: { [labelId: string]: Label }, labelAssociations: LabelAssociation[]}) => {
-		chats.upsert(...json.chats)
-		labelAssociations.upsert(...json.labelAssociations || [])
-		contactsUpsert(Object.values(json.contacts))
-		labelsUpsert(Object.values(json.labels || {}))
-		for(const jid in json.messages) {
-			const list = assertMessageList(jid)
-			for(const msg of json.messages[jid]) {
-				list.upsert(proto.WebMessageInfo.fromObject(msg), 'append')
-			}
-		}
-	}
-
-
-	return {
-		chats,
-		contacts,
-		messages,
-		groupMetadata,
-		state,
-		presences,
-		labels,
-		labelAssociations,
-		bind,
-		/** loads messages from the store, if not found -- uses the legacy connection */
-		loadMessages: async(jid: string, count: number, cursor: WAMessageCursor) => {
-			const list = assertMessageList(jid)
-			const mode = !cursor || 'before' in cursor ? 'before' : 'after'
-			const cursorKey = !!cursor ? ('before' in cursor ? cursor.before : cursor.after) : undefined
-			const cursorValue = cursorKey ? list.get(cursorKey.id!) : undefined
-
-			let messages: WAMessage[]
-			if(list && mode === 'before' && (!cursorKey || cursorValue)) {
-				if(cursorValue) {
-					const msgIdx = list.array.findIndex(m => m.key.id === cursorKey?.id)
-					messages = list.array.slice(0, msgIdx)
-				} else {
-					messages = list.array
-				}
-
-				const diff = count - messages.length
-				if(diff < 0) {
-					messages = messages.slice(-count) // get the last X messages
-				}
-			} else {
-				messages = []
-			}
-
-			return messages
-		},
-		/**
-		 * Get all available labels for profile
-		 *
-		 * Keep in mind that the list is formed from predefined tags and tags
-		 * that were "caught" during their editing.
-		 */
-		getLabels: () => {
-			return labels
-		},
-
-		/**
-		 * Get labels for chat
-		 *
-		 * @returns Label IDs
-		 **/
-		getChatLabels: (chatId: string) => {
-			return labelAssociations.filter((la) => la.chatId === chatId).all()
-		},
-
-		/**
-		 * Get labels for message
-		 *
-		 * @returns Label IDs
-		 **/
-		getMessageLabels: (messageId: string) => {
-			const associations = labelAssociations
-				.filter((la: MessageLabelAssociation) => la.messageId === messageId)
-				.all()
-
-			return associations.map(({ labelId }) => labelId)
-
-		},
-		loadMessage: async(jid: string, id: string) => messages[jid]?.get(id),
-		mostRecentMessage: async(jid: string) => {
-			const message: WAMessage | undefined = messages[jid]?.array.slice(-1)[0]
-			return message
-		},
-		fetchImageUrl: async(jid: string, sock: WASocket | undefined) => {
-			const contact = contacts[jid]
-			if(!contact) {
-				return sock?.profilePictureUrl(jid)
-			}
-
-			if(typeof contact.imgUrl === 'undefined') {
-				contact.imgUrl = await sock?.profilePictureUrl(jid)
-			}
-
-			return contact.imgUrl
-		},
-		fetchGroupMetadata: async(jid: string, sock: WASocket | undefined) => {
-			if(!groupMetadata[jid]) {
-				const metadata = await sock?.groupMetadata(jid)
-				if(metadata) {
-					groupMetadata[jid] = metadata
-				}
-			}
-
-			return groupMetadata[jid]
-		},
-		// fetchBroadcastListInfo: async(jid: string, sock: WASocket | undefined) => {
-		// 	if(!groupMetadata[jid]) {
-		// 		const metadata = await sock?.getBroadcastListInfo(jid)
-		// 		if(metadata) {
-		// 			groupMetadata[jid] = metadata
-		// 		}
-		// 	}
-
-		// 	return groupMetadata[jid]
-		// },
-		fetchMessageReceipts: async({ remoteJid, id }: WAMessageKey) => {
-			const list = messages[remoteJid!]
-			const msg = list?.get(id!)
-			return msg?.userReceipt
-		},
-		toJSON,
-		fromJSON,
-		writeToFile: (path: string) => {
-			// require fs here so that in case "fs" is not available -- the app does not crash
-			const { writeFileSync } = require('fs')
-			writeFileSync(path, JSON.stringify(toJSON()))
-		},
-		readFromFile: (path: string) => {
-			// require fs here so that in case "fs" is not available -- the app does not crash
-			const { readFileSync, existsSync } = require('fs')
-			if(existsSync(path)) {
-				logger.debug({ path }, 'reading from file')
-				const jsonStr = readFileSync(path, { encoding: 'utf-8' })
-				const json = JSON.parse(jsonStr)
-				fromJSON(json)
-			}
-		}
-	}
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Store/make-ordered-dictionary.ts b/node_modules/@whiskeysockets/baileys/src/Store/make-ordered-dictionary.ts
deleted file mode 100644
index 83b8f51..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Store/make-ordered-dictionary.ts
+++ /dev/null
@@ -1,86 +0,0 @@
-function makeOrderedDictionary<T>(idGetter: (item: T) => string) {
-	const array: T[] = []
-	const dict: { [_: string]: T } = { }
-
-	const get = (id: string): T | undefined => dict[id]
-
-	const update = (item: T) => {
-		const id = idGetter(item)
-		const idx = array.findIndex(i => idGetter(i) === id)
-		if(idx >= 0) {
-			array[idx] = item
-			dict[id] = item
-		}
-
-		return false
-	}
-
-	const upsert = (item: T, mode: 'append' | 'prepend') => {
-		const id = idGetter(item)
-		if(get(id)) {
-			update(item)
-		} else {
-			if(mode === 'append') {
-				array.push(item)
-			} else {
-				array.splice(0, 0, item)
-			}
-
-			dict[id] = item
-		}
-	}
-
-	const remove = (item: T) => {
-		const id = idGetter(item)
-		const idx = array.findIndex(i => idGetter(i) === id)
-		if(idx >= 0) {
-			array.splice(idx, 1)
-			delete dict[id]
-			return true
-		}
-
-		return false
-	}
-
-	return {
-		array,
-		get,
-		upsert,
-		update,
-		remove,
-		updateAssign: (id: string, update: Partial<T>) => {
-			const item = get(id)
-			if(item) {
-				Object.assign(item, update)
-				delete dict[id]
-				dict[idGetter(item)] = item
-				return true
-			}
-
-			return false
-		},
-		clear: () => {
-			array.splice(0, array.length)
-			Object.keys(dict).forEach(key => {
-				delete dict[key]
-			})
-		},
-		filter: (contain: (item: T) => boolean) => {
-			let i = 0
-			while(i < array.length) {
-				if(!contain(array[i])) {
-					delete dict[idGetter(array[i])]
-					array.splice(i, 1)
-				} else {
-					i += 1
-				}
-			}
-		},
-		toJSON: () => array,
-		fromJSON: (newItems: T[]) => {
-			array.splice(0, array.length, ...newItems)
-		}
-	}
-}
-
-export default makeOrderedDictionary
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Store/object-repository.ts b/node_modules/@whiskeysockets/baileys/src/Store/object-repository.ts
deleted file mode 100644
index adf2924..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Store/object-repository.ts
+++ /dev/null
@@ -1,32 +0,0 @@
-export class ObjectRepository<T extends object> {
-	readonly entityMap: Map<string, T>
-
-	constructor(entities: Record<string, T> = {}) {
-		this.entityMap = new Map(Object.entries(entities))
-	}
-
-	findById(id: string) {
-		return this.entityMap.get(id)
-	}
-
-	findAll() {
-		return Array.from(this.entityMap.values())
-	}
-
-	upsertById(id: string, entity: T) {
-		return this.entityMap.set(id, { ...entity })
-	}
-
-	deleteById(id: string) {
-		return this.entityMap.delete(id)
-	}
-
-	count() {
-		return this.entityMap.size
-	}
-
-	toJSON() {
-		return this.findAll()
-	}
-
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Tests/test.app-state-sync.ts b/node_modules/@whiskeysockets/baileys/src/Tests/test.app-state-sync.ts
deleted file mode 100644
index 14f925e..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Tests/test.app-state-sync.ts
+++ /dev/null
@@ -1,207 +0,0 @@
-import { AccountSettings, ChatMutation, Contact, InitialAppStateSyncOptions } from '../Types'
-import { unixTimestampSeconds } from '../Utils'
-import { processSyncAction } from '../Utils/chat-utils'
-import logger from '../Utils/logger'
-
-describe('App State Sync Tests', () => {
-
-	const me: Contact = { id: randomJid() }
-	// case when initial sync is off
-	it('should return archive=false event', () => {
-		const jid = randomJid()
-		const index = ['archive', jid]
-
-		const CASES: ChatMutation[][] = [
-			[
-				{
-					index,
-					syncAction: {
-						value: {
-							archiveChatAction: {
-								archived: false,
-								messageRange: {
-									lastMessageTimestamp: unixTimestampSeconds()
-								}
-							}
-						}
-					}
-				}
-			],
-			[
-				{
-					index,
-					syncAction: {
-						value: {
-							archiveChatAction: {
-								archived: true,
-								messageRange: {
-									lastMessageTimestamp: unixTimestampSeconds()
-								}
-							}
-						}
-					}
-				},
-				{
-					index,
-					syncAction: {
-						value: {
-							archiveChatAction: {
-								archived: false,
-								messageRange: {
-									lastMessageTimestamp: unixTimestampSeconds()
-								}
-							}
-						}
-					}
-				}
-			]
-		]
-
-		for(const mutations of CASES) {
-			const events = processSyncAction(mutations, me, undefined, logger)
-			expect(events['chats.update']).toHaveLength(1)
-			const event = events['chats.update']?.[0]
-			expect(event.archive).toEqual(false)
-		}
-	})
-	// case when initial sync is on
-	// and unarchiveChats = true
-	it('should not fire any archive event', () => {
-		const jid = randomJid()
-		const index = ['archive', jid]
-		const now = unixTimestampSeconds()
-
-		const CASES: ChatMutation[][] = [
-			[
-				{
-					index,
-					syncAction: {
-						value: {
-							archiveChatAction: {
-								archived: true,
-								messageRange: {
-									lastMessageTimestamp: now - 1
-								}
-							}
-						}
-					}
-				}
-			],
-			[
-				{
-					index,
-					syncAction: {
-						value: {
-							archiveChatAction: {
-								archived: false,
-								messageRange: {
-									lastMessageTimestamp: now + 10
-								}
-							}
-						}
-					}
-				}
-			],
-			[
-				{
-					index,
-					syncAction: {
-						value: {
-							archiveChatAction: {
-								archived: true,
-								messageRange: {
-									lastMessageTimestamp: now + 10
-								}
-							}
-						}
-					}
-				},
-				{
-					index,
-					syncAction: {
-						value: {
-							archiveChatAction: {
-								archived: false,
-								messageRange: {
-									lastMessageTimestamp: now + 11
-								}
-							}
-						}
-					}
-				}
-			],
-		]
-
-		const ctx: InitialAppStateSyncOptions = {
-			recvChats: {
-				[jid]: { lastMsgRecvTimestamp: now }
-			},
-			accountSettings: { unarchiveChats: true }
-		}
-
-		for(const mutations of CASES) {
-			const events = processSyncActions(mutations, me, ctx, logger)
-			expect(events['chats.update']?.length).toBeFalsy()
-		}
-	})
-
-	// case when initial sync is on
-	// with unarchiveChats = true & unarchiveChats = false
-	it('should fire archive=true events', () => {
-		const jid = randomJid()
-		const index = ['archive', jid]
-		const now = unixTimestampSeconds()
-
-		const CASES: { settings: AccountSettings, mutations: ChatMutation[] }[] = [
-			{
-				settings: { unarchiveChats: true },
-				mutations: [
-					{
-						index,
-						syncAction: {
-							value: {
-								archiveChatAction: {
-									archived: true,
-									messageRange: {
-										lastMessageTimestamp: now
-									}
-								}
-							}
-						}
-					}
-				],
-			},
-			{
-				settings: { unarchiveChats: false },
-				mutations: [
-					{
-						index,
-						syncAction: {
-							value: {
-								archiveChatAction: {
-									archived: true,
-									messageRange: {
-										lastMessageTimestamp: now - 10
-									}
-								}
-							}
-						}
-					}
-				],
-			}
-		]
-
-		for(const { mutations, settings } of CASES) {
-			const ctx: InitialAppStateSyncOptions = {
-				recvChats: {
-					[jid]: { lastMsgRecvTimestamp: now }
-				},
-				accountSettings: settings
-			}
-			const events = processSyncActions(mutations, me, ctx, logger)
-			expect(events['chats.update']).toHaveLength(1)
-			const event = events['chats.update']?.[0]
-			expect(event.archive).toEqual(true)
-		}
-	})
-})
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Tests/test.event-buffer.ts b/node_modules/@whiskeysockets/baileys/src/Tests/test.event-buffer.ts
deleted file mode 100644
index e2453e1..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Tests/test.event-buffer.ts
+++ /dev/null
@@ -1,319 +0,0 @@
-import { proto } from '../../WAProto'
-import { Chat, WAMessageKey, WAMessageStatus, WAMessageStubType, WAMessageUpdate } from '../Types'
-import { delay, generateMessageID, makeEventBuffer, toNumber, unixTimestampSeconds } from '../Utils'
-import logger from '../Utils/logger'
-import { randomJid } from './utils'
-
-describe('Event Buffer Tests', () => {
-
-	let ev: ReturnType<typeof makeEventBuffer>
-	beforeEach(() => {
-		const _logger = logger.child({ })
-		_logger.level = 'trace'
-		ev = makeEventBuffer(_logger)
-	})
-
-	it('should buffer a chat upsert & update event', async() => {
-		const chatId = randomJid()
-
-		const chats: Chat[] = []
-
-		ev.on('chats.upsert', c => chats.push(...c))
-		ev.on('chats.update', () => fail('should not emit update event'))
-
-		ev.buffer()
-		await Promise.all([
-			(async() => {
-				ev.buffer()
-				await delay(100)
-				ev.emit('chats.upsert', [{ id: chatId, conversationTimestamp: 123, unreadCount: 1 }])
-				const flushed = ev.flush()
-				expect(flushed).toBeFalsy()
-			})(),
-			(async() => {
-				ev.buffer()
-				await delay(200)
-				ev.emit('chats.update', [{ id: chatId, conversationTimestamp: 124, unreadCount: 1 }])
-				const flushed = ev.flush()
-				expect(flushed).toBeFalsy()
-			})()
-		])
-
-		const flushed = ev.flush()
-		expect(flushed).toBeTruthy()
-
-		expect(chats).toHaveLength(1)
-		expect(chats[0].conversationTimestamp).toEqual(124)
-		expect(chats[0].unreadCount).toEqual(2)
-	})
-
-	it('should overwrite a chats.delete event', async() => {
-		const chatId = randomJid()
-		const chats: Partial<Chat>[] = []
-
-		ev.on('chats.update', c => chats.push(...c))
-		ev.on('chats.delete', () => fail('not should have emitted'))
-
-		ev.buffer()
-
-		ev.emit('chats.update', [{ id: chatId, conversationTimestamp: 123, unreadCount: 1 }])
-		ev.emit('chats.delete', [chatId])
-		ev.emit('chats.update', [{ id: chatId, conversationTimestamp: 124, unreadCount: 1 }])
-
-		ev.flush()
-
-		expect(chats).toHaveLength(1)
-	})
-
-	it('should overwrite a chats.update event', async() => {
-		const chatId = randomJid()
-		const chatsDeleted: string[] = []
-
-		ev.on('chats.delete', c => chatsDeleted.push(...c))
-		ev.on('chats.update', () => fail('not should have emitted'))
-
-		ev.buffer()
-
-		ev.emit('chats.update', [{ id: chatId, conversationTimestamp: 123, unreadCount: 1 }])
-		ev.emit('chats.delete', [chatId])
-
-		ev.flush()
-
-		expect(chatsDeleted).toHaveLength(1)
-	})
-
-	it('should release a conditional update at the right time', async() => {
-		const chatId = randomJid()
-		const chatId2 = randomJid()
-		const chatsUpserted: Chat[] = []
-		const chatsSynced: Chat[] = []
-
-		ev.on('chats.upsert', c => chatsUpserted.push(...c))
-		ev.on('messaging-history.set', c => chatsSynced.push(...c.chats))
-		ev.on('chats.update', () => fail('not should have emitted'))
-
-		ev.buffer()
-		ev.emit('chats.update', [{
-			id: chatId,
-			archived: true,
-			conditional(buff) {
-				if(buff.chatUpserts[chatId]) {
-					return true
-				}
-			}
-		}])
-		ev.emit('chats.update', [{
-			id: chatId2,
-			archived: true,
-			conditional(buff) {
-				if(buff.historySets.chats[chatId2]) {
-					return true
-				}
-			}
-		}])
-
-		ev.flush()
-
-		ev.buffer()
-		ev.emit('chats.upsert', [{
-			id: chatId,
-			conversationTimestamp: 123,
-			unreadCount: 1,
-			muteEndTime: 123
-		}])
-		ev.emit('messaging-history.set', {
-			chats: [{
-				id: chatId2,
-				conversationTimestamp: 123,
-				unreadCount: 1,
-				muteEndTime: 123
-			}],
-			contacts: [],
-			messages: [],
-			isLatest: false
-		})
-		ev.flush()
-
-		expect(chatsUpserted).toHaveLength(1)
-		expect(chatsUpserted[0].id).toEqual(chatId)
-		expect(chatsUpserted[0].archived).toEqual(true)
-		expect(chatsUpserted[0].muteEndTime).toEqual(123)
-
-		expect(chatsSynced).toHaveLength(1)
-		expect(chatsSynced[0].id).toEqual(chatId2)
-		expect(chatsSynced[0].archived).toEqual(true)
-	})
-
-	it('should discard a conditional update', async() => {
-		const chatId = randomJid()
-		const chatsUpserted: Chat[] = []
-
-		ev.on('chats.upsert', c => chatsUpserted.push(...c))
-		ev.on('chats.update', () => fail('not should have emitted'))
-
-		ev.buffer()
-		ev.emit('chats.update', [{
-			id: chatId,
-			archived: true,
-			conditional(buff) {
-				if(buff.chatUpserts[chatId]) {
-					return false
-				}
-			}
-		}])
-		ev.emit('chats.upsert', [{
-			id: chatId,
-			conversationTimestamp: 123,
-			unreadCount: 1,
-			muteEndTime: 123
-		}])
-
-		ev.flush()
-
-		expect(chatsUpserted).toHaveLength(1)
-		expect(chatsUpserted[0].archived).toBeUndefined()
-	})
-
-	it('should overwrite a chats.update event with a history event', async() => {
-		const chatId = randomJid()
-		let chatRecv: Chat | undefined
-
-		ev.on('messaging-history.set', ({ chats }) => {
-			chatRecv = chats[0]
-		})
-		ev.on('chats.update', () => fail('not should have emitted'))
-
-		ev.buffer()
-
-		ev.emit('messaging-history.set', {
-			chats: [{ id: chatId, conversationTimestamp: 123, unreadCount: 1 }],
-			messages: [],
-			contacts: [],
-			isLatest: true
-		})
-		ev.emit('chats.update', [{ id: chatId, archived: true }])
-
-		ev.flush()
-
-		expect(chatRecv).toBeDefined()
-		expect(chatRecv?.archived).toBeTruthy()
-	})
-
-	it('should buffer message upsert events', async() => {
-		const messageTimestamp = unixTimestampSeconds()
-		const msg: proto.IWebMessageInfo = {
-			key: {
-				remoteJid: randomJid(),
-				id: generateMessageID(),
-				fromMe: false
-			},
-			messageStubType: WAMessageStubType.CIPHERTEXT,
-			messageTimestamp
-		}
-
-		const msgs: proto.IWebMessageInfo[] = []
-
-		ev.on('messages.upsert', c => {
-			msgs.push(...c.messages)
-			expect(c.type).toEqual('notify')
-		})
-
-		ev.buffer()
-		ev.emit('messages.upsert', { messages: [proto.WebMessageInfo.fromObject(msg)], type: 'notify' })
-
-		msg.messageTimestamp = unixTimestampSeconds() + 1
-		msg.messageStubType = undefined
-		msg.message = { conversation: 'Test' }
-		ev.emit('messages.upsert', { messages: [proto.WebMessageInfo.fromObject(msg)], type: 'notify' })
-		ev.emit('messages.update', [{ key: msg.key, update: { status: WAMessageStatus.READ } }])
-
-		ev.flush()
-
-		expect(msgs).toHaveLength(1)
-		expect(msgs[0].message).toBeTruthy()
-		expect(toNumber(msgs[0].messageTimestamp!)).toEqual(messageTimestamp)
-		expect(msgs[0].status).toEqual(WAMessageStatus.READ)
-	})
-
-	it('should buffer a message receipt update', async() => {
-		const msg: proto.IWebMessageInfo = {
-			key: {
-				remoteJid: randomJid(),
-				id: generateMessageID(),
-				fromMe: false
-			},
-			messageStubType: WAMessageStubType.CIPHERTEXT,
-			messageTimestamp: unixTimestampSeconds()
-		}
-
-		const msgs: proto.IWebMessageInfo[] = []
-
-		ev.on('messages.upsert', c => msgs.push(...c.messages))
-		ev.on('message-receipt.update', () => fail('should not emit'))
-
-		ev.buffer()
-		ev.emit('messages.upsert', { messages: [proto.WebMessageInfo.fromObject(msg)], type: 'notify' })
-		ev.emit('message-receipt.update', [
-			{
-				key: msg.key,
-				receipt: {
-					userJid: randomJid(),
-					readTimestamp: unixTimestampSeconds()
-				}
-			}
-		])
-
-		ev.flush()
-
-		expect(msgs).toHaveLength(1)
-		expect(msgs[0].userReceipt).toHaveLength(1)
-	})
-
-	it('should buffer multiple status updates', async() => {
-		const key: WAMessageKey = {
-			remoteJid: randomJid(),
-			id: generateMessageID(),
-			fromMe: false
-		}
-
-		const msgs: WAMessageUpdate[] = []
-
-		ev.on('messages.update', c => msgs.push(...c))
-
-		ev.buffer()
-		ev.emit('messages.update', [{ key, update: { status: WAMessageStatus.DELIVERY_ACK } }])
-		ev.emit('messages.update', [{ key, update: { status: WAMessageStatus.READ } }])
-
-		ev.flush()
-
-		expect(msgs).toHaveLength(1)
-		expect(msgs[0].update.status).toEqual(WAMessageStatus.READ)
-	})
-
-	it('should remove chat unread counter', async() => {
-		const msg: proto.IWebMessageInfo = {
-			key: {
-				remoteJid: '12345@s.whatsapp.net',
-				id: generateMessageID(),
-				fromMe: false
-			},
-			message: {
-				conversation: 'abcd'
-			},
-			messageTimestamp: unixTimestampSeconds()
-		}
-
-		const chats: Partial<Chat>[] = []
-
-		ev.on('chats.update', c => chats.push(...c))
-
-		ev.buffer()
-		ev.emit('messages.upsert', { messages: [proto.WebMessageInfo.fromObject(msg)], type: 'notify' })
-		ev.emit('chats.update', [{ id: msg.key.remoteJid!, unreadCount: 1, conversationTimestamp: msg.messageTimestamp }])
-		ev.emit('messages.update', [{ key: msg.key, update: { status: WAMessageStatus.READ } }])
-
-		ev.flush()
-
-		expect(chats[0].unreadCount).toBeUndefined()
-	})
-})
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Tests/test.key-store.ts b/node_modules/@whiskeysockets/baileys/src/Tests/test.key-store.ts
deleted file mode 100644
index f6b86b2..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Tests/test.key-store.ts
+++ /dev/null
@@ -1,92 +0,0 @@
-import { addTransactionCapability, delay } from '../Utils'
-import logger from '../Utils/logger'
-import { makeMockSignalKeyStore } from './utils'
-
-logger.level = 'trace'
-
-describe('Key Store w Transaction Tests', () => {
-
-	const rawStore = makeMockSignalKeyStore()
-	const store = addTransactionCapability(
-		rawStore,
-		logger,
-		{
-			maxCommitRetries: 1,
-			delayBetweenTriesMs: 10
-		}
-	)
-
-	it('should use transaction cache when mutated', async() => {
-		const key = '123'
-		const value = new Uint8Array(1)
-		const ogGet = rawStore.get
-		await store.transaction(
-			async() => {
-				await store.set({ 'session': { [key]: value } })
-
-				rawStore.get = () => {
-					throw new Error('should not have been called')
-				}
-
-				const { [key]: stored } = await store.get('session', [key])
-				expect(stored).toEqual(new Uint8Array(1))
-			}
-		)
-
-		rawStore.get = ogGet
-	})
-
-	it('should not commit a failed transaction', async() => {
-		const key = 'abcd'
-		await expect(
-			store.transaction(
-				async() => {
-					await store.set({ 'session': { [key]: new Uint8Array(1) } })
-					throw new Error('fail')
-				}
-			)
-		).rejects.toThrowError(
-			'fail'
-		)
-
-		const { [key]: stored } = await store.get('session', [key])
-		expect(stored).toBeUndefined()
-	})
-
-	it('should handle overlapping transactions', async() => {
-		// promise to let transaction 2
-		// know that transaction 1 has started
-		let promiseResolve: () => void
-		const promise = new Promise<void>(resolve => {
-			promiseResolve = resolve
-		})
-
-		store.transaction(
-			async() => {
-				await store.set({
-					'session': {
-						'1': new Uint8Array(1)
-					}
-				})
-				// wait for the other transaction to start
-				await delay(5)
-				// reolve the promise to let the other transaction continue
-				promiseResolve()
-			}
-		)
-
-		await store.transaction(
-			async() => {
-				await promise
-				await delay(5)
-
-				expect(store.isInTransaction()).toBe(true)
-			}
-		)
-
-		expect(store.isInTransaction()).toBe(false)
-		// ensure that the transaction were committed
-		const { ['1']: stored } = await store.get('session', ['1'])
-		expect(stored).toEqual(new Uint8Array(1))
-	})
-})
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Tests/test.libsignal.ts b/node_modules/@whiskeysockets/baileys/src/Tests/test.libsignal.ts
deleted file mode 100644
index a71fd5c..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Tests/test.libsignal.ts
+++ /dev/null
@@ -1,186 +0,0 @@
-import { makeLibSignalRepository } from '../Signal/libsignal'
-import { SignalAuthState, SignalDataTypeMap } from '../Types'
-import { Curve, generateRegistrationId, generateSignalPubKey, signedKeyPair } from '../Utils'
-
-describe('Signal Tests', () => {
-
-	it('should correctly encrypt/decrypt 1 message', async() => {
-		const user1 = makeUser()
-		const user2 = makeUser()
-
-		const msg = Buffer.from('hello there!')
-
-		await prepareForSendingMessage(user1, user2)
-
-		const result = await user1.repository.encryptMessage(
-			{ jid: user2.jid, data: msg }
-		)
-
-		const dec = await user2.repository.decryptMessage(
-			{ jid: user1.jid, ...result }
-		)
-
-		expect(dec).toEqual(msg)
-	})
-
-	it('should correctly override a session', async() => {
-		const user1 = makeUser()
-		const user2 = makeUser()
-
-		const msg = Buffer.from('hello there!')
-
-		for(let preKeyId = 2; preKeyId <= 3;preKeyId++) {
-			await prepareForSendingMessage(user1, user2, preKeyId)
-
-			const result = await user1.repository.encryptMessage(
-				{ jid: user2.jid, data: msg }
-			)
-
-			const dec = await user2.repository.decryptMessage(
-				{ jid: user1.jid, ...result }
-			)
-
-			expect(dec).toEqual(msg)
-		}
-	})
-
-	it('should correctly encrypt/decrypt multiple messages', async() => {
-		const user1 = makeUser()
-		const user2 = makeUser()
-
-		const msg = Buffer.from('hello there!')
-
-		await prepareForSendingMessage(user1, user2)
-
-		for(let i = 0;i < 10;i++) {
-			const result = await user1.repository.encryptMessage(
-				{ jid: user2.jid, data: msg }
-			)
-
-			const dec = await user2.repository.decryptMessage(
-				{ jid: user1.jid, ...result }
-			)
-
-			expect(dec).toEqual(msg)
-		}
-	})
-
-	it('should encrypt/decrypt messages from group', async() => {
-		const groupId = '123456@g.us'
-		const participants = [...Array(5)].map(makeUser)
-
-		const msg = Buffer.from('hello there!')
-
-		const sender = participants[0]
-		const enc = await sender.repository.encryptGroupMessage(
-			{
-				group: groupId,
-				meId: sender.jid,
-				data: msg
-			}
-		)
-
-		for(const participant of participants) {
-			if(participant === sender) {
-				continue
-			}
-
-			await participant.repository.processSenderKeyDistributionMessage(
-				{
-					item: {
-						groupId,
-						axolotlSenderKeyDistributionMessage: enc.senderKeyDistributionMessage
-					},
-					authorJid: sender.jid
-				}
-			)
-
-			const dec = await participant.repository.decryptGroupMessage(
-				{
-					group: groupId,
-					authorJid: sender.jid,
-					msg: enc.ciphertext
-				}
-			)
-			expect(dec).toEqual(msg)
-		}
-	})
-})
-
-type User = ReturnType<typeof makeUser>
-
-function makeUser() {
-	const store = makeTestAuthState()
-	const jid = `${Math.random().toString().replace('.', '')}@s.whatsapp.net`
-	const repository = makeLibSignalRepository(store)
-	return { store, jid, repository }
-}
-
-async function prepareForSendingMessage(
-	sender: User,
-	receiver: User,
-	preKeyId = 2
-) {
-	const preKey = Curve.generateKeyPair()
-	await sender.repository.injectE2ESession(
-		{
-			jid: receiver.jid,
-			session: {
-				registrationId: receiver.store.creds.registrationId,
-				identityKey: generateSignalPubKey(receiver.store.creds.signedIdentityKey.public),
-				signedPreKey: {
-					keyId: receiver.store.creds.signedPreKey.keyId,
-					publicKey: generateSignalPubKey(receiver.store.creds.signedPreKey.keyPair.public),
-					signature: receiver.store.creds.signedPreKey.signature,
-				},
-				preKey: {
-					keyId: preKeyId,
-					publicKey: generateSignalPubKey(preKey.public),
-				}
-			}
-		}
-	)
-
-	await receiver.store.keys.set({
-		'pre-key': {
-			[preKeyId]: preKey
-		}
-	})
-}
-
-function makeTestAuthState(): SignalAuthState {
-	const identityKey = Curve.generateKeyPair()
-	// eslint-disable-next-line @typescript-eslint/no-explicit-any
-	const store: { [_: string]: any } = {}
-	return {
-		creds: {
-			signedIdentityKey: identityKey,
-			registrationId: generateRegistrationId(),
-			signedPreKey: signedKeyPair(identityKey, 1),
-		},
-		keys: {
-			get(type, ids) {
-				const data: { [_: string]: SignalDataTypeMap[typeof type] } = { }
-				for(const id of ids) {
-					const item = store[getUniqueId(type, id)]
-					if(typeof item !== 'undefined') {
-						data[id] = item
-					}
-				}
-
-				return data
-			},
-			set(data) {
-				for(const type in data) {
-					for(const id in data[type]) {
-						store[getUniqueId(type, id)] = data[type][id]
-					}
-				}
-			},
-		}
-	}
-
-	function getUniqueId(type: string, id: string) {
-		return `${type}.${id}`
-	}
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Tests/test.media-download.ts b/node_modules/@whiskeysockets/baileys/src/Tests/test.media-download.ts
deleted file mode 100644
index f00638c..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Tests/test.media-download.ts
+++ /dev/null
@@ -1,76 +0,0 @@
-import { readFileSync } from 'fs'
-import { proto } from '../../WAProto'
-import { DownloadableMessage, MediaType } from '../Types'
-import { downloadContentFromMessage } from '../Utils'
-
-jest.setTimeout(20_000)
-
-type TestVector = {
-	type: MediaType
-	message: DownloadableMessage
-	plaintext: Buffer
-}
-
-const TEST_VECTORS: TestVector[] = [
-	{
-		type: 'image',
-		message: proto.Message.ImageMessage.decode(
-			Buffer.from(
-				'Ck1odHRwczovL21tZy53aGF0c2FwcC5uZXQvZC9mL0FwaHR4WG9fWXZZcDZlUVNSa0tjOHE5d2ozVUpleWdoY3poM3ExX3I0ektnLmVuYxIKaW1hZ2UvanBlZyIgKTuVFyxDc6mTm4GXPlO3Z911Wd8RBeTrPLSWAEdqW8MomcUBQiB7wH5a4nXMKyLOT0A2nFgnnM/DUH8YjQf8QtkCIekaSkogTB+BXKCWDFrmNzozY0DCPn0L4VKd7yG1ZbZwbgRhzVc=',
-				'base64'
-			)
-		),
-		plaintext: readFileSync('./Media/cat.jpeg')
-	},
-	{
-		type: 'image',
-		message: proto.Message.ImageMessage.decode(
-			Buffer.from(
-				'Ck1odHRwczovL21tZy53aGF0c2FwcC5uZXQvZC9mL0Ftb2tnWkphNWF6QWZxa3dVRzc0eUNUdTlGeWpjMmd5akpqcXNmMUFpZEU5LmVuYxIKaW1hZ2UvanBlZyIg8IS5TQzdzcuvcR7F8HMhWnXmlsV+GOo9JE1/t2k+o9Yoz6o6QiA7kDk8j5KOEQC0kDFE1qW7lBBDYhm5z06N3SirfUj3CUog/CjYF8e670D5wUJwWv2B2mKzDEo8IJLStDv76YmtPfs=',
-				'base64'
-			)
-		),
-		plaintext: readFileSync('./Media/icon.png')
-	},
-]
-
-describe('Media Download Tests', () => {
-
-	it('should download a full encrypted media correctly', async() => {
-		for(const { type, message, plaintext } of TEST_VECTORS) {
-			const readPipe = await downloadContentFromMessage(message, type)
-
-			let buffer = Buffer.alloc(0)
-			for await (const read of readPipe) {
-				buffer = Buffer.concat([ buffer, read ])
-			}
-
-			expect(buffer).toEqual(plaintext)
-		}
-	})
-
-	it('should download an encrypted media correctly piece', async() => {
-		for(const { type, message, plaintext } of TEST_VECTORS) {
-			// check all edge cases
-			const ranges = [
-				{ startByte: 51, endByte: plaintext.length - 100 }, // random numbers
-				{ startByte: 1024, endByte: 2038 }, // larger random multiples of 16
-				{ startByte: 1, endByte: plaintext.length - 1 } // borders
-			]
-			for(const range of ranges) {
-				const readPipe = await downloadContentFromMessage(message, type, range)
-
-				let buffer = Buffer.alloc(0)
-				for await (const read of readPipe) {
-					buffer = Buffer.concat([ buffer, read ])
-				}
-
-				const hex = buffer.toString('hex')
-				const expectedHex = plaintext.slice(range.startByte || 0, range.endByte || undefined).toString('hex')
-				expect(hex).toBe(expectedHex)
-
-				console.log('success on ', range)
-			}
-		}
-	})
-})
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Tests/test.messages.ts b/node_modules/@whiskeysockets/baileys/src/Tests/test.messages.ts
deleted file mode 100644
index 7f51f39..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Tests/test.messages.ts
+++ /dev/null
@@ -1,37 +0,0 @@
-import { WAMessageContent } from '../Types'
-import { normalizeMessageContent } from '../Utils'
-
-describe('Messages Tests', () => {
-
-	it('should correctly unwrap messages', () => {
-		const CONTENT = { imageMessage: { } }
-		expectRightContent(CONTENT)
-		expectRightContent({
-			ephemeralMessage: { message: CONTENT }
-		})
-		expectRightContent({
-			viewOnceMessage: {
-				message: {
-					ephemeralMessage: { message: CONTENT }
-				}
-			}
-		})
-		expectRightContent({
-			viewOnceMessage: {
-				message: {
-					viewOnceMessageV2: {
-						message: {
-							ephemeralMessage: { message: CONTENT }
-						}
-					}
-				}
-			}
-		})
-
-		function expectRightContent(content: WAMessageContent) {
-			expect(
-				normalizeMessageContent(content)
-			).toHaveProperty('imageMessage')
-		}
-	})
-})
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Tests/utils.ts b/node_modules/@whiskeysockets/baileys/src/Tests/utils.ts
deleted file mode 100644
index bcd1469..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Tests/utils.ts
+++ /dev/null
@@ -1,36 +0,0 @@
-import { SignalDataTypeMap, SignalKeyStore } from '../Types'
-import { jidEncode } from '../WABinary'
-
-export function randomJid() {
-	return jidEncode(Math.floor(Math.random() * 1000000), Math.random() < 0.5 ? 's.whatsapp.net' : 'g.us')
-}
-
-export function makeMockSignalKeyStore(): SignalKeyStore {
-	// eslint-disable-next-line @typescript-eslint/no-explicit-any
-	const store: { [_: string]: any } = {}
-
-	return {
-		get(type, ids) {
-			const data: { [_: string]: SignalDataTypeMap[typeof type] } = { }
-			for(const id of ids) {
-				const item = store[getUniqueId(type, id)]
-				if(typeof item !== 'undefined') {
-					data[id] = item
-				}
-			}
-
-			return data
-		},
-		set(data) {
-			for(const type in data) {
-				for(const id in data[type]) {
-					store[getUniqueId(type, id)] = data[type][id]
-				}
-			}
-		},
-	}
-
-	function getUniqueId(type: string, id: string) {
-		return `${type}.${id}`
-	}
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Types/Auth.ts b/node_modules/@whiskeysockets/baileys/src/Types/Auth.ts
deleted file mode 100644
index 4338286..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Types/Auth.ts
+++ /dev/null
@@ -1,113 +0,0 @@
-import type { proto } from '../../WAProto'
-import { RegistrationOptions } from '../Socket/registration'
-import type { Contact } from './Contact'
-import type { MinimalMessage } from './Message'
-
-export type KeyPair = { public: Uint8Array, private: Uint8Array }
-export type SignedKeyPair = {
-    keyPair: KeyPair
-    signature: Uint8Array
-    keyId: number
-    timestampS?: number
-}
-
-export type ProtocolAddress = {
-	name: string // jid
-	deviceId: number
-}
-export type SignalIdentity = {
-	identifier: ProtocolAddress
-	identifierKey: Uint8Array
-}
-
-export type LTHashState = {
-    version: number
-    hash: Buffer
-    indexValueMap: {
-        [indexMacBase64: string]: { valueMac: Uint8Array | Buffer }
-    }
-}
-
-export type SignalCreds = {
-    readonly signedIdentityKey: KeyPair
-    readonly signedPreKey: SignedKeyPair
-    readonly registrationId: number
-}
-
-export type AccountSettings = {
-    /** unarchive chats when a new message is received */
-    unarchiveChats: boolean
-    /** the default mode to start new conversations with */
-    defaultDisappearingMode?: Pick<proto.IConversation, 'ephemeralExpiration' | 'ephemeralSettingTimestamp'>
-}
-
-export type AuthenticationCreds = SignalCreds & {
-    readonly noiseKey: KeyPair
-    readonly pairingEphemeralKeyPair: KeyPair
-    advSecretKey: string
-
-    me?: Contact
-    account?: proto.IADVSignedDeviceIdentity
-    signalIdentities?: SignalIdentity[]
-    myAppStateKeyId?: string
-    firstUnuploadedPreKeyId: number
-    nextPreKeyId: number
-
-    lastAccountSyncTimestamp?: number
-    platform?: string
-
-    processedHistoryMessages: MinimalMessage[]
-    /** number of times history & app state has been synced */
-    accountSyncCounter: number
-    accountSettings: AccountSettings
-	// mobile creds
-	deviceId: string
-	phoneId: string
-	identityId: Buffer
-	registered: boolean
-	backupToken: Buffer
-	registration: RegistrationOptions
-    pairingCode: string | undefined
-    lastPropHash: string | undefined
-    routingInfo: Buffer | undefined
-}
-
-export type SignalDataTypeMap = {
-    'pre-key': KeyPair
-    'session': Uint8Array
-    'sender-key': Uint8Array
-    'sender-key-memory': { [jid: string]: boolean }
-    'app-state-sync-key': proto.Message.IAppStateSyncKeyData
-    'app-state-sync-version': LTHashState
-}
-
-export type SignalDataSet = { [T in keyof SignalDataTypeMap]?: { [id: string]: SignalDataTypeMap[T] | null } }
-
-type Awaitable<T> = T | Promise<T>
-
-export type SignalKeyStore = {
-    get<T extends keyof SignalDataTypeMap>(type: T, ids: string[]): Awaitable<{ [id: string]: SignalDataTypeMap[T] }>
-    set(data: SignalDataSet): Awaitable<void>
-    /** clear all the data in the store */
-    clear?(): Awaitable<void>
-}
-
-export type SignalKeyStoreWithTransaction = SignalKeyStore & {
-    isInTransaction: () => boolean
-    transaction<T>(exec: () => Promise<T>): Promise<T>
-}
-
-export type TransactionCapabilityOptions = {
-	maxCommitRetries: number
-	delayBetweenTriesMs: number
-}
-
-export type SignalAuthState = {
-    creds: SignalCreds
-    keys: SignalKeyStore | SignalKeyStoreWithTransaction
-}
-
-export type AuthenticationState = {
-    creds: AuthenticationCreds
-    keys: SignalKeyStore
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Types/Call.ts b/node_modules/@whiskeysockets/baileys/src/Types/Call.ts
deleted file mode 100644
index 06f3b1f..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Types/Call.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-
-export type WACallUpdateType = 'offer' | 'ringing' | 'timeout' | 'reject' | 'accept'
-
-export type WACallEvent = {
-	chatId: string
-	from: string
-	isGroup?: boolean
-	groupJid?: string
-	id: string
-	date: Date
-	isVideo?: boolean
-	status: WACallUpdateType
-	offline: boolean
-	latencyMs?: number
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Types/Chat.ts b/node_modules/@whiskeysockets/baileys/src/Types/Chat.ts
deleted file mode 100644
index 4077da8..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Types/Chat.ts
+++ /dev/null
@@ -1,106 +0,0 @@
-import type { proto } from '../../WAProto'
-import type { AccountSettings } from './Auth'
-import type { BufferedEventData } from './Events'
-import type { ChatLabelAssociationActionBody } from './LabelAssociation'
-import type { MessageLabelAssociationActionBody } from './LabelAssociation'
-import type { MinimalMessage } from './Message'
-
-/** privacy settings in WhatsApp Web */
-export type WAPrivacyValue = 'all' | 'contacts' | 'contact_blacklist' | 'none'
-
-export type WAPrivacyOnlineValue = 'all' | 'match_last_seen'
-
-export type WAReadReceiptsValue = 'all' | 'none'
-
-/** set of statuses visible to other people; see updatePresence() in WhatsAppWeb.Send */
-export type WAPresence = 'unavailable' | 'available' | 'composing' | 'recording' | 'paused'
-
-export const ALL_WA_PATCH_NAMES = ['critical_block', 'critical_unblock_low', 'regular_high', 'regular_low', 'regular'] as const
-
-export type WAPatchName = typeof ALL_WA_PATCH_NAMES[number]
-
-export interface PresenceData {
-    lastKnownPresence: WAPresence
-    lastSeen?: number
-}
-
-export type ChatMutation = {
-    syncAction: proto.ISyncActionData
-    index: string[]
-}
-
-export type WAPatchCreate = {
-    syncAction: proto.ISyncActionValue
-    index: string[]
-    type: WAPatchName
-    apiVersion: number
-    operation: proto.SyncdMutation.SyncdOperation
-}
-
-export type Chat = proto.IConversation & {
-    /** unix timestamp of when the last message was received in the chat */
-    lastMessageRecvTimestamp?: number
-}
-
-export type ChatUpdate = Partial<Chat & {
-    /**
-     * if specified in the update,
-     * the EV buffer will check if the condition gets fulfilled before applying the update
-     * Right now, used to determine when to release an app state sync event
-     *
-     * @returns true, if the update should be applied;
-     * false if it can be discarded;
-     * undefined if the condition is not yet fulfilled
-     * */
-    conditional: (bufferedData: BufferedEventData) => boolean | undefined
-}>
-
-/**
- * the last messages in a chat, sorted reverse-chronologically. That is, the latest message should be first in the chat
- * for MD modifications, the last message in the array (i.e. the earlist message) must be the last message recv in the chat
- * */
-export type LastMessageList = MinimalMessage[] | proto.SyncActionValue.ISyncActionMessageRange
-
-export type ChatModification =
-    {
-        archive: boolean
-        lastMessages: LastMessageList
-    }
-    | { pushNameSetting: string }
-    | { pin: boolean }
-    | {
-        /** mute for duration, or provide timestamp of mute to remove*/
-        mute: number | null
-    }
-    | {
-        clear: 'all' | { messages: { id: string, fromMe?: boolean, timestamp: number }[] }
-    }
-    | {
-        star: {
-            messages: { id: string, fromMe?: boolean }[]
-            star: boolean
-        }
-    }
-    | {
-        markRead: boolean
-        lastMessages: LastMessageList
-    }
-    | { delete: true, lastMessages: LastMessageList }
-    // Label assosiation
-    | { addChatLabel: ChatLabelAssociationActionBody }
-    | { removeChatLabel: ChatLabelAssociationActionBody }
-    | { addMessageLabel: MessageLabelAssociationActionBody }
-    | { removeMessageLabel: MessageLabelAssociationActionBody }
-
-export type InitialReceivedChatsState = {
-    [jid: string]: {
-        /** the last message received from the other party */
-        lastMsgRecvTimestamp?: number
-        /** the absolute last message in the chat */
-        lastMsgTimestamp: number
-    }
-}
-
-export type InitialAppStateSyncOptions = {
-    accountSettings: AccountSettings
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Types/Events.ts b/node_modules/@whiskeysockets/baileys/src/Types/Events.ts
deleted file mode 100644
index 6a5dfb2..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Types/Events.ts
+++ /dev/null
@@ -1,93 +0,0 @@
-import type { Boom } from '@hapi/boom'
-import { proto } from '../../WAProto'
-import { AuthenticationCreds } from './Auth'
-import { WACallEvent } from './Call'
-import { Chat, ChatUpdate, PresenceData } from './Chat'
-import { Contact } from './Contact'
-import { GroupMetadata, ParticipantAction } from './GroupMetadata'
-import { Label } from './Label'
-import { LabelAssociation } from './LabelAssociation'
-import { MessageUpsertType, MessageUserReceiptUpdate, WAMessage, WAMessageKey, WAMessageUpdate } from './Message'
-import { ConnectionState } from './State'
-
-export type BaileysEventMap = {
-    /** connection state has been updated -- WS closed, opened, connecting etc. */
-	'connection.update': Partial<ConnectionState>
-    /** credentials updated -- some metadata, keys or something */
-    'creds.update': Partial<AuthenticationCreds>
-    /** set chats (history sync), everything is reverse chronologically sorted */
-    'messaging-history.set': {
-        chats: Chat[]
-        contacts: Contact[]
-        messages: WAMessage[]
-        isLatest: boolean
-    }
-    /** upsert chats */
-    'chats.upsert': Chat[]
-    /** update the given chats */
-    'chats.update': ChatUpdate[]
-    'chats.phoneNumberShare': {lid: string, jid: string}
-    /** delete chats with given ID */
-    'chats.delete': string[]
-    /** presence of contact in a chat updated */
-    'presence.update': { id: string, presences: { [participant: string]: PresenceData } }
-
-    'contacts.upsert': Contact[]
-    'contacts.update': Partial<Contact>[]
-
-    'messages.delete': { keys: WAMessageKey[] } | { jid: string, all: true }
-    'messages.update': WAMessageUpdate[]
-    'messages.media-update': { key: WAMessageKey, media?: { ciphertext: Uint8Array, iv: Uint8Array }, error?: Boom }[]
-    /**
-     * add/update the given messages. If they were received while the connection was online,
-     * the update will have type: "notify"
-     *  */
-    'messages.upsert': { messages: WAMessage[], type: MessageUpsertType }
-    /** message was reacted to. If reaction was removed -- then "reaction.text" will be falsey */
-    'messages.reaction': { key: WAMessageKey, reaction: proto.IReaction }[]
-
-    'message-receipt.update': MessageUserReceiptUpdate[]
-
-    'groups.upsert': GroupMetadata[]
-    'groups.update': Partial<GroupMetadata>[]
-    /** apply an action to participants in a group */
-    'group-participants.update': { id: string, author: string, participants: string[], action: ParticipantAction }
-
-    'blocklist.set': { blocklist: string[] }
-    'blocklist.update': { blocklist: string[], type: 'add' | 'remove' }
-
-    /** Receive an update on a call, including when the call was received, rejected, accepted */
-    'call': WACallEvent[]
-    'labels.edit': Label
-    'labels.association': { association: LabelAssociation, type: 'add' | 'remove' }
-}
-
-export type BufferedEventData = {
-    historySets: {
-        chats: { [jid: string]: Chat }
-        contacts: { [jid: string]: Contact }
-        messages: { [uqId: string]: WAMessage }
-        empty: boolean
-        isLatest: boolean
-    }
-    chatUpserts: { [jid: string]: Chat }
-    chatUpdates: { [jid: string]: ChatUpdate }
-    chatDeletes: Set<string>
-    contactUpserts: { [jid: string]: Contact }
-    contactUpdates: { [jid: string]: Partial<Contact> }
-    messageUpserts: { [key: string]: { type: MessageUpsertType, message: WAMessage } }
-    messageUpdates: { [key: string]: WAMessageUpdate }
-    messageDeletes: { [key: string]: WAMessageKey }
-    messageReactions: { [key: string]: { key: WAMessageKey, reactions: proto.IReaction[] } }
-    messageReceipts: { [key: string]: { key: WAMessageKey, userReceipt: proto.IUserReceipt[] } }
-    groupUpdates: { [jid: string]: Partial<GroupMetadata> }
-}
-
-export type BaileysEvent = keyof BaileysEventMap
-
-export interface BaileysEventEmitter {
-	on<T extends keyof BaileysEventMap>(event: T, listener: (arg: BaileysEventMap[T]) => void): void
-    off<T extends keyof BaileysEventMap>(event: T, listener: (arg: BaileysEventMap[T]) => void): void
-    removeAllListeners<T extends keyof BaileysEventMap>(event: T): void
-	emit<T extends keyof BaileysEventMap>(event: T, arg: BaileysEventMap[T]): boolean
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Types/GroupMetadata.ts b/node_modules/@whiskeysockets/baileys/src/Types/GroupMetadata.ts
deleted file mode 100644
index a7d0dcb..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Types/GroupMetadata.ts
+++ /dev/null
@@ -1,53 +0,0 @@
-import { Contact } from './Contact'
-
-export type GroupParticipant = (Contact & { isAdmin?: boolean, isSuperAdmin?: boolean, admin?: 'admin' | 'superadmin' | null })
-
-export type ParticipantAction = 'add' | 'remove' | 'promote' | 'demote'
-
-export interface GroupMetadata {
-    id: string
-    owner: string | undefined
-    subject: string
-    /** group subject owner */
-    subjectOwner?: string
-    /** group subject modification date */
-    subjectTime?: number
-    creation?: number
-    desc?: string
-    descOwner?: string
-    descId?: string
-    /** if this group is part of a community, it returns the jid of the community to which it belongs */
-    linkedParent?: string
-    /** is set when the group only allows admins to change group settings */
-    restrict?: boolean
-    /** is set when the group only allows admins to write messages */
-    announce?: boolean
-    /** is set when the group also allows members to add participants */
-    memberAddMode?: boolean
-    /** Request approval to join the group */
-    joinApprovalMode?: boolean
-    /** is this a community */
-    isCommunity?: boolean
-    /** is this the announce of a community */
-    isCommunityAnnounce?: boolean
-    /** number of group participants */
-    size?: number
-    // Baileys modified array
-    participants: GroupParticipant[]
-    ephemeralDuration?: number
-    inviteCode?: string
-    /** the person who added you to group or changed some setting in group */
-    author?: string
-}
-
-
-export interface WAGroupCreateResponse {
-    status: number
-    gid?: string
-    participants?: [{ [key: string]: {} }]
-}
-
-export interface GroupModificationResponse {
-    status: number
-    participants?: { [key: string]: {} }
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Types/Label.ts b/node_modules/@whiskeysockets/baileys/src/Types/Label.ts
deleted file mode 100644
index 6319b00..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Types/Label.ts
+++ /dev/null
@@ -1,36 +0,0 @@
-export interface Label {
-    /** Label uniq ID */
-    id: string
-    /** Label name */
-    name: string
-    /** Label color ID */
-    color: number
-    /** Is label has been deleted */
-    deleted: boolean
-    /** WhatsApp has 5 predefined labels (New customer, New order & etc) */
-    predefinedId?: string
-}
-
-/** WhatsApp has 20 predefined colors */
-export enum LabelColor {
-    Color1 = 0,
-    Color2,
-    Color3,
-    Color4,
-    Color5,
-    Color6,
-    Color7,
-    Color8,
-    Color9,
-    Color10,
-    Color11,
-    Color12,
-    Color13,
-    Color14,
-    Color15,
-    Color16,
-    Color17,
-    Color18,
-    Color19,
-    Color20,
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Types/Message.ts b/node_modules/@whiskeysockets/baileys/src/Types/Message.ts
deleted file mode 100644
index 62d2f8b..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Types/Message.ts
+++ /dev/null
@@ -1,280 +0,0 @@
-import { AxiosRequestConfig } from 'axios'
-import type { Logger } from 'pino'
-import type { Readable } from 'stream'
-import type { URL } from 'url'
-import { proto } from '../../WAProto'
-import { MEDIA_HKDF_KEY_MAPPING } from '../Defaults'
-import type { GroupMetadata } from './GroupMetadata'
-import { CacheStore } from './Socket'
-
-// export the WAMessage Prototypes
-export { proto as WAProto }
-export type WAMessage = proto.IWebMessageInfo
-export type WAMessageContent = proto.IMessage
-export type WAContactMessage = proto.Message.IContactMessage
-export type WAContactsArrayMessage = proto.Message.IContactsArrayMessage
-export type WAMessageKey = proto.IMessageKey
-export type WATextMessage = proto.Message.IExtendedTextMessage
-export type WAContextInfo = proto.IContextInfo
-export type WALocationMessage = proto.Message.ILocationMessage
-export type WAGenericMediaMessage = proto.Message.IVideoMessage | proto.Message.IImageMessage | proto.Message.IAudioMessage | proto.Message.IDocumentMessage | proto.Message.IStickerMessage
-// eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars
-export import WAMessageStubType = proto.WebMessageInfo.StubType
-// eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars
-export import WAMessageStatus = proto.WebMessageInfo.Status
-export type WAMediaUpload = Buffer | { url: URL | string } | { stream: Readable }
-/** Set of message types that are supported by the library */
-export type MessageType = keyof proto.Message
-
-export type DownloadableMessage = { mediaKey?: Uint8Array | null, directPath?: string | null, url?: string | null }
-
-export type MessageReceiptType = 'read' | 'read-self' | 'hist_sync' | 'peer_msg' | 'sender' | 'inactive' | 'played' | undefined
-
-export type MediaConnInfo = {
-    auth: string
-    ttl: number
-    hosts: { hostname: string, maxContentLengthBytes: number }[]
-    fetchDate: Date
-}
-
-export interface WAUrlInfo {
-    'canonical-url': string
-    'matched-text': string
-    title: string
-    description?: string
-    jpegThumbnail?: Buffer
-    highQualityThumbnail?: proto.Message.IImageMessage
-    originalThumbnailUrl?: string
-}
-
-// types to generate WA messages
-type Mentionable = {
-    /** list of jids that are mentioned in the accompanying text */
-    mentions?: string[]
-}
-type Contextable = {
-    /** add contextInfo to the message */
-    contextInfo?: proto.IContextInfo
-}
-type ViewOnce = {
-    viewOnce?: boolean
-}
-
-type Buttonable = {
-    /** add buttons to the message  */
-    buttons?: proto.Message.ButtonsMessage.IButton[]
-}
-type Templatable = {
-    /** add buttons to the message (conflicts with normal buttons)*/
-    templateButtons?: proto.IHydratedTemplateButton[]
-
-    footer?: string
-}
-type Editable = {
-  edit?: WAMessageKey
-}
-type Listable = {
-    /** Sections of the List */
-    sections?: proto.Message.ListMessage.ISection[]
-
-    /** Title of a List Message only */
-    title?: string
-
-    /** Text of the bnutton on the list (required) */
-    buttonText?: string
-}
-type WithDimensions = {
-    width?: number
-    height?: number
-}
-
-export type PollMessageOptions = {
-    name: string
-    selectableCount?: number
-    values: string[]
-    /** 32 byte message secret to encrypt poll selections */
-    messageSecret?: Uint8Array
-}
-
-type SharePhoneNumber = {
-    sharePhoneNumber: boolean
-}
-
-type RequestPhoneNumber = {
-    requestPhoneNumber: boolean
-}
-
-export type MediaType = keyof typeof MEDIA_HKDF_KEY_MAPPING
-export type AnyMediaMessageContent = (
-    ({
-        image: WAMediaUpload
-        caption?: string
-        jpegThumbnail?: string
-    } & Mentionable & Contextable & Buttonable & Templatable & WithDimensions)
-    | ({
-        video: WAMediaUpload
-        caption?: string
-        gifPlayback?: boolean
-        jpegThumbnail?: string
-        /** if set to true, will send as a `video note` */
-        ptv?: boolean
-    } & Mentionable & Contextable & Buttonable & Templatable & WithDimensions)
-    | {
-        audio: WAMediaUpload
-        /** if set to true, will send as a `voice note` */
-        ptt?: boolean
-        /** optionally tell the duration of the audio */
-        seconds?: number
-    }
-    | ({
-        sticker: WAMediaUpload
-        isAnimated?: boolean
-    } & WithDimensions) | ({
-        document: WAMediaUpload
-        mimetype: string
-        fileName?: string
-        caption?: string
-    } & Contextable & Buttonable & Templatable))
-    & { mimetype?: string } & Editable
-
-export type ButtonReplyInfo = {
-    displayText: string
-    id: string
-    index: number
-}
-
-export type WASendableProduct = Omit<proto.Message.ProductMessage.IProductSnapshot, 'productImage'> & {
-    productImage: WAMediaUpload
-}
-
-export type AnyRegularMessageContent = (
-    ({
-	    text: string
-        linkPreview?: WAUrlInfo | null
-    }
-    & Mentionable & Contextable & Buttonable & Templatable & Listable & Editable)
-    | AnyMediaMessageContent
-    | ({
-        poll: PollMessageOptions
-    } & Mentionable & Contextable & Buttonable & Templatable & Editable)
-    | {
-        contacts: {
-            displayName?: string
-            contacts: proto.Message.IContactMessage[]
-        }
-    }
-    | {
-        location: WALocationMessage
-    }
-    | { react: proto.Message.IReactionMessage }
-    | {
-        buttonReply: ButtonReplyInfo
-        type: 'template' | 'plain'
-    }
-    | {
-        listReply: Omit<proto.Message.IListResponseMessage, 'contextInfo'>
-    }
-    | {
-        product: WASendableProduct
-        businessOwnerJid?: string
-        body?: string
-        footer?: string
-    } | SharePhoneNumber | RequestPhoneNumber
-) & ViewOnce
-
-export type AnyMessageContent = AnyRegularMessageContent | {
-	forward: WAMessage
-	force?: boolean
-} | {
-    /** Delete your message or anyone's message in a group (admin required) */
-	delete: WAMessageKey
-} | {
-	disappearingMessagesInChat: boolean | number
-}
-
-export type GroupMetadataParticipants = Pick<GroupMetadata, 'participants'>
-
-type MinimalRelayOptions = {
-    /** override the message ID with a custom provided string */
-    messageId?: string
-    /** cached group metadata, use to prevent redundant requests to WA & speed up msg sending */
-    cachedGroupMetadata?: (jid: string) => Promise<GroupMetadataParticipants | undefined>
-}
-
-export type MessageRelayOptions = MinimalRelayOptions & {
-    /** only send to a specific participant; used when a message decryption fails for a single user */
-    participant?: { jid: string, count: number }
-    /** additional attributes to add to the WA binary node */
-    additionalAttributes?: { [_: string]: string }
-    /** should we use the devices cache, or fetch afresh from the server; default assumed to be "true" */
-    useUserDevicesCache?: boolean
-    /** jid list of participants for status@broadcast */
-    statusJidList?: string[]
-}
-
-export type MiscMessageGenerationOptions = MinimalRelayOptions & {
-    /** optional, if you want to manually set the timestamp of the message */
-	timestamp?: Date
-    /** the message you want to quote */
-	quoted?: WAMessage
-    /** disappearing messages settings */
-    ephemeralExpiration?: number | string
-    /** timeout for media upload to WA server */
-    mediaUploadTimeoutMs?: number
-    /** jid list of participants for status@broadcast */
-    statusJidList?: string[]
-    /** backgroundcolor for status */
-    backgroundColor?: string
-    /** font type for status */
-    font?: number
-    /** if it is broadcast */
-    broadcast?: boolean
-}
-export type MessageGenerationOptionsFromContent = MiscMessageGenerationOptions & {
-	userJid: string
-}
-
-export type WAMediaUploadFunction = (readStream: Readable, opts: { fileEncSha256B64: string, mediaType: MediaType, timeoutMs?: number }) => Promise<{ mediaUrl: string, directPath: string }>
-
-export type MediaGenerationOptions = {
-	logger?: Logger
-    mediaTypeOverride?: MediaType
-    upload: WAMediaUploadFunction
-    /** cache media so it does not have to be uploaded again */
-    mediaCache?: CacheStore
-
-    mediaUploadTimeoutMs?: number
-
-    options?: AxiosRequestConfig
-
-    backgroundColor?: string
-
-    font?: number
-}
-export type MessageContentGenerationOptions = MediaGenerationOptions & {
-	getUrlInfo?: (text: string) => Promise<WAUrlInfo | undefined>
-}
-export type MessageGenerationOptions = MessageContentGenerationOptions & MessageGenerationOptionsFromContent
-
-/**
- * Type of message upsert
- * 1. notify => notify the user, this message was just received
- * 2. append => append the message to the chat history, no notification required
- */
-export type MessageUpsertType = 'append' | 'notify'
-
-export type MessageUserReceipt = proto.IUserReceipt
-
-export type WAMessageUpdate = { update: Partial<WAMessage>, key: proto.IMessageKey }
-
-export type WAMessageCursor = { before: WAMessageKey | undefined } | { after: WAMessageKey | undefined }
-
-export type MessageUserReceiptUpdate = { key: proto.IMessageKey, receipt: MessageUserReceipt }
-
-export type MediaDecryptionKeyInfo = {
-    iv: Buffer
-    cipherKey: Buffer
-    macKey?: Buffer
-}
-
-export type MinimalMessage = Pick<proto.IWebMessageInfo, 'key' | 'messageTimestamp'>
diff --git a/node_modules/@whiskeysockets/baileys/src/Types/Product.ts b/node_modules/@whiskeysockets/baileys/src/Types/Product.ts
deleted file mode 100644
index 2f51b1c..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Types/Product.ts
+++ /dev/null
@@ -1,85 +0,0 @@
-import { WAMediaUpload } from './Message'
-
-export type CatalogResult = {
-	data: {
-		paging: { cursors: { before: string, after: string } }
-		// eslint-disable-next-line @typescript-eslint/no-explicit-any
-		data: any[]
-	}
-}
-
-export type ProductCreateResult = {
-	data: { product: {} }
-}
-
-export type CatalogStatus = {
-	status: string
-	canAppeal: boolean
-}
-
-export type CatalogCollection = {
-	id: string
-	name: string
-	products: Product[]
-
-	status: CatalogStatus
-}
-
-export type ProductAvailability = 'in stock'
-
-export type ProductBase = {
-	name: string
-	retailerId?: string
-	url?: string
-	description: string
-	price: number
-	currency: string
-	isHidden?: boolean
-}
-
-export type ProductCreate = ProductBase & {
-	/** ISO country code for product origin. Set to undefined for no country */
-	originCountryCode: string | undefined
-	/** images of the product */
-	images: WAMediaUpload[]
-}
-
-export type ProductUpdate = Omit<ProductCreate, 'originCountryCode'>
-
-export type Product = ProductBase & {
-	id: string
-	imageUrls: { [_: string]: string }
-	reviewStatus: { [_: string]: string }
-	availability: ProductAvailability
-}
-
-export type OrderPrice = {
-	currency: string
-	total: number
-}
-
-export type OrderProduct = {
-	id: string
-	imageUrl: string
-	name: string
-	quantity: number
-
-	currency: string
-	price: number
-}
-
-export type OrderDetails = {
-	price: OrderPrice
-	products: OrderProduct[]
-}
-
-export type CatalogCursor = string
-
-export type GetCatalogOptions = {
-	/** cursor to start from */
-	cursor?: CatalogCursor
-	/** number of products to fetch */
-	limit?: number
-
-	jid?: string
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Types/Signal.ts b/node_modules/@whiskeysockets/baileys/src/Types/Signal.ts
deleted file mode 100644
index 12b8e5c..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Types/Signal.ts
+++ /dev/null
@@ -1,68 +0,0 @@
-import { proto } from '../../WAProto'
-
-type DecryptGroupSignalOpts = {
-	group: string
-	authorJid: string
-	msg: Uint8Array
-}
-
-type ProcessSenderKeyDistributionMessageOpts = {
-	item: proto.Message.ISenderKeyDistributionMessage
-	authorJid: string
-}
-
-type DecryptSignalProtoOpts = {
-	jid: string
-	type: 'pkmsg' | 'msg'
-	ciphertext: Uint8Array
-}
-
-type EncryptMessageOpts = {
-	jid: string
-	data: Uint8Array
-}
-
-type EncryptGroupMessageOpts = {
-	group: string
-	data: Uint8Array
-	meId: string
-}
-
-type PreKey = {
-	keyId: number
-	publicKey: Uint8Array
-}
-
-type SignedPreKey = PreKey & {
-	signature: Uint8Array
-}
-
-type E2ESession = {
-	registrationId: number
-	identityKey: Uint8Array
-	signedPreKey: SignedPreKey
-	preKey: PreKey
-}
-
-type E2ESessionOpts = {
-	jid: string
-	session: E2ESession
-}
-
-export type SignalRepository = {
-	decryptGroupMessage(opts: DecryptGroupSignalOpts): Promise<Uint8Array>
-	processSenderKeyDistributionMessage(
-		opts: ProcessSenderKeyDistributionMessageOpts
-	): Promise<void>
-	decryptMessage(opts: DecryptSignalProtoOpts): Promise<Uint8Array>
-	encryptMessage(opts: EncryptMessageOpts): Promise<{
-		type: 'pkmsg' | 'msg'
-		ciphertext: Uint8Array
-	}>
-	encryptGroupMessage(opts: EncryptGroupMessageOpts): Promise<{
-		senderKeyDistributionMessage: Uint8Array
-		ciphertext: Uint8Array
-	}>
-	injectE2ESession(opts: E2ESessionOpts): Promise<void>
-	jidToSignalProtocolAddress(jid: string): string
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Types/State.ts b/node_modules/@whiskeysockets/baileys/src/Types/State.ts
deleted file mode 100644
index 53c39b6..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Types/State.ts
+++ /dev/null
@@ -1,29 +0,0 @@
-import { Contact } from './Contact'
-
-export type WAConnectionState = 'open' | 'connecting' | 'close'
-
-export type ConnectionState = {
-	/** connection is now open, connecting or closed */
-	connection: WAConnectionState
-	/** the error that caused the connection to close */
-	lastDisconnect?: {
-		error: Error | undefined
-		date: Date
-	}
-	/** is this a new login */
-	isNewLogin?: boolean
-	/** the current QR code */
-	qr?: string
-	/** has the device received all pending notifications while it was offline */
-	receivedPendingNotifications?: boolean
-	/** legacy connection options */
-	legacy?: {
-		phoneConnected: boolean
-		user?: Contact
-	}
-	/**
-	 * if the client is shown as an active, online client.
-	 * If this is false, the primary phone and other devices will receive notifs
-	 * */
-	isOnline?: boolean
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Types/index.ts b/node_modules/@whiskeysockets/baileys/src/Types/index.ts
deleted file mode 100644
index ca2b507..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Types/index.ts
+++ /dev/null
@@ -1,58 +0,0 @@
-export * from './Auth'
-export * from './GroupMetadata'
-export * from './Chat'
-export * from './Contact'
-export * from './State'
-export * from './Message'
-export * from './Socket'
-export * from './Events'
-export * from './Product'
-export * from './Call'
-export * from './Signal'
-
-import { AuthenticationState } from './Auth'
-import { SocketConfig } from './Socket'
-
-export type UserFacingSocketConfig = Partial<SocketConfig> & { auth: AuthenticationState }
-
-export enum DisconnectReason {
-    connectionClosed = 428,
-    connectionLost = 408,
-    connectionReplaced = 440,
-    timedOut = 408,
-    loggedOut = 401,
-    badSession = 500,
-    restartRequired = 515,
-    multideviceMismatch = 411,
-    forbidden = 403,
-    unavailableService = 503
-}
-
-export type WAInitResponse = {
-    ref: string
-    ttl: number
-    status: 200
-}
-
-export type WABusinessHoursConfig = {
-    day_of_week: string
-    mode: string
-    open_time?: number
-    close_time?: number
-}
-
-export type WABusinessProfile = {
-    description: string
-    email: string | undefined
-    business_hours: {
-        timezone?: string
-        config?: WABusinessHoursConfig[]
-        business_config?: WABusinessHoursConfig[]
-    }
-    website: string[]
-    category?: string
-    wid?: string
-    address?: string
-}
-
-export type CurveKeyPair = { private: Uint8Array, public: Uint8Array }
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/auth-utils.ts b/node_modules/@whiskeysockets/baileys/src/Utils/auth-utils.ts
deleted file mode 100644
index 82f3dc8..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/auth-utils.ts
+++ /dev/null
@@ -1,222 +0,0 @@
-import { randomBytes } from 'crypto'
-import NodeCache from 'node-cache'
-import type { Logger } from 'pino'
-import { v4 as uuidv4 } from 'uuid'
-import { DEFAULT_CACHE_TTLS } from '../Defaults'
-import type { AuthenticationCreds, CacheStore, SignalDataSet, SignalDataTypeMap, SignalKeyStore, SignalKeyStoreWithTransaction, TransactionCapabilityOptions } from '../Types'
-import { Curve, signedKeyPair } from './crypto'
-import { delay, generateRegistrationId } from './generics'
-
-/**
- * Adds caching capability to a SignalKeyStore
- * @param store the store to add caching to
- * @param logger to log trace events
- * @param _cache cache store to use
- */
-export function makeCacheableSignalKeyStore(
-	store: SignalKeyStore,
-	logger: Logger,
-	_cache?: CacheStore
-): SignalKeyStore {
-	const cache = _cache || new NodeCache({
-		stdTTL: DEFAULT_CACHE_TTLS.SIGNAL_STORE, // 5 minutes
-		useClones: false,
-		deleteOnExpire: true,
-	})
-
-	function getUniqueId(type: string, id: string) {
-		return `${type}.${id}`
-	}
-
-	return {
-		async get(type, ids) {
-			const data: { [_: string]: SignalDataTypeMap[typeof type] } = { }
-			const idsToFetch: string[] = []
-			for(const id of ids) {
-				const item = cache.get<SignalDataTypeMap[typeof type]>(getUniqueId(type, id))
-				if(typeof item !== 'undefined') {
-					data[id] = item
-				} else {
-					idsToFetch.push(id)
-				}
-			}
-
-			if(idsToFetch.length) {
-				logger.trace({ items: idsToFetch.length }, 'loading from store')
-				const fetched = await store.get(type, idsToFetch)
-				for(const id of idsToFetch) {
-					const item = fetched[id]
-					if(item) {
-						data[id] = item
-						cache.set(getUniqueId(type, id), item)
-					}
-				}
-			}
-
-			return data
-		},
-		async set(data) {
-			let keys = 0
-			for(const type in data) {
-				for(const id in data[type]) {
-					cache.set(getUniqueId(type, id), data[type][id])
-					keys += 1
-				}
-			}
-
-			logger.trace({ keys }, 'updated cache')
-
-			await store.set(data)
-		},
-		async clear() {
-			cache.flushAll()
-			await store.clear?.()
-		}
-	}
-}
-
-/**
- * Adds DB like transaction capability (https://en.wikipedia.org/wiki/Database_transaction) to the SignalKeyStore,
- * this allows batch read & write operations & improves the performance of the lib
- * @param state the key store to apply this capability to
- * @param logger logger to log events
- * @returns SignalKeyStore with transaction capability
- */
-export const addTransactionCapability = (
-	state: SignalKeyStore,
-	logger: Logger,
-	{ maxCommitRetries, delayBetweenTriesMs }: TransactionCapabilityOptions
-): SignalKeyStoreWithTransaction => {
-	// number of queries made to the DB during the transaction
-	// only there for logging purposes
-	let dbQueriesInTransaction = 0
-	let transactionCache: SignalDataSet = { }
-	let mutations: SignalDataSet = { }
-
-	let transactionsInProgress = 0
-
-	return {
-		get: async(type, ids) => {
-			if(isInTransaction()) {
-				const dict = transactionCache[type]
-				const idsRequiringFetch = dict
-					? ids.filter(item => typeof dict[item] === 'undefined')
-					: ids
-				// only fetch if there are any items to fetch
-				if(idsRequiringFetch.length) {
-					dbQueriesInTransaction += 1
-					const result = await state.get(type, idsRequiringFetch)
-
-					transactionCache[type] ||= {}
-					Object.assign(
-						transactionCache[type]!,
-						result
-					)
-				}
-
-				return ids.reduce(
-					(dict, id) => {
-						const value = transactionCache[type]?.[id]
-						if(value) {
-							dict[id] = value
-						}
-
-						return dict
-					}, { }
-				)
-			} else {
-				return state.get(type, ids)
-			}
-		},
-		set: data => {
-			if(isInTransaction()) {
-				logger.trace({ types: Object.keys(data) }, 'caching in transaction')
-				for(const key in data) {
-					transactionCache[key] = transactionCache[key] || { }
-					Object.assign(transactionCache[key], data[key])
-
-					mutations[key] = mutations[key] || { }
-					Object.assign(mutations[key], data[key])
-				}
-			} else {
-				return state.set(data)
-			}
-		},
-		isInTransaction,
-		async transaction(work) {
-			let result: Awaited<ReturnType<typeof work>>
-			transactionsInProgress += 1
-			if(transactionsInProgress === 1) {
-				logger.trace('entering transaction')
-			}
-
-			try {
-				result = await work()
-				// commit if this is the outermost transaction
-				if(transactionsInProgress === 1) {
-					if(Object.keys(mutations).length) {
-						logger.trace('committing transaction')
-						// retry mechanism to ensure we've some recovery
-						// in case a transaction fails in the first attempt
-						let tries = maxCommitRetries
-						while(tries) {
-							tries -= 1
-							try {
-								await state.set(mutations)
-								logger.trace({ dbQueriesInTransaction }, 'committed transaction')
-								break
-							} catch(error) {
-								logger.warn(`failed to commit ${Object.keys(mutations).length} mutations, tries left=${tries}`)
-								await delay(delayBetweenTriesMs)
-							}
-						}
-					} else {
-						logger.trace('no mutations in transaction')
-					}
-				}
-			} finally {
-				transactionsInProgress -= 1
-				if(transactionsInProgress === 0) {
-					transactionCache = { }
-					mutations = { }
-					dbQueriesInTransaction = 0
-				}
-			}
-
-			return result
-		}
-	}
-
-	function isInTransaction() {
-		return transactionsInProgress > 0
-	}
-}
-
-export const initAuthCreds = (): AuthenticationCreds => {
-	const identityKey = Curve.generateKeyPair()
-	return {
-		noiseKey: Curve.generateKeyPair(),
-		pairingEphemeralKeyPair: Curve.generateKeyPair(),
-		signedIdentityKey: identityKey,
-		signedPreKey: signedKeyPair(identityKey, 1),
-		registrationId: generateRegistrationId(),
-		advSecretKey: randomBytes(32).toString('base64'),
-		processedHistoryMessages: [],
-		nextPreKeyId: 1,
-		firstUnuploadedPreKeyId: 1,
-		accountSyncCounter: 0,
-		accountSettings: {
-			unarchiveChats: false
-		},
-		// mobile creds
-		deviceId: Buffer.from(uuidv4().replace(/-/g, ''), 'hex').toString('base64url'),
-		phoneId: uuidv4(),
-		identityId: randomBytes(20),
-		registered: false,
-		backupToken: randomBytes(20),
-		registration: {} as never,
-		pairingCode: undefined,
-		lastPropHash: undefined,
-		routingInfo: undefined,
-	}
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/baileys-event-stream.ts b/node_modules/@whiskeysockets/baileys/src/Utils/baileys-event-stream.ts
deleted file mode 100644
index 26fa610..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/baileys-event-stream.ts
+++ /dev/null
@@ -1,66 +0,0 @@
-import EventEmitter from 'events'
-import { createReadStream } from 'fs'
-import { writeFile } from 'fs/promises'
-import { createInterface } from 'readline'
-import type { BaileysEventEmitter } from '../Types'
-import { delay } from './generics'
-import { makeMutex } from './make-mutex'
-
-/**
- * Captures events from a baileys event emitter & stores them in a file
- * @param ev The event emitter to read events from
- * @param filename File to save to
- */
-export const captureEventStream = (ev: BaileysEventEmitter, filename: string) => {
-	const oldEmit = ev.emit
-	// write mutex so data is appended in order
-	const writeMutex = makeMutex()
-	// monkey patch eventemitter to capture all events
-	ev.emit = function(...args: any[]) {
-		const content = JSON.stringify({ timestamp: Date.now(), event: args[0], data: args[1] }) + '\n'
-		const result = oldEmit.apply(ev, args)
-
-		writeMutex.mutex(
-			async() => {
-				await writeFile(filename, content, { flag: 'a' })
-			}
-		)
-
-		return result
-	}
-}
-
-/**
- * Read event file and emit events from there
- * @param filename filename containing event data
- * @param delayIntervalMs delay between each event emit
- */
-export const readAndEmitEventStream = (filename: string, delayIntervalMs: number = 0) => {
-	const ev = new EventEmitter() as BaileysEventEmitter
-
-	const fireEvents = async() => {
-		// from: https://stackoverflow.com/questions/6156501/read-a-file-one-line-at-a-time-in-node-js
-		const fileStream = createReadStream(filename)
-
-		const rl = createInterface({
-			input: fileStream,
-			crlfDelay: Infinity
-		})
-		// Note: we use the crlfDelay option to recognize all instances of CR LF
-		// ('\r\n') in input.txt as a single line break.
-		for await (const line of rl) {
-			if(line) {
-				const { event, data } = JSON.parse(line)
-				ev.emit(event, data)
-				delayIntervalMs && await delay(delayIntervalMs)
-			}
-		}
-
-		fileStream.close()
-	}
-
-	return {
-		ev,
-		task: fireEvents()
-	}
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/business.ts b/node_modules/@whiskeysockets/baileys/src/Utils/business.ts
deleted file mode 100644
index 57459a5..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/business.ts
+++ /dev/null
@@ -1,275 +0,0 @@
-import { Boom } from '@hapi/boom'
-import { createHash } from 'crypto'
-import { CatalogCollection, CatalogStatus, OrderDetails, OrderProduct, Product, ProductCreate, ProductUpdate, WAMediaUpload, WAMediaUploadFunction } from '../Types'
-import { BinaryNode, getBinaryNodeChild, getBinaryNodeChildren, getBinaryNodeChildString } from '../WABinary'
-import { getStream, getUrlFromDirectPath, toReadable } from './messages-media'
-
-export const parseCatalogNode = (node: BinaryNode) => {
-	const catalogNode = getBinaryNodeChild(node, 'product_catalog')
-	const products = getBinaryNodeChildren(catalogNode, 'product').map(parseProductNode)
-	const paging = getBinaryNodeChild(catalogNode, 'paging')
-
-	return {
-		products,
-		nextPageCursor: paging
-			? getBinaryNodeChildString(paging, 'after')
-			: undefined
-	}
-}
-
-export const parseCollectionsNode = (node: BinaryNode) => {
-	const collectionsNode = getBinaryNodeChild(node, 'collections')
-	const collections = getBinaryNodeChildren(collectionsNode, 'collection').map<CatalogCollection>(
-		collectionNode => {
-			const id = getBinaryNodeChildString(collectionNode, 'id')!
-			const name = getBinaryNodeChildString(collectionNode, 'name')!
-
-			const products = getBinaryNodeChildren(collectionNode, 'product').map(parseProductNode)
-			return {
-				id,
-				name,
-				products,
-				status: parseStatusInfo(collectionNode)
-			}
-		}
-	)
-
-	return {
-		collections
-	}
-}
-
-export const parseOrderDetailsNode = (node: BinaryNode) => {
-	const orderNode = getBinaryNodeChild(node, 'order')
-	const products = getBinaryNodeChildren(orderNode, 'product').map<OrderProduct>(
-		productNode => {
-			const imageNode = getBinaryNodeChild(productNode, 'image')!
-			return {
-				id: getBinaryNodeChildString(productNode, 'id')!,
-				name: getBinaryNodeChildString(productNode, 'name')!,
-				imageUrl: getBinaryNodeChildString(imageNode, 'url')!,
-				price: +getBinaryNodeChildString(productNode, 'price')!,
-				currency: getBinaryNodeChildString(productNode, 'currency')!,
-				quantity: +getBinaryNodeChildString(productNode, 'quantity')!
-			}
-		}
-	)
-
-	const priceNode = getBinaryNodeChild(orderNode, 'price')
-
-	const orderDetails: OrderDetails = {
-		price: {
-			total: +getBinaryNodeChildString(priceNode, 'total')!,
-			currency: getBinaryNodeChildString(priceNode, 'currency')!,
-		},
-		products
-	}
-
-	return orderDetails
-}
-
-export const toProductNode = (productId: string | undefined, product: ProductCreate | ProductUpdate) => {
-	const attrs: BinaryNode['attrs'] = { }
-	const content: BinaryNode[] = [ ]
-
-	if(typeof productId !== 'undefined') {
-		content.push({
-			tag: 'id',
-			attrs: { },
-			content: Buffer.from(productId)
-		})
-	}
-
-	if(typeof product.name !== 'undefined') {
-		content.push({
-			tag: 'name',
-			attrs: { },
-			content: Buffer.from(product.name)
-		})
-	}
-
-	if(typeof product.description !== 'undefined') {
-		content.push({
-			tag: 'description',
-			attrs: { },
-			content: Buffer.from(product.description)
-		})
-	}
-
-	if(typeof product.retailerId !== 'undefined') {
-		content.push({
-			tag: 'retailer_id',
-			attrs: { },
-			content: Buffer.from(product.retailerId)
-		})
-	}
-
-	if(product.images.length) {
-		content.push({
-			tag: 'media',
-			attrs: { },
-			content: product.images.map(
-				img => {
-					if(!('url' in img)) {
-						throw new Boom('Expected img for product to already be uploaded', { statusCode: 400 })
-					}
-
-					return {
-						tag: 'image',
-						attrs: { },
-						content: [
-							{
-								tag: 'url',
-								attrs: { },
-								content: Buffer.from(img.url.toString())
-							}
-						]
-					}
-				}
-			)
-		})
-	}
-
-	if(typeof product.price !== 'undefined') {
-		content.push({
-			tag: 'price',
-			attrs: { },
-			content: Buffer.from(product.price.toString())
-		})
-	}
-
-	if(typeof product.currency !== 'undefined') {
-		content.push({
-			tag: 'currency',
-			attrs: { },
-			content: Buffer.from(product.currency)
-		})
-	}
-
-	if('originCountryCode' in product) {
-		if(typeof product.originCountryCode === 'undefined') {
-			attrs['compliance_category'] = 'COUNTRY_ORIGIN_EXEMPT'
-		} else {
-			content.push({
-				tag: 'compliance_info',
-				attrs: { },
-				content: [
-					{
-						tag: 'country_code_origin',
-						attrs: { },
-						content: Buffer.from(product.originCountryCode)
-					}
-				]
-			})
-		}
-	}
-
-
-	if(typeof product.isHidden !== 'undefined') {
-		attrs['is_hidden'] = product.isHidden.toString()
-	}
-
-	const node: BinaryNode = {
-		tag: 'product',
-		attrs,
-		content
-	}
-	return node
-}
-
-export const parseProductNode = (productNode: BinaryNode) => {
-	const isHidden = productNode.attrs.is_hidden === 'true'
-	const id = getBinaryNodeChildString(productNode, 'id')!
-
-	const mediaNode = getBinaryNodeChild(productNode, 'media')!
-	const statusInfoNode = getBinaryNodeChild(productNode, 'status_info')!
-
-	const product: Product = {
-		id,
-		imageUrls: parseImageUrls(mediaNode),
-		reviewStatus: {
-			whatsapp: getBinaryNodeChildString(statusInfoNode, 'status')!,
-		},
-		availability: 'in stock',
-		name: getBinaryNodeChildString(productNode, 'name')!,
-		retailerId: getBinaryNodeChildString(productNode, 'retailer_id'),
-		url: getBinaryNodeChildString(productNode, 'url'),
-		description: getBinaryNodeChildString(productNode, 'description')!,
-		price:  +getBinaryNodeChildString(productNode, 'price')!,
-		currency: getBinaryNodeChildString(productNode, 'currency')!,
-		isHidden,
-	}
-
-	return product
-}
-
-/**
- * Uploads images not already uploaded to WA's servers
- */
-export async function uploadingNecessaryImagesOfProduct<T extends ProductUpdate | ProductCreate>(product: T, waUploadToServer: WAMediaUploadFunction, timeoutMs = 30_000) {
-	product = {
-		...product,
-		images: product.images ? await uploadingNecessaryImages(product.images, waUploadToServer, timeoutMs) : product.images
-	}
-	return product
-}
-
-/**
- * Uploads images not already uploaded to WA's servers
- */
-export const uploadingNecessaryImages = async(
-	images: WAMediaUpload[],
-	waUploadToServer: WAMediaUploadFunction,
-	timeoutMs = 30_000
-) => {
-	const results = await Promise.all(
-		images.map<Promise<{ url: string }>>(
-			async img => {
-
-				if('url' in img) {
-					const url = img.url.toString()
-					if(url.includes('.whatsapp.net')) {
-						return { url }
-					}
-				}
-
-				const { stream } = await getStream(img)
-				const hasher = createHash('sha256')
-				const contentBlocks: Buffer[] = []
-				for await (const block of stream) {
-					hasher.update(block)
-					contentBlocks.push(block)
-				}
-
-				const sha = hasher.digest('base64')
-
-				const { directPath } = await waUploadToServer(
-					toReadable(Buffer.concat(contentBlocks)),
-					{
-						mediaType: 'product-catalog-image',
-						fileEncSha256B64: sha,
-						timeoutMs
-					}
-				)
-				return { url: getUrlFromDirectPath(directPath) }
-			}
-		)
-	)
-	return results
-}
-
-const parseImageUrls = (mediaNode: BinaryNode) => {
-	const imgNode = getBinaryNodeChild(mediaNode, 'image')
-	return {
-		requested: getBinaryNodeChildString(imgNode, 'request_image_url')!,
-		original: getBinaryNodeChildString(imgNode, 'original_image_url')!
-	}
-}
-
-const parseStatusInfo = (mediaNode: BinaryNode): CatalogStatus => {
-	const node = getBinaryNodeChild(mediaNode, 'status_info')
-	return {
-		status: getBinaryNodeChildString(node, 'status')!,
-		canAppeal: getBinaryNodeChildString(node, 'can_appeal') === 'true',
-	}
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/chat-utils.ts b/node_modules/@whiskeysockets/baileys/src/Utils/chat-utils.ts
deleted file mode 100644
index 22e4243..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/chat-utils.ts
+++ /dev/null
@@ -1,860 +0,0 @@
-import { Boom } from '@hapi/boom'
-import { AxiosRequestConfig } from 'axios'
-import type { Logger } from 'pino'
-import { proto } from '../../WAProto'
-import { BaileysEventEmitter, Chat, ChatModification, ChatMutation, ChatUpdate, Contact, InitialAppStateSyncOptions, LastMessageList, LTHashState, WAPatchCreate, WAPatchName } from '../Types'
-import { ChatLabelAssociation, LabelAssociationType, MessageLabelAssociation } from '../Types/LabelAssociation'
-import { BinaryNode, getBinaryNodeChild, getBinaryNodeChildren, isJidGroup, jidNormalizedUser } from '../WABinary'
-import { aesDecrypt, aesEncrypt, hkdf, hmacSign } from './crypto'
-import { toNumber } from './generics'
-import { LT_HASH_ANTI_TAMPERING } from './lt-hash'
-import { downloadContentFromMessage, } from './messages-media'
-
-type FetchAppStateSyncKey = (keyId: string) => Promise<proto.Message.IAppStateSyncKeyData | null | undefined>
-
-export type ChatMutationMap = { [index: string]: ChatMutation }
-
-const mutationKeys = (keydata: Uint8Array) => {
-	const expanded = hkdf(keydata, 160, { info: 'WhatsApp Mutation Keys' })
-	return {
-		indexKey: expanded.slice(0, 32),
-		valueEncryptionKey: expanded.slice(32, 64),
-		valueMacKey: expanded.slice(64, 96),
-		snapshotMacKey: expanded.slice(96, 128),
-		patchMacKey: expanded.slice(128, 160)
-	}
-}
-
-const generateMac = (operation: proto.SyncdMutation.SyncdOperation, data: Buffer, keyId: Uint8Array | string, key: Buffer) => {
-	const getKeyData = () => {
-		let r: number
-		switch (operation) {
-		case proto.SyncdMutation.SyncdOperation.SET:
-			r = 0x01
-			break
-		case proto.SyncdMutation.SyncdOperation.REMOVE:
-			r = 0x02
-			break
-		}
-
-		const buff = Buffer.from([r])
-		return Buffer.concat([buff, Buffer.from(keyId as any, 'base64')])
-	}
-
-	const keyData = getKeyData()
-
-	const last = Buffer.alloc(8) // 8 bytes
-	last.set([keyData.length], last.length - 1)
-
-	const total = Buffer.concat([keyData, data, last])
-	const hmac = hmacSign(total, key, 'sha512')
-
-	return hmac.slice(0, 32)
-}
-
-const to64BitNetworkOrder = (e: number) => {
-	const buff = Buffer.alloc(8)
-	buff.writeUint32BE(e, 4)
-	return buff
-}
-
-type Mac = { indexMac: Uint8Array, valueMac: Uint8Array, operation: proto.SyncdMutation.SyncdOperation }
-
-const makeLtHashGenerator = ({ indexValueMap, hash }: Pick<LTHashState, 'hash' | 'indexValueMap'>) => {
-	indexValueMap = { ...indexValueMap }
-	const addBuffs: ArrayBuffer[] = []
-	const subBuffs: ArrayBuffer[] = []
-
-	return {
-		mix: ({ indexMac, valueMac, operation }: Mac) => {
-			const indexMacBase64 = Buffer.from(indexMac).toString('base64')
-			const prevOp = indexValueMap[indexMacBase64]
-			if(operation === proto.SyncdMutation.SyncdOperation.REMOVE) {
-				if(!prevOp) {
-					throw new Boom('tried remove, but no previous op', { data: { indexMac, valueMac } })
-				}
-
-				// remove from index value mac, since this mutation is erased
-				delete indexValueMap[indexMacBase64]
-			} else {
-				addBuffs.push(new Uint8Array(valueMac).buffer)
-				// add this index into the history map
-				indexValueMap[indexMacBase64] = { valueMac }
-			}
-
-			if(prevOp) {
-				subBuffs.push(new Uint8Array(prevOp.valueMac).buffer)
-			}
-		},
-		finish: () => {
-			const hashArrayBuffer = new Uint8Array(hash).buffer
-			const result = LT_HASH_ANTI_TAMPERING.subtractThenAdd(hashArrayBuffer, addBuffs, subBuffs)
-			const buffer = Buffer.from(result)
-
-			return {
-				hash: buffer,
-				indexValueMap
-			}
-		}
-	}
-}
-
-const generateSnapshotMac = (lthash: Uint8Array, version: number, name: WAPatchName, key: Buffer) => {
-	const total = Buffer.concat([
-		lthash,
-		to64BitNetworkOrder(version),
-		Buffer.from(name, 'utf-8')
-	])
-	return hmacSign(total, key, 'sha256')
-}
-
-const generatePatchMac = (snapshotMac: Uint8Array, valueMacs: Uint8Array[], version: number, type: WAPatchName, key: Buffer) => {
-	const total = Buffer.concat([
-		snapshotMac,
-		...valueMacs,
-		to64BitNetworkOrder(version),
-		Buffer.from(type, 'utf-8')
-	])
-	return hmacSign(total, key)
-}
-
-export const newLTHashState = (): LTHashState => ({ version: 0, hash: Buffer.alloc(128), indexValueMap: {} })
-
-export const encodeSyncdPatch = async(
-	{ type, index, syncAction, apiVersion, operation }: WAPatchCreate,
-	myAppStateKeyId: string,
-	state: LTHashState,
-	getAppStateSyncKey: FetchAppStateSyncKey
-) => {
-	const key = !!myAppStateKeyId ? await getAppStateSyncKey(myAppStateKeyId) : undefined
-	if(!key) {
-		throw new Boom(`myAppStateKey ("${myAppStateKeyId}") not present`, { statusCode: 404 })
-	}
-
-	const encKeyId = Buffer.from(myAppStateKeyId, 'base64')
-
-	state = { ...state, indexValueMap: { ...state.indexValueMap } }
-
-	const indexBuffer = Buffer.from(JSON.stringify(index))
-	const dataProto = proto.SyncActionData.fromObject({
-		index: indexBuffer,
-		value: syncAction,
-		padding: new Uint8Array(0),
-		version: apiVersion
-	})
-	const encoded = proto.SyncActionData.encode(dataProto).finish()
-
-	const keyValue = mutationKeys(key!.keyData!)
-
-	const encValue = aesEncrypt(encoded, keyValue.valueEncryptionKey)
-	const valueMac = generateMac(operation, encValue, encKeyId, keyValue.valueMacKey)
-	const indexMac = hmacSign(indexBuffer, keyValue.indexKey)
-
-	// update LT hash
-	const generator = makeLtHashGenerator(state)
-	generator.mix({ indexMac, valueMac, operation })
-	Object.assign(state, generator.finish())
-
-	state.version += 1
-
-	const snapshotMac = generateSnapshotMac(state.hash, state.version, type, keyValue.snapshotMacKey)
-
-	const patch: proto.ISyncdPatch = {
-		patchMac: generatePatchMac(snapshotMac, [valueMac], state.version, type, keyValue.patchMacKey),
-		snapshotMac: snapshotMac,
-		keyId: { id: encKeyId },
-		mutations: [
-			{
-				operation: operation,
-				record: {
-					index: {
-						blob: indexMac
-					},
-					value: {
-						blob: Buffer.concat([encValue, valueMac])
-					},
-					keyId: { id: encKeyId }
-				}
-			}
-		]
-	}
-
-	const base64Index = indexMac.toString('base64')
-	state.indexValueMap[base64Index] = { valueMac }
-
-	return { patch, state }
-}
-
-export const decodeSyncdMutations = async(
-	msgMutations: (proto.ISyncdMutation | proto.ISyncdRecord)[],
-	initialState: LTHashState,
-	getAppStateSyncKey: FetchAppStateSyncKey,
-	onMutation: (mutation: ChatMutation) => void,
-	validateMacs: boolean
-) => {
-	const ltGenerator = makeLtHashGenerator(initialState)
-	// indexKey used to HMAC sign record.index.blob
-	// valueEncryptionKey used to AES-256-CBC encrypt record.value.blob[0:-32]
-	// the remaining record.value.blob[0:-32] is the mac, it the HMAC sign of key.keyId + decoded proto data + length of bytes in keyId
-	for(const msgMutation of msgMutations!) {
-		// if it's a syncdmutation, get the operation property
-		// otherwise, if it's only a record -- it'll be a SET mutation
-		const operation = 'operation' in msgMutation ? msgMutation.operation : proto.SyncdMutation.SyncdOperation.SET
-		const record = ('record' in msgMutation && !!msgMutation.record) ? msgMutation.record : msgMutation as proto.ISyncdRecord
-
-		const key = await getKey(record.keyId!.id!)
-		const content = Buffer.from(record.value!.blob!)
-		const encContent = content.slice(0, -32)
-		const ogValueMac = content.slice(-32)
-		if(validateMacs) {
-			const contentHmac = generateMac(operation!, encContent, record.keyId!.id!, key.valueMacKey)
-			if(Buffer.compare(contentHmac, ogValueMac) !== 0) {
-				throw new Boom('HMAC content verification failed')
-			}
-		}
-
-		const result = aesDecrypt(encContent, key.valueEncryptionKey)
-		const syncAction = proto.SyncActionData.decode(result)
-
-		if(validateMacs) {
-			const hmac = hmacSign(syncAction.index, key.indexKey)
-			if(Buffer.compare(hmac, record.index!.blob!) !== 0) {
-				throw new Boom('HMAC index verification failed')
-			}
-		}
-
-		const indexStr = Buffer.from(syncAction.index).toString()
-		onMutation({ syncAction, index: JSON.parse(indexStr) })
-
-		ltGenerator.mix({
-			indexMac: record.index!.blob!,
-			valueMac: ogValueMac,
-			operation: operation!
-		})
-	}
-
-	return ltGenerator.finish()
-
-	async function getKey(keyId: Uint8Array) {
-		const base64Key = Buffer.from(keyId!).toString('base64')
-		const keyEnc = await getAppStateSyncKey(base64Key)
-		if(!keyEnc) {
-			throw new Boom(`failed to find key "${base64Key}" to decode mutation`, { statusCode: 404, data: { msgMutations } })
-		}
-
-		return mutationKeys(keyEnc.keyData!)
-	}
-}
-
-export const decodeSyncdPatch = async(
-	msg: proto.ISyncdPatch,
-	name: WAPatchName,
-	initialState: LTHashState,
-	getAppStateSyncKey: FetchAppStateSyncKey,
-	onMutation: (mutation: ChatMutation) => void,
-	validateMacs: boolean
-) => {
-	if(validateMacs) {
-		const base64Key = Buffer.from(msg.keyId!.id!).toString('base64')
-		const mainKeyObj = await getAppStateSyncKey(base64Key)
-		if(!mainKeyObj) {
-			throw new Boom(`failed to find key "${base64Key}" to decode patch`, { statusCode: 404, data: { msg } })
-		}
-
-		const mainKey = mutationKeys(mainKeyObj.keyData!)
-		const mutationmacs = msg.mutations!.map(mutation => mutation.record!.value!.blob!.slice(-32))
-
-		const patchMac = generatePatchMac(msg.snapshotMac!, mutationmacs, toNumber(msg.version!.version!), name, mainKey.patchMacKey)
-		if(Buffer.compare(patchMac, msg.patchMac!) !== 0) {
-			throw new Boom('Invalid patch mac')
-		}
-	}
-
-	const result = await decodeSyncdMutations(msg!.mutations!, initialState, getAppStateSyncKey, onMutation, validateMacs)
-	return result
-}
-
-export const extractSyncdPatches = async(
-	result: BinaryNode,
-	options: AxiosRequestConfig<any>
-) => {
-	const syncNode = getBinaryNodeChild(result, 'sync')
-	const collectionNodes = getBinaryNodeChildren(syncNode, 'collection')
-
-	const final = {} as { [T in WAPatchName]: { patches: proto.ISyncdPatch[], hasMorePatches: boolean, snapshot?: proto.ISyncdSnapshot } }
-	await Promise.all(
-		collectionNodes.map(
-			async collectionNode => {
-				const patchesNode = getBinaryNodeChild(collectionNode, 'patches')
-
-				const patches = getBinaryNodeChildren(patchesNode || collectionNode, 'patch')
-				const snapshotNode = getBinaryNodeChild(collectionNode, 'snapshot')
-
-				const syncds: proto.ISyncdPatch[] = []
-				const name = collectionNode.attrs.name as WAPatchName
-
-				const hasMorePatches = collectionNode.attrs.has_more_patches === 'true'
-
-				let snapshot: proto.ISyncdSnapshot | undefined = undefined
-				if(snapshotNode && !!snapshotNode.content) {
-					if(!Buffer.isBuffer(snapshotNode)) {
-						snapshotNode.content = Buffer.from(Object.values(snapshotNode.content))
-					}
-
-					const blobRef = proto.ExternalBlobReference.decode(
-						snapshotNode.content! as Buffer
-					)
-					const data = await downloadExternalBlob(blobRef, options)
-					snapshot = proto.SyncdSnapshot.decode(data)
-				}
-
-				for(let { content } of patches) {
-					if(content) {
-						if(!Buffer.isBuffer(content)) {
-							content = Buffer.from(Object.values(content))
-						}
-
-						const syncd = proto.SyncdPatch.decode(content! as Uint8Array)
-						if(!syncd.version) {
-							syncd.version = { version: +collectionNode.attrs.version + 1 }
-						}
-
-						syncds.push(syncd)
-					}
-				}
-
-				final[name] = { patches: syncds, hasMorePatches, snapshot }
-			}
-		)
-	)
-
-	return final
-}
-
-
-export const downloadExternalBlob = async(
-	blob: proto.IExternalBlobReference,
-	options: AxiosRequestConfig<any>
-) => {
-	const stream = await downloadContentFromMessage(blob, 'md-app-state', { options })
-	const bufferArray: Buffer[] = []
-	for await (const chunk of stream) {
-		bufferArray.push(chunk)
-	}
-
-	return Buffer.concat(bufferArray)
-}
-
-export const downloadExternalPatch = async(
-	blob: proto.IExternalBlobReference,
-	options: AxiosRequestConfig<any>
-) => {
-	const buffer = await downloadExternalBlob(blob, options)
-	const syncData = proto.SyncdMutations.decode(buffer)
-	return syncData
-}
-
-export const decodeSyncdSnapshot = async(
-	name: WAPatchName,
-	snapshot: proto.ISyncdSnapshot,
-	getAppStateSyncKey: FetchAppStateSyncKey,
-	minimumVersionNumber: number | undefined,
-	validateMacs: boolean = true
-) => {
-	const newState = newLTHashState()
-	newState.version = toNumber(snapshot.version!.version!)
-
-	const mutationMap: ChatMutationMap = {}
-	const areMutationsRequired = typeof minimumVersionNumber === 'undefined'
-		|| newState.version > minimumVersionNumber
-
-	const { hash, indexValueMap } = await decodeSyncdMutations(
-		snapshot.records!,
-		newState,
-		getAppStateSyncKey,
-		areMutationsRequired
-			? (mutation) => {
-				const index = mutation.syncAction.index?.toString()
-				mutationMap[index!] = mutation
-			}
-			: () => { },
-		validateMacs
-	)
-	newState.hash = hash
-	newState.indexValueMap = indexValueMap
-
-	if(validateMacs) {
-		const base64Key = Buffer.from(snapshot.keyId!.id!).toString('base64')
-		const keyEnc = await getAppStateSyncKey(base64Key)
-		if(!keyEnc) {
-			throw new Boom(`failed to find key "${base64Key}" to decode mutation`)
-		}
-
-		const result = mutationKeys(keyEnc.keyData!)
-		const computedSnapshotMac = generateSnapshotMac(newState.hash, newState.version, name, result.snapshotMacKey)
-		if(Buffer.compare(snapshot.mac!, computedSnapshotMac) !== 0) {
-			throw new Boom(`failed to verify LTHash at ${newState.version} of ${name} from snapshot`)
-		}
-	}
-
-	return {
-		state: newState,
-		mutationMap
-	}
-}
-
-export const decodePatches = async(
-	name: WAPatchName,
-	syncds: proto.ISyncdPatch[],
-	initial: LTHashState,
-	getAppStateSyncKey: FetchAppStateSyncKey,
-	options: AxiosRequestConfig<any>,
-	minimumVersionNumber?: number,
-	logger?: Logger,
-	validateMacs: boolean = true
-) => {
-	const newState: LTHashState = {
-		...initial,
-		indexValueMap: { ...initial.indexValueMap }
-	}
-
-	const mutationMap: ChatMutationMap = {}
-
-	for(let i = 0; i < syncds.length; i++) {
-		const syncd = syncds[i]
-		const { version, keyId, snapshotMac } = syncd
-		if(syncd.externalMutations) {
-			logger?.trace({ name, version }, 'downloading external patch')
-			const ref = await downloadExternalPatch(syncd.externalMutations, options)
-			logger?.debug({ name, version, mutations: ref.mutations.length }, 'downloaded external patch')
-			syncd.mutations?.push(...ref.mutations)
-		}
-
-		const patchVersion = toNumber(version!.version!)
-
-		newState.version = patchVersion
-		const shouldMutate = typeof minimumVersionNumber === 'undefined' || patchVersion > minimumVersionNumber
-
-		const decodeResult = await decodeSyncdPatch(
-			syncd,
-			name,
-			newState,
-			getAppStateSyncKey,
-			shouldMutate
-				? mutation => {
-					const index = mutation.syncAction.index?.toString()
-					mutationMap[index!] = mutation
-				}
-				: (() => { }),
-			true
-		)
-
-		newState.hash = decodeResult.hash
-		newState.indexValueMap = decodeResult.indexValueMap
-
-		if(validateMacs) {
-			const base64Key = Buffer.from(keyId!.id!).toString('base64')
-			const keyEnc = await getAppStateSyncKey(base64Key)
-			if(!keyEnc) {
-				throw new Boom(`failed to find key "${base64Key}" to decode mutation`)
-			}
-
-			const result = mutationKeys(keyEnc.keyData!)
-			const computedSnapshotMac = generateSnapshotMac(newState.hash, newState.version, name, result.snapshotMacKey)
-			if(Buffer.compare(snapshotMac!, computedSnapshotMac) !== 0) {
-				throw new Boom(`failed to verify LTHash at ${newState.version} of ${name}`)
-			}
-		}
-
-		// clear memory used up by the mutations
-		syncd.mutations = []
-	}
-
-	return { state: newState, mutationMap }
-}
-
-export const chatModificationToAppPatch = (
-	mod: ChatModification,
-	jid: string
-) => {
-	const OP = proto.SyncdMutation.SyncdOperation
-	const getMessageRange = (lastMessages: LastMessageList) => {
-		let messageRange: proto.SyncActionValue.ISyncActionMessageRange
-		if(Array.isArray(lastMessages)) {
-			const lastMsg = lastMessages[lastMessages.length - 1]
-			messageRange = {
-				lastMessageTimestamp: lastMsg?.messageTimestamp,
-				messages: lastMessages?.length ? lastMessages.map(
-					m => {
-						if(!m.key?.id || !m.key?.remoteJid) {
-							throw new Boom('Incomplete key', { statusCode: 400, data: m })
-						}
-
-						if(isJidGroup(m.key.remoteJid) && !m.key.fromMe && !m.key.participant) {
-							throw new Boom('Expected not from me message to have participant', { statusCode: 400, data: m })
-						}
-
-						if(!m.messageTimestamp || !toNumber(m.messageTimestamp)) {
-							throw new Boom('Missing timestamp in last message list', { statusCode: 400, data: m })
-						}
-
-						if(m.key.participant) {
-							m.key.participant = jidNormalizedUser(m.key.participant)
-						}
-
-						return m
-					}
-				) : undefined
-			}
-		} else {
-			messageRange = lastMessages
-		}
-
-		return messageRange
-	}
-
-	let patch: WAPatchCreate
-	if('mute' in mod) {
-		patch = {
-			syncAction: {
-				muteAction: {
-					muted: !!mod.mute,
-					muteEndTimestamp: mod.mute || undefined
-				}
-			},
-			index: ['mute', jid],
-			type: 'regular_high',
-			apiVersion: 2,
-			operation: OP.SET
-		}
-	} else if('archive' in mod) {
-		patch = {
-			syncAction: {
-				archiveChatAction: {
-					archived: !!mod.archive,
-					messageRange: getMessageRange(mod.lastMessages)
-				}
-			},
-			index: ['archive', jid],
-			type: 'regular_low',
-			apiVersion: 3,
-			operation: OP.SET
-		}
-	} else if('markRead' in mod) {
-		patch = {
-			syncAction: {
-				markChatAsReadAction: {
-					read: mod.markRead,
-					messageRange: getMessageRange(mod.lastMessages)
-				}
-			},
-			index: ['markChatAsRead', jid],
-			type: 'regular_low',
-			apiVersion: 3,
-			operation: OP.SET
-		}
-	} else if('clear' in mod) {
-		if(mod.clear === 'all') {
-			throw new Boom('not supported')
-		} else {
-			const key = mod.clear.messages[0]
-			patch = {
-				syncAction: {
-					deleteMessageForMeAction: {
-						deleteMedia: false,
-						messageTimestamp: key.timestamp
-					}
-				},
-				index: ['deleteMessageForMe', jid, key.id, key.fromMe ? '1' : '0', '0'],
-				type: 'regular_high',
-				apiVersion: 3,
-				operation: OP.SET
-			}
-		}
-	} else if('pin' in mod) {
-		patch = {
-			syncAction: {
-				pinAction: {
-					pinned: !!mod.pin
-				}
-			},
-			index: ['pin_v1', jid],
-			type: 'regular_low',
-			apiVersion: 5,
-			operation: OP.SET
-		}
-	} else if('star' in mod) {
-		const key = mod.star.messages[0]
-		patch = {
-			syncAction: {
-				starAction: {
-					starred: !!mod.star.star
-				}
-			},
-			index: ['star', jid, key.id, key.fromMe ? '1' : '0', '0'],
-			type: 'regular_low',
-			apiVersion: 2,
-			operation: OP.SET
-		}
-	} else if('delete' in mod) {
-		patch = {
-			syncAction: {
-				deleteChatAction: {
-					messageRange: getMessageRange(mod.lastMessages),
-				}
-			},
-			index: ['deleteChat', jid, '1'],
-			type: 'regular_high',
-			apiVersion: 6,
-			operation: OP.SET
-		}
-	} else if('pushNameSetting' in mod) {
-		patch = {
-			syncAction: {
-				pushNameSetting: {
-					name: mod.pushNameSetting
-				}
-			},
-			index: ['setting_pushName'],
-			type: 'critical_block',
-			apiVersion: 1,
-			operation: OP.SET,
-		}
-	} else if('addChatLabel' in mod) {
-		patch = {
-			syncAction: {
-				labelAssociationAction: {
-					labeled: true,
-				}
-			},
-			index: [LabelAssociationType.Chat, mod.addChatLabel.labelId, jid],
-			type: 'regular',
-			apiVersion: 3,
-			operation: OP.SET,
-		}
-	} else if('removeChatLabel' in mod) {
-		patch = {
-			syncAction: {
-				labelAssociationAction: {
-					labeled: false,
-				}
-			},
-			index: [LabelAssociationType.Chat, mod.removeChatLabel.labelId, jid],
-			type: 'regular',
-			apiVersion: 3,
-			operation: OP.SET,
-		}
-	} else if('addMessageLabel' in mod) {
-		patch = {
-			syncAction: {
-				labelAssociationAction: {
-					labeled: true,
-				}
-			},
-			index: [
-				LabelAssociationType.Message,
-				mod.addMessageLabel.labelId,
-				jid,
-				mod.addMessageLabel.messageId,
-				'0',
-				'0'
-			],
-			type: 'regular',
-			apiVersion: 3,
-			operation: OP.SET,
-		}
-	} else if('removeMessageLabel' in mod) {
-		patch = {
-			syncAction: {
-				labelAssociationAction: {
-					labeled: false,
-				}
-			},
-			index: [
-				LabelAssociationType.Message,
-				mod.removeMessageLabel.labelId,
-				jid,
-				mod.removeMessageLabel.messageId,
-				'0',
-				'0'
-			],
-			type: 'regular',
-			apiVersion: 3,
-			operation: OP.SET,
-		}
-	} else {
-		throw new Boom('not supported')
-	}
-
-	patch.syncAction.timestamp = Date.now()
-
-	return patch
-}
-
-export const processSyncAction = (
-	syncAction: ChatMutation,
-	ev: BaileysEventEmitter,
-	me: Contact,
-	initialSyncOpts?: InitialAppStateSyncOptions,
-	logger?: Logger,
-) => {
-	const isInitialSync = !!initialSyncOpts
-	const accountSettings = initialSyncOpts?.accountSettings
-
-	logger?.trace({ syncAction, initialSync: !!initialSyncOpts }, 'processing sync action')
-
-	const {
-		syncAction: { value: action },
-		index: [type, id, msgId, fromMe]
-	} = syncAction
-
-	if(action?.muteAction) {
-		ev.emit(
-			'chats.update',
-			[
-				{
-					id,
-					muteEndTime: action.muteAction?.muted
-						? toNumber(action.muteAction!.muteEndTimestamp!)
-						: null,
-					conditional: getChatUpdateConditional(id, undefined)
-				}
-			]
-		)
-	} else if(action?.archiveChatAction || type === 'archive' || type === 'unarchive') {
-		// okay so we've to do some annoying computation here
-		// when we're initially syncing the app state
-		// there are a few cases we need to handle
-		// 1. if the account unarchiveChats setting is true
-		//   a. if the chat is archived, and no further messages have been received -- simple, keep archived
-		//   b. if the chat was archived, and the user received messages from the other person afterwards
-		//		then the chat should be marked unarchved --
-		//		we compare the timestamp of latest message from the other person to determine this
-		// 2. if the account unarchiveChats setting is false -- then it doesn't matter,
-		//	it'll always take an app state action to mark in unarchived -- which we'll get anyway
-		const archiveAction = action?.archiveChatAction
-		const isArchived = archiveAction
-			? archiveAction.archived
-			: type === 'archive'
-		// // basically we don't need to fire an "archive" update if the chat is being marked unarchvied
-		// // this only applies for the initial sync
-		// if(isInitialSync && !isArchived) {
-		// 	isArchived = false
-		// }
-
-		const msgRange = !accountSettings?.unarchiveChats ? undefined : archiveAction?.messageRange
-		// logger?.debug({ chat: id, syncAction }, 'message range archive')
-
-		ev.emit('chats.update', [{
-			id,
-			archived: isArchived,
-			conditional: getChatUpdateConditional(id, msgRange)
-		}])
-	} else if(action?.markChatAsReadAction) {
-		const markReadAction = action.markChatAsReadAction
-		// basically we don't need to fire an "read" update if the chat is being marked as read
-		// because the chat is read by default
-		// this only applies for the initial sync
-		const isNullUpdate = isInitialSync && markReadAction.read
-
-		ev.emit('chats.update', [{
-			id,
-			unreadCount: isNullUpdate ? null : !!markReadAction?.read ? 0 : -1,
-			conditional: getChatUpdateConditional(id, markReadAction?.messageRange)
-		}])
-	} else if(action?.deleteMessageForMeAction || type === 'deleteMessageForMe') {
-		ev.emit('messages.delete', {
-			keys: [
-				{
-					remoteJid: id,
-					id: msgId,
-					fromMe: fromMe === '1'
-				}
-			]
-		})
-	} else if(action?.contactAction) {
-		ev.emit('contacts.upsert', [{ id, name: action.contactAction!.fullName! }])
-	} else if(action?.pushNameSetting) {
-		const name = action?.pushNameSetting?.name
-		if(name && me?.name !== name) {
-			ev.emit('creds.update', { me: { ...me, name } })
-		}
-	} else if(action?.pinAction) {
-		ev.emit('chats.update', [{
-			id,
-			pinned: action.pinAction?.pinned ? toNumber(action.timestamp!) : null,
-			conditional: getChatUpdateConditional(id, undefined)
-		}])
-	} else if(action?.unarchiveChatsSetting) {
-		const unarchiveChats = !!action.unarchiveChatsSetting.unarchiveChats
-		ev.emit('creds.update', { accountSettings: { unarchiveChats } })
-
-		logger?.info(`archive setting updated => '${action.unarchiveChatsSetting.unarchiveChats}'`)
-		if(accountSettings) {
-			accountSettings.unarchiveChats = unarchiveChats
-		}
-	} else if(action?.starAction || type === 'star') {
-		let starred = action?.starAction?.starred
-		if(typeof starred !== 'boolean') {
-			starred = syncAction.index[syncAction.index.length - 1] === '1'
-		}
-
-		ev.emit('messages.update', [
-			{
-				key: { remoteJid: id, id: msgId, fromMe: fromMe === '1' },
-				update: { starred }
-			}
-		])
-	} else if(action?.deleteChatAction || type === 'deleteChat') {
-		if(!isInitialSync) {
-			ev.emit('chats.delete', [id])
-		}
-	} else if(action?.labelEditAction) {
-		const { name, color, deleted, predefinedId } = action.labelEditAction!
-
-		ev.emit('labels.edit', {
-			id,
-			name: name!,
-			color: color!,
-			deleted: deleted!,
-			predefinedId: predefinedId ? String(predefinedId) : undefined
-		})
-	} else if(action?.labelAssociationAction) {
-		ev.emit('labels.association', {
-			type: action.labelAssociationAction.labeled
-				? 'add'
-				: 'remove',
-			association: type === LabelAssociationType.Chat
-				? {
-					type: LabelAssociationType.Chat,
-					chatId: syncAction.index[2],
-					labelId: syncAction.index[1]
-				} as ChatLabelAssociation
-				: {
-					type: LabelAssociationType.Message,
-					chatId: syncAction.index[2],
-					messageId: syncAction.index[3],
-					labelId: syncAction.index[1]
-				} as MessageLabelAssociation
-		})
-	} else {
-		logger?.debug({ syncAction, id }, 'unprocessable update')
-	}
-
-	function getChatUpdateConditional(id: string, msgRange: proto.SyncActionValue.ISyncActionMessageRange | null | undefined): ChatUpdate['conditional'] {
-		return isInitialSync
-			? (data) => {
-				const chat = data.historySets.chats[id] || data.chatUpserts[id]
-				if(chat) {
-					return msgRange ? isValidPatchBasedOnMessageRange(chat, msgRange) : true
-				}
-			}
-			: undefined
-	}
-
-	function isValidPatchBasedOnMessageRange(chat: Chat, msgRange: proto.SyncActionValue.ISyncActionMessageRange | null | undefined) {
-		  const lastMsgTimestamp = Number(msgRange?.lastMessageTimestamp || msgRange?.lastSystemMessageTimestamp || 0)
-		  const chatLastMsgTimestamp = Number(chat?.lastMessageRecvTimestamp || 0)
-		  return lastMsgTimestamp >= chatLastMsgTimestamp
-	}
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/crypto.ts b/node_modules/@whiskeysockets/baileys/src/Utils/crypto.ts
deleted file mode 100644
index 376bf46..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/crypto.ts
+++ /dev/null
@@ -1,131 +0,0 @@
-import { createCipheriv, createDecipheriv, createHash, createHmac, pbkdf2Sync, randomBytes } from 'crypto'
-import HKDF from 'futoin-hkdf'
-import * as libsignal from 'libsignal'
-import { KEY_BUNDLE_TYPE } from '../Defaults'
-import { KeyPair } from '../Types'
-
-/** prefix version byte to the pub keys, required for some curve crypto functions */
-export const generateSignalPubKey = (pubKey: Uint8Array | Buffer) => (
-	pubKey.length === 33
-		? pubKey
-		: Buffer.concat([ KEY_BUNDLE_TYPE, pubKey ])
-)
-
-export const Curve = {
-	generateKeyPair: (): KeyPair => {
-		const { pubKey, privKey } = libsignal.curve.generateKeyPair()
-		return {
-			private: Buffer.from(privKey),
-			// remove version byte
-			public: Buffer.from((pubKey as Uint8Array).slice(1))
-		}
-	},
-	sharedKey: (privateKey: Uint8Array, publicKey: Uint8Array) => {
-		const shared = libsignal.curve.calculateAgreement(generateSignalPubKey(publicKey), privateKey)
-		return Buffer.from(shared)
-	},
-	sign: (privateKey: Uint8Array, buf: Uint8Array) => (
-		libsignal.curve.calculateSignature(privateKey, buf)
-	),
-	verify: (pubKey: Uint8Array, message: Uint8Array, signature: Uint8Array) => {
-		try {
-			libsignal.curve.verifySignature(generateSignalPubKey(pubKey), message, signature)
-			return true
-		} catch(error) {
-			return false
-		}
-	}
-}
-
-export const signedKeyPair = (identityKeyPair: KeyPair, keyId: number) => {
-	const preKey = Curve.generateKeyPair()
-	const pubKey = generateSignalPubKey(preKey.public)
-
-	const signature = Curve.sign(identityKeyPair.private, pubKey)
-
-	return { keyPair: preKey, signature, keyId }
-}
-
-const GCM_TAG_LENGTH = 128 >> 3
-
-/**
- * encrypt AES 256 GCM;
- * where the tag tag is suffixed to the ciphertext
- * */
-export function aesEncryptGCM(plaintext: Uint8Array, key: Uint8Array, iv: Uint8Array, additionalData: Uint8Array) {
-	const cipher = createCipheriv('aes-256-gcm', key, iv)
-	cipher.setAAD(additionalData)
-	return Buffer.concat([cipher.update(plaintext), cipher.final(), cipher.getAuthTag()])
-}
-
-/**
- * decrypt AES 256 GCM;
- * where the auth tag is suffixed to the ciphertext
- * */
-export function aesDecryptGCM(ciphertext: Uint8Array, key: Uint8Array, iv: Uint8Array, additionalData: Uint8Array) {
-	const decipher = createDecipheriv('aes-256-gcm', key, iv)
-	// decrypt additional adata
-	const enc = ciphertext.slice(0, ciphertext.length - GCM_TAG_LENGTH)
-	const tag = ciphertext.slice(ciphertext.length - GCM_TAG_LENGTH)
-	// set additional data
-	decipher.setAAD(additionalData)
-	decipher.setAuthTag(tag)
-
-	return Buffer.concat([ decipher.update(enc), decipher.final() ])
-}
-
-export function aesEncryptCTR(plaintext: Uint8Array, key: Uint8Array, iv: Uint8Array) {
-	const cipher = createCipheriv('aes-256-ctr', key, iv)
-	return Buffer.concat([cipher.update(plaintext), cipher.final()])
-}
-
-export function aesDecryptCTR(ciphertext: Uint8Array, key: Uint8Array, iv: Uint8Array) {
-	const decipher = createDecipheriv('aes-256-ctr', key, iv)
-	return Buffer.concat([decipher.update(ciphertext), decipher.final()])
-}
-
-/** decrypt AES 256 CBC; where the IV is prefixed to the buffer */
-export function aesDecrypt(buffer: Buffer, key: Buffer) {
-	return aesDecryptWithIV(buffer.slice(16, buffer.length), key, buffer.slice(0, 16))
-}
-
-/** decrypt AES 256 CBC */
-export function aesDecryptWithIV(buffer: Buffer, key: Buffer, IV: Buffer) {
-	const aes = createDecipheriv('aes-256-cbc', key, IV)
-	return Buffer.concat([aes.update(buffer), aes.final()])
-}
-
-// encrypt AES 256 CBC; where a random IV is prefixed to the buffer
-export function aesEncrypt(buffer: Buffer | Uint8Array, key: Buffer) {
-	const IV = randomBytes(16)
-	const aes = createCipheriv('aes-256-cbc', key, IV)
-	return Buffer.concat([IV, aes.update(buffer), aes.final()]) // prefix IV to the buffer
-}
-
-// encrypt AES 256 CBC with a given IV
-export function aesEncrypWithIV(buffer: Buffer, key: Buffer, IV: Buffer) {
-	const aes = createCipheriv('aes-256-cbc', key, IV)
-	return Buffer.concat([aes.update(buffer), aes.final()]) // prefix IV to the buffer
-}
-
-// sign HMAC using SHA 256
-export function hmacSign(buffer: Buffer | Uint8Array, key: Buffer | Uint8Array, variant: 'sha256' | 'sha512' = 'sha256') {
-	return createHmac(variant, key).update(buffer).digest()
-}
-
-export function sha256(buffer: Buffer) {
-	return createHash('sha256').update(buffer).digest()
-}
-
-export function md5(buffer: Buffer) {
-	return createHash('md5').update(buffer).digest()
-}
-
-// HKDF key expansion
-export function hkdf(buffer: Uint8Array | Buffer, expandedLength: number, info: { salt?: Buffer, info?: string }) {
-	return HKDF(!Buffer.isBuffer(buffer) ? Buffer.from(buffer) : buffer, expandedLength, info)
-}
-
-export function derivePairingCodeKey(pairingCode: string, salt: Buffer) {
-	return pbkdf2Sync(pairingCode, salt, 2 << 16, 32, 'sha256')
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/decode-wa-message.ts b/node_modules/@whiskeysockets/baileys/src/Utils/decode-wa-message.ts
deleted file mode 100644
index 3760865..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/decode-wa-message.ts
+++ /dev/null
@@ -1,206 +0,0 @@
-import { Boom } from '@hapi/boom'
-import { Logger } from 'pino'
-import { proto } from '../../WAProto'
-import { SignalRepository, WAMessageKey } from '../Types'
-import { areJidsSameUser, BinaryNode, isJidBroadcast, isJidGroup, isJidStatusBroadcast, isJidUser, isLidUser } from '../WABinary'
-import { BufferJSON, unpadRandomMax16 } from './generics'
-
-const NO_MESSAGE_FOUND_ERROR_TEXT = 'Message absent from node'
-
-type MessageType = 'chat' | 'peer_broadcast' | 'other_broadcast' | 'group' | 'direct_peer_status' | 'other_status'
-
-/**
- * Decode the received node as a message.
- * @note this will only parse the message, not decrypt it
- */
-export function decodeMessageNode(
-	stanza: BinaryNode,
-	meId: string,
-	meLid: string
-) {
-	let msgType: MessageType
-	let chatId: string
-	let author: string
-
-	const msgId = stanza.attrs.id
-	const from = stanza.attrs.from
-	const participant: string | undefined = stanza.attrs.participant
-	const recipient: string | undefined = stanza.attrs.recipient
-
-	const isMe = (jid: string) => areJidsSameUser(jid, meId)
-	const isMeLid = (jid: string) => areJidsSameUser(jid, meLid)
-
-	if(isJidUser(from)) {
-		if(recipient) {
-			if(!isMe(from)) {
-				throw new Boom('receipient present, but msg not from me', { data: stanza })
-			}
-
-			chatId = recipient
-		} else {
-			chatId = from
-		}
-
-		msgType = 'chat'
-		author = from
-	} else if(isLidUser(from)) {
-		if(recipient) {
-			if(!isMeLid(from)) {
-				throw new Boom('receipient present, but msg not from me', { data: stanza })
-			}
-
-			chatId = recipient
-		} else {
-			chatId = from
-		}
-
-		msgType = 'chat'
-		author = from
-	} else if(isJidGroup(from)) {
-		if(!participant) {
-			throw new Boom('No participant in group message')
-		}
-
-		msgType = 'group'
-		author = participant
-		chatId = from
-	} else if(isJidBroadcast(from)) {
-		if(!participant) {
-			throw new Boom('No participant in group message')
-		}
-
-		const isParticipantMe = isMe(participant)
-		if(isJidStatusBroadcast(from)) {
-			msgType = isParticipantMe ? 'direct_peer_status' : 'other_status'
-		} else {
-			msgType = isParticipantMe ? 'peer_broadcast' : 'other_broadcast'
-		}
-
-		chatId = from
-		author = participant
-	} else {
-		throw new Boom('Unknown message type', { data: stanza })
-	}
-
-	const fromMe = (isLidUser(from) ? isMeLid : isMe)(stanza.attrs.participant || stanza.attrs.from)
-	const pushname = stanza.attrs.notify
-
-	const key: WAMessageKey = {
-		remoteJid: chatId,
-		fromMe,
-		id: msgId,
-		participant
-	}
-
-	const fullMessage: proto.IWebMessageInfo = {
-		key,
-		messageTimestamp: +stanza.attrs.t,
-		pushName: pushname,
-		broadcast: isJidBroadcast(from)
-	}
-
-	if(key.fromMe) {
-		fullMessage.status = proto.WebMessageInfo.Status.SERVER_ACK
-	}
-
-	return {
-		fullMessage,
-		author,
-		sender: msgType === 'chat' ? author : chatId
-	}
-}
-
-export const decryptMessageNode = (
-	stanza: BinaryNode,
-	meId: string,
-	meLid: string,
-	repository: SignalRepository,
-	logger: Logger
-) => {
-	const { fullMessage, author, sender } = decodeMessageNode(stanza, meId, meLid)
-	return {
-		fullMessage,
-		category: stanza.attrs.category,
-		author,
-		async decrypt() {
-			let decryptables = 0
-			if(Array.isArray(stanza.content)) {
-				for(const { tag, attrs, content } of stanza.content) {
-					if(tag === 'verified_name' && content instanceof Uint8Array) {
-						const cert = proto.VerifiedNameCertificate.decode(content)
-						const details = proto.VerifiedNameCertificate.Details.decode(cert.details)
-						fullMessage.verifiedBizName = details.verifiedName
-					}
-
-					if(tag !== 'enc') {
-						continue
-					}
-
-					if(!(content instanceof Uint8Array)) {
-						continue
-					}
-
-					decryptables += 1
-
-					let msgBuffer: Uint8Array
-
-					try {
-						const e2eType = attrs.type
-						switch (e2eType) {
-						case 'skmsg':
-							msgBuffer = await repository.decryptGroupMessage({
-								group: sender,
-								authorJid: author,
-								msg: content
-							})
-							break
-						case 'pkmsg':
-						case 'msg':
-							const user = isJidUser(sender) ? sender : author
-							msgBuffer = await repository.decryptMessage({
-								jid: user,
-								type: e2eType,
-								ciphertext: content
-							})
-							break
-						default:
-							throw new Error(`Unknown e2e type: ${e2eType}`)
-						}
-
-						let msg: proto.IMessage = proto.Message.decode(unpadRandomMax16(msgBuffer))
-						msg = msg.deviceSentMessage?.message || msg
-						if(msg.senderKeyDistributionMessage) {
-						    try {
-								await repository.processSenderKeyDistributionMessage({
-									authorJid: author,
-									item: msg.senderKeyDistributionMessage
-								})
-							} catch(err) {
-								logger.error({ key: fullMessage.key, err }, 'failed to decrypt message')
-						        }
-						}
-
-						if(fullMessage.message) {
-							Object.assign(fullMessage.message, msg)
-						} else {
-							fullMessage.message = msg
-						}
-					} catch(err) {
-						logger.error(
-							{ key: fullMessage.key, err },
-							'failed to decrypt message'
-						)
-						fullMessage.messageStubType = proto.WebMessageInfo.StubType.CIPHERTEXT
-						fullMessage.messageStubParameters = [err.message]
-					}
-				}
-			}
-
-			// if nothing was found to decrypt
-			if(!decryptables) {
-				fullMessage.messageStubType = proto.WebMessageInfo.StubType.CIPHERTEXT
-				fullMessage.messageStubParameters = [NO_MESSAGE_FOUND_ERROR_TEXT, JSON.stringify(stanza, BufferJSON.replacer)]
-			}
-		}
-	}
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/event-buffer.ts b/node_modules/@whiskeysockets/baileys/src/Utils/event-buffer.ts
deleted file mode 100644
index 7408398..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/event-buffer.ts
+++ /dev/null
@@ -1,613 +0,0 @@
-import EventEmitter from 'events'
-import { Logger } from 'pino'
-import { proto } from '../../WAProto'
-import { BaileysEvent, BaileysEventEmitter, BaileysEventMap, BufferedEventData, Chat, ChatUpdate, Contact, WAMessage, WAMessageStatus } from '../Types'
-import { trimUndefined } from './generics'
-import { updateMessageWithReaction, updateMessageWithReceipt } from './messages'
-import { isRealMessage, shouldIncrementChatUnread } from './process-message'
-
-const BUFFERABLE_EVENT = [
-	'messaging-history.set',
-	'chats.upsert',
-	'chats.update',
-	'chats.delete',
-	'contacts.upsert',
-	'contacts.update',
-	'messages.upsert',
-	'messages.update',
-	'messages.delete',
-	'messages.reaction',
-	'message-receipt.update',
-	'groups.update',
-] as const
-
-type BufferableEvent = typeof BUFFERABLE_EVENT[number]
-
-/**
- * A map that contains a list of all events that have been triggered
- *
- * Note, this can contain different type of events
- * this can make processing events extremely efficient -- since everything
- * can be done in a single transaction
- */
-type BaileysEventData = Partial<BaileysEventMap>
-
-const BUFFERABLE_EVENT_SET = new Set<BaileysEvent>(BUFFERABLE_EVENT)
-
-type BaileysBufferableEventEmitter = BaileysEventEmitter & {
-	/** Use to process events in a batch */
-	process(handler: (events: BaileysEventData) => void | Promise<void>): (() => void)
-	/**
-	 * starts buffering events, call flush() to release them
-	 * */
-	buffer(): void
-	/** buffers all events till the promise completes */
-	createBufferedFunction<A extends any[], T>(work: (...args: A) => Promise<T>): ((...args: A) => Promise<T>)
-	/**
-	 * flushes all buffered events
-	 * @param force if true, will flush all data regardless of any pending buffers
-	 * @returns returns true if the flush actually happened, otherwise false
-	 */
-	flush(force?: boolean): boolean
-	/** is there an ongoing buffer */
-	isBuffering(): boolean
-}
-
-/**
- * The event buffer logically consolidates different events into a single event
- * making the data processing more efficient.
- * @param ev the baileys event emitter
- */
-export const makeEventBuffer = (logger: Logger): BaileysBufferableEventEmitter => {
-	const ev = new EventEmitter()
-	const historyCache = new Set<string>()
-
-	let data = makeBufferData()
-	let buffersInProgress = 0
-
-	// take the generic event and fire it as a baileys event
-	ev.on('event', (map: BaileysEventData) => {
-		for(const event in map) {
-			ev.emit(event, map[event])
-		}
-	})
-
-	function buffer() {
-		buffersInProgress += 1
-	}
-
-	function flush(force = false) {
-		// no buffer going on
-		if(!buffersInProgress) {
-			return false
-		}
-
-		if(!force) {
-			// reduce the number of buffers in progress
-			buffersInProgress -= 1
-			// if there are still some buffers going on
-			// then we don't flush now
-			if(buffersInProgress) {
-				return false
-			}
-		}
-
-		const newData = makeBufferData()
-		const chatUpdates = Object.values(data.chatUpdates)
-		// gather the remaining conditional events so we re-queue them
-		let conditionalChatUpdatesLeft = 0
-		for(const update of chatUpdates) {
-			if(update.conditional) {
-				conditionalChatUpdatesLeft += 1
-				newData.chatUpdates[update.id!] = update
-				delete data.chatUpdates[update.id!]
-			}
-		}
-
-		const consolidatedData = consolidateEvents(data)
-		if(Object.keys(consolidatedData).length) {
-			ev.emit('event', consolidatedData)
-		}
-
-		data = newData
-
-		logger.trace(
-			{ conditionalChatUpdatesLeft },
-			'released buffered events'
-		)
-
-		return true
-	}
-
-	return {
-		process(handler) {
-			const listener = (map: BaileysEventData) => {
-				handler(map)
-			}
-
-			ev.on('event', listener)
-			return () => {
-				ev.off('event', listener)
-			}
-		},
-		emit<T extends BaileysEvent>(event: BaileysEvent, evData: BaileysEventMap[T]) {
-			if(buffersInProgress && BUFFERABLE_EVENT_SET.has(event)) {
-				append(data, historyCache, event as any, evData, logger)
-				return true
-			}
-
-			return ev.emit('event', { [event]: evData })
-		},
-		isBuffering() {
-			return buffersInProgress > 0
-		},
-		buffer,
-		flush,
-		createBufferedFunction(work) {
-			return async(...args) => {
-				buffer()
-				try {
-					const result = await work(...args)
-					return result
-				} finally {
-					flush()
-				}
-			}
-		},
-		on: (...args) => ev.on(...args),
-		off: (...args) => ev.off(...args),
-		removeAllListeners: (...args) => ev.removeAllListeners(...args),
-	}
-}
-
-const makeBufferData = (): BufferedEventData => {
-	return {
-		historySets: {
-			chats: { },
-			messages: { },
-			contacts: { },
-			isLatest: false,
-			empty: true
-		},
-		chatUpserts: { },
-		chatUpdates: { },
-		chatDeletes: new Set(),
-		contactUpserts: { },
-		contactUpdates: { },
-		messageUpserts: { },
-		messageUpdates: { },
-		messageReactions: { },
-		messageDeletes: { },
-		messageReceipts: { },
-		groupUpdates: { }
-	}
-}
-
-function append<E extends BufferableEvent>(
-	data: BufferedEventData,
-	historyCache: Set<string>,
-	event: E,
-	eventData: any,
-	logger: Logger
-) {
-	switch (event) {
-	case 'messaging-history.set':
-		for(const chat of eventData.chats as Chat[]) {
-			const existingChat = data.historySets.chats[chat.id]
-			if(existingChat) {
-				existingChat.endOfHistoryTransferType = chat.endOfHistoryTransferType
-			}
-
-			if(!existingChat && !historyCache.has(chat.id)) {
-				data.historySets.chats[chat.id] = chat
-				historyCache.add(chat.id)
-
-				absorbingChatUpdate(chat)
-			}
-		}
-
-		for(const contact of eventData.contacts as Contact[]) {
-			const existingContact = data.historySets.contacts[contact.id]
-			if(existingContact) {
-				Object.assign(existingContact, trimUndefined(contact))
-			} else {
-				const historyContactId = `c:${contact.id}`
-				const hasAnyName = contact.notify || contact.name || contact.verifiedName
-				if(!historyCache.has(historyContactId) || hasAnyName) {
-					data.historySets.contacts[contact.id] = contact
-					historyCache.add(historyContactId)
-				}
-			}
-		}
-
-		for(const message of eventData.messages as WAMessage[]) {
-			const key = stringifyMessageKey(message.key)
-			const existingMsg = data.historySets.messages[key]
-			if(!existingMsg && !historyCache.has(key)) {
-				data.historySets.messages[key] = message
-				historyCache.add(key)
-			}
-		}
-
-		data.historySets.empty = false
-		data.historySets.isLatest = eventData.isLatest || data.historySets.isLatest
-
-		break
-	case 'chats.upsert':
-		for(const chat of eventData as Chat[]) {
-			let upsert = data.chatUpserts[chat.id]
-			if(!upsert) {
-				upsert = data.historySets[chat.id]
-				if(upsert) {
-					logger.debug({ chatId: chat.id }, 'absorbed chat upsert in chat set')
-				}
-			}
-
-			if(upsert) {
-				upsert = concatChats(upsert, chat)
-			} else {
-				upsert = chat
-				data.chatUpserts[chat.id] = upsert
-			}
-
-			absorbingChatUpdate(upsert)
-
-			if(data.chatDeletes.has(chat.id)) {
-				data.chatDeletes.delete(chat.id)
-			}
-		}
-
-		break
-	case 'chats.update':
-		for(const update of eventData as ChatUpdate[]) {
-			const chatId = update.id!
-			const conditionMatches = update.conditional ? update.conditional(data) : true
-			if(conditionMatches) {
-				delete update.conditional
-
-				// if there is an existing upsert, merge the update into it
-				const upsert = data.historySets.chats[chatId] || data.chatUpserts[chatId]
-				if(upsert) {
-					concatChats(upsert, update)
-				} else {
-					// merge the update into the existing update
-					const chatUpdate = data.chatUpdates[chatId] || { }
-					data.chatUpdates[chatId] = concatChats(chatUpdate, update)
-				}
-			} else if(conditionMatches === undefined) {
-				// condition yet to be fulfilled
-				data.chatUpdates[chatId] = update
-			}
-			// otherwise -- condition not met, update is invalid
-
-			// if the chat has been updated
-			// ignore any existing chat delete
-			if(data.chatDeletes.has(chatId)) {
-				data.chatDeletes.delete(chatId)
-			}
-		}
-
-		break
-	case 'chats.delete':
-		for(const chatId of eventData as string[]) {
-			if(!data.chatDeletes.has(chatId)) {
-				data.chatDeletes.add(chatId)
-			}
-
-			// remove any prior updates & upserts
-			if(data.chatUpdates[chatId]) {
-				delete data.chatUpdates[chatId]
-			}
-
-			if(data.chatUpserts[chatId]) {
-				delete data.chatUpserts[chatId]
-
-			}
-
-			if(data.historySets.chats[chatId]) {
-				delete data.historySets.chats[chatId]
-			}
-		}
-
-		break
-	case 'contacts.upsert':
-		for(const contact of eventData as Contact[]) {
-			let upsert = data.contactUpserts[contact.id]
-			if(!upsert) {
-				upsert = data.historySets.contacts[contact.id]
-				if(upsert) {
-					logger.debug({ contactId: contact.id }, 'absorbed contact upsert in contact set')
-				}
-			}
-
-			if(upsert) {
-				upsert = Object.assign(upsert, trimUndefined(contact))
-			} else {
-				upsert = contact
-				data.contactUpserts[contact.id] = upsert
-			}
-
-			if(data.contactUpdates[contact.id]) {
-				upsert = Object.assign(data.contactUpdates[contact.id], trimUndefined(contact))
-				delete data.contactUpdates[contact.id]
-			}
-		}
-
-		break
-	case 'contacts.update':
-		const contactUpdates = eventData as BaileysEventMap['contacts.update']
-		for(const update of contactUpdates) {
-			const id = update.id!
-			// merge into prior upsert
-			const upsert = data.historySets.contacts[id] || data.contactUpserts[id]
-			if(upsert) {
-				Object.assign(upsert, update)
-			} else {
-				// merge into prior update
-				const contactUpdate = data.contactUpdates[id] || { }
-				data.contactUpdates[id] = Object.assign(contactUpdate, update)
-			}
-		}
-
-		break
-	case 'messages.upsert':
-		const { messages, type } = eventData as BaileysEventMap['messages.upsert']
-		for(const message of messages) {
-			const key = stringifyMessageKey(message.key)
-			let existing = data.messageUpserts[key]?.message
-			if(!existing) {
-				existing = data.historySets.messages[key]
-				if(existing) {
-					logger.debug({ messageId: key }, 'absorbed message upsert in message set')
-				}
-			}
-
-			if(existing) {
-				message.messageTimestamp = existing.messageTimestamp
-			}
-
-			if(data.messageUpdates[key]) {
-				logger.debug('absorbed prior message update in message upsert')
-				Object.assign(message, data.messageUpdates[key].update)
-				delete data.messageUpdates[key]
-			}
-
-			if(data.historySets.messages[key]) {
-				data.historySets.messages[key] = message
-			} else {
-				data.messageUpserts[key] = {
-					message,
-					type: type === 'notify' || data.messageUpserts[key]?.type === 'notify'
-						? 'notify'
-						: type
-				}
-			}
-		}
-
-		break
-	case 'messages.update':
-		const msgUpdates = eventData as BaileysEventMap['messages.update']
-		for(const { key, update } of msgUpdates) {
-			const keyStr = stringifyMessageKey(key)
-			const existing = data.historySets.messages[keyStr] || data.messageUpserts[keyStr]?.message
-			if(existing) {
-				Object.assign(existing, update)
-				// if the message was received & read by us
-				// the chat counter must have been incremented
-				// so we need to decrement it
-				if(update.status === WAMessageStatus.READ && !key.fromMe) {
-					decrementChatReadCounterIfMsgDidUnread(existing)
-				}
-			} else {
-				const msgUpdate = data.messageUpdates[keyStr] || { key, update: { } }
-				Object.assign(msgUpdate.update, update)
-				data.messageUpdates[keyStr] = msgUpdate
-			}
-		}
-
-		break
-	case 'messages.delete':
-		const deleteData = eventData as BaileysEventMap['messages.delete']
-		if('keys' in deleteData) {
-			const { keys } = deleteData
-			for(const key of keys) {
-				const keyStr = stringifyMessageKey(key)
-				if(!data.messageDeletes[keyStr]) {
-					data.messageDeletes[keyStr] = key
-
-				}
-
-				if(data.messageUpserts[keyStr]) {
-					delete data.messageUpserts[keyStr]
-				}
-
-				if(data.messageUpdates[keyStr]) {
-					delete data.messageUpdates[keyStr]
-				}
-			}
-		} else {
-			// TODO: add support
-		}
-
-		break
-	case 'messages.reaction':
-		const reactions = eventData as BaileysEventMap['messages.reaction']
-		for(const { key, reaction } of reactions) {
-			const keyStr = stringifyMessageKey(key)
-			const existing = data.messageUpserts[keyStr]
-			if(existing) {
-				updateMessageWithReaction(existing.message, reaction)
-			} else {
-				data.messageReactions[keyStr] = data.messageReactions[keyStr]
-					|| { key, reactions: [] }
-				updateMessageWithReaction(data.messageReactions[keyStr], reaction)
-			}
-		}
-
-		break
-	case 'message-receipt.update':
-		const receipts = eventData as BaileysEventMap['message-receipt.update']
-		for(const { key, receipt } of receipts) {
-			const keyStr = stringifyMessageKey(key)
-			const existing = data.messageUpserts[keyStr]
-			if(existing) {
-				updateMessageWithReceipt(existing.message, receipt)
-			} else {
-				data.messageReceipts[keyStr] = data.messageReceipts[keyStr]
-					|| { key, userReceipt: [] }
-				updateMessageWithReceipt(data.messageReceipts[keyStr], receipt)
-			}
-		}
-
-		break
-	case 'groups.update':
-		const groupUpdates = eventData as BaileysEventMap['groups.update']
-		for(const update of groupUpdates) {
-			const id = update.id!
-			const groupUpdate = data.groupUpdates[id] || { }
-			if(!data.groupUpdates[id]) {
-				data.groupUpdates[id] = Object.assign(groupUpdate, update)
-
-			}
-		}
-
-		break
-	default:
-		throw new Error(`"${event}" cannot be buffered`)
-	}
-
-	function absorbingChatUpdate(existing: Chat) {
-		const chatId = existing.id
-		const update = data.chatUpdates[chatId]
-		if(update) {
-			const conditionMatches = update.conditional ? update.conditional(data) : true
-			if(conditionMatches) {
-				delete update.conditional
-				logger.debug({ chatId }, 'absorbed chat update in existing chat')
-				Object.assign(existing, concatChats(update as Chat, existing))
-				delete data.chatUpdates[chatId]
-			} else if(conditionMatches === false) {
-				logger.debug({ chatId }, 'chat update condition fail, removing')
-				delete data.chatUpdates[chatId]
-			}
-		}
-	}
-
-	function decrementChatReadCounterIfMsgDidUnread(message: WAMessage) {
-		// decrement chat unread counter
-		// if the message has already been marked read by us
-		const chatId = message.key.remoteJid!
-		const chat = data.chatUpdates[chatId] || data.chatUpserts[chatId]
-		if(
-			isRealMessage(message, '')
-			&& shouldIncrementChatUnread(message)
-			&& typeof chat?.unreadCount === 'number'
-			&& chat.unreadCount > 0
-		) {
-			logger.debug({ chatId: chat.id }, 'decrementing chat counter')
-			chat.unreadCount -= 1
-			if(chat.unreadCount === 0) {
-				delete chat.unreadCount
-			}
-		}
-	}
-}
-
-function consolidateEvents(data: BufferedEventData) {
-	const map: BaileysEventData = { }
-
-	if(!data.historySets.empty) {
-		map['messaging-history.set'] = {
-			chats: Object.values(data.historySets.chats),
-			messages: Object.values(data.historySets.messages),
-			contacts: Object.values(data.historySets.contacts),
-			isLatest: data.historySets.isLatest
-		}
-	}
-
-	const chatUpsertList = Object.values(data.chatUpserts)
-	if(chatUpsertList.length) {
-		map['chats.upsert'] = chatUpsertList
-	}
-
-	const chatUpdateList = Object.values(data.chatUpdates)
-	if(chatUpdateList.length) {
-		map['chats.update'] = chatUpdateList
-	}
-
-	const chatDeleteList = Array.from(data.chatDeletes)
-	if(chatDeleteList.length) {
-		map['chats.delete'] = chatDeleteList
-	}
-
-	const messageUpsertList = Object.values(data.messageUpserts)
-	if(messageUpsertList.length) {
-		const type = messageUpsertList[0].type
-		map['messages.upsert'] = {
-			messages: messageUpsertList.map(m => m.message),
-			type
-		}
-	}
-
-	const messageUpdateList = Object.values(data.messageUpdates)
-	if(messageUpdateList.length) {
-		map['messages.update'] = messageUpdateList
-	}
-
-	const messageDeleteList = Object.values(data.messageDeletes)
-	if(messageDeleteList.length) {
-		map['messages.delete'] = { keys: messageDeleteList }
-	}
-
-	const messageReactionList = Object.values(data.messageReactions).flatMap(
-		({ key, reactions }) => reactions.flatMap(reaction => ({ key, reaction }))
-	)
-	if(messageReactionList.length) {
-		map['messages.reaction'] = messageReactionList
-	}
-
-	const messageReceiptList = Object.values(data.messageReceipts).flatMap(
-		({ key, userReceipt }) => userReceipt.flatMap(receipt => ({ key, receipt }))
-	)
-	if(messageReceiptList.length) {
-		map['message-receipt.update'] = messageReceiptList
-	}
-
-	const contactUpsertList = Object.values(data.contactUpserts)
-	if(contactUpsertList.length) {
-		map['contacts.upsert'] = contactUpsertList
-	}
-
-	const contactUpdateList = Object.values(data.contactUpdates)
-	if(contactUpdateList.length) {
-		map['contacts.update'] = contactUpdateList
-	}
-
-	const groupUpdateList = Object.values(data.groupUpdates)
-	if(groupUpdateList.length) {
-		map['groups.update'] = groupUpdateList
-	}
-
-	return map
-}
-
-function concatChats<C extends Partial<Chat>>(a: C, b: Partial<Chat>) {
-	if(b.unreadCount === null) {
-		// neutralize unread counter
-		if(a.unreadCount! < 0) {
-			a.unreadCount = undefined
-			b.unreadCount = undefined
-		}
-	}
-
-	if(typeof a.unreadCount === 'number' && typeof b.unreadCount === 'number') {
-		b = { ...b }
-		if(b.unreadCount! >= 0) {
-			b.unreadCount = Math.max(b.unreadCount!, 0) + Math.max(a.unreadCount, 0)
-		}
-	}
-
-	return Object.assign(a, b)
-}
-
-const stringifyMessageKey = (key: proto.IMessageKey) => `${key.remoteJid},${key.id},${key.fromMe ? '1' : '0'}`
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/generics.ts b/node_modules/@whiskeysockets/baileys/src/Utils/generics.ts
deleted file mode 100644
index a4aa2e3..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/generics.ts
+++ /dev/null
@@ -1,415 +0,0 @@
-import { Boom } from '@hapi/boom'
-import axios, { AxiosRequestConfig } from 'axios'
-import { randomBytes } from 'crypto'
-import { platform, release } from 'os'
-import { Logger } from 'pino'
-import { proto } from '../../WAProto'
-import { version as baileysVersion } from '../Defaults/baileys-version.json'
-import { BaileysEventEmitter, BaileysEventMap, DisconnectReason, WACallUpdateType, WAVersion } from '../Types'
-import { BinaryNode, getAllBinaryNodeChildren } from '../WABinary'
-
-const PLATFORM_MAP = {
-	'aix': 'AIX',
-	'darwin': 'Mac OS',
-	'win32': 'Windows',
-	'android': 'Android'
-}
-
-export const Browsers = {
-	ubuntu: browser => ['Ubuntu', browser, '20.0.04'] as [string, string, string],
-	macOS: browser => ['Mac OS', browser, '10.15.7'] as [string, string, string],
-	baileys: browser => ['Baileys', browser, '4.0.0'] as [string, string, string],
-	windows: browser => ['Windows', browser, '10.0.22621'] as [string, string, string],
-	/** The appropriate browser based on your OS & release */
-	appropriate: browser => [ PLATFORM_MAP[platform()] || 'Ubuntu', browser, release() ] as [string, string, string]
-}
-
-export const BufferJSON = {
-	replacer: (k, value: any) => {
-		if(Buffer.isBuffer(value) || value instanceof Uint8Array || value?.type === 'Buffer') {
-			return { type: 'Buffer', data: Buffer.from(value?.data || value).toString('base64') }
-		}
-
-		return value
-	},
-	reviver: (_, value: any) => {
-		if(typeof value === 'object' && !!value && (value.buffer === true || value.type === 'Buffer')) {
-			const val = value.data || value.value
-			return typeof val === 'string' ? Buffer.from(val, 'base64') : Buffer.from(val || [])
-		}
-
-		return value
-	}
-}
-
-export const getKeyAuthor = (
-	key: proto.IMessageKey | undefined | null,
-	meId: string = 'me'
-) => (
-	(key?.fromMe ? meId : key?.participant || key?.remoteJid) || ''
-)
-
-export const writeRandomPadMax16 = (msg: Uint8Array) => {
-	const pad = randomBytes(1)
-	pad[0] &= 0xf
-	if(!pad[0]) {
-		pad[0] = 0xf
-	}
-
-	return Buffer.concat([msg, Buffer.alloc(pad[0], pad[0])])
-}
-
-export const unpadRandomMax16 = (e: Uint8Array | Buffer) => {
-	const t = new Uint8Array(e)
-	if(0 === t.length) {
-		throw new Error('unpadPkcs7 given empty bytes')
-	}
-
-	var r = t[t.length - 1]
-	if(r > t.length) {
-		throw new Error(`unpad given ${t.length} bytes, but pad is ${r}`)
-	}
-
-	return new Uint8Array(t.buffer, t.byteOffset, t.length - r)
-}
-
-export const encodeWAMessage = (message: proto.IMessage) => (
-	writeRandomPadMax16(
-		proto.Message.encode(message).finish()
-	)
-)
-
-export const generateRegistrationId = (): number => {
-	return Uint16Array.from(randomBytes(2))[0] & 16383
-}
-
-export const encodeBigEndian = (e: number, t = 4) => {
-	let r = e
-	const a = new Uint8Array(t)
-	for(let i = t - 1; i >= 0; i--) {
-		a[i] = 255 & r
-		r >>>= 8
-	}
-
-	return a
-}
-
-export const toNumber = (t: Long | number | null | undefined): number => ((typeof t === 'object' && t) ? ('toNumber' in t ? t.toNumber() : (t as any).low) : t)
-
-/** unix timestamp of a date in seconds */
-export const unixTimestampSeconds = (date: Date = new Date()) => Math.floor(date.getTime() / 1000)
-
-export type DebouncedTimeout = ReturnType<typeof debouncedTimeout>
-
-export const debouncedTimeout = (intervalMs: number = 1000, task?: () => void) => {
-	let timeout: NodeJS.Timeout | undefined
-	return {
-		start: (newIntervalMs?: number, newTask?: () => void) => {
-			task = newTask || task
-			intervalMs = newIntervalMs || intervalMs
-			timeout && clearTimeout(timeout)
-			timeout = setTimeout(() => task?.(), intervalMs)
-		},
-		cancel: () => {
-			timeout && clearTimeout(timeout)
-			timeout = undefined
-		},
-		setTask: (newTask: () => void) => task = newTask,
-		setInterval: (newInterval: number) => intervalMs = newInterval
-	}
-}
-
-export const delay = (ms: number) => delayCancellable (ms).delay
-
-export const delayCancellable = (ms: number) => {
-	const stack = new Error().stack
-	let timeout: NodeJS.Timeout
-	let reject: (error) => void
-	const delay: Promise<void> = new Promise((resolve, _reject) => {
-		timeout = setTimeout(resolve, ms)
-		reject = _reject
-	})
-	const cancel = () => {
-		clearTimeout (timeout)
-		reject(
-			new Boom('Cancelled', {
-				statusCode: 500,
-				data: {
-					stack
-				}
-			})
-		)
-	}
-
-	return { delay, cancel }
-}
-
-export async function promiseTimeout<T>(ms: number | undefined, promise: (resolve: (v: T) => void, reject: (error) => void) => void) {
-	if(!ms) {
-		return new Promise(promise)
-	}
-
-	const stack = new Error().stack
-	// Create a promise that rejects in <ms> milliseconds
-	const { delay, cancel } = delayCancellable (ms)
-	const p = new Promise((resolve, reject) => {
-		delay
-			.then(() => reject(
-				new Boom('Timed Out', {
-					statusCode: DisconnectReason.timedOut,
-					data: {
-						stack
-					}
-				})
-			))
-			.catch (err => reject(err))
-
-		promise (resolve, reject)
-	})
-		.finally (cancel)
-	return p as Promise<T>
-}
-
-// generate a random ID to attach to a message
-export const generateMessageID = () => 'BAE5' + randomBytes(6).toString('hex').toUpperCase()
-
-export function bindWaitForEvent<T extends keyof BaileysEventMap>(ev: BaileysEventEmitter, event: T) {
-	return async(check: (u: BaileysEventMap[T]) => boolean | undefined, timeoutMs?: number) => {
-		let listener: (item: BaileysEventMap[T]) => void
-		let closeListener: any
-		await (
-			promiseTimeout<void>(
-				timeoutMs,
-				(resolve, reject) => {
-					closeListener = ({ connection, lastDisconnect }) => {
-						if(connection === 'close') {
-							reject(
-								lastDisconnect?.error
-								|| new Boom('Connection Closed', { statusCode: DisconnectReason.connectionClosed })
-							)
-						}
-					}
-
-					ev.on('connection.update', closeListener)
-					listener = (update) => {
-						if(check(update)) {
-							resolve()
-						}
-					}
-
-					ev.on(event, listener)
-				}
-			)
-				.finally(() => {
-					ev.off(event, listener)
-					ev.off('connection.update', closeListener)
-				})
-		)
-	}
-}
-
-export const bindWaitForConnectionUpdate = (ev: BaileysEventEmitter) => bindWaitForEvent(ev, 'connection.update')
-
-export const printQRIfNecessaryListener = (ev: BaileysEventEmitter, logger: Logger) => {
-	ev.on('connection.update', async({ qr }) => {
-		if(qr) {
-			const QR = await import('qrcode-terminal')
-				.then(m => m.default || m)
-				.catch(() => {
-					logger.error('QR code terminal not added as dependency')
-				})
-			QR?.generate(qr, { small: true })
-		}
-	})
-}
-
-/**
- * utility that fetches latest baileys version from the master branch.
- * Use to ensure your WA connection is always on the latest version
- */
-export const fetchLatestBaileysVersion = async(options: AxiosRequestConfig<any> = { }) => {
-	const URL = 'https://raw.githubusercontent.com/WhiskeySockets/Baileys/master/src/Defaults/baileys-version.json'
-	try {
-		const result = await axios.get<{ version: WAVersion }>(
-			URL,
-			{
-				...options,
-				responseType: 'json'
-			}
-		)
-		return {
-			version: result.data.version,
-			isLatest: true
-		}
-	} catch(error) {
-		return {
-			version: baileysVersion as WAVersion,
-			isLatest: false,
-			error
-		}
-	}
-}
-
-/**
- * A utility that fetches the latest web version of whatsapp.
- * Use to ensure your WA connection is always on the latest version
- */
-export const fetchLatestWaWebVersion = async(options: AxiosRequestConfig<any>) => {
-	try {
-		const result = await axios.get(
-			'https://web.whatsapp.com/check-update?version=1&platform=web',
-			{
-				...options,
-				responseType: 'json'
-			}
-		)
-		const version = result.data.currentVersion.split('.')
-		return {
-			version: [+version[0], +version[1], +version[2]] as WAVersion,
-			isLatest: true
-		}
-	} catch(error) {
-		return {
-			version: baileysVersion as WAVersion,
-			isLatest: false,
-			error
-		}
-	}
-}
-
-/** unique message tag prefix for MD clients */
-export const generateMdTagPrefix = () => {
-	const bytes = randomBytes(4)
-	return `${bytes.readUInt16BE()}.${bytes.readUInt16BE(2)}-`
-}
-
-const STATUS_MAP: { [_: string]: proto.WebMessageInfo.Status } = {
-	'played': proto.WebMessageInfo.Status.PLAYED,
-	'read': proto.WebMessageInfo.Status.READ,
-	'read-self': proto.WebMessageInfo.Status.READ
-}
-/**
- * Given a type of receipt, returns what the new status of the message should be
- * @param type type from receipt
- */
-export const getStatusFromReceiptType = (type: string | undefined) => {
-	const status = STATUS_MAP[type!]
-	if(typeof type === 'undefined') {
-		return proto.WebMessageInfo.Status.DELIVERY_ACK
-	}
-
-	return status
-}
-
-const CODE_MAP: { [_: string]: DisconnectReason } = {
-	conflict: DisconnectReason.connectionReplaced
-}
-
-/**
- * Stream errors generally provide a reason, map that to a baileys DisconnectReason
- * @param reason the string reason given, eg. "conflict"
- */
-export const getErrorCodeFromStreamError = (node: BinaryNode) => {
-	const [reasonNode] = getAllBinaryNodeChildren(node)
-	let reason = reasonNode?.tag || 'unknown'
-	const statusCode = +(node.attrs.code || CODE_MAP[reason] || DisconnectReason.badSession)
-
-	if(statusCode === DisconnectReason.restartRequired) {
-		reason = 'restart required'
-	}
-
-	return {
-		reason,
-		statusCode
-	}
-}
-
-export const getCallStatusFromNode = ({ tag, attrs }: BinaryNode) => {
-	let status: WACallUpdateType
-	switch (tag) {
-	case 'offer':
-	case 'offer_notice':
-		status = 'offer'
-		break
-	case 'terminate':
-		if(attrs.reason === 'timeout') {
-			status = 'timeout'
-		} else {
-			status = 'reject'
-		}
-
-		break
-	case 'reject':
-		status = 'reject'
-		break
-	case 'accept':
-		status = 'accept'
-		break
-	default:
-		status = 'ringing'
-		break
-	}
-
-	return status
-}
-
-const UNEXPECTED_SERVER_CODE_TEXT = 'Unexpected server response: '
-
-export const getCodeFromWSError = (error: Error) => {
-	let statusCode = 500
-	if(error?.message?.includes(UNEXPECTED_SERVER_CODE_TEXT)) {
-		const code = +error?.message.slice(UNEXPECTED_SERVER_CODE_TEXT.length)
-		if(!Number.isNaN(code) && code >= 400) {
-			statusCode = code
-		}
-	} else if(
-		(error as any)?.code?.startsWith('E')
-		|| error?.message?.includes('timed out')
-	) { // handle ETIMEOUT, ENOTFOUND etc
-		statusCode = 408
-	}
-
-	return statusCode
-}
-
-/**
- * Is the given platform WA business
- * @param platform AuthenticationCreds.platform
- */
-export const isWABusinessPlatform = (platform: string) => {
-	return platform === 'smbi' || platform === 'smba'
-}
-
-export function trimUndefined(obj: any) {
-	for(const key in obj) {
-		if(typeof obj[key] === 'undefined') {
-			delete obj[key]
-		}
-	}
-
-	return obj
-}
-
-const CROCKFORD_CHARACTERS = '123456789ABCDEFGHJKLMNPQRSTVWXYZ'
-
-export function bytesToCrockford(buffer: Buffer): string {
-	let value = 0
-	let bitCount = 0
-	const crockford: string[] = []
-
-	for(let i = 0; i < buffer.length; i++) {
-		value = (value << 8) | (buffer[i] & 0xff)
-		bitCount += 8
-
-		while(bitCount >= 5) {
-			crockford.push(CROCKFORD_CHARACTERS.charAt((value >>> (bitCount - 5)) & 31))
-			bitCount -= 5
-		}
-	}
-
-	if(bitCount > 0) {
-		crockford.push(CROCKFORD_CHARACTERS.charAt((value << (5 - bitCount)) & 31))
-	}
-
-	return crockford.join('')
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/history.ts b/node_modules/@whiskeysockets/baileys/src/Utils/history.ts
deleted file mode 100644
index b56a395..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/history.ts
+++ /dev/null
@@ -1,112 +0,0 @@
-import { AxiosRequestConfig } from 'axios'
-import { promisify } from 'util'
-import { inflate } from 'zlib'
-import { proto } from '../../WAProto'
-import { Chat, Contact, WAMessageStubType } from '../Types'
-import { isJidUser } from '../WABinary'
-import { toNumber } from './generics'
-import { normalizeMessageContent } from './messages'
-import { downloadContentFromMessage } from './messages-media'
-
-const inflatePromise = promisify(inflate)
-
-export const downloadHistory = async(
-	msg: proto.Message.IHistorySyncNotification,
-	options: AxiosRequestConfig<any>
-) => {
-	const stream = await downloadContentFromMessage(msg, 'md-msg-hist', { options })
-	const bufferArray: Buffer[] = []
-	for await (const chunk of stream) {
-		bufferArray.push(chunk)
-	}
-
-	let buffer = Buffer.concat(bufferArray)
-
-	// decompress buffer
-	buffer = await inflatePromise(buffer)
-
-	const syncData = proto.HistorySync.decode(buffer)
-	return syncData
-}
-
-export const processHistoryMessage = (item: proto.IHistorySync) => {
-	const messages: proto.IWebMessageInfo[] = []
-	const contacts: Contact[] = []
-	const chats: Chat[] = []
-
-	switch (item.syncType) {
-	case proto.HistorySync.HistorySyncType.INITIAL_BOOTSTRAP:
-	case proto.HistorySync.HistorySyncType.RECENT:
-	case proto.HistorySync.HistorySyncType.FULL:
-		for(const chat of item.conversations! as Chat[]) {
-			contacts.push({ id: chat.id, name: chat.name || undefined })
-
-			const msgs = chat.messages || []
-			delete chat.messages
-			delete chat.archived
-			delete chat.muteEndTime
-			delete chat.pinned
-
-			for(const item of msgs) {
-				const message = item.message!
-				messages.push(message)
-
-				if(!chat.messages?.length) {
-					// keep only the most recent message in the chat array
-					chat.messages = [{ message }]
-				}
-
-				if(!message.key.fromMe && !chat.lastMessageRecvTimestamp) {
-					chat.lastMessageRecvTimestamp = toNumber(message.messageTimestamp)
-				}
-
-				if(
-					(message.messageStubType === WAMessageStubType.BIZ_PRIVACY_MODE_TO_BSP
-					|| message.messageStubType === WAMessageStubType.BIZ_PRIVACY_MODE_TO_FB
-					)
-					&& message.messageStubParameters?.[0]
-				) {
-					contacts.push({
-						id: message.key.participant || message.key.remoteJid!,
-						verifiedName: message.messageStubParameters?.[0],
-					})
-				}
-			}
-
-			if(isJidUser(chat.id) && chat.readOnly && chat.archived) {
-				delete chat.readOnly
-			}
-
-			chats.push({ ...chat })
-		}
-
-		break
-	case proto.HistorySync.HistorySyncType.PUSH_NAME:
-		for(const c of item.pushnames!) {
-			contacts.push({ id: c.id!, notify: c.pushname! })
-		}
-
-		break
-	}
-
-	return {
-		chats,
-		contacts,
-		messages,
-	}
-}
-
-export const downloadAndProcessHistorySyncNotification = async(
-	msg: proto.Message.IHistorySyncNotification,
-	options: AxiosRequestConfig<any>
-) => {
-	const historyMsg = await downloadHistory(msg, options)
-	return processHistoryMessage(historyMsg)
-}
-
-export const getHistoryMsg = (message: proto.IMessage) => {
-	const normalizedContent = !!message ? normalizeMessageContent(message) : undefined
-	const anyHistoryMsg = normalizedContent?.protocolMessage?.historySyncNotification
-
-	return anyHistoryMsg
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/index.ts b/node_modules/@whiskeysockets/baileys/src/Utils/index.ts
deleted file mode 100644
index 156abe0..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/index.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-export * from './generics'
-export * from './decode-wa-message'
-export * from './messages'
-export * from './messages-media'
-export * from './validate-connection'
-export * from './crypto'
-export * from './signal'
-export * from './noise-handler'
-export * from './history'
-export * from './chat-utils'
-export * from './lt-hash'
-export * from './auth-utils'
-export * from './baileys-event-stream'
-export * from './use-multi-file-auth-state'
-export * from './link-preview'
-export * from './event-buffer'
-export * from './process-message'
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/link-preview.ts b/node_modules/@whiskeysockets/baileys/src/Utils/link-preview.ts
deleted file mode 100644
index 702feb1..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/link-preview.ts
+++ /dev/null
@@ -1,122 +0,0 @@
-import { AxiosRequestConfig } from 'axios'
-import { Logger } from 'pino'
-import { WAMediaUploadFunction, WAUrlInfo } from '../Types'
-import { prepareWAMessageMedia } from './messages'
-import { extractImageThumb, getHttpStream } from './messages-media'
-
-const THUMBNAIL_WIDTH_PX = 192
-
-/** Fetches an image and generates a thumbnail for it */
-const getCompressedJpegThumbnail = async(
-	url: string,
-	{ thumbnailWidth, fetchOpts }: URLGenerationOptions
-) => {
-	const stream = await getHttpStream(url, fetchOpts)
-	const result = await extractImageThumb(stream, thumbnailWidth)
-	return result
-}
-
-export type URLGenerationOptions = {
-	thumbnailWidth: number
-	fetchOpts: {
-		/** Timeout in ms */
-		timeout: number
-		proxyUrl?: string
-		headers?: AxiosRequestConfig<{}>['headers']
-	}
-	uploadImage?: WAMediaUploadFunction
-	logger?: Logger
-}
-
-/**
- * Given a piece of text, checks for any URL present, generates link preview for the same and returns it
- * Return undefined if the fetch failed or no URL was found
- * @param text first matched URL in text
- * @returns the URL info required to generate link preview
- */
-export const getUrlInfo = async(
-	text: string,
-	opts: URLGenerationOptions = {
-		thumbnailWidth: THUMBNAIL_WIDTH_PX,
-		fetchOpts: { timeout: 3000 }
-	},
-): Promise<WAUrlInfo | undefined> => {
-	try {
-		// retries
-		const retries = 0
-		const maxRetry = 5
-
-		const { getLinkPreview } = await import('link-preview-js')
-		let previewLink = text
-		if(!text.startsWith('https://') && !text.startsWith('http://')) {
-			previewLink = 'https://' + previewLink
-		}
-
-		const info = await getLinkPreview(previewLink, {
-			...opts.fetchOpts,
-			followRedirects: 'follow',
-			handleRedirects: (baseURL: string, forwardedURL: string) => {
-				const urlObj = new URL(baseURL)
-				const forwardedURLObj = new URL(forwardedURL)
-				if(retries >= maxRetry) {
-					return false
-				}
-
-				if(
-					forwardedURLObj.hostname === urlObj.hostname
-					|| forwardedURLObj.hostname === 'www.' + urlObj.hostname
-					|| 'www.' + forwardedURLObj.hostname === urlObj.hostname
-				) {
-					retries + 1
-					return true
-				} else {
-					return false
-				}
-			},
-			headers: opts.fetchOpts as {}
-		})
-		if(info && 'title' in info && info.title) {
-			const [image] = info.images
-
-			const urlInfo: WAUrlInfo = {
-				'canonical-url': info.url,
-				'matched-text': text,
-				title: info.title,
-				description: info.description,
-				originalThumbnailUrl: image
-			}
-
-			if(opts.uploadImage) {
-				const { imageMessage } = await prepareWAMessageMedia(
-					{ image: { url: image } },
-					{
-						upload: opts.uploadImage,
-						mediaTypeOverride: 'thumbnail-link',
-						options: opts.fetchOpts
-					}
-				)
-				urlInfo.jpegThumbnail = imageMessage?.jpegThumbnail
-					? Buffer.from(imageMessage.jpegThumbnail)
-					: undefined
-				urlInfo.highQualityThumbnail = imageMessage || undefined
-			} else {
-				try {
-					urlInfo.jpegThumbnail = image
-						? (await getCompressedJpegThumbnail(image, opts)).buffer
-						: undefined
-				} catch(error) {
-					opts.logger?.debug(
-						{ err: error.stack, url: previewLink },
-						'error in generating thumbnail'
-					)
-				}
-			}
-
-			return urlInfo
-		}
-	} catch(error) {
-		if(!error.message.includes('receive a valid')) {
-			throw error
-		}
-	}
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/logger.ts b/node_modules/@whiskeysockets/baileys/src/Utils/logger.ts
deleted file mode 100644
index bb651e3..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/logger.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-import P from 'pino'
-
-export default P({ timestamp: () => `,"time":"${new Date().toJSON()}"` })
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/lt-hash.ts b/node_modules/@whiskeysockets/baileys/src/Utils/lt-hash.ts
deleted file mode 100644
index fa38484..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/lt-hash.ts
+++ /dev/null
@@ -1,61 +0,0 @@
-import { hkdf } from './crypto'
-
-/**
- * LT Hash is a summation based hash algorithm that maintains the integrity of a piece of data
- * over a series of mutations. You can add/remove mutations and it'll return a hash equal to
- * if the same series of mutations was made sequentially.
- */
-
-const o = 128
-
-class d {
-
-	salt: string
-
-	constructor(e: string) {
-		this.salt = e
-	}
-	add(e, t) {
-		var r = this
-		for(const item of t) {
-			e = r._addSingle(e, item)
-		}
-
-		return e
-	}
-	subtract(e, t) {
-		var r = this
-		for(const item of t) {
-			e = r._subtractSingle(e, item)
-		}
-
-		return e
-	}
-	subtractThenAdd(e, t, r) {
-		var n = this
-		return n.add(n.subtract(e, r), t)
-	}
-	_addSingle(e, t) {
-		var r = this
-		const n = new Uint8Array(hkdf(Buffer.from(t), o, { info: r.salt })).buffer
-		return r.performPointwiseWithOverflow(e, n, ((e, t) => e + t))
-	}
-	_subtractSingle(e, t) {
-		var r = this
-
-		const n = new Uint8Array(hkdf(Buffer.from(t), o, { info: r.salt })).buffer
-		return r.performPointwiseWithOverflow(e, n, ((e, t) => e - t))
-	}
-	performPointwiseWithOverflow(e, t, r) {
-		const n = new DataView(e)
-		  , i = new DataView(t)
-		  , a = new ArrayBuffer(n.byteLength)
-		  , s = new DataView(a)
-		for(let e = 0; e < n.byteLength; e += 2) {
-			s.setUint16(e, r(n.getUint16(e, !0), i.getUint16(e, !0)), !0)
-		}
-
-		return a
-	}
-}
-export const LT_HASH_ANTI_TAMPERING = new d('WhatsApp Patch Integrity')
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/make-mutex.ts b/node_modules/@whiskeysockets/baileys/src/Utils/make-mutex.ts
deleted file mode 100644
index 8bb9f54..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/make-mutex.ts
+++ /dev/null
@@ -1,44 +0,0 @@
-export const makeMutex = () => {
-	let task = Promise.resolve() as Promise<any>
-
-	let taskTimeout: NodeJS.Timeout | undefined
-
-	return {
-		mutex<T>(code: () => Promise<T> | T): Promise<T> {
-			task = (async() => {
-				// wait for the previous task to complete
-				// if there is an error, we swallow so as to not block the queue
-				try {
-					await task
-				} catch{ }
-
-				try {
-					// execute the current task
-					const result = await code()
-					return result
-				} finally {
-					clearTimeout(taskTimeout)
-				}
-			})()
-			// we replace the existing task, appending the new piece of execution to it
-			// so the next task will have to wait for this one to finish
-			return task
-		},
-	}
-}
-
-export type Mutex = ReturnType<typeof makeMutex>
-
-export const makeKeyedMutex = () => {
-	const map: { [id: string]: Mutex } = {}
-
-	return {
-		mutex<T>(key: string, task: () => Promise<T> | T): Promise<T> {
-			if(!map[key]) {
-				map[key] = makeMutex()
-			}
-
-			return map[key].mutex(task)
-		}
-	}
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/messages-media.ts b/node_modules/@whiskeysockets/baileys/src/Utils/messages-media.ts
deleted file mode 100644
index a9eb2f6..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/messages-media.ts
+++ /dev/null
@@ -1,789 +0,0 @@
-import { Boom } from '@hapi/boom'
-import { AxiosRequestConfig } from 'axios'
-import { exec } from 'child_process'
-import * as Crypto from 'crypto'
-import { once } from 'events'
-import { createReadStream, createWriteStream, promises as fs, WriteStream } from 'fs'
-import type { IAudioMetadata } from 'music-metadata'
-import { tmpdir } from 'os'
-import { join } from 'path'
-import type { Logger } from 'pino'
-import { Readable, Transform } from 'stream'
-import { URL } from 'url'
-import { proto } from '../../WAProto'
-import { DEFAULT_ORIGIN, MEDIA_HKDF_KEY_MAPPING, MEDIA_PATH_MAP } from '../Defaults'
-import { BaileysEventMap, DownloadableMessage, MediaConnInfo, MediaDecryptionKeyInfo, MediaType, MessageType, SocketConfig, WAGenericMediaMessage, WAMediaUpload, WAMediaUploadFunction, WAMessageContent } from '../Types'
-import { BinaryNode, getBinaryNodeChild, getBinaryNodeChildBuffer, jidNormalizedUser } from '../WABinary'
-import { aesDecryptGCM, aesEncryptGCM, hkdf } from './crypto'
-import { generateMessageID } from './generics'
-
-const getTmpFilesDirectory = () => tmpdir()
-
-const getImageProcessingLibrary = async() => {
-	const [_jimp, sharp] = await Promise.all([
-		(async() => {
-			const jimp = await (
-				import('jimp')
-					.catch(() => { })
-			)
-			return jimp
-		})(),
-		(async() => {
-			const sharp = await (
-				import('sharp')
-					.catch(() => { })
-			)
-			return sharp
-		})()
-	])
-
-	if(sharp) {
-		return { sharp }
-	}
-
-	const jimp = _jimp?.default || _jimp
-	if(jimp) {
-		return { jimp }
-	}
-
-	throw new Boom('No image processing library available')
-}
-
-export const hkdfInfoKey = (type: MediaType) => {
-	const hkdfInfo = MEDIA_HKDF_KEY_MAPPING[type]
-	return `WhatsApp ${hkdfInfo} Keys`
-}
-
-/** generates all the keys required to encrypt/decrypt & sign a media message */
-export function getMediaKeys(buffer: Uint8Array | string | null | undefined, mediaType: MediaType): MediaDecryptionKeyInfo {
-	if(!buffer) {
-		throw new Boom('Cannot derive from empty media key')
-	}
-
-	if(typeof buffer === 'string') {
-		buffer = Buffer.from(buffer.replace('data:;base64,', ''), 'base64')
-	}
-
-	// expand using HKDF to 112 bytes, also pass in the relevant app info
-	const expandedMediaKey = hkdf(buffer, 112, { info: hkdfInfoKey(mediaType) })
-	return {
-		iv: expandedMediaKey.slice(0, 16),
-		cipherKey: expandedMediaKey.slice(16, 48),
-		macKey: expandedMediaKey.slice(48, 80),
-	}
-}
-
-/** Extracts video thumb using FFMPEG */
-const extractVideoThumb = async(
-	path: string,
-	destPath: string,
-	time: string,
-	size: { width: number, height: number },
-) => new Promise((resolve, reject) => {
-    	const cmd = `ffmpeg -ss ${time} -i ${path} -y -vf scale=${size.width}:-1 -vframes 1 -f image2 ${destPath}`
-    	exec(cmd, (err) => {
-    		if(err) {
-			reject(err)
-		} else {
-			resolve()
-		}
-    	})
-}) as Promise<void>
-
-export const extractImageThumb = async(bufferOrFilePath: Readable | Buffer | string, width = 32) => {
-	if(bufferOrFilePath instanceof Readable) {
-		bufferOrFilePath = await toBuffer(bufferOrFilePath)
-	}
-
-	const lib = await getImageProcessingLibrary()
-	if('sharp' in lib && typeof lib.sharp?.default === 'function') {
-		const img = lib.sharp!.default(bufferOrFilePath)
-		const dimensions = await img.metadata()
-
-		const buffer = await img
-			.resize(width)
-			.jpeg({ quality: 50 })
-			.toBuffer()
-		return {
-			buffer,
-			original: {
-				width: dimensions.width,
-				height: dimensions.height,
-			},
-		}
-	} else if('jimp' in lib && typeof lib.jimp?.read === 'function') {
-		const { read, MIME_JPEG, RESIZE_BILINEAR, AUTO } = lib.jimp
-
-		const jimp = await read(bufferOrFilePath as any)
-		const dimensions = {
-			width: jimp.getWidth(),
-			height: jimp.getHeight()
-		}
-		const buffer = await jimp
-			.quality(50)
-			.resize(width, AUTO, RESIZE_BILINEAR)
-			.getBufferAsync(MIME_JPEG)
-		return {
-			buffer,
-			original: dimensions
-		}
-	} else {
-		throw new Boom('No image processing library available')
-	}
-}
-
-export const encodeBase64EncodedStringForUpload = (b64: string) => (
-	encodeURIComponent(
-		b64
-			.replace(/\+/g, '-')
-			.replace(/\//g, '_')
-			.replace(/\=+$/, '')
-	)
-)
-
-export const generateProfilePicture = async(mediaUpload: WAMediaUpload) => {
-	let bufferOrFilePath: Buffer | string
-	if(Buffer.isBuffer(mediaUpload)) {
-		bufferOrFilePath = mediaUpload
-	} else if('url' in mediaUpload) {
-		bufferOrFilePath = mediaUpload.url.toString()
-	} else {
-		bufferOrFilePath = await toBuffer(mediaUpload.stream)
-	}
-
-	const lib = await getImageProcessingLibrary()
-	let img: Promise<Buffer>
-	if('sharp' in lib && typeof lib.sharp?.default === 'function') {
-		img = lib.sharp!.default(bufferOrFilePath)
-			.resize(640, 640)
-			.jpeg({
-				quality: 50,
-			})
-			.toBuffer()
-	} else if('jimp' in lib && typeof lib.jimp?.read === 'function') {
-		const { read, MIME_JPEG, RESIZE_BILINEAR } = lib.jimp
-		const jimp = await read(bufferOrFilePath as any)
-		const min = Math.min(jimp.getWidth(), jimp.getHeight())
-		const cropped = jimp.crop(0, 0, min, min)
-
-		img = cropped
-			.quality(50)
-			.resize(640, 640, RESIZE_BILINEAR)
-			.getBufferAsync(MIME_JPEG)
-	} else {
-		throw new Boom('No image processing library available')
-	}
-
-	return {
-		img: await img,
-	}
-}
-
-/** gets the SHA256 of the given media message */
-export const mediaMessageSHA256B64 = (message: WAMessageContent) => {
-	const media = Object.values(message)[0] as WAGenericMediaMessage
-	return media?.fileSha256 && Buffer.from(media.fileSha256).toString ('base64')
-}
-
-export async function getAudioDuration(buffer: Buffer | string | Readable) {
-	const musicMetadata = await import('music-metadata')
-	let metadata: IAudioMetadata
-	if(Buffer.isBuffer(buffer)) {
-		metadata = await musicMetadata.parseBuffer(buffer, undefined, { duration: true })
-	} else if(typeof buffer === 'string') {
-		const rStream = createReadStream(buffer)
-		try {
-			metadata = await musicMetadata.parseStream(rStream, undefined, { duration: true })
-		} finally {
-			rStream.destroy()
-		}
-	} else {
-		metadata = await musicMetadata.parseStream(buffer, undefined, { duration: true })
-	}
-
-	return metadata.format.duration
-}
-
-/**
-  referenced from and modifying https://github.com/wppconnect-team/wa-js/blob/main/src/chat/functions/prepareAudioWaveform.ts
- */
-export async function getAudioWaveform(buffer: Buffer | string | Readable, logger?: Logger) {
-	try {
-		const audioDecode = (buffer: Buffer | ArrayBuffer | Uint8Array) => import('audio-decode').then(({ default: audioDecode }) => audioDecode(buffer))
-		let audioData: Buffer
-		if(Buffer.isBuffer(buffer)) {
-			audioData = buffer
-		} else if(typeof buffer === 'string') {
-			const rStream = createReadStream(buffer)
-			audioData = await toBuffer(rStream)
-		} else {
-			audioData = await toBuffer(buffer)
-		}
-
-		const audioBuffer = await audioDecode(audioData)
-
-		const rawData = audioBuffer.getChannelData(0) // We only need to work with one channel of data
-		const samples = 64 // Number of samples we want to have in our final data set
-		const blockSize = Math.floor(rawData.length / samples) // the number of samples in each subdivision
-		const filteredData: number[] = []
-		for(let i = 0; i < samples; i++) {
-		  	const blockStart = blockSize * i // the location of the first sample in the block
-		  	let sum = 0
-		  	for(let j = 0; j < blockSize; j++) {
-				sum = sum + Math.abs(rawData[blockStart + j]) // find the sum of all the samples in the block
-			}
-
-			filteredData.push(sum / blockSize) // divide the sum by the block size to get the average
-		}
-
-		// This guarantees that the largest data point will be set to 1, and the rest of the data will scale proportionally.
-		const multiplier = Math.pow(Math.max(...filteredData), -1)
-		const normalizedData = filteredData.map((n) => n * multiplier)
-
-		// Generate waveform like WhatsApp
-		const waveform = new Uint8Array(
-			normalizedData.map((n) => Math.floor(100 * n))
-		)
-
-		return waveform
-	} catch(e) {
-		logger?.debug('Failed to generate waveform: ' + e)
-	}
-}
-
-
-export const toReadable = (buffer: Buffer) => {
-	const readable = new Readable({ read: () => {} })
-	readable.push(buffer)
-	readable.push(null)
-	return readable
-}
-
-export const toBuffer = async(stream: Readable) => {
-	const chunks: Buffer[] = []
-	for await (const chunk of stream) {
-		chunks.push(chunk)
-	}
-
-	stream.destroy()
-	return Buffer.concat(chunks)
-}
-
-export const getStream = async(item: WAMediaUpload, opts?: AxiosRequestConfig) => {
-	if(Buffer.isBuffer(item)) {
-		return { stream: toReadable(item), type: 'buffer' } as const
-	}
-
-	if('stream' in item) {
-		return { stream: item.stream, type: 'readable' } as const
-	}
-
-	if(item.url.toString().startsWith('http://') || item.url.toString().startsWith('https://')) {
-		return { stream: await getHttpStream(item.url, opts), type: 'remote' } as const
-	}
-
-	return { stream: createReadStream(item.url), type: 'file' } as const
-}
-
-/** generates a thumbnail for a given media, if required */
-export async function generateThumbnail(
-	file: string,
-	mediaType: 'video' | 'image',
-	options: {
-        logger?: Logger
-    }
-) {
-	let thumbnail: string | undefined
-	let originalImageDimensions: { width: number, height: number } | undefined
-	if(mediaType === 'image') {
-		const { buffer, original } = await extractImageThumb(file)
-		thumbnail = buffer.toString('base64')
-		if(original.width && original.height) {
-			originalImageDimensions = {
-				width: original.width,
-				height: original.height,
-			}
-		}
-	} else if(mediaType === 'video') {
-		const imgFilename = join(getTmpFilesDirectory(), generateMessageID() + '.jpg')
-		try {
-			await extractVideoThumb(file, imgFilename, '00:00:00', { width: 32, height: 32 })
-			const buff = await fs.readFile(imgFilename)
-			thumbnail = buff.toString('base64')
-
-			await fs.unlink(imgFilename)
-		} catch(err) {
-			options.logger?.debug('could not generate video thumb: ' + err)
-		}
-	}
-
-	return {
-		thumbnail,
-		originalImageDimensions
-	}
-}
-
-export const getHttpStream = async(url: string | URL, options: AxiosRequestConfig & { isStream?: true } = {}) => {
-	const { default: axios } = await import('axios')
-	const fetched = await axios.get(url.toString(), { ...options, responseType: 'stream' })
-	return fetched.data as Readable
-}
-
-type EncryptedStreamOptions = {
-	saveOriginalFileIfRequired?: boolean
-	logger?: Logger
-	opts?: AxiosRequestConfig
-}
-
-export const encryptedStream = async(
-	media: WAMediaUpload,
-	mediaType: MediaType,
-	{ logger, saveOriginalFileIfRequired, opts }: EncryptedStreamOptions = {}
-) => {
-	const { stream, type } = await getStream(media, opts)
-
-	logger?.debug('fetched media stream')
-
-	const mediaKey = Crypto.randomBytes(32)
-	const { cipherKey, iv, macKey } = getMediaKeys(mediaKey, mediaType)
-	const encWriteStream = new Readable({ read: () => {} })
-
-	let bodyPath: string | undefined
-	let writeStream: WriteStream | undefined
-	let didSaveToTmpPath = false
-	if(type === 'file') {
-		bodyPath = (media as any).url
-	} else if(saveOriginalFileIfRequired) {
-		bodyPath = join(getTmpFilesDirectory(), mediaType + generateMessageID())
-		writeStream = createWriteStream(bodyPath)
-		didSaveToTmpPath = true
-	}
-
-	let fileLength = 0
-	const aes = Crypto.createCipheriv('aes-256-cbc', cipherKey, iv)
-	let hmac = Crypto.createHmac('sha256', macKey!).update(iv)
-	let sha256Plain = Crypto.createHash('sha256')
-	let sha256Enc = Crypto.createHash('sha256')
-
-	try {
-		for await (const data of stream) {
-			fileLength += data.length
-
-			if(
-				type === 'remote'
-				&& opts?.maxContentLength
-				&& fileLength + data.length > opts.maxContentLength
-			) {
-				throw new Boom(
-					`content length exceeded when encrypting "${type}"`,
-					{
-						data: { media, type }
-					}
-				)
-			}
-
-			sha256Plain = sha256Plain.update(data)
-			if(writeStream) {
-				if(!writeStream.write(data)) {
-					await once(writeStream, 'drain')
-				}
-			}
-
-			onChunk(aes.update(data))
-		}
-
-		onChunk(aes.final())
-
-		const mac = hmac.digest().slice(0, 10)
-		sha256Enc = sha256Enc.update(mac)
-
-		const fileSha256 = sha256Plain.digest()
-		const fileEncSha256 = sha256Enc.digest()
-
-		encWriteStream.push(mac)
-		encWriteStream.push(null)
-
-		writeStream?.end()
-		stream.destroy()
-
-		logger?.debug('encrypted data successfully')
-
-		return {
-			mediaKey,
-			encWriteStream,
-			bodyPath,
-			mac,
-			fileEncSha256,
-			fileSha256,
-			fileLength,
-			didSaveToTmpPath
-		}
-	} catch(error) {
-		// destroy all streams with error
-		encWriteStream.destroy()
-		writeStream?.destroy()
-		aes.destroy()
-		hmac.destroy()
-		sha256Plain.destroy()
-		sha256Enc.destroy()
-		stream.destroy()
-
-		if(didSaveToTmpPath) {
-			try {
-				await fs.unlink(bodyPath!)
-			} catch(err) {
-				logger?.error({ err }, 'failed to save to tmp path')
-			}
-		}
-
-		throw error
-	}
-
-	function onChunk(buff: Buffer) {
-		sha256Enc = sha256Enc.update(buff)
-		hmac = hmac.update(buff)
-		encWriteStream.push(buff)
-	}
-}
-
-const DEF_HOST = 'mmg.whatsapp.net'
-const AES_CHUNK_SIZE = 16
-
-const toSmallestChunkSize = (num: number) => {
-	return Math.floor(num / AES_CHUNK_SIZE) * AES_CHUNK_SIZE
-}
-
-export type MediaDownloadOptions = {
-    startByte?: number
-    endByte?: number
-	options?: AxiosRequestConfig<any>
-}
-
-export const getUrlFromDirectPath = (directPath: string) => `https://${DEF_HOST}${directPath}`
-
-export const downloadContentFromMessage = (
-	{ mediaKey, directPath, url }: DownloadableMessage,
-	type: MediaType,
-	opts: MediaDownloadOptions = { }
-) => {
-	const downloadUrl = url || getUrlFromDirectPath(directPath!)
-	const keys = getMediaKeys(mediaKey, type)
-
-	return downloadEncryptedContent(downloadUrl, keys, opts)
-}
-
-/**
- * Decrypts and downloads an AES256-CBC encrypted file given the keys.
- * Assumes the SHA256 of the plaintext is appended to the end of the ciphertext
- * */
-export const downloadEncryptedContent = async(
-	downloadUrl: string,
-	{ cipherKey, iv }: MediaDecryptionKeyInfo,
-	{ startByte, endByte, options }: MediaDownloadOptions = { }
-) => {
-	let bytesFetched = 0
-	let startChunk = 0
-	let firstBlockIsIV = false
-	// if a start byte is specified -- then we need to fetch the previous chunk as that will form the IV
-	if(startByte) {
-		const chunk = toSmallestChunkSize(startByte || 0)
-		if(chunk) {
-			startChunk = chunk - AES_CHUNK_SIZE
-			bytesFetched = chunk
-
-			firstBlockIsIV = true
-		}
-	}
-
-	const endChunk = endByte ? toSmallestChunkSize(endByte || 0) + AES_CHUNK_SIZE : undefined
-
-	const headers: AxiosRequestConfig['headers'] = {
-		...options?.headers || { },
-		Origin: DEFAULT_ORIGIN,
-	}
-	if(startChunk || endChunk) {
-		headers!.Range = `bytes=${startChunk}-`
-		if(endChunk) {
-			headers!.Range += endChunk
-		}
-	}
-
-	// download the message
-	const fetched = await getHttpStream(
-		downloadUrl,
-		{
-			...options || { },
-			headers,
-			maxBodyLength: Infinity,
-			maxContentLength: Infinity,
-		}
-	)
-
-	let remainingBytes = Buffer.from([])
-
-	let aes: Crypto.Decipher
-
-	const pushBytes = (bytes: Buffer, push: (bytes: Buffer) => void) => {
-		if(startByte || endByte) {
-			const start = bytesFetched >= startByte! ? undefined : Math.max(startByte! - bytesFetched, 0)
-			const end = bytesFetched + bytes.length < endByte! ? undefined : Math.max(endByte! - bytesFetched, 0)
-
-			push(bytes.slice(start, end))
-
-			bytesFetched += bytes.length
-		} else {
-			push(bytes)
-		}
-	}
-
-	const output = new Transform({
-		transform(chunk, _, callback) {
-			let data = Buffer.concat([remainingBytes, chunk])
-
-			const decryptLength = toSmallestChunkSize(data.length)
-			remainingBytes = data.slice(decryptLength)
-			data = data.slice(0, decryptLength)
-
-			if(!aes) {
-				let ivValue = iv
-				if(firstBlockIsIV) {
-					ivValue = data.slice(0, AES_CHUNK_SIZE)
-					data = data.slice(AES_CHUNK_SIZE)
-				}
-
-				aes = Crypto.createDecipheriv('aes-256-cbc', cipherKey, ivValue)
-				// if an end byte that is not EOF is specified
-				// stop auto padding (PKCS7) -- otherwise throws an error for decryption
-				if(endByte) {
-					aes.setAutoPadding(false)
-				}
-
-			}
-
-			try {
-				pushBytes(aes.update(data), b => this.push(b))
-				callback()
-			} catch(error) {
-				callback(error)
-			}
-		},
-		final(callback) {
-			try {
-				pushBytes(aes.final(), b => this.push(b))
-				callback()
-			} catch(error) {
-				callback(error)
-			}
-		},
-	})
-	return fetched.pipe(output, { end: true })
-}
-
-export function extensionForMediaMessage(message: WAMessageContent) {
-	const getExtension = (mimetype: string) => mimetype.split(';')[0].split('/')[1]
-	const type = Object.keys(message)[0] as MessageType
-	let extension: string
-	if(
-		type === 'locationMessage' ||
-		type === 'liveLocationMessage' ||
-		type === 'productMessage'
-	) {
-		extension = '.jpeg'
-	} else {
-		const messageContent = message[type] as WAGenericMediaMessage
-		extension = getExtension(messageContent.mimetype!)
-	}
-
-	return extension
-}
-
-export const getWAUploadToServer = (
-	{ customUploadHosts, fetchAgent, logger, options }: SocketConfig,
-	refreshMediaConn: (force: boolean) => Promise<MediaConnInfo>,
-): WAMediaUploadFunction => {
-	return async(stream, { mediaType, fileEncSha256B64, timeoutMs }) => {
-		const { default: axios } = await import('axios')
-		// send a query JSON to obtain the url & auth token to upload our media
-		let uploadInfo = await refreshMediaConn(false)
-
-		let urls: { mediaUrl: string, directPath: string } | undefined
-		const hosts = [ ...customUploadHosts, ...uploadInfo.hosts ]
-
-		const chunks: Buffer[] = []
-		for await (const chunk of stream) {
-			chunks.push(chunk)
-		}
-
-		const reqBody = Buffer.concat(chunks)
-		fileEncSha256B64 = encodeBase64EncodedStringForUpload(fileEncSha256B64)
-
-		for(const { hostname, maxContentLengthBytes } of hosts) {
-			logger.debug(`uploading to "${hostname}"`)
-
-			const auth = encodeURIComponent(uploadInfo.auth) // the auth token
-			const url = `https://${hostname}${MEDIA_PATH_MAP[mediaType]}/${fileEncSha256B64}?auth=${auth}&token=${fileEncSha256B64}`
-			let result: any
-			try {
-				if(maxContentLengthBytes && reqBody.length > maxContentLengthBytes) {
-					throw new Boom(`Body too large for "${hostname}"`, { statusCode: 413 })
-				}
-
-				const body = await axios.post(
-					url,
-					reqBody,
-					{
-						...options,
-						headers: {
-							...options.headers || { },
-							'Content-Type': 'application/octet-stream',
-							'Origin': DEFAULT_ORIGIN
-						},
-						httpsAgent: fetchAgent,
-						timeout: timeoutMs,
-						responseType: 'json',
-						maxBodyLength: Infinity,
-						maxContentLength: Infinity,
-					}
-				)
-				result = body.data
-
-				if(result?.url || result?.directPath) {
-					urls = {
-						mediaUrl: result.url,
-						directPath: result.direct_path
-					}
-					break
-				} else {
-					uploadInfo = await refreshMediaConn(true)
-					throw new Error(`upload failed, reason: ${JSON.stringify(result)}`)
-				}
-			} catch(error) {
-				if(axios.isAxiosError(error)) {
-					result = error.response?.data
-				}
-
-				const isLast = hostname === hosts[uploadInfo.hosts.length - 1]?.hostname
-				logger.warn({ trace: error.stack, uploadResult: result }, `Error in uploading to ${hostname} ${isLast ? '' : ', retrying...'}`)
-			}
-		}
-
-		if(!urls) {
-			throw new Boom(
-				'Media upload failed on all hosts',
-				{ statusCode: 500 }
-			)
-		}
-
-		return urls
-	}
-}
-
-const getMediaRetryKey = (mediaKey: Buffer | Uint8Array) => {
-	return hkdf(mediaKey, 32, { info: 'WhatsApp Media Retry Notification' })
-}
-
-/**
- * Generate a binary node that will request the phone to re-upload the media & return the newly uploaded URL
- */
-export const encryptMediaRetryRequest = (
-	key: proto.IMessageKey,
-	mediaKey: Buffer | Uint8Array,
-	meId: string
-) => {
-	const recp: proto.IServerErrorReceipt = { stanzaId: key.id }
-	const recpBuffer = proto.ServerErrorReceipt.encode(recp).finish()
-
-	const iv = Crypto.randomBytes(12)
-	const retryKey = getMediaRetryKey(mediaKey)
-	const ciphertext = aesEncryptGCM(recpBuffer, retryKey, iv, Buffer.from(key.id!))
-
-	const req: BinaryNode = {
-		tag: 'receipt',
-		attrs: {
-			id: key.id!,
-			to: jidNormalizedUser(meId),
-			type: 'server-error'
-		},
-		content: [
-			// this encrypt node is actually pretty useless
-			// the media is returned even without this node
-			// keeping it here to maintain parity with WA Web
-			{
-				tag: 'encrypt',
-				attrs: { },
-				content: [
-					{ tag: 'enc_p', attrs: { }, content: ciphertext },
-					{ tag: 'enc_iv', attrs: { }, content: iv }
-				]
-			},
-			{
-				tag: 'rmr',
-				attrs: {
-					jid: key.remoteJid!,
-					'from_me': (!!key.fromMe).toString(),
-					// @ts-ignore
-					participant: key.participant || undefined
-				}
-			}
-		]
-	}
-
-	return req
-}
-
-export const decodeMediaRetryNode = (node: BinaryNode) => {
-	const rmrNode = getBinaryNodeChild(node, 'rmr')!
-
-	const event: BaileysEventMap['messages.media-update'][number] = {
-		key: {
-			id: node.attrs.id,
-			remoteJid: rmrNode.attrs.jid,
-			fromMe: rmrNode.attrs.from_me === 'true',
-			participant: rmrNode.attrs.participant
-		}
-	}
-
-	const errorNode = getBinaryNodeChild(node, 'error')
-	if(errorNode) {
-		const errorCode = +errorNode.attrs.code
-		event.error = new Boom(
-			`Failed to re-upload media (${errorCode})`,
-			{ data: errorNode.attrs, statusCode: getStatusCodeForMediaRetry(errorCode) }
-		)
-	} else {
-		const encryptedInfoNode = getBinaryNodeChild(node, 'encrypt')
-		const ciphertext = getBinaryNodeChildBuffer(encryptedInfoNode, 'enc_p')
-		const iv = getBinaryNodeChildBuffer(encryptedInfoNode, 'enc_iv')
-		if(ciphertext && iv) {
-			event.media = { ciphertext, iv }
-		} else {
-			event.error = new Boom('Failed to re-upload media (missing ciphertext)', { statusCode: 404 })
-		}
-	}
-
-	return event
-}
-
-export const decryptMediaRetryData = (
-	{ ciphertext, iv }: { ciphertext: Uint8Array, iv: Uint8Array },
-	mediaKey: Uint8Array,
-	msgId: string
-) => {
-	const retryKey = getMediaRetryKey(mediaKey)
-	const plaintext = aesDecryptGCM(ciphertext, retryKey, iv, Buffer.from(msgId))
-	return proto.MediaRetryNotification.decode(plaintext)
-}
-
-export const getStatusCodeForMediaRetry = (code: number) => MEDIA_RETRY_STATUS_MAP[code]
-
-const MEDIA_RETRY_STATUS_MAP = {
-	[proto.MediaRetryNotification.ResultType.SUCCESS]: 200,
-	[proto.MediaRetryNotification.ResultType.DECRYPTION_ERROR]: 412,
-	[proto.MediaRetryNotification.ResultType.NOT_FOUND]: 404,
-	[proto.MediaRetryNotification.ResultType.GENERAL_ERROR]: 418,
-} as const
-
-// eslint-disable-next-line @typescript-eslint/no-unused-vars
-function __importStar(arg0: any): any {
-	throw new Error('Function not implemented.')
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/messages.ts b/node_modules/@whiskeysockets/baileys/src/Utils/messages.ts
deleted file mode 100644
index 0ec8782..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/messages.ts
+++ /dev/null
@@ -1,953 +0,0 @@
-import { Boom } from '@hapi/boom'
-import axios from 'axios'
-import { randomBytes } from 'crypto'
-import { promises as fs } from 'fs'
-import { Logger } from 'pino'
-import { type Transform } from 'stream'
-import { proto } from '../../WAProto'
-import { MEDIA_KEYS, URL_REGEX, WA_DEFAULT_EPHEMERAL } from '../Defaults'
-import {
-	AnyMediaMessageContent,
-	AnyMessageContent,
-	DownloadableMessage,
-	MediaGenerationOptions,
-	MediaType,
-	MessageContentGenerationOptions,
-	MessageGenerationOptions,
-	MessageGenerationOptionsFromContent,
-	MessageType,
-	MessageUserReceipt,
-	WAMediaUpload,
-	WAMessage,
-	WAMessageContent,
-	WAMessageStatus,
-	WAProto,
-	WATextMessage,
-} from '../Types'
-import { isJidGroup, isJidStatusBroadcast, jidNormalizedUser } from '../WABinary'
-import { sha256 } from './crypto'
-import { generateMessageID, getKeyAuthor, unixTimestampSeconds } from './generics'
-import { downloadContentFromMessage, encryptedStream, generateThumbnail, getAudioDuration, getAudioWaveform, MediaDownloadOptions } from './messages-media'
-
-type MediaUploadData = {
-	media: WAMediaUpload
-	caption?: string
-	ptt?: boolean
-	ptv?: boolean
-	seconds?: number
-	gifPlayback?: boolean
-	fileName?: string
-	jpegThumbnail?: string
-	mimetype?: string
-	width?: number
-	height?: number
-	waveform?: Uint8Array
-	backgroundArgb?: number
-}
-
-const MIMETYPE_MAP: { [T in MediaType]?: string } = {
-	image: 'image/jpeg',
-	video: 'video/mp4',
-	document: 'application/pdf',
-	audio: 'audio/ogg; codecs=opus',
-	sticker: 'image/webp',
-	'product-catalog-image': 'image/jpeg',
-}
-
-const MessageTypeProto = {
-	'image': WAProto.Message.ImageMessage,
-	'video': WAProto.Message.VideoMessage,
-	'audio': WAProto.Message.AudioMessage,
-	'sticker': WAProto.Message.StickerMessage,
-   	'document': WAProto.Message.DocumentMessage,
-} as const
-
-const ButtonType = proto.Message.ButtonsMessage.HeaderType
-
-/**
- * Uses a regex to test whether the string contains a URL, and returns the URL if it does.
- * @param text eg. hello https://google.com
- * @returns the URL, eg. https://google.com
- */
-export const extractUrlFromText = (text: string) => text.match(URL_REGEX)?.[0]
-
-export const generateLinkPreviewIfRequired = async(text: string, getUrlInfo: MessageGenerationOptions['getUrlInfo'], logger: MessageGenerationOptions['logger']) => {
-	const url = extractUrlFromText(text)
-	if(!!getUrlInfo && url) {
-		try {
-			const urlInfo = await getUrlInfo(url)
-			return urlInfo
-		} catch(error) { // ignore if fails
-			logger?.warn({ trace: error.stack }, 'url generation failed')
-		}
-	}
-}
-
-const assertColor = async(color) => {
-	let assertedColor
-	if(typeof color === 'number') {
-		assertedColor = color > 0 ? color : 0xffffffff + Number(color) + 1
-	} else {
-		let hex = color.trim().replace('#', '')
-		if(hex.length <= 6) {
-			hex = 'FF' + hex.padStart(6, '0')
-		}
-
-		assertedColor = parseInt(hex, 16)
-		return assertedColor
-	}
-}
-
-export const prepareWAMessageMedia = async(
-	message: AnyMediaMessageContent,
-	options: MediaGenerationOptions
-) => {
-	const logger = options.logger
-
-	let mediaType: typeof MEDIA_KEYS[number] | undefined
-	for(const key of MEDIA_KEYS) {
-		if(key in message) {
-			mediaType = key
-		}
-	}
-
-	if(!mediaType) {
-		throw new Boom('Invalid media type', { statusCode: 400 })
-	}
-
-	const uploadData: MediaUploadData = {
-		...message,
-		media: message[mediaType]
-	}
-	delete uploadData[mediaType]
-	// check if cacheable + generate cache key
-	const cacheableKey = typeof uploadData.media === 'object' &&
-			('url' in uploadData.media) &&
-			!!uploadData.media.url &&
-			!!options.mediaCache && (
-	// generate the key
-		mediaType + ':' + uploadData.media.url!.toString()
-	)
-
-	if(mediaType === 'document' && !uploadData.fileName) {
-		uploadData.fileName = 'file'
-	}
-
-	if(!uploadData.mimetype) {
-		uploadData.mimetype = MIMETYPE_MAP[mediaType]
-	}
-
-	// check for cache hit
-	if(cacheableKey) {
-		const mediaBuff = options.mediaCache!.get<Buffer>(cacheableKey)
-		if(mediaBuff) {
-			logger?.debug({ cacheableKey }, 'got media cache hit')
-
-			const obj = WAProto.Message.decode(mediaBuff)
-			const key = `${mediaType}Message`
-
-			Object.assign(obj[key], { ...uploadData, media: undefined })
-
-			return obj
-		}
-	}
-
-	const requiresDurationComputation = mediaType === 'audio' && typeof uploadData.seconds === 'undefined'
-	const requiresThumbnailComputation = (mediaType === 'image' || mediaType === 'video') &&
-										(typeof uploadData['jpegThumbnail'] === 'undefined')
-	const requiresWaveformProcessing = mediaType === 'audio' && uploadData.ptt === true
-	const requiresAudioBackground = options.backgroundColor && mediaType === 'audio' && uploadData.ptt === true
-	const requiresOriginalForSomeProcessing = requiresDurationComputation || requiresThumbnailComputation
-	const {
-		mediaKey,
-		encWriteStream,
-		bodyPath,
-		fileEncSha256,
-		fileSha256,
-		fileLength,
-		didSaveToTmpPath
-	} = await encryptedStream(
-		uploadData.media,
-		options.mediaTypeOverride || mediaType,
-		{
-			logger,
-			saveOriginalFileIfRequired: requiresOriginalForSomeProcessing,
-			opts: options.options
-		}
-	)
-	 // url safe Base64 encode the SHA256 hash of the body
-	const fileEncSha256B64 = fileEncSha256.toString('base64')
-	const [{ mediaUrl, directPath }] = await Promise.all([
-		(async() => {
-			const result = await options.upload(
-				encWriteStream,
-				{ fileEncSha256B64, mediaType, timeoutMs: options.mediaUploadTimeoutMs }
-			)
-			logger?.debug({ mediaType, cacheableKey }, 'uploaded media')
-			return result
-		})(),
-		(async() => {
-			try {
-				if(requiresThumbnailComputation) {
-					const {
-						thumbnail,
-						originalImageDimensions
-					} = await generateThumbnail(bodyPath!, mediaType as 'image' | 'video', options)
-					uploadData.jpegThumbnail = thumbnail
-					if(!uploadData.width && originalImageDimensions) {
-						uploadData.width = originalImageDimensions.width
-						uploadData.height = originalImageDimensions.height
-						logger?.debug('set dimensions')
-					}
-
-					logger?.debug('generated thumbnail')
-				}
-
-				if(requiresDurationComputation) {
-					uploadData.seconds = await getAudioDuration(bodyPath!)
-					logger?.debug('computed audio duration')
-				}
-
-				if(requiresWaveformProcessing) {
-					uploadData.waveform = await getAudioWaveform(bodyPath!, logger)
-					logger?.debug('processed waveform')
-				}
-
-				if(requiresWaveformProcessing) {
-					uploadData.waveform = await getAudioWaveform(bodyPath!, logger)
-					logger?.debug('processed waveform')
-				}
-
-				if(requiresAudioBackground) {
-					uploadData.backgroundArgb = await assertColor(options.backgroundColor)
-					logger?.debug('computed backgroundColor audio status')
-				}
-			} catch(error) {
-				logger?.warn({ trace: error.stack }, 'failed to obtain extra info')
-			}
-		})(),
-	])
-		.finally(
-			async() => {
-				encWriteStream.destroy()
-				// remove tmp files
-				if(didSaveToTmpPath && bodyPath) {
-					await fs.unlink(bodyPath)
-					logger?.debug('removed tmp files')
-				}
-			}
-		)
-
-	const obj = WAProto.Message.fromObject({
-		[`${mediaType}Message`]: MessageTypeProto[mediaType].fromObject(
-			{
-				url: mediaUrl,
-				directPath,
-				mediaKey,
-				fileEncSha256,
-				fileSha256,
-				fileLength,
-				mediaKeyTimestamp: unixTimestampSeconds(),
-				...uploadData,
-				media: undefined
-			}
-		)
-	})
-
-	if(uploadData.ptv) {
-		obj.ptvMessage = obj.videoMessage
-		delete obj.videoMessage
-	}
-
-	if(cacheableKey) {
-		logger?.debug({ cacheableKey }, 'set cache')
-		options.mediaCache!.set(cacheableKey, WAProto.Message.encode(obj).finish())
-	}
-
-	return obj
-}
-
-export const prepareDisappearingMessageSettingContent = (ephemeralExpiration?: number) => {
-	ephemeralExpiration = ephemeralExpiration || 0
-	const content: WAMessageContent = {
-		ephemeralMessage: {
-			message: {
-				protocolMessage: {
-					type: WAProto.Message.ProtocolMessage.Type.EPHEMERAL_SETTING,
-					ephemeralExpiration
-				}
-			}
-		}
-	}
-	return WAProto.Message.fromObject(content)
-}
-
-/**
- * Generate forwarded message content like WA does
- * @param message the message to forward
- * @param options.forceForward will show the message as forwarded even if it is from you
- */
-export const generateForwardMessageContent = (
-	message: WAMessage,
-	forceForward?: boolean
-) => {
-	let content = message.message
-	if(!content) {
-		throw new Boom('no content in message', { statusCode: 400 })
-	}
-
-	// hacky copy
-	content = normalizeMessageContent(content)
-	content = proto.Message.decode(proto.Message.encode(content!).finish())
-
-	let key = Object.keys(content)[0] as MessageType
-
-	let score = content[key].contextInfo?.forwardingScore || 0
-	score += message.key.fromMe && !forceForward ? 0 : 1
-	if(key === 'conversation') {
-		content.extendedTextMessage = { text: content[key] }
-		delete content.conversation
-
-		key = 'extendedTextMessage'
-	}
-
-	if(score > 0) {
-		content[key].contextInfo = { forwardingScore: score, isForwarded: true }
-	} else {
-		content[key].contextInfo = {}
-	}
-
-	return content
-}
-
-export const generateWAMessageContent = async(
-	message: AnyMessageContent,
-	options: MessageContentGenerationOptions
-) => {
-	let m: WAMessageContent = {}
-	if('text' in message) {
-		const extContent = { text: message.text } as WATextMessage
-
-		let urlInfo = message.linkPreview
-		if(typeof urlInfo === 'undefined') {
-			urlInfo = await generateLinkPreviewIfRequired(message.text, options.getUrlInfo, options.logger)
-		}
-
-		if(urlInfo) {
-			extContent.canonicalUrl = urlInfo['canonical-url']
-			extContent.matchedText = urlInfo['matched-text']
-			extContent.jpegThumbnail = urlInfo.jpegThumbnail
-			extContent.description = urlInfo.description
-			extContent.title = urlInfo.title
-			extContent.previewType = 0
-
-			const img = urlInfo.highQualityThumbnail
-			if(img) {
-				extContent.thumbnailDirectPath = img.directPath
-				extContent.mediaKey = img.mediaKey
-				extContent.mediaKeyTimestamp = img.mediaKeyTimestamp
-				extContent.thumbnailWidth = img.width
-				extContent.thumbnailHeight = img.height
-				extContent.thumbnailSha256 = img.fileSha256
-				extContent.thumbnailEncSha256 = img.fileEncSha256
-			}
-		}
-
-		if(options.backgroundColor) {
-			extContent.backgroundArgb = await assertColor(options.backgroundColor)
-		}
-
-		if(options.font) {
-			extContent.font = options.font
-		}
-
-		m.extendedTextMessage = extContent
-	} else if('contacts' in message) {
-		const contactLen = message.contacts.contacts.length
-		if(!contactLen) {
-			throw new Boom('require atleast 1 contact', { statusCode: 400 })
-		}
-
-		if(contactLen === 1) {
-			m.contactMessage = WAProto.Message.ContactMessage.fromObject(message.contacts.contacts[0])
-		} else {
-			m.contactsArrayMessage = WAProto.Message.ContactsArrayMessage.fromObject(message.contacts)
-		}
-	} else if('location' in message) {
-		m.locationMessage = WAProto.Message.LocationMessage.fromObject(message.location)
-	} else if('react' in message) {
-		if(!message.react.senderTimestampMs) {
-			message.react.senderTimestampMs = Date.now()
-		}
-
-		m.reactionMessage = WAProto.Message.ReactionMessage.fromObject(message.react)
-	} else if('delete' in message) {
-		m.protocolMessage = {
-			key: message.delete,
-			type: WAProto.Message.ProtocolMessage.Type.REVOKE
-		}
-	} else if('forward' in message) {
-		m = generateForwardMessageContent(
-			message.forward,
-			message.force
-		)
-	} else if('disappearingMessagesInChat' in message) {
-		const exp = typeof message.disappearingMessagesInChat === 'boolean' ?
-			(message.disappearingMessagesInChat ? WA_DEFAULT_EPHEMERAL : 0) :
-			message.disappearingMessagesInChat
-		m = prepareDisappearingMessageSettingContent(exp)
-	} else if('buttonReply' in message) {
-		switch (message.type) {
-		case 'template':
-			m.templateButtonReplyMessage = {
-				selectedDisplayText: message.buttonReply.displayText,
-				selectedId: message.buttonReply.id,
-				selectedIndex: message.buttonReply.index,
-			}
-			break
-		case 'plain':
-			m.buttonsResponseMessage = {
-				selectedButtonId: message.buttonReply.id,
-				selectedDisplayText: message.buttonReply.displayText,
-				type: proto.Message.ButtonsResponseMessage.Type.DISPLAY_TEXT,
-			}
-			break
-		}
-	} else if('product' in message) {
-		const { imageMessage } = await prepareWAMessageMedia(
-			{ image: message.product.productImage },
-			options
-		)
-		m.productMessage = WAProto.Message.ProductMessage.fromObject({
-			...message,
-			product: {
-				...message.product,
-				productImage: imageMessage,
-			}
-		})
-	} else if('listReply' in message) {
-		m.listResponseMessage = { ...message.listReply }
-	} else if('poll' in message) {
-		message.poll.selectableCount ||= 0
-
-		if(!Array.isArray(message.poll.values)) {
-			throw new Boom('Invalid poll values', { statusCode: 400 })
-		}
-
-		if(
-			message.poll.selectableCount < 0
-			|| message.poll.selectableCount > message.poll.values.length
-		) {
-			throw new Boom(
-				`poll.selectableCount in poll should be >= 0 and <= ${message.poll.values.length}`,
-				{ statusCode: 400 }
-			)
-		}
-
-		m.messageContextInfo = {
-			// encKey
-			messageSecret: message.poll.messageSecret || randomBytes(32),
-		}
-
-		m.pollCreationMessage = {
-			name: message.poll.name,
-			selectableOptionsCount: message.poll.selectableCount,
-			options: message.poll.values.map(optionName => ({ optionName })),
-		}
-	} else if('sharePhoneNumber' in message) {
-		m.protocolMessage = {
-			type: proto.Message.ProtocolMessage.Type.SHARE_PHONE_NUMBER
-		}
-	} else if('requestPhoneNumber' in message) {
-		m.requestPhoneNumberMessage = {}
-	} else {
-		m = await prepareWAMessageMedia(
-			message,
-			options
-		)
-	}
-
-	if('buttons' in message && !!message.buttons) {
-		const buttonsMessage: proto.Message.IButtonsMessage = {
-			buttons: message.buttons!.map(b => ({ ...b, type: proto.Message.ButtonsMessage.Button.Type.RESPONSE }))
-		}
-		if('text' in message) {
-			buttonsMessage.contentText = message.text
-			buttonsMessage.headerType = ButtonType.EMPTY
-		} else {
-			if('caption' in message) {
-				buttonsMessage.contentText = message.caption
-			}
-
-			const type = Object.keys(m)[0].replace('Message', '').toUpperCase()
-			buttonsMessage.headerType = ButtonType[type]
-
-			Object.assign(buttonsMessage, m)
-		}
-
-		if('footer' in message && !!message.footer) {
-			buttonsMessage.footerText = message.footer
-		}
-
-		m = { buttonsMessage }
-	} else if('templateButtons' in message && !!message.templateButtons) {
-		const msg: proto.Message.TemplateMessage.IHydratedFourRowTemplate = {
-			hydratedButtons: message.templateButtons
-		}
-
-		if('text' in message) {
-			msg.hydratedContentText = message.text
-		} else {
-
-			if('caption' in message) {
-				msg.hydratedContentText = message.caption
-			}
-
-			Object.assign(msg, m)
-		}
-
-		if('footer' in message && !!message.footer) {
-			msg.hydratedFooterText = message.footer
-		}
-
-		m = {
-			templateMessage: {
-				fourRowTemplate: msg,
-				hydratedTemplate: msg
-			}
-		}
-	}
-
-	if('sections' in message && !!message.sections) {
-		const listMessage: proto.Message.IListMessage = {
-			sections: message.sections,
-			buttonText: message.buttonText,
-			title: message.title,
-			footerText: message.footer,
-			description: message.text,
-			listType: proto.Message.ListMessage.ListType.SINGLE_SELECT
-		}
-
-		m = { listMessage }
-	}
-
-	if('viewOnce' in message && !!message.viewOnce) {
-		m = { viewOnceMessage: { message: m } }
-	}
-
-	if('mentions' in message && message.mentions?.length) {
-		const [messageType] = Object.keys(m)
-		m[messageType].contextInfo = m[messageType] || { }
-		m[messageType].contextInfo.mentionedJid = message.mentions
-	}
-
-	if('edit' in message) {
-		m = {
-			protocolMessage: {
-				key: message.edit,
-				editedMessage: m,
-				timestampMs: Date.now(),
-				type: WAProto.Message.ProtocolMessage.Type.MESSAGE_EDIT
-			}
-		}
-	}
-
-	if('contextInfo' in message && !!message.contextInfo) {
-		const [messageType] = Object.keys(m)
-		m[messageType] = m[messageType] || {}
-		m[messageType].contextInfo = message.contextInfo
-	}
-
-	return WAProto.Message.fromObject(m)
-}
-
-export const generateWAMessageFromContent = (
-	jid: string,
-	message: WAMessageContent,
-	options: MessageGenerationOptionsFromContent
-) => {
-	// set timestamp to now
-	// if not specified
-	if(!options.timestamp) {
-		options.timestamp = new Date()
-	}
-
-	const innerMessage = normalizeMessageContent(message)!
-	const key: string = getContentType(innerMessage)!
-	const timestamp = unixTimestampSeconds(options.timestamp)
-	const { quoted, userJid } = options
-
-	if(quoted) {
-		const participant = quoted.key.fromMe ? userJid : (quoted.participant || quoted.key.participant || quoted.key.remoteJid)
-
-		let quotedMsg = normalizeMessageContent(quoted.message)!
-		const msgType = getContentType(quotedMsg)!
-		// strip any redundant properties
-		quotedMsg = proto.Message.fromObject({ [msgType]: quotedMsg[msgType] })
-
-		const quotedContent = quotedMsg[msgType]
-		if(typeof quotedContent === 'object' && quotedContent && 'contextInfo' in quotedContent) {
-			delete quotedContent.contextInfo
-		}
-
-		const contextInfo: proto.IContextInfo = innerMessage[key].contextInfo || { }
-		contextInfo.participant = jidNormalizedUser(participant!)
-		contextInfo.stanzaId = quoted.key.id
-		contextInfo.quotedMessage = quotedMsg
-
-		// if a participant is quoted, then it must be a group
-		// hence, remoteJid of group must also be entered
-		if(jid !== quoted.key.remoteJid) {
-			contextInfo.remoteJid = quoted.key.remoteJid
-		}
-
-		innerMessage[key].contextInfo = contextInfo
-	}
-
-	if(
-		// if we want to send a disappearing message
-		!!options?.ephemeralExpiration &&
-		// and it's not a protocol message -- delete, toggle disappear message
-		key !== 'protocolMessage' &&
-		// already not converted to disappearing message
-		key !== 'ephemeralMessage'
-	) {
-		innerMessage[key].contextInfo = {
-			...(innerMessage[key].contextInfo || {}),
-			expiration: options.ephemeralExpiration || WA_DEFAULT_EPHEMERAL,
-			//ephemeralSettingTimestamp: options.ephemeralOptions.eph_setting_ts?.toString()
-		}
-	}
-
-	message = WAProto.Message.fromObject(message)
-
-	const messageJSON = {
-		key: {
-			remoteJid: jid,
-			fromMe: true,
-			id: options?.messageId || generateMessageID(),
-		},
-		message: message,
-		messageTimestamp: timestamp,
-		messageStubParameters: [],
-		participant: isJidGroup(jid) || isJidStatusBroadcast(jid) ? userJid : undefined,
-		status: WAMessageStatus.PENDING
-	}
-	return WAProto.WebMessageInfo.fromObject(messageJSON)
-}
-
-export const generateWAMessage = async(
-	jid: string,
-	content: AnyMessageContent,
-	options: MessageGenerationOptions,
-) => {
-	// ensure msg ID is with every log
-	options.logger = options?.logger?.child({ msgId: options.messageId })
-	return generateWAMessageFromContent(
-		jid,
-		await generateWAMessageContent(
-			content,
-			options
-		),
-		options
-	)
-}
-
-/** Get the key to access the true type of content */
-export const getContentType = (content: WAProto.IMessage | undefined) => {
-	if(content) {
-		const keys = Object.keys(content)
-		const key = keys.find(k => (k === 'conversation' || k.includes('Message')) && k !== 'senderKeyDistributionMessage')
-		return key as keyof typeof content
-	}
-}
-
-/**
- * Normalizes ephemeral, view once messages to regular message content
- * Eg. image messages in ephemeral messages, in view once messages etc.
- * @param content
- * @returns
- */
-export const normalizeMessageContent = (content: WAMessageContent | null | undefined): WAMessageContent | undefined => {
-	 if(!content) {
-		 return undefined
-	 }
-
-	 // set max iterations to prevent an infinite loop
-	 for(let i = 0;i < 5;i++) {
-		 const inner = getFutureProofMessage(content)
-		 if(!inner) {
-			 break
-		 }
-
-		 content = inner.message
-	 }
-
-	 return content!
-
-	 function getFutureProofMessage(message: typeof content) {
-		 return (
-			 message?.ephemeralMessage
-			 || message?.viewOnceMessage
-			 || message?.documentWithCaptionMessage
-			 || message?.viewOnceMessageV2
-			 || message?.viewOnceMessageV2Extension
-			 || message?.editedMessage
-		 )
-	 }
-}
-
-/**
- * Extract the true message content from a message
- * Eg. extracts the inner message from a disappearing message/view once message
- */
-export const extractMessageContent = (content: WAMessageContent | undefined | null): WAMessageContent | undefined => {
-	const extractFromTemplateMessage = (msg: proto.Message.TemplateMessage.IHydratedFourRowTemplate | proto.Message.IButtonsMessage) => {
-		if(msg.imageMessage) {
-			return { imageMessage: msg.imageMessage }
-		} else if(msg.documentMessage) {
-			return { documentMessage: msg.documentMessage }
-		} else if(msg.videoMessage) {
-			return { videoMessage: msg.videoMessage }
-		} else if(msg.locationMessage) {
-			return { locationMessage: msg.locationMessage }
-		} else {
-			return {
-				conversation:
-					'contentText' in msg
-						? msg.contentText
-						: ('hydratedContentText' in msg ? msg.hydratedContentText : '')
-			}
-		}
-	}
-
-	content = normalizeMessageContent(content)
-
-	if(content?.buttonsMessage) {
-	  return extractFromTemplateMessage(content.buttonsMessage!)
-	}
-
-	if(content?.templateMessage?.hydratedFourRowTemplate) {
-		return extractFromTemplateMessage(content?.templateMessage?.hydratedFourRowTemplate)
-	}
-
-	if(content?.templateMessage?.hydratedTemplate) {
-		return extractFromTemplateMessage(content?.templateMessage?.hydratedTemplate)
-	}
-
-	if(content?.templateMessage?.fourRowTemplate) {
-		return extractFromTemplateMessage(content?.templateMessage?.fourRowTemplate)
-	}
-
-	return content
-}
-
-/**
- * Returns the device predicted by message ID
- */
-export const getDevice = (id: string) => /^3A.{18}$/.test(id) ? 'ios' : /^3E.{20}$/.test(id) ? 'web' : /^(.{21}|.{32})$/.test(id) ? 'android' : /^.{18}$/.test(id) ? 'desktop' : 'unknown'
-
-/** Upserts a receipt in the message */
-export const updateMessageWithReceipt = (msg: Pick<WAMessage, 'userReceipt'>, receipt: MessageUserReceipt) => {
-	msg.userReceipt = msg.userReceipt || []
-	const recp = msg.userReceipt.find(m => m.userJid === receipt.userJid)
-	if(recp) {
-		Object.assign(recp, receipt)
-	} else {
-		msg.userReceipt.push(receipt)
-	}
-}
-
-/** Update the message with a new reaction */
-export const updateMessageWithReaction = (msg: Pick<WAMessage, 'reactions'>, reaction: proto.IReaction) => {
-	const authorID = getKeyAuthor(reaction.key)
-
-	const reactions = (msg.reactions || [])
-		.filter(r => getKeyAuthor(r.key) !== authorID)
-	if(reaction.text) {
-		reactions.push(reaction)
-	}
-
-	msg.reactions = reactions
-}
-
-/** Update the message with a new poll update */
-export const updateMessageWithPollUpdate = (
-	msg: Pick<WAMessage, 'pollUpdates'>,
-	update: proto.IPollUpdate
-) => {
-	const authorID = getKeyAuthor(update.pollUpdateMessageKey)
-
-	const reactions = (msg.pollUpdates || [])
-		.filter(r => getKeyAuthor(r.pollUpdateMessageKey) !== authorID)
-	if(update.vote?.selectedOptions?.length) {
-		reactions.push(update)
-	}
-
-	msg.pollUpdates = reactions
-}
-
-type VoteAggregation = {
-	name: string
-	voters: string[]
-}
-
-/**
- * Aggregates all poll updates in a poll.
- * @param msg the poll creation message
- * @param meId your jid
- * @returns A list of options & their voters
- */
-export function getAggregateVotesInPollMessage(
-	{ message, pollUpdates }: Pick<WAMessage, 'pollUpdates' | 'message'>,
-	meId?: string
-) {
-	const opts = message?.pollCreationMessage?.options || message?.pollCreationMessageV2?.options || message?.pollCreationMessageV3?.options || []
-	const voteHashMap = opts.reduce((acc, opt) => {
-		const hash = sha256(Buffer.from(opt.optionName || '')).toString()
-		acc[hash] = {
-			name: opt.optionName || '',
-			voters: []
-		}
-		return acc
-	}, {} as { [_: string]: VoteAggregation })
-
-	for(const update of pollUpdates || []) {
-		const { vote } = update
-		if(!vote) {
-			continue
-		}
-
-		for(const option of vote.selectedOptions || []) {
-			const hash = option.toString()
-			let data = voteHashMap[hash]
-			if(!data) {
-				voteHashMap[hash] = {
-					name: 'Unknown',
-					voters: []
-				}
-				data = voteHashMap[hash]
-			}
-
-			voteHashMap[hash].voters.push(
-				getKeyAuthor(update.pollUpdateMessageKey, meId)
-			)
-		}
-	}
-
-	return Object.values(voteHashMap)
-}
-
-/** Given a list of message keys, aggregates them by chat & sender. Useful for sending read receipts in bulk */
-export const aggregateMessageKeysNotFromMe = (keys: proto.IMessageKey[]) => {
-	const keyMap: { [id: string]: { jid: string, participant: string | undefined, messageIds: string[] } } = { }
-	for(const { remoteJid, id, participant, fromMe } of keys) {
-		if(!fromMe) {
-			const uqKey = `${remoteJid}:${participant || ''}`
-			if(!keyMap[uqKey]) {
-				keyMap[uqKey] = {
-					jid: remoteJid!,
-					participant: participant!,
-					messageIds: []
-				}
-			}
-
-			keyMap[uqKey].messageIds.push(id!)
-		}
-	}
-
-	return Object.values(keyMap)
-}
-
-type DownloadMediaMessageContext = {
-	reuploadRequest: (msg: WAMessage) => Promise<WAMessage>
-	logger: Logger
-}
-
-const REUPLOAD_REQUIRED_STATUS = [410, 404]
-
-/**
- * Downloads the given message. Throws an error if it's not a media message
- */
-export const downloadMediaMessage = async<Type extends 'buffer' | 'stream'>(
-	message: WAMessage,
-	type: Type,
-	options: MediaDownloadOptions,
-	ctx?: DownloadMediaMessageContext
-) => {
-	const result = await downloadMsg()
-		.catch(async(error) => {
-			if(ctx) {
-				if(axios.isAxiosError(error)) {
-					// check if the message requires a reupload
-					if(REUPLOAD_REQUIRED_STATUS.includes(error.response?.status!)) {
-						ctx.logger.info({ key: message.key }, 'sending reupload media request...')
-						// request reupload
-						message = await ctx.reuploadRequest(message)
-						const result = await downloadMsg()
-						return result
-					}
-				}
-			}
-
-			throw error
-		})
-
-	return result as Type extends 'buffer' ? Buffer : Transform
-
-	async function downloadMsg() {
-		const mContent = extractMessageContent(message.message)
-		if(!mContent) {
-			throw new Boom('No message present', { statusCode: 400, data: message })
-		}
-
-		const contentType = getContentType(mContent)
-		let mediaType = contentType?.replace('Message', '') as MediaType
-		const media = mContent[contentType!]
-
-		if(!media || typeof media !== 'object' || (!('url' in media) && !('thumbnailDirectPath' in media))) {
-			throw new Boom(`"${contentType}" message is not a media message`)
-		}
-
-		let download: DownloadableMessage
-		if('thumbnailDirectPath' in media && !('url' in media)) {
-			download = {
-				directPath: media.thumbnailDirectPath,
-				mediaKey: media.mediaKey
-			}
-			mediaType = 'thumbnail-link'
-		} else {
-			download = media
-		}
-
-		const stream = await downloadContentFromMessage(download, mediaType, options)
-		if(type === 'buffer') {
-			const bufferArray: Buffer[] = []
-			for await (const chunk of stream) {
-				bufferArray.push(chunk)
-			}
-
-			return Buffer.concat(bufferArray)
-		}
-
-		return stream
-	}
-}
-
-/** Checks whether the given message is a media message; if it is returns the inner content */
-export const assertMediaContent = (content: proto.IMessage | null | undefined) => {
-	content = extractMessageContent(content)
-	const mediaContent = content?.documentMessage
-		|| content?.imageMessage
-		|| content?.videoMessage
-		|| content?.audioMessage
-		|| content?.stickerMessage
-	if(!mediaContent) {
-		throw new Boom(
-			'given message is not a media message',
-			{ statusCode: 400, data: content }
-		)
-	}
-
-	return mediaContent
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/noise-handler.ts b/node_modules/@whiskeysockets/baileys/src/Utils/noise-handler.ts
deleted file mode 100644
index 5e37ba3..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/noise-handler.ts
+++ /dev/null
@@ -1,197 +0,0 @@
-import { Boom } from '@hapi/boom'
-import { Logger } from 'pino'
-import { proto } from '../../WAProto'
-import { NOISE_MODE, WA_CERT_DETAILS } from '../Defaults'
-import { KeyPair } from '../Types'
-import { BinaryNode, decodeBinaryNode } from '../WABinary'
-import { aesDecryptGCM, aesEncryptGCM, Curve, hkdf, sha256 } from './crypto'
-
-const generateIV = (counter: number) => {
-	const iv = new ArrayBuffer(12)
-	new DataView(iv).setUint32(8, counter)
-
-	return new Uint8Array(iv)
-}
-
-export const makeNoiseHandler = ({
-	keyPair: { private: privateKey, public: publicKey },
-	NOISE_HEADER,
-	mobile,
-	logger,
-	routingInfo
-}: {
-	keyPair: KeyPair
-	NOISE_HEADER: Uint8Array
-	mobile: boolean
-	logger: Logger
-	routingInfo?: Buffer | undefined
-}) => {
-	logger = logger.child({ class: 'ns' })
-
-	const authenticate = (data: Uint8Array) => {
-		if(!isFinished) {
-			hash = sha256(Buffer.concat([hash, data]))
-		}
-	}
-
-	const encrypt = (plaintext: Uint8Array) => {
-		const result = aesEncryptGCM(plaintext, encKey, generateIV(writeCounter), hash)
-
-		writeCounter += 1
-
-		authenticate(result)
-		return result
-	}
-
-	const decrypt = (ciphertext: Uint8Array) => {
-		// before the handshake is finished, we use the same counter
-		// after handshake, the counters are different
-		const iv = generateIV(isFinished ? readCounter : writeCounter)
-		const result = aesDecryptGCM(ciphertext, decKey, iv, hash)
-
-		if(isFinished) {
-			readCounter += 1
-		} else {
-			writeCounter += 1
-		}
-
-		authenticate(ciphertext)
-		return result
-	}
-
-	const localHKDF = (data: Uint8Array) => {
-		const key = hkdf(Buffer.from(data), 64, { salt, info: '' })
-		return [key.slice(0, 32), key.slice(32)]
-	}
-
-	const mixIntoKey = (data: Uint8Array) => {
-		const [write, read] = localHKDF(data)
-		salt = write
-		encKey = read
-		decKey = read
-		readCounter = 0
-		writeCounter = 0
-	}
-
-	const finishInit = () => {
-		const [write, read] = localHKDF(new Uint8Array(0))
-		encKey = write
-		decKey = read
-		hash = Buffer.from([])
-		readCounter = 0
-		writeCounter = 0
-		isFinished = true
-	}
-
-	const data = Buffer.from(NOISE_MODE)
-	let hash = Buffer.from(data.byteLength === 32 ? data : sha256(data))
-	let salt = hash
-	let encKey = hash
-	let decKey = hash
-	let readCounter = 0
-	let writeCounter = 0
-	let isFinished = false
-	let sentIntro = false
-
-	let inBytes = Buffer.alloc(0)
-
-	authenticate(NOISE_HEADER)
-	authenticate(publicKey)
-
-	return {
-		encrypt,
-		decrypt,
-		authenticate,
-		mixIntoKey,
-		finishInit,
-		processHandshake: ({ serverHello }: proto.HandshakeMessage, noiseKey: KeyPair) => {
-			authenticate(serverHello!.ephemeral!)
-			mixIntoKey(Curve.sharedKey(privateKey, serverHello!.ephemeral!))
-
-			const decStaticContent = decrypt(serverHello!.static!)
-			mixIntoKey(Curve.sharedKey(privateKey, decStaticContent))
-
-			const certDecoded = decrypt(serverHello!.payload!)
-
-			if(mobile) {
-				proto.CertChain.NoiseCertificate.decode(certDecoded)
-			} else {
-				const { intermediate: certIntermediate } = proto.CertChain.decode(certDecoded)
-
-				const { issuerSerial } = proto.CertChain.NoiseCertificate.Details.decode(certIntermediate!.details!)
-
-				if(issuerSerial !== WA_CERT_DETAILS.SERIAL) {
-					throw new Boom('certification match failed', { statusCode: 400 })
-				}
-			}
-
-			const keyEnc = encrypt(noiseKey.public)
-			mixIntoKey(Curve.sharedKey(noiseKey.private, serverHello!.ephemeral!))
-
-			return keyEnc
-		},
-		encodeFrame: (data: Buffer | Uint8Array) => {
-			if(isFinished) {
-				data = encrypt(data)
-			}
-
-			let header: Buffer
-
-			if(routingInfo) {
-				header = Buffer.alloc(7)
-				header.write('ED', 0, 'utf8')
-				header.writeUint8(0, 2)
-				header.writeUint8(1, 3)
-				header.writeUint8(routingInfo.byteLength >> 16, 4)
-				header.writeUint16BE(routingInfo.byteLength & 65535, 5)
-				header = Buffer.concat([header, routingInfo, NOISE_HEADER])
-			} else {
-				header = Buffer.from(NOISE_HEADER)
-			}
-
-			const introSize = sentIntro ? 0 : header.length
-			const frame = Buffer.alloc(introSize + 3 + data.byteLength)
-
-			if(!sentIntro) {
-				frame.set(header)
-				sentIntro = true
-			}
-
-			frame.writeUInt8(data.byteLength >> 16, introSize)
-			frame.writeUInt16BE(65535 & data.byteLength, introSize + 1)
-			frame.set(data, introSize + 3)
-
-			return frame
-		},
-		decodeFrame: (newData: Buffer | Uint8Array, onFrame: (buff: Uint8Array | BinaryNode) => void) => {
-			// the binary protocol uses its own framing mechanism
-			// on top of the WS frames
-			// so we get this data and separate out the frames
-			const getBytesSize = () => {
-				if(inBytes.length >= 3) {
-					return (inBytes.readUInt8() << 16) | inBytes.readUInt16BE(1)
-				}
-			}
-
-			inBytes = Buffer.concat([ inBytes, newData ])
-
-			logger.trace(`recv ${newData.length} bytes, total recv ${inBytes.length} bytes`)
-
-			let size = getBytesSize()
-			while(size && inBytes.length >= size + 3) {
-				let frame: Uint8Array | BinaryNode = inBytes.slice(3, size + 3)
-				inBytes = inBytes.slice(size + 3)
-
-				if(isFinished) {
-					const result = decrypt(frame as Uint8Array)
-					frame = decodeBinaryNode(result)
-				}
-
-				logger.trace({ msg: (frame as any)?.attrs?.id }, 'recv frame')
-
-				onFrame(frame)
-				size = getBytesSize()
-			}
-		}
-	}
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/process-message.ts b/node_modules/@whiskeysockets/baileys/src/Utils/process-message.ts
deleted file mode 100644
index 114ccf0..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/process-message.ts
+++ /dev/null
@@ -1,414 +0,0 @@
-import { AxiosRequestConfig } from 'axios'
-import type { Logger } from 'pino'
-import { proto } from '../../WAProto'
-import { AuthenticationCreds, BaileysEventEmitter, Chat, GroupMetadata, ParticipantAction, SignalKeyStoreWithTransaction, SocketConfig, WAMessageStubType } from '../Types'
-import { getContentType, normalizeMessageContent } from '../Utils/messages'
-import { areJidsSameUser, isJidBroadcast, isJidStatusBroadcast, jidNormalizedUser } from '../WABinary'
-import { aesDecryptGCM, hmacSign } from './crypto'
-import { getKeyAuthor, toNumber } from './generics'
-import { downloadAndProcessHistorySyncNotification } from './history'
-
-type ProcessMessageContext = {
-	shouldProcessHistoryMsg: boolean
-	creds: AuthenticationCreds
-	keyStore: SignalKeyStoreWithTransaction
-	ev: BaileysEventEmitter
-	getMessage: SocketConfig['getMessage']
-	logger?: Logger
-	options: AxiosRequestConfig<{}>
-}
-
-const REAL_MSG_STUB_TYPES = new Set([
-	WAMessageStubType.CALL_MISSED_GROUP_VIDEO,
-	WAMessageStubType.CALL_MISSED_GROUP_VOICE,
-	WAMessageStubType.CALL_MISSED_VIDEO,
-	WAMessageStubType.CALL_MISSED_VOICE
-])
-
-const REAL_MSG_REQ_ME_STUB_TYPES = new Set([
-	WAMessageStubType.GROUP_PARTICIPANT_ADD
-])
-
-/** Cleans a received message to further processing */
-export const cleanMessage = (message: proto.IWebMessageInfo, meId: string) => {
-	// ensure remoteJid and participant doesn't have device or agent in it
-	message.key.remoteJid = jidNormalizedUser(message.key.remoteJid!)
-	message.key.participant = message.key.participant ? jidNormalizedUser(message.key.participant!) : undefined
-	const content = normalizeMessageContent(message.message)
-	// if the message has a reaction, ensure fromMe & remoteJid are from our perspective
-	if(content?.reactionMessage) {
-		normaliseKey(content.reactionMessage.key!)
-	}
-
-	if(content?.pollUpdateMessage) {
-		normaliseKey(content.pollUpdateMessage.pollCreationMessageKey!)
-	}
-
-	function normaliseKey(msgKey: proto.IMessageKey) {
-		// if the reaction is from another user
-		// we've to correctly map the key to this user's perspective
-		if(!message.key.fromMe) {
-			// if the sender believed the message being reacted to is not from them
-			// we've to correct the key to be from them, or some other participant
-			msgKey.fromMe = !msgKey.fromMe
-				? areJidsSameUser(msgKey.participant || msgKey.remoteJid!, meId)
-				// if the message being reacted to, was from them
-				// fromMe automatically becomes false
-				: false
-			// set the remoteJid to being the same as the chat the message came from
-			msgKey.remoteJid = message.key.remoteJid
-			// set participant of the message
-			msgKey.participant = msgKey.participant || message.key.participant
-		}
-	}
-}
-
-export const isRealMessage = (message: proto.IWebMessageInfo, meId: string) => {
-	const normalizedContent = normalizeMessageContent(message.message)
-	const hasSomeContent = !!getContentType(normalizedContent)
-	return (
-		!!normalizedContent
-		|| REAL_MSG_STUB_TYPES.has(message.messageStubType!)
-		|| (
-			REAL_MSG_REQ_ME_STUB_TYPES.has(message.messageStubType!)
-			&& message.messageStubParameters?.some(p => areJidsSameUser(meId, p))
-		)
-	)
-	&& hasSomeContent
-	&& !normalizedContent?.protocolMessage
-	&& !normalizedContent?.reactionMessage
-	&& !normalizedContent?.pollUpdateMessage
-}
-
-export const shouldIncrementChatUnread = (message: proto.IWebMessageInfo) => (
-	!message.key.fromMe && !message.messageStubType
-)
-
-/**
- * Get the ID of the chat from the given key.
- * Typically -- that'll be the remoteJid, but for broadcasts, it'll be the participant
- */
-export const getChatId = ({ remoteJid, participant, fromMe }: proto.IMessageKey) => {
-	if(
-		isJidBroadcast(remoteJid!)
-		&& !isJidStatusBroadcast(remoteJid!)
-		&& !fromMe
-	) {
-		return participant!
-	}
-
-	return remoteJid!
-}
-
-type PollContext = {
-	/** normalised jid of the person that created the poll */
-	pollCreatorJid: string
-	/** ID of the poll creation message */
-	pollMsgId: string
-	/** poll creation message enc key */
-	pollEncKey: Uint8Array
-	/** jid of the person that voted */
-	voterJid: string
-}
-
-/**
- * Decrypt a poll vote
- * @param vote encrypted vote
- * @param ctx additional info about the poll required for decryption
- * @returns list of SHA256 options
- */
-export function decryptPollVote(
-	{ encPayload, encIv }: proto.Message.IPollEncValue,
-	{
-		pollCreatorJid,
-		pollMsgId,
-		pollEncKey,
-		voterJid,
-	}: PollContext
-) {
-	const sign = Buffer.concat(
-		[
-			toBinary(pollMsgId),
-			toBinary(pollCreatorJid),
-			toBinary(voterJid),
-			toBinary('Poll Vote'),
-			new Uint8Array([1])
-		]
-	)
-
-	const key0 = hmacSign(pollEncKey, new Uint8Array(32), 'sha256')
-	const decKey = hmacSign(sign, key0, 'sha256')
-	const aad = toBinary(`${pollMsgId}\u0000${voterJid}`)
-
-	const decrypted = aesDecryptGCM(encPayload!, decKey, encIv!, aad)
-	return proto.Message.PollVoteMessage.decode(decrypted)
-
-	function toBinary(txt: string) {
-		return Buffer.from(txt)
-	}
-}
-
-const processMessage = async(
-	message: proto.IWebMessageInfo,
-	{
-		shouldProcessHistoryMsg,
-		ev,
-		creds,
-		keyStore,
-		logger,
-		options,
-		getMessage
-	}: ProcessMessageContext
-) => {
-	const meId = creds.me!.id
-	const { accountSettings } = creds
-
-	const chat: Partial<Chat> = { id: jidNormalizedUser(getChatId(message.key)) }
-	const isRealMsg = isRealMessage(message, meId)
-
-	if(isRealMsg) {
-		chat.conversationTimestamp = toNumber(message.messageTimestamp)
-		// only increment unread count if not CIPHERTEXT and from another person
-		if(shouldIncrementChatUnread(message)) {
-			chat.unreadCount = (chat.unreadCount || 0) + 1
-		}
-	}
-
-	const content = normalizeMessageContent(message.message)
-
-	// unarchive chat if it's a real message, or someone reacted to our message
-	// and we've the unarchive chats setting on
-	if(
-		(isRealMsg || content?.reactionMessage?.key?.fromMe)
-		&& accountSettings?.unarchiveChats
-	) {
-		chat.archived = false
-		chat.readOnly = false
-	}
-
-	const protocolMsg = content?.protocolMessage
-	if(protocolMsg) {
-		switch (protocolMsg.type) {
-		case proto.Message.ProtocolMessage.Type.HISTORY_SYNC_NOTIFICATION:
-			const histNotification = protocolMsg!.historySyncNotification!
-			const process = shouldProcessHistoryMsg
-			const isLatest = !creds.processedHistoryMessages?.length
-
-			logger?.info({
-				histNotification,
-				process,
-				id: message.key.id,
-				isLatest,
-			}, 'got history notification')
-
-			if(process) {
-				ev.emit('creds.update', {
-					processedHistoryMessages: [
-						...(creds.processedHistoryMessages || []),
-						{ key: message.key, messageTimestamp: message.messageTimestamp }
-					]
-				})
-
-				const data = await downloadAndProcessHistorySyncNotification(
-					histNotification,
-					options
-				)
-
-				ev.emit('messaging-history.set', { ...data, isLatest })
-			}
-
-			break
-		case proto.Message.ProtocolMessage.Type.APP_STATE_SYNC_KEY_SHARE:
-			const keys = protocolMsg.appStateSyncKeyShare!.keys
-			if(keys?.length) {
-				let newAppStateSyncKeyId = ''
-				await keyStore.transaction(
-					async() => {
-						const newKeys: string[] = []
-						for(const { keyData, keyId } of keys) {
-							const strKeyId = Buffer.from(keyId!.keyId!).toString('base64')
-							newKeys.push(strKeyId)
-
-							await keyStore.set({ 'app-state-sync-key': { [strKeyId]: keyData! } })
-
-							newAppStateSyncKeyId = strKeyId
-						}
-
-						logger?.info(
-							{ newAppStateSyncKeyId, newKeys },
-							'injecting new app state sync keys'
-						)
-					}
-				)
-
-				ev.emit('creds.update', { myAppStateKeyId: newAppStateSyncKeyId })
-			} else {
-				logger?.info({ protocolMsg }, 'recv app state sync with 0 keys')
-			}
-
-			break
-		case proto.Message.ProtocolMessage.Type.REVOKE:
-			ev.emit('messages.update', [
-				{
-					key: {
-						...message.key,
-						id: protocolMsg.key!.id
-					},
-					update: { message: null, messageStubType: WAMessageStubType.REVOKE, key: message.key }
-				}
-			])
-			break
-		case proto.Message.ProtocolMessage.Type.EPHEMERAL_SETTING:
-			Object.assign(chat, {
-				ephemeralSettingTimestamp: toNumber(message.messageTimestamp),
-				ephemeralExpiration: protocolMsg.ephemeralExpiration || null
-			})
-			break
-		case proto.Message.ProtocolMessage.Type.PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE:
-			const response = protocolMsg.peerDataOperationRequestResponseMessage!
-			if(response) {
-				const { peerDataOperationResult } = response
-				for(const result of peerDataOperationResult!) {
-					const { placeholderMessageResendResponse: retryResponse } = result
-					if(retryResponse) {
-						const webMessageInfo = proto.WebMessageInfo.decode(retryResponse.webMessageInfoBytes!)
-						ev.emit('messages.update', [
-							{ key: webMessageInfo.key, update: { message: webMessageInfo.message } }
-						])
-					}
-				}
-			}
-
-			break
-		}
-	} else if(content?.reactionMessage) {
-		const reaction: proto.IReaction = {
-			...content.reactionMessage,
-			key: message.key,
-		}
-		ev.emit('messages.reaction', [{
-			reaction,
-			key: content.reactionMessage!.key!,
-		}])
-	} else if(message.messageStubType) {
-		const jid = message.key!.remoteJid!
-		//let actor = whatsappID (message.participant)
-		let participants: string[]
-		const emitParticipantsUpdate = (action: ParticipantAction) => (
-			ev.emit('group-participants.update', { id: jid, author: message.participant!, participants, action })
-		)
-		const emitGroupUpdate = (update: Partial<GroupMetadata>) => {
-			ev.emit('groups.update', [{ id: jid, ...update, author: message.participant ?? undefined }])
-		}
-
-		const participantsIncludesMe = () => participants.find(jid => areJidsSameUser(meId, jid))
-
-		switch (message.messageStubType) {
-		case WAMessageStubType.GROUP_PARTICIPANT_LEAVE:
-		case WAMessageStubType.GROUP_PARTICIPANT_REMOVE:
-			participants = message.messageStubParameters || []
-			emitParticipantsUpdate('remove')
-			// mark the chat read only if you left the group
-			if(participantsIncludesMe()) {
-				chat.readOnly = true
-			}
-
-			break
-		case WAMessageStubType.GROUP_PARTICIPANT_ADD:
-		case WAMessageStubType.GROUP_PARTICIPANT_INVITE:
-		case WAMessageStubType.GROUP_PARTICIPANT_ADD_REQUEST_JOIN:
-			participants = message.messageStubParameters || []
-			if(participantsIncludesMe()) {
-				chat.readOnly = false
-			}
-
-			emitParticipantsUpdate('add')
-			break
-		case WAMessageStubType.GROUP_PARTICIPANT_DEMOTE:
-			participants = message.messageStubParameters || []
-			emitParticipantsUpdate('demote')
-			break
-		case WAMessageStubType.GROUP_PARTICIPANT_PROMOTE:
-			participants = message.messageStubParameters || []
-			emitParticipantsUpdate('promote')
-			break
-		case WAMessageStubType.GROUP_CHANGE_ANNOUNCE:
-			const announceValue = message.messageStubParameters?.[0]
-			emitGroupUpdate({ announce: announceValue === 'true' || announceValue === 'on' })
-			break
-		case WAMessageStubType.GROUP_CHANGE_RESTRICT:
-			const restrictValue = message.messageStubParameters?.[0]
-			emitGroupUpdate({ restrict: restrictValue === 'true' || restrictValue === 'on' })
-			break
-		case WAMessageStubType.GROUP_CHANGE_SUBJECT:
-			const name = message.messageStubParameters?.[0]
-			chat.name = name
-			emitGroupUpdate({ subject: name })
-			break
-		case WAMessageStubType.GROUP_CHANGE_INVITE_LINK:
-			const code = message.messageStubParameters?.[0]
-			emitGroupUpdate({ inviteCode: code })
-			break
-		case WAMessageStubType.GROUP_MEMBER_ADD_MODE:
-			const memberAddValue = message.messageStubParameters?.[0]
-			emitGroupUpdate({ memberAddMode: memberAddValue === 'all_member_add' })
-			break
-		case WAMessageStubType.GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE:
-			const approvalMode = message.messageStubParameters?.[0]
-			emitGroupUpdate({ joinApprovalMode: approvalMode === 'on' })
-			break
-		}
-	} else if(content?.pollUpdateMessage) {
-		const creationMsgKey = content.pollUpdateMessage.pollCreationMessageKey!
-		// we need to fetch the poll creation message to get the poll enc key
-		const pollMsg = await getMessage(creationMsgKey)
-		if(pollMsg) {
-			const meIdNormalised = jidNormalizedUser(meId)
-			const pollCreatorJid = getKeyAuthor(creationMsgKey, meIdNormalised)
-			const voterJid = getKeyAuthor(message.key!, meIdNormalised)
-			const pollEncKey = pollMsg.messageContextInfo?.messageSecret!
-
-			try {
-				const voteMsg = decryptPollVote(
-					content.pollUpdateMessage.vote!,
-					{
-						pollEncKey,
-						pollCreatorJid,
-						pollMsgId: creationMsgKey.id!,
-						voterJid,
-					}
-				)
-				ev.emit('messages.update', [
-					{
-						key: creationMsgKey,
-						update: {
-							pollUpdates: [
-								{
-									pollUpdateMessageKey: message.key,
-									vote: voteMsg,
-									senderTimestampMs: (content.pollUpdateMessage.senderTimestampMs! as Long).toNumber(),
-								}
-							]
-						}
-					}
-				])
-			} catch(err) {
-				logger?.warn(
-					{ err, creationMsgKey },
-					'failed to decrypt poll vote'
-				)
-			}
-		} else {
-			logger?.warn(
-				{ creationMsgKey },
-				'poll creation message not found, cannot decrypt update'
-			)
-		}
-	}
-
-	if(Object.keys(chat).length > 1) {
-		ev.emit('chats.update', [chat])
-	}
-}
-
-export default processMessage
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/signal.ts b/node_modules/@whiskeysockets/baileys/src/Utils/signal.ts
deleted file mode 100644
index e1c44b9..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/signal.ts
+++ /dev/null
@@ -1,177 +0,0 @@
-import { KEY_BUNDLE_TYPE } from '../Defaults'
-import { SignalRepository } from '../Types'
-import { AuthenticationCreds, AuthenticationState, KeyPair, SignalIdentity, SignalKeyStore, SignedKeyPair } from '../Types/Auth'
-import { assertNodeErrorFree, BinaryNode, getBinaryNodeChild, getBinaryNodeChildBuffer, getBinaryNodeChildren, getBinaryNodeChildUInt, jidDecode, JidWithDevice, S_WHATSAPP_NET } from '../WABinary'
-import { Curve, generateSignalPubKey } from './crypto'
-import { encodeBigEndian } from './generics'
-
-export const createSignalIdentity = (
-	wid: string,
-	accountSignatureKey: Uint8Array
-): SignalIdentity => {
-	return {
-		identifier: { name: wid, deviceId: 0 },
-		identifierKey: generateSignalPubKey(accountSignatureKey)
-	}
-}
-
-export const getPreKeys = async({ get }: SignalKeyStore, min: number, limit: number) => {
-	const idList: string[] = []
-	for(let id = min; id < limit;id++) {
-		idList.push(id.toString())
-	}
-
-	return get('pre-key', idList)
-}
-
-export const generateOrGetPreKeys = (creds: AuthenticationCreds, range: number) => {
-	const avaliable = creds.nextPreKeyId - creds.firstUnuploadedPreKeyId
-	const remaining = range - avaliable
-	const lastPreKeyId = creds.nextPreKeyId + remaining - 1
-	const newPreKeys: { [id: number]: KeyPair } = { }
-	if(remaining > 0) {
-		for(let i = creds.nextPreKeyId;i <= lastPreKeyId;i++) {
-			newPreKeys[i] = Curve.generateKeyPair()
-		}
-	}
-
-	return {
-		newPreKeys,
-		lastPreKeyId,
-		preKeysRange: [creds.firstUnuploadedPreKeyId, range] as const,
-	}
-}
-
-export const xmppSignedPreKey = (key: SignedKeyPair): BinaryNode => (
-	{
-		tag: 'skey',
-		attrs: { },
-		content: [
-			{ tag: 'id', attrs: { }, content: encodeBigEndian(key.keyId, 3) },
-			{ tag: 'value', attrs: { }, content: key.keyPair.public },
-			{ tag: 'signature', attrs: { }, content: key.signature }
-		]
-	}
-)
-
-export const xmppPreKey = (pair: KeyPair, id: number): BinaryNode => (
-	{
-		tag: 'key',
-		attrs: { },
-		content: [
-			{ tag: 'id', attrs: { }, content: encodeBigEndian(id, 3) },
-			{ tag: 'value', attrs: { }, content: pair.public }
-		]
-	}
-)
-
-export const parseAndInjectE2ESessions = async(
-	node: BinaryNode,
-	repository: SignalRepository
-) => {
-	const extractKey = (key: BinaryNode) => (
-		key ? ({
-			keyId: getBinaryNodeChildUInt(key, 'id', 3)!,
-			publicKey: generateSignalPubKey(getBinaryNodeChildBuffer(key, 'value')!)!,
-			signature: getBinaryNodeChildBuffer(key, 'signature')!,
-		}) : undefined
-	)
-	const nodes = getBinaryNodeChildren(getBinaryNodeChild(node, 'list'), 'user')
-	for(const node of nodes) {
-		assertNodeErrorFree(node)
-	}
-
-	await Promise.all(
-		nodes.map(
-			async node => {
-				const signedKey = getBinaryNodeChild(node, 'skey')!
-				const key = getBinaryNodeChild(node, 'key')!
-				const identity = getBinaryNodeChildBuffer(node, 'identity')!
-				const jid = node.attrs.jid
-				const registrationId = getBinaryNodeChildUInt(node, 'registration', 4)
-
-				await repository.injectE2ESession({
-					jid,
-					session: {
-						registrationId: registrationId!,
-						identityKey: generateSignalPubKey(identity),
-						signedPreKey: extractKey(signedKey)!,
-						preKey: extractKey(key)!
-					}
-				})
-			}
-		)
-	)
-}
-
-export const extractDeviceJids = (result: BinaryNode, myJid: string, excludeZeroDevices: boolean) => {
-	const { user: myUser, device: myDevice } = jidDecode(myJid)!
-	const extracted: JidWithDevice[] = []
-	for(const node of result.content as BinaryNode[]) {
-		const list = getBinaryNodeChild(node, 'list')?.content
-		if(list && Array.isArray(list)) {
-			for(const item of list) {
-				const { user } = jidDecode(item.attrs.jid)!
-				const devicesNode = getBinaryNodeChild(item, 'devices')
-				const deviceListNode = getBinaryNodeChild(devicesNode, 'device-list')
-				if(Array.isArray(deviceListNode?.content)) {
-					for(const { tag, attrs } of deviceListNode!.content) {
-						const device = +attrs.id
-						if(
-							tag === 'device' && // ensure the "device" tag
-							(!excludeZeroDevices || device !== 0) && // if zero devices are not-excluded, or device is non zero
-							(myUser !== user || myDevice !== device) && // either different user or if me user, not this device
-							(device === 0 || !!attrs['key-index']) // ensure that "key-index" is specified for "non-zero" devices, produces a bad req otherwise
-						) {
-							extracted.push({ user, device })
-						}
-					}
-				}
-			}
-		}
-	}
-
-	return extracted
-}
-
-/**
- * get the next N keys for upload or processing
- * @param count number of pre-keys to get or generate
- */
-export const getNextPreKeys = async({ creds, keys }: AuthenticationState, count: number) => {
-	const { newPreKeys, lastPreKeyId, preKeysRange } = generateOrGetPreKeys(creds, count)
-
-	const update: Partial<AuthenticationCreds> = {
-		nextPreKeyId: Math.max(lastPreKeyId + 1, creds.nextPreKeyId),
-		firstUnuploadedPreKeyId: Math.max(creds.firstUnuploadedPreKeyId, lastPreKeyId + 1)
-	}
-
-	await keys.set({ 'pre-key': newPreKeys })
-
-	const preKeys = await getPreKeys(keys, preKeysRange[0], preKeysRange[0] + preKeysRange[1])
-
-	return { update, preKeys }
-}
-
-export const getNextPreKeysNode = async(state: AuthenticationState, count: number) => {
-	const { creds } = state
-	const { update, preKeys } = await getNextPreKeys(state, count)
-
-	const node: BinaryNode = {
-		tag: 'iq',
-		attrs: {
-			xmlns: 'encrypt',
-			type: 'set',
-			to: S_WHATSAPP_NET,
-		},
-		content: [
-			{ tag: 'registration', attrs: { }, content: encodeBigEndian(creds.registrationId) },
-			{ tag: 'type', attrs: { }, content: KEY_BUNDLE_TYPE },
-			{ tag: 'identity', attrs: { }, content: creds.signedIdentityKey.public },
-			{ tag: 'list', attrs: { }, content: Object.keys(preKeys).map(k => xmppPreKey(preKeys[+k], +k)) },
-			xmppSignedPreKey(creds.signedPreKey)
-		]
-	}
-
-	return { update, node }
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/use-multi-file-auth-state.ts b/node_modules/@whiskeysockets/baileys/src/Utils/use-multi-file-auth-state.ts
deleted file mode 100644
index 4758d3c..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/use-multi-file-auth-state.ts
+++ /dev/null
@@ -1,90 +0,0 @@
-import { mkdir, readFile, stat, unlink, writeFile } from 'fs/promises'
-import { join } from 'path'
-import { proto } from '../../WAProto'
-import { AuthenticationCreds, AuthenticationState, SignalDataTypeMap } from '../Types'
-import { initAuthCreds } from './auth-utils'
-import { BufferJSON } from './generics'
-
-/**
- * stores the full authentication state in a single folder.
- * Far more efficient than singlefileauthstate
- *
- * Again, I wouldn't endorse this for any production level use other than perhaps a bot.
- * Would recommend writing an auth state for use with a proper SQL or No-SQL DB
- * */
-export const useMultiFileAuthState = async(folder: string): Promise<{ state: AuthenticationState, saveCreds: () => Promise<void> }> => {
-
-	const writeData = (data: any, file: string) => {
-		return writeFile(join(folder, fixFileName(file)!), JSON.stringify(data, BufferJSON.replacer))
-	}
-
-	const readData = async(file: string) => {
-		try {
-			const data = await readFile(join(folder, fixFileName(file)!), { encoding: 'utf-8' })
-			return JSON.parse(data, BufferJSON.reviver)
-		} catch(error) {
-			return null
-		}
-	}
-
-	const removeData = async(file: string) => {
-		try {
-			await unlink(join(folder, fixFileName(file)!))
-		} catch{
-
-		}
-	}
-
-	const folderInfo = await stat(folder).catch(() => { })
-	if(folderInfo) {
-		if(!folderInfo.isDirectory()) {
-			throw new Error(`found something that is not a directory at ${folder}, either delete it or specify a different location`)
-		}
-	} else {
-		await mkdir(folder, { recursive: true })
-	}
-
-	const fixFileName = (file?: string) => file?.replace(/\//g, '__')?.replace(/:/g, '-')
-
-	const creds: AuthenticationCreds = await readData('creds.json') || initAuthCreds()
-
-	return {
-		state: {
-			creds,
-			keys: {
-				get: async(type, ids) => {
-					const data: { [_: string]: SignalDataTypeMap[typeof type] } = { }
-					await Promise.all(
-						ids.map(
-							async id => {
-								let value = await readData(`${type}-${id}.json`)
-								if(type === 'app-state-sync-key' && value) {
-									value = proto.Message.AppStateSyncKeyData.fromObject(value)
-								}
-
-								data[id] = value
-							}
-						)
-					)
-
-					return data
-				},
-				set: async(data) => {
-					const tasks: Promise<void>[] = []
-					for(const category in data) {
-						for(const id in data[category]) {
-							const value = data[category][id]
-							const file = `${category}-${id}.json`
-							tasks.push(value ? writeData(value, file) : removeData(file))
-						}
-					}
-
-					await Promise.all(tasks)
-				}
-			}
-		},
-		saveCreds: () => {
-			return writeData(creds, 'creds.json')
-		}
-	}
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/Utils/validate-connection.ts b/node_modules/@whiskeysockets/baileys/src/Utils/validate-connection.ts
deleted file mode 100644
index 6057d5d..0000000
--- a/node_modules/@whiskeysockets/baileys/src/Utils/validate-connection.ts
+++ /dev/null
@@ -1,238 +0,0 @@
-import { Boom } from '@hapi/boom'
-import { createHash } from 'crypto'
-import { proto } from '../../WAProto'
-import { KEY_BUNDLE_TYPE } from '../Defaults'
-import type { AuthenticationCreds, SignalCreds, SocketConfig } from '../Types'
-import { BinaryNode, getBinaryNodeChild, jidDecode, S_WHATSAPP_NET } from '../WABinary'
-import { Curve, hmacSign } from './crypto'
-import { encodeBigEndian } from './generics'
-import { createSignalIdentity } from './signal'
-
-const getUserAgent = (config: SocketConfig): proto.ClientPayload.IUserAgent => {
-	const osVersion = config.mobile ? '15.3.1' : '0.1'
-	const version = config.mobile ? [2, 24, 6] : config.version
-	const device = config.mobile ? 'iPhone_7' : 'Desktop'
-	const manufacturer = config.mobile ? 'Apple' : ''
-	const platform = config.mobile ? proto.ClientPayload.UserAgent.Platform.IOS : proto.ClientPayload.UserAgent.Platform.WEB
-	const phoneId = config.mobile ? { phoneId: config.auth.creds.phoneId } : {}
-
-	return {
-		appVersion: {
-			primary: version[0],
-			secondary: version[1],
-			tertiary: version[2],
-		},
-		platform,
-		releaseChannel: proto.ClientPayload.UserAgent.ReleaseChannel.RELEASE,
-		mcc: config.auth.creds.registration?.phoneNumberMobileCountryCode || '000',
-		mnc: config.auth.creds.registration?.phoneNumberMobileNetworkCode || '000',
-		osVersion: osVersion,
-		manufacturer,
-		device,
-		osBuildNumber: osVersion,
-		localeLanguageIso6391: 'en',
-		localeCountryIso31661Alpha2: 'US',
-		...phoneId
-	}
-}
-
-const PLATFORM_MAP = {
-	'Mac OS': proto.ClientPayload.WebInfo.WebSubPlatform.DARWIN,
-	'Windows': proto.ClientPayload.WebInfo.WebSubPlatform.WIN32
-}
-
-const getWebInfo = (config: SocketConfig): proto.ClientPayload.IWebInfo => {
-	let webSubPlatform = proto.ClientPayload.WebInfo.WebSubPlatform.WEB_BROWSER
-	if(config.syncFullHistory && PLATFORM_MAP[config.browser[0]]) {
-		webSubPlatform = PLATFORM_MAP[config.browser[0]]
-	}
-
-	return { webSubPlatform }
-}
-
-
-const getClientPayload = (config: SocketConfig) => {
-	const payload: proto.IClientPayload = {
-		connectType: proto.ClientPayload.ConnectType.WIFI_UNKNOWN,
-		connectReason: proto.ClientPayload.ConnectReason.USER_ACTIVATED,
-		userAgent: getUserAgent(config),
-	}
-
-	if(!config.mobile) {
-		payload.webInfo = getWebInfo(config)
-	}
-
-	return payload
-}
-
-export const generateMobileNode = (config: SocketConfig): proto.IClientPayload => {
-	if(!config.auth.creds) {
-		throw new Boom('No registration data found', { data: config })
-	}
-
-	const payload: proto.IClientPayload = {
-		...getClientPayload(config),
-		sessionId: Math.floor(Math.random() * 999999999 + 1),
-		shortConnect: true,
-		connectAttemptCount: 0,
-		device: 0,
-		dnsSource: {
-			appCached: false,
-			dnsMethod: proto.ClientPayload.DNSSource.DNSResolutionMethod.SYSTEM,
-		},
-		passive: false, // XMPP heartbeat setting (false: server actively pings) (true: client actively pings)
-		pushName: 'test',
-		username: Number(`${config.auth.creds.registration.phoneNumberCountryCode}${config.auth.creds.registration.phoneNumberNationalNumber}`),
-	}
-	return proto.ClientPayload.fromObject(payload)
-}
-
-export const generateLoginNode = (userJid: string, config: SocketConfig): proto.IClientPayload => {
-	const { user, device } = jidDecode(userJid)!
-	const payload: proto.IClientPayload = {
-		...getClientPayload(config),
-		passive: true,
-		username: +user,
-		device: device,
-	}
-	return proto.ClientPayload.fromObject(payload)
-}
-
-const getPlatformType = (platform: string): proto.DeviceProps.PlatformType => {
-	const platformType = platform.toUpperCase()
-	return proto.DeviceProps.PlatformType[platformType] || proto.DeviceProps.PlatformType.DESKTOP
-}
-
-export const generateRegistrationNode = (
-	{ registrationId, signedPreKey, signedIdentityKey }: SignalCreds,
-	config: SocketConfig
-) => {
-	// the app version needs to be md5 hashed
-	// and passed in
-	const appVersionBuf = createHash('md5')
-		.update(config.version.join('.')) // join as string
-		.digest()
-
-	const companion: proto.IDeviceProps = {
-		os: config.browser[0],
-		platformType: getPlatformType(config.browser[1]),
-		requireFullSync: config.syncFullHistory,
-	}
-
-	const companionProto = proto.DeviceProps.encode(companion).finish()
-
-	const registerPayload: proto.IClientPayload = {
-		...getClientPayload(config),
-		passive: false,
-		devicePairingData: {
-			buildHash: appVersionBuf,
-			deviceProps: companionProto,
-			eRegid: encodeBigEndian(registrationId),
-			eKeytype: KEY_BUNDLE_TYPE,
-			eIdent: signedIdentityKey.public,
-			eSkeyId: encodeBigEndian(signedPreKey.keyId, 3),
-			eSkeyVal: signedPreKey.keyPair.public,
-			eSkeySig: signedPreKey.signature,
-		},
-	}
-
-	return proto.ClientPayload.fromObject(registerPayload)
-}
-
-export const configureSuccessfulPairing = (
-	stanza: BinaryNode,
-	{ advSecretKey, signedIdentityKey, signalIdentities }: Pick<AuthenticationCreds, 'advSecretKey' | 'signedIdentityKey' | 'signalIdentities'>
-) => {
-	const msgId = stanza.attrs.id
-
-	const pairSuccessNode = getBinaryNodeChild(stanza, 'pair-success')
-
-	const deviceIdentityNode = getBinaryNodeChild(pairSuccessNode, 'device-identity')
-	const platformNode = getBinaryNodeChild(pairSuccessNode, 'platform')
-	const deviceNode = getBinaryNodeChild(pairSuccessNode, 'device')
-	const businessNode = getBinaryNodeChild(pairSuccessNode, 'biz')
-
-	if(!deviceIdentityNode || !deviceNode) {
-		throw new Boom('Missing device-identity or device in pair success node', { data: stanza })
-	}
-
-	const bizName = businessNode?.attrs.name
-	const jid = deviceNode.attrs.jid
-
-	const { details, hmac } = proto.ADVSignedDeviceIdentityHMAC.decode(deviceIdentityNode.content as Buffer)
-	// check HMAC matches
-	const advSign = hmacSign(details, Buffer.from(advSecretKey, 'base64'))
-	if(Buffer.compare(hmac, advSign) !== 0) {
-		throw new Boom('Invalid account signature')
-	}
-
-	const account = proto.ADVSignedDeviceIdentity.decode(details)
-	const { accountSignatureKey, accountSignature, details: deviceDetails } = account
-	// verify the device signature matches
-	const accountMsg = Buffer.concat([ Buffer.from([6, 0]), deviceDetails, signedIdentityKey.public ])
-	if(!Curve.verify(accountSignatureKey, accountMsg, accountSignature)) {
-		throw new Boom('Failed to verify account signature')
-	}
-
-	// sign the details with our identity key
-	const deviceMsg = Buffer.concat([ Buffer.from([6, 1]), deviceDetails, signedIdentityKey.public, accountSignatureKey ])
-	account.deviceSignature = Curve.sign(signedIdentityKey.private, deviceMsg)
-
-	const identity = createSignalIdentity(jid, accountSignatureKey)
-	const accountEnc = encodeSignedDeviceIdentity(account, false)
-
-	const deviceIdentity = proto.ADVDeviceIdentity.decode(account.details)
-
-	const reply: BinaryNode = {
-		tag: 'iq',
-		attrs: {
-			to: S_WHATSAPP_NET,
-			type: 'result',
-			id: msgId,
-		},
-		content: [
-			{
-				tag: 'pair-device-sign',
-				attrs: { },
-				content: [
-					{
-						tag: 'device-identity',
-						attrs: { 'key-index': deviceIdentity.keyIndex.toString() },
-						content: accountEnc
-					}
-				]
-			}
-		]
-	}
-
-	const authUpdate: Partial<AuthenticationCreds> = {
-		account,
-		me: { id: jid, name: bizName },
-		signalIdentities: [
-			...(signalIdentities || []),
-			identity
-		],
-		platform: platformNode?.attrs.name
-	}
-
-	return {
-		creds: authUpdate,
-		reply
-	}
-}
-
-export const encodeSignedDeviceIdentity = (
-	account: proto.IADVSignedDeviceIdentity,
-	includeSignatureKey: boolean
-) => {
-	account = { ...account }
-	// set to null if we are not to include the signature key
-	// or if we are including the signature key but it is empty
-	if(!includeSignatureKey || !account.accountSignatureKey?.length) {
-		account.accountSignatureKey = null
-	}
-
-	return proto.ADVSignedDeviceIdentity
-		.encode(account)
-		.finish()
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/WABinary/constants.ts b/node_modules/@whiskeysockets/baileys/src/WABinary/constants.ts
deleted file mode 100644
index 0e4c439..0000000
--- a/node_modules/@whiskeysockets/baileys/src/WABinary/constants.ts
+++ /dev/null
@@ -1,42 +0,0 @@
-
-export const TAGS = {
-	LIST_EMPTY: 0,
-	DICTIONARY_0: 236,
-	DICTIONARY_1: 237,
-	DICTIONARY_2: 238,
-	DICTIONARY_3: 239,
-	AD_JID: 247,
-	LIST_8: 248,
-	LIST_16: 249,
-	JID_PAIR: 250,
-	HEX_8: 251,
-	BINARY_8: 252,
-	BINARY_20: 253,
-	BINARY_32: 254,
-	NIBBLE_8: 255,
-	PACKED_MAX: 127,
-	SINGLE_BYTE_MAX: 256,
-	STREAM_END: 2
-}
-export const DOUBLE_BYTE_TOKENS = [
-	['media-for1-1.cdn.whatsapp.net', 'relay', 'media-gru2-2.cdn.whatsapp.net', 'uncompressed', 'medium', 'voip_settings', 'device', 'reason', 'media-lim1-1.cdn.whatsapp.net', 'media-qro1-2.cdn.whatsapp.net', 'media-gru1-2.cdn.whatsapp.net', 'action', 'features', 'media-gru2-1.cdn.whatsapp.net', 'media-gru1-1.cdn.whatsapp.net', 'media-otp1-1.cdn.whatsapp.net', 'kyc-id', 'priority', 'phash', 'mute', 'token', '100', 'media-qro1-1.cdn.whatsapp.net', 'none', 'media-mrs2-2.cdn.whatsapp.net', 'sign_credential', '03', 'media-mrs2-1.cdn.whatsapp.net', 'protocol', 'timezone', 'transport', 'eph_setting', '1080', 'original_dimensions', 'media-frx5-1.cdn.whatsapp.net', 'background', 'disable', 'original_image_url', '5', 'transaction-id', 'direct_path', '103', 'appointment_only', 'request_image_url', 'peer_pid', 'address', '105', '104', '102', 'media-cdt1-1.cdn.whatsapp.net', '101', '109', '110', '106', 'background_location', 'v_id', 'sync', 'status-old', '111', '107', 'ppic', 'media-scl2-1.cdn.whatsapp.net', 'business_profile', '108', 'invite', '04', 'audio_duration', 'media-mct1-1.cdn.whatsapp.net', 'media-cdg2-1.cdn.whatsapp.net', 'media-los2-1.cdn.whatsapp.net', 'invis', 'net', 'voip_payload_type', 'status-revoke-delay', '404', 'state', 'use_correct_order_for_hmac_sha1', 'ver', 'media-mad1-1.cdn.whatsapp.net', 'order', '540', 'skey', 'blinded_credential', 'android', 'contact_remove', 'enable_downlink_relay_latency_only', 'duration', 'enable_vid_one_way_codec_nego', '6', 'media-sof1-1.cdn.whatsapp.net', 'accept', 'all', 'signed_credential', 'media-atl3-1.cdn.whatsapp.net', 'media-lhr8-1.cdn.whatsapp.net', 'website', '05', 'latitude', 'media-dfw5-1.cdn.whatsapp.net', 'forbidden', 'enable_audio_piggyback_network_mtu_fix', 'media-dfw5-2.cdn.whatsapp.net', 'note.m4r', 'media-atl3-2.cdn.whatsapp.net', 'jb_nack_discard_count_fix', 'longitude', 'Opening.m4r', 'media-arn2-1.cdn.whatsapp.net', 'email', 'timestamp', 'admin', 'media-pmo1-1.cdn.whatsapp.net', 'America/Sao_Paulo', 'contact_add', 'media-sin6-1.cdn.whatsapp.net', 'interactive', '8000', 'acs_public_key', 'sigquit_anr_detector_release_rollover_percent', 'media.fmed1-2.fna.whatsapp.net', 'groupadd', 'enabled_for_video_upgrade', 'latency_update_threshold', 'media-frt3-2.cdn.whatsapp.net', 'calls_row_constraint_layout', 'media.fgbb2-1.fna.whatsapp.net', 'mms4_media_retry_notification_encryption_enabled', 'timeout', 'media-sin6-3.cdn.whatsapp.net', 'audio_nack_jitter_multiplier', 'jb_discard_count_adjust_pct_rc', 'audio_reserve_bps', 'delta', 'account_sync', 'default', 'media.fjed4-6.fna.whatsapp.net', '06', 'lock_video_orientation', 'media-frt3-1.cdn.whatsapp.net', 'w:g2', 'media-sin6-2.cdn.whatsapp.net', 'audio_nack_algo_mask', 'media.fgbb2-2.fna.whatsapp.net', 'media.fmed1-1.fna.whatsapp.net', 'cond_range_target_bitrate', 'mms4_server_error_receipt_encryption_enabled', 'vid_rc_dyn', 'fri', 'cart_v1_1_order_message_changes_enabled', 'reg_push', 'jb_hist_deposit_value', 'privatestats', 'media.fist7-2.fna.whatsapp.net', 'thu', 'jb_discard_count_adjust_pct', 'mon', 'group_call_video_maximization_enabled', 'mms_cat_v1_forward_hot_override_enabled', 'audio_nack_new_rtt', 'media.fsub2-3.fna.whatsapp.net', 'media_upload_aggressive_retry_exponential_backoff_enabled', 'tue', 'wed', 'media.fruh4-2.fna.whatsapp.net', 'audio_nack_max_seq_req', 'max_rtp_audio_packet_resends', 'jb_hist_max_cdf_value', '07', 'audio_nack_max_jb_delay', 'mms_forward_partially_downloaded_video', 'media-lcy1-1.cdn.whatsapp.net', 'resume', 'jb_inband_fec_aware', 'new_commerce_entry_point_enabled', '480', 'payments_upi_generate_qr_amount_limit', 'sigquit_anr_detector_rollover_percent', 'media.fsdu2-1.fna.whatsapp.net', 'fbns', 'aud_pkt_reorder_pct', 'dec', 'stop_probing_before_accept_send', 'media_upload_max_aggressive_retries', 'edit_business_profile_new_mode_enabled', 'media.fhex4-1.fna.whatsapp.net', 'media.fjed4-3.fna.whatsapp.net', 'sigquit_anr_detector_64bit_rollover_percent', 'cond_range_ema_jb_last_delay', 'watls_enable_early_data_http_get', 'media.fsdu2-2.fna.whatsapp.net', 'message_qr_disambiguation_enabled', 'media-mxp1-1.cdn.whatsapp.net', 'sat', 'vertical', 'media.fruh4-5.fna.whatsapp.net', '200', 'media-sof1-2.cdn.whatsapp.net', '-1', 'height', 'product_catalog_hide_show_items_enabled', 'deep_copy_frm_last', 'tsoffline', 'vp8/h.264', 'media.fgye5-3.fna.whatsapp.net', 'media.ftuc1-2.fna.whatsapp.net', 'smb_upsell_chat_banner_enabled', 'canonical', '08', '9', '.', 'media.fgyd4-4.fna.whatsapp.net', 'media.fsti4-1.fna.whatsapp.net', 'mms_vcache_aggregation_enabled', 'mms_hot_content_timespan_in_seconds', 'nse_ver', 'rte', 'third_party_sticker_web_sync', 'cond_range_target_total_bitrate', 'media_upload_aggressive_retry_enabled', 'instrument_spam_report_enabled', 'disable_reconnect_tone', 'move_media_folder_from_sister_app', 'one_tap_calling_in_group_chat_size', '10', 'storage_mgmt_banner_threshold_mb', 'enable_backup_passive_mode', 'sharechat_inline_player_enabled', 'media.fcnq2-1.fna.whatsapp.net', 'media.fhex4-2.fna.whatsapp.net', 'media.fist6-3.fna.whatsapp.net', 'ephemeral_drop_column_stage', 'reconnecting_after_network_change_threshold_ms', 'media-lhr8-2.cdn.whatsapp.net', 'cond_jb_last_delay_ema_alpha', 'entry_point_block_logging_enabled', 'critical_event_upload_log_config', 'respect_initial_bitrate_estimate', 'smaller_image_thumbs_status_enabled', 'media.fbtz1-4.fna.whatsapp.net', 'media.fjed4-1.fna.whatsapp.net', 'width', '720', 'enable_frame_dropper', 'enable_one_side_mode', 'urn:xmpp:whatsapp:dirty', 'new_sticker_animation_behavior_v2', 'media.flim3-2.fna.whatsapp.net', 'media.fuio6-2.fna.whatsapp.net', 'skip_forced_signaling', 'dleq_proof', 'status_video_max_bitrate', 'lazy_send_probing_req', 'enhanced_storage_management', 'android_privatestats_endpoint_dit_enabled', 'media.fscl13-2.fna.whatsapp.net', 'video_duration'],
-	['group_call_discoverability_enabled', 'media.faep9-2.fna.whatsapp.net', 'msgr', 'bloks_loggedin_access_app_id', 'db_status_migration_step', 'watls_prefer_ip6', 'jabber:iq:privacy', '68', 'media.fsaw1-11.fna.whatsapp.net', 'mms4_media_conn_persist_enabled', 'animated_stickers_thread_clean_up', 'media.fcgk3-2.fna.whatsapp.net', 'media.fcgk4-6.fna.whatsapp.net', 'media.fgye5-2.fna.whatsapp.net', 'media.flpb1-1.fna.whatsapp.net', 'media.fsub2-1.fna.whatsapp.net', 'media.fuio6-3.fna.whatsapp.net', 'not-allowed', 'partial_pjpeg_bw_threshold', 'cap_estimated_bitrate', 'mms_chatd_resume_check_over_thrift', 'smb_upsell_business_profile_enabled', 'product_catalog_webclient', 'groups', 'sigquit_anr_detector_release_updated_rollout', 'syncd_key_rotation_enabled', 'media.fdmm2-1.fna.whatsapp.net', 'media-hou1-1.cdn.whatsapp.net', 'remove_old_chat_notifications', 'smb_biztools_deeplink_enabled', 'use_downloadable_filters_int', 'group_qr_codes_enabled', 'max_receipt_processing_time', 'optimistic_image_processing_enabled', 'smaller_video_thumbs_status_enabled', 'watls_early_data', 'reconnecting_before_relay_failover_threshold_ms', 'cond_range_packet_loss_pct', 'groups_privacy_blacklist', 'status-revoke-drop', 'stickers_animated_thumbnail_download', 'dedupe_transcode_shared_images', 'dedupe_transcode_shared_videos', 'media.fcnq2-2.fna.whatsapp.net', 'media.fgyd4-1.fna.whatsapp.net', 'media.fist7-1.fna.whatsapp.net', 'media.flim3-3.fna.whatsapp.net', 'add_contact_by_qr_enabled', 'https://faq.whatsapp.com/payments', 'multicast_limit_global', 'sticker_notification_preview', 'smb_better_catalog_list_adapters_enabled', 'bloks_use_minscript_android', 'pen_smoothing_enabled', 'media.fcgk4-5.fna.whatsapp.net', 'media.fevn1-3.fna.whatsapp.net', 'media.fpoj7-1.fna.whatsapp.net', 'media-arn2-2.cdn.whatsapp.net', 'reconnecting_before_network_change_threshold_ms', 'android_media_use_fresco_for_gifs', 'cond_in_congestion', 'status_image_max_edge', 'sticker_search_enabled', 'starred_stickers_web_sync', 'db_blank_me_jid_migration_step', 'media.fist6-2.fna.whatsapp.net', 'media.ftuc1-1.fna.whatsapp.net', '09', 'anr_fast_logs_upload_rollout', 'camera_core_integration_enabled', '11', 'third_party_sticker_caching', 'thread_dump_contact_support', 'wam_privatestats_enabled', 'vcard_as_document_size_kb', 'maxfpp', 'fbip', 'ephemeral_allow_group_members', 'media-bom1-2.cdn.whatsapp.net', 'media-xsp1-1.cdn.whatsapp.net', 'disable_prewarm', 'frequently_forwarded_max', 'media.fbtz1-5.fna.whatsapp.net', 'media.fevn7-1.fna.whatsapp.net', 'media.fgyd4-2.fna.whatsapp.net', 'sticker_tray_animation_fully_visible_items', 'green_alert_banner_duration', 'reconnecting_after_p2p_failover_threshold_ms', 'connected', 'share_biz_vcard_enabled', 'stickers_animation', '0a', '1200', 'WhatsApp', 'group_description_length', 'p_v_id', 'payments_upi_intent_transaction_limit', 'frequently_forwarded_messages', 'media-xsp1-2.cdn.whatsapp.net', 'media.faep8-1.fna.whatsapp.net', 'media.faep8-2.fna.whatsapp.net', 'media.faep9-1.fna.whatsapp.net', 'media.fdmm2-2.fna.whatsapp.net', 'media.fgzt3-1.fna.whatsapp.net', 'media.flim4-2.fna.whatsapp.net', 'media.frao1-1.fna.whatsapp.net', 'media.fscl9-2.fna.whatsapp.net', 'media.fsub2-2.fna.whatsapp.net', 'superadmin', 'media.fbog10-1.fna.whatsapp.net', 'media.fcgh28-1.fna.whatsapp.net', 'media.fjdo10-1.fna.whatsapp.net', 'third_party_animated_sticker_import', 'delay_fec', 'attachment_picker_refresh', 'android_linked_devices_re_auth_enabled', 'rc_dyn', 'green_alert_block_jitter', 'add_contact_logging_enabled', 'biz_message_logging_enabled', 'conversation_media_preview_v2', 'media-jnb1-1.cdn.whatsapp.net', 'ab_key', 'media.fcgk4-2.fna.whatsapp.net', 'media.fevn1-1.fna.whatsapp.net', 'media.fist6-1.fna.whatsapp.net', 'media.fruh4-4.fna.whatsapp.net', 'media.fsti4-2.fna.whatsapp.net', 'mms_vcard_autodownload_size_kb', 'watls_enabled', 'notif_ch_override_off', 'media.fsaw1-14.fna.whatsapp.net', 'media.fscl13-1.fna.whatsapp.net', 'db_group_participant_migration_step', '1020', 'cond_range_sterm_rtt', 'invites_logging_enabled', 'triggered_block_enabled', 'group_call_max_participants', 'media-iad3-1.cdn.whatsapp.net', 'product_catalog_open_deeplink', 'shops_required_tos_version', 'image_max_kbytes', 'cond_low_quality_vid_mode', 'db_receipt_migration_step', 'jb_early_prob_hist_shrink', 'media.fdmm2-3.fna.whatsapp.net', 'media.fdmm2-4.fna.whatsapp.net', 'media.fruh4-1.fna.whatsapp.net', 'media.fsaw2-2.fna.whatsapp.net', 'remove_geolocation_videos', 'new_animation_behavior', 'fieldstats_beacon_chance', '403', 'authkey_reset_on_ban', 'continuous_ptt_playback', 'reconnecting_after_relay_failover_threshold_ms', 'false', 'group', 'sun', 'conversation_swipe_to_reply', 'ephemeral_messages_setting', 'smaller_video_thumbs_enabled', 'md_device_sync_enabled', 'bloks_shops_pdp_url_regex', 'lasso_integration_enabled', 'media-bom1-1.cdn.whatsapp.net', 'new_backup_format_enabled', '256', 'media.faep6-1.fna.whatsapp.net', 'media.fasr1-1.fna.whatsapp.net', 'media.fbtz1-7.fna.whatsapp.net', 'media.fesb4-1.fna.whatsapp.net', 'media.fjdo1-2.fna.whatsapp.net', 'media.frba2-1.fna.whatsapp.net', 'watls_no_dns', '600', 'db_broadcast_me_jid_migration_step', 'new_wam_runtime_enabled', 'group_update', 'enhanced_block_enabled', 'sync_wifi_threshold_kb', 'mms_download_nc_cat', 'bloks_minification_enabled', 'ephemeral_messages_enabled', 'reject', 'voip_outgoing_xml_signaling', 'creator', 'dl_bw', 'payments_request_messages', 'target_bitrate', 'bloks_rendercore_enabled', 'media-hbe1-1.cdn.whatsapp.net', 'media-hel3-1.cdn.whatsapp.net', 'media-kut2-2.cdn.whatsapp.net', 'media-lax3-1.cdn.whatsapp.net', 'media-lax3-2.cdn.whatsapp.net', 'sticker_pack_deeplink_enabled', 'hq_image_bw_threshold', 'status_info', 'voip', 'dedupe_transcode_videos', 'grp_uii_cleanup', 'linked_device_max_count', 'media.flim1-1.fna.whatsapp.net', 'media.fsaw2-1.fna.whatsapp.net', 'reconnecting_after_call_active_threshold_ms', '1140', 'catalog_pdp_new_design', 'media.fbtz1-10.fna.whatsapp.net', 'media.fsaw1-15.fna.whatsapp.net', '0b', 'consumer_rc_provider', 'mms_async_fast_forward_ttl', 'jb_eff_size_fix', 'voip_incoming_xml_signaling', 'media_provider_share_by_uuid', 'suspicious_links', 'dedupe_transcode_images', 'green_alert_modal_start', 'media-cgk1-1.cdn.whatsapp.net', 'media-lga3-1.cdn.whatsapp.net', 'template_doc_mime_types', 'important_messages', 'user_add', 'vcard_max_size_kb', 'media.fada2-1.fna.whatsapp.net', 'media.fbog2-5.fna.whatsapp.net', 'media.fbtz1-3.fna.whatsapp.net', 'media.fcgk3-1.fna.whatsapp.net', 'media.fcgk7-1.fna.whatsapp.net', 'media.flim1-3.fna.whatsapp.net', 'media.fscl9-1.fna.whatsapp.net', 'ctwa_context_enterprise_enabled', 'media.fsaw1-13.fna.whatsapp.net', 'media.fuio11-2.fna.whatsapp.net', 'status_collapse_muted', 'db_migration_level_force', 'recent_stickers_web_sync', 'bloks_session_state', 'bloks_shops_enabled', 'green_alert_setting_deep_links_enabled', 'restrict_groups', 'battery', 'green_alert_block_start', 'refresh', 'ctwa_context_enabled', 'md_messaging_enabled', 'status_image_quality', 'md_blocklist_v2_server', 'media-del1-1.cdn.whatsapp.net', '13', 'userrate', 'a_v_id', 'cond_rtt_ema_alpha', 'invalid'],
-	['media.fada1-1.fna.whatsapp.net', 'media.fadb3-2.fna.whatsapp.net', 'media.fbhz2-1.fna.whatsapp.net', 'media.fcor2-1.fna.whatsapp.net', 'media.fjed4-2.fna.whatsapp.net', 'media.flhe4-1.fna.whatsapp.net', 'media.frak1-2.fna.whatsapp.net', 'media.fsub6-3.fna.whatsapp.net', 'media.fsub6-7.fna.whatsapp.net', 'media.fvvi1-1.fna.whatsapp.net', 'search_v5_eligible', 'wam_real_time_enabled', 'report_disk_event', 'max_tx_rott_based_bitrate', 'product', 'media.fjdo10-2.fna.whatsapp.net', 'video_frame_crc_sample_interval', 'media_max_autodownload', '15', 'h.264', 'wam_privatestats_buffer_count', 'md_phash_v2_enabled', 'account_transfer_enabled', 'business_product_catalog', 'enable_non_dyn_codec_param_fix', 'is_user_under_epd_jurisdiction', 'media.fbog2-4.fna.whatsapp.net', 'media.fbtz1-2.fna.whatsapp.net', 'media.fcfc1-1.fna.whatsapp.net', 'media.fjed4-5.fna.whatsapp.net', 'media.flhe4-2.fna.whatsapp.net', 'media.flim1-2.fna.whatsapp.net', 'media.flos5-1.fna.whatsapp.net', 'android_key_store_auth_ver', '010', 'anr_process_monitor', 'delete_old_auth_key', 'media.fcor10-3.fna.whatsapp.net', 'storage_usage_enabled', 'android_camera2_support_level', 'dirty', 'consumer_content_provider', 'status_video_max_duration', '0c', 'bloks_cache_enabled', 'media.fadb2-2.fna.whatsapp.net', 'media.fbko1-1.fna.whatsapp.net', 'media.fbtz1-9.fna.whatsapp.net', 'media.fcgk4-4.fna.whatsapp.net', 'media.fesb4-2.fna.whatsapp.net', 'media.fevn1-2.fna.whatsapp.net', 'media.fist2-4.fna.whatsapp.net', 'media.fjdo1-1.fna.whatsapp.net', 'media.fruh4-6.fna.whatsapp.net', 'media.fsrg5-1.fna.whatsapp.net', 'media.fsub6-6.fna.whatsapp.net', 'minfpp', '5000', 'locales', 'video_max_bitrate', 'use_new_auth_key', 'bloks_http_enabled', 'heartbeat_interval', 'media.fbog11-1.fna.whatsapp.net', 'ephemeral_group_query_ts', 'fec_nack', 'search_in_storage_usage', 'c', 'media-amt2-1.cdn.whatsapp.net', 'linked_devices_ui_enabled', '14', 'async_data_load_on_startup', 'voip_incoming_xml_ack', '16', 'db_migration_step', 'init_bwe', 'max_participants', 'wam_buffer_count', 'media.fada2-2.fna.whatsapp.net', 'media.fadb3-1.fna.whatsapp.net', 'media.fcor2-2.fna.whatsapp.net', 'media.fdiy1-2.fna.whatsapp.net', 'media.frba3-2.fna.whatsapp.net', 'media.fsaw2-3.fna.whatsapp.net', '1280', 'status_grid_enabled', 'w:biz', 'product_catalog_deeplink', 'media.fgye10-2.fna.whatsapp.net', 'media.fuio11-1.fna.whatsapp.net', 'optimistic_upload', 'work_manager_init', 'lc', 'catalog_message', 'cond_net_medium', 'enable_periodical_aud_rr_processing', 'cond_range_ema_rtt', 'media-tir2-1.cdn.whatsapp.net', 'frame_ms', 'group_invite_sending', 'payments_web_enabled', 'wallpapers_v2', '0d', 'browser', 'hq_image_max_edge', 'image_edit_zoom', 'linked_devices_re_auth_enabled', 'media.faly3-2.fna.whatsapp.net', 'media.fdoh5-3.fna.whatsapp.net', 'media.fesb3-1.fna.whatsapp.net', 'media.fknu1-1.fna.whatsapp.net', 'media.fmex3-1.fna.whatsapp.net', 'media.fruh4-3.fna.whatsapp.net', '255', 'web_upgrade_to_md_modal', 'audio_piggyback_timeout_msec', 'enable_audio_oob_fec_feature', 'from_ip', 'image_max_edge', 'message_qr_enabled', 'powersave', 'receipt_pre_acking', 'video_max_edge', 'full', '011', '012', 'enable_audio_oob_fec_for_sender', 'md_voip_enabled', 'enable_privatestats', 'max_fec_ratio', 'payments_cs_faq_url', 'media-xsp1-3.cdn.whatsapp.net', 'hq_image_quality', 'media.fasr1-2.fna.whatsapp.net', 'media.fbog3-1.fna.whatsapp.net', 'media.ffjr1-6.fna.whatsapp.net', 'media.fist2-3.fna.whatsapp.net', 'media.flim4-3.fna.whatsapp.net', 'media.fpbc2-4.fna.whatsapp.net', 'media.fpku1-1.fna.whatsapp.net', 'media.frba1-1.fna.whatsapp.net', 'media.fudi1-1.fna.whatsapp.net', 'media.fvvi1-2.fna.whatsapp.net', 'gcm_fg_service', 'enable_dec_ltr_size_check', 'clear', 'lg', 'media.fgru11-1.fna.whatsapp.net', '18', 'media-lga3-2.cdn.whatsapp.net', 'pkey', '0e', 'max_subject', 'cond_range_lterm_rtt', 'announcement_groups', 'biz_profile_options', 's_t', 'media.fabv2-1.fna.whatsapp.net', 'media.fcai3-1.fna.whatsapp.net', 'media.fcgh1-1.fna.whatsapp.net', 'media.fctg1-4.fna.whatsapp.net', 'media.fdiy1-1.fna.whatsapp.net', 'media.fisb4-1.fna.whatsapp.net', 'media.fpku1-2.fna.whatsapp.net', 'media.fros9-1.fna.whatsapp.net', 'status_v3_text', 'usync_sidelist', '17', 'announcement', '...', 'md_group_notification', '0f', 'animated_pack_in_store', '013', 'America/Mexico_City', '1260', 'media-ams4-1.cdn.whatsapp.net', 'media-cgk1-2.cdn.whatsapp.net', 'media-cpt1-1.cdn.whatsapp.net', 'media-maa2-1.cdn.whatsapp.net', 'media.fgye10-1.fna.whatsapp.net', 'e', 'catalog_cart', 'hfm_string_changes', 'init_bitrate', 'packless_hsm', 'group_info', 'America/Belem', '50', '960', 'cond_range_bwe', 'decode', 'encode', 'media.fada1-8.fna.whatsapp.net', 'media.fadb1-2.fna.whatsapp.net', 'media.fasu6-1.fna.whatsapp.net', 'media.fbog4-1.fna.whatsapp.net', 'media.fcgk9-2.fna.whatsapp.net', 'media.fdoh5-2.fna.whatsapp.net', 'media.ffjr1-2.fna.whatsapp.net', 'media.fgua1-1.fna.whatsapp.net', 'media.fgye1-1.fna.whatsapp.net', 'media.fist1-4.fna.whatsapp.net', 'media.fpbc2-2.fna.whatsapp.net', 'media.fres2-1.fna.whatsapp.net', 'media.fsdq1-2.fna.whatsapp.net', 'media.fsub6-5.fna.whatsapp.net', 'profilo_enabled', 'template_hsm', 'use_disorder_prefetching_timer', 'video_codec_priority', 'vpx_max_qp', 'ptt_reduce_recording_delay', '25', 'iphone', 'Windows', 's_o', 'Africa/Lagos', 'abt', 'media-kut2-1.cdn.whatsapp.net', 'media-mba1-1.cdn.whatsapp.net', 'media-mxp1-2.cdn.whatsapp.net', 'md_blocklist_v2', 'url_text', 'enable_short_offset', 'group_join_permissions', 'enable_audio_piggyback_feature', 'image_quality', 'media.fcgk7-2.fna.whatsapp.net', 'media.fcgk8-2.fna.whatsapp.net', 'media.fclo7-1.fna.whatsapp.net', 'media.fcmn1-1.fna.whatsapp.net', 'media.feoh1-1.fna.whatsapp.net', 'media.fgyd4-3.fna.whatsapp.net', 'media.fjed4-4.fna.whatsapp.net', 'media.flim1-4.fna.whatsapp.net', 'media.flim2-4.fna.whatsapp.net', 'media.fplu6-1.fna.whatsapp.net', 'media.frak1-1.fna.whatsapp.net', 'media.fsdq1-1.fna.whatsapp.net', 'to_ip', '015', 'vp8', '19', '21', '1320', 'auth_key_ver', 'message_processing_dedup', 'server-error', 'wap4_enabled', '420', '014', 'cond_range_rtt', 'ptt_fast_lock_enabled', 'media-ort2-1.cdn.whatsapp.net', 'fwd_ui_start_ts'],
-	['contact_blacklist', 'Asia/Jakarta', 'media.fepa10-1.fna.whatsapp.net', 'media.fmex10-3.fna.whatsapp.net', 'disorder_prefetching_start_when_empty', 'America/Bogota', 'use_local_probing_rx_bitrate', 'America/Argentina/Buenos_Aires', 'cross_post', 'media.fabb1-1.fna.whatsapp.net', 'media.fbog4-2.fna.whatsapp.net', 'media.fcgk9-1.fna.whatsapp.net', 'media.fcmn2-1.fna.whatsapp.net', 'media.fdel3-1.fna.whatsapp.net', 'media.ffjr1-1.fna.whatsapp.net', 'media.fgdl5-1.fna.whatsapp.net', 'media.flpb1-2.fna.whatsapp.net', 'media.fmex2-1.fna.whatsapp.net', 'media.frba2-2.fna.whatsapp.net', 'media.fros2-2.fna.whatsapp.net', 'media.fruh2-1.fna.whatsapp.net', 'media.fybz2-2.fna.whatsapp.net', 'options', '20', 'a', '017', '018', 'mute_always', 'user_notice', 'Asia/Kolkata', 'gif_provider', 'locked', 'media-gua1-1.cdn.whatsapp.net', 'piggyback_exclude_force_flush', '24', 'media.frec39-1.fna.whatsapp.net', 'user_remove', 'file_max_size', 'cond_packet_loss_pct_ema_alpha', 'media.facc1-1.fna.whatsapp.net', 'media.fadb2-1.fna.whatsapp.net', 'media.faly3-1.fna.whatsapp.net', 'media.fbdo6-2.fna.whatsapp.net', 'media.fcmn2-2.fna.whatsapp.net', 'media.fctg1-3.fna.whatsapp.net', 'media.ffez1-2.fna.whatsapp.net', 'media.fist1-3.fna.whatsapp.net', 'media.fist2-2.fna.whatsapp.net', 'media.flim2-2.fna.whatsapp.net', 'media.fmct2-3.fna.whatsapp.net', 'media.fpei3-1.fna.whatsapp.net', 'media.frba3-1.fna.whatsapp.net', 'media.fsdu8-2.fna.whatsapp.net', 'media.fstu2-1.fna.whatsapp.net', 'media_type', 'receipt_agg', '016', 'enable_pli_for_crc_mismatch', 'live', 'enc_rekey', 'frskmsg', 'd', 'media.fdel11-2.fna.whatsapp.net', 'proto', '2250', 'audio_piggyback_enable_cache', 'skip_nack_if_ltrp_sent', 'mark_dtx_jb_frames', 'web_service_delay', '7282', 'catalog_send_all', 'outgoing', '360', '30', 'LIMITED', '019', 'audio_picker', 'bpv2_phase', 'media.fada1-7.fna.whatsapp.net', 'media.faep7-1.fna.whatsapp.net', 'media.fbko1-2.fna.whatsapp.net', 'media.fbni1-2.fna.whatsapp.net', 'media.fbtz1-1.fna.whatsapp.net', 'media.fbtz1-8.fna.whatsapp.net', 'media.fcjs3-1.fna.whatsapp.net', 'media.fesb3-2.fna.whatsapp.net', 'media.fgdl5-4.fna.whatsapp.net', 'media.fist2-1.fna.whatsapp.net', 'media.flhe2-2.fna.whatsapp.net', 'media.flim2-1.fna.whatsapp.net', 'media.fmex1-1.fna.whatsapp.net', 'media.fpat3-2.fna.whatsapp.net', 'media.fpat3-3.fna.whatsapp.net', 'media.fros2-1.fna.whatsapp.net', 'media.fsdu8-1.fna.whatsapp.net', 'media.fsub3-2.fna.whatsapp.net', 'payments_chat_plugin', 'cond_congestion_no_rtcp_thr', 'green_alert', 'not-a-biz', '..', 'shops_pdp_urls_config', 'source', 'media-dus1-1.cdn.whatsapp.net', 'mute_video', '01b', 'currency', 'max_keys', 'resume_check', 'contact_array', 'qr_scanning', '23', 'b', 'media.fbfh15-1.fna.whatsapp.net', 'media.flim22-1.fna.whatsapp.net', 'media.fsdu11-1.fna.whatsapp.net', 'media.fsdu15-1.fna.whatsapp.net', 'Chrome', 'fts_version', '60', 'media.fada1-6.fna.whatsapp.net', 'media.faep4-2.fna.whatsapp.net', 'media.fbaq5-1.fna.whatsapp.net', 'media.fbni1-1.fna.whatsapp.net', 'media.fcai3-2.fna.whatsapp.net', 'media.fdel3-2.fna.whatsapp.net', 'media.fdmm3-2.fna.whatsapp.net', 'media.fhex3-1.fna.whatsapp.net', 'media.fisb4-2.fna.whatsapp.net', 'media.fkhi5-2.fna.whatsapp.net', 'media.flos2-1.fna.whatsapp.net', 'media.fmct2-1.fna.whatsapp.net', 'media.fntr7-1.fna.whatsapp.net', 'media.frak3-1.fna.whatsapp.net', 'media.fruh5-2.fna.whatsapp.net', 'media.fsub6-1.fna.whatsapp.net', 'media.fuab1-2.fna.whatsapp.net', 'media.fuio1-1.fna.whatsapp.net', 'media.fver1-1.fna.whatsapp.net', 'media.fymy1-1.fna.whatsapp.net', 'product_catalog', '1380', 'audio_oob_fec_max_pkts', '22', '254', 'media-ort2-2.cdn.whatsapp.net', 'media-sjc3-1.cdn.whatsapp.net', '1600', '01a', '01c', '405', 'key_frame_interval', 'body', 'media.fcgh20-1.fna.whatsapp.net', 'media.fesb10-2.fna.whatsapp.net', '125', '2000', 'media.fbsb1-1.fna.whatsapp.net', 'media.fcmn3-2.fna.whatsapp.net', 'media.fcpq1-1.fna.whatsapp.net', 'media.fdel1-2.fna.whatsapp.net', 'media.ffor2-1.fna.whatsapp.net', 'media.fgdl1-4.fna.whatsapp.net', 'media.fhex2-1.fna.whatsapp.net', 'media.fist1-2.fna.whatsapp.net', 'media.fjed5-2.fna.whatsapp.net', 'media.flim6-4.fna.whatsapp.net', 'media.flos2-2.fna.whatsapp.net', 'media.fntr6-2.fna.whatsapp.net', 'media.fpku3-2.fna.whatsapp.net', 'media.fros8-1.fna.whatsapp.net', 'media.fymy1-2.fna.whatsapp.net', 'ul_bw', 'ltrp_qp_offset', 'request', 'nack', 'dtx_delay_state_reset', 'timeoffline', '28', '01f', '32', 'enable_ltr_pool', 'wa_msys_crypto', '01d', '58', 'dtx_freeze_hg_update', 'nack_if_rpsi_throttled', '253', '840', 'media.famd15-1.fna.whatsapp.net', 'media.fbog17-2.fna.whatsapp.net', 'media.fcai19-2.fna.whatsapp.net', 'media.fcai21-4.fna.whatsapp.net', 'media.fesb10-4.fna.whatsapp.net', 'media.fesb10-5.fna.whatsapp.net', 'media.fmaa12-1.fna.whatsapp.net', 'media.fmex11-3.fna.whatsapp.net', 'media.fpoa33-1.fna.whatsapp.net', '1050', '021', 'clean', 'cond_range_ema_packet_loss_pct', 'media.fadb6-5.fna.whatsapp.net', 'media.faqp4-1.fna.whatsapp.net', 'media.fbaq3-1.fna.whatsapp.net', 'media.fbel2-1.fna.whatsapp.net', 'media.fblr4-2.fna.whatsapp.net', 'media.fclo8-1.fna.whatsapp.net', 'media.fcoo1-2.fna.whatsapp.net', 'media.ffjr1-4.fna.whatsapp.net', 'media.ffor9-1.fna.whatsapp.net', 'media.fisb3-1.fna.whatsapp.net', 'media.fkhi2-2.fna.whatsapp.net', 'media.fkhi4-1.fna.whatsapp.net', 'media.fpbc1-2.fna.whatsapp.net', 'media.fruh2-2.fna.whatsapp.net', 'media.fruh5-1.fna.whatsapp.net', 'media.fsub3-1.fna.whatsapp.net', 'payments_transaction_limit', '252', '27', '29', 'tintagel', '01e', '237', '780', 'callee_updated_payload', '020', '257', 'price', '025', '239', 'payments_cs_phone_number', 'mediaretry', 'w:auth:backup:token', 'Glass.caf', 'max_bitrate', '240', '251', '660', 'media.fbog16-1.fna.whatsapp.net', 'media.fcgh21-1.fna.whatsapp.net', 'media.fkul19-2.fna.whatsapp.net', 'media.flim21-2.fna.whatsapp.net', 'media.fmex10-4.fna.whatsapp.net', '64', '33', '34', '35', 'interruption', 'media.fabv3-1.fna.whatsapp.net', 'media.fadb6-1.fna.whatsapp.net', 'media.fagr1-1.fna.whatsapp.net', 'media.famd1-1.fna.whatsapp.net', 'media.famm6-1.fna.whatsapp.net', 'media.faqp2-3.fna.whatsapp.net'],
-
-]
-export const SINGLE_BYTE_TOKENS: (string | null)[] = [
-	'', 'xmlstreamstart', 'xmlstreamend', 's.whatsapp.net', 'type', 'participant', 'from', 'receipt', 'id', 'broadcast', 'status', 'message', 'notification', 'notify', 'to', 'jid', 'user', 'class', 'offline', 'g.us', 'result', 'mediatype', 'enc', 'skmsg', 'off_cnt', 'xmlns', 'presence', 'participants', 'ack', 't', 'iq', 'device_hash', 'read', 'value', 'media', 'picture', 'chatstate', 'unavailable', 'text', 'urn:xmpp:whatsapp:push', 'devices', 'verified_name', 'contact', 'composing', 'edge_routing', 'routing_info', 'item', 'image', 'verified_level', 'get', 'fallback_hostname', '2', 'media_conn', '1', 'v', 'handshake', 'fallback_class', 'count', 'config', 'offline_preview', 'download_buckets', 'w:profile:picture', 'set', 'creation', 'location', 'fallback_ip4', 'msg', 'urn:xmpp:ping', 'fallback_ip6', 'call-creator', 'relaylatency', 'success', 'subscribe', 'video', 'business_hours_config', 'platform', 'hostname', 'version', 'unknown', '0', 'ping', 'hash', 'edit', 'subject', 'max_buckets', 'download', 'delivery', 'props', 'sticker', 'name', 'last', 'contacts', 'business', 'primary', 'preview', 'w:p', 'pkmsg', 'call-id', 'retry', 'prop', 'call', 'auth_ttl', 'available', 'relay_id', 'last_id', 'day_of_week', 'w', 'host', 'seen', 'bits', 'list', 'atn', 'upload', 'is_new', 'w:stats', 'key', 'paused', 'specific_hours', 'multicast', 'stream:error', 'mmg.whatsapp.net', 'code', 'deny', 'played', 'profile', 'fna', 'device-list', 'close_time', 'latency', 'gcm', 'pop', 'audio', '26', 'w:web', 'open_time', 'error', 'auth', 'ip4', 'update', 'profile_options', 'config_value', 'category', 'catalog_not_created', '00', 'config_code', 'mode', 'catalog_status', 'ip6', 'blocklist', 'registration', '7', 'web', 'fail', 'w:m', 'cart_enabled', 'ttl', 'gif', '300', 'device_orientation', 'identity', 'query', '401', 'media-gig2-1.cdn.whatsapp.net', 'in', '3', 'te2', 'add', 'fallback', 'categories', 'ptt', 'encrypt', 'notice', 'thumbnail-document', 'item-not-found', '12', 'thumbnail-image', 'stage', 'thumbnail-link', 'usync', 'out', 'thumbnail-video', '8', '01', 'context', 'sidelist', 'thumbnail-gif', 'terminate', 'not-authorized', 'orientation', 'dhash', 'capability', 'side_list', 'md-app-state', 'description', 'serial', 'readreceipts', 'te', 'business_hours', 'md-msg-hist', 'tag', 'attribute_padding', 'document', 'open_24h', 'delete', 'expiration', 'active', 'prev_v_id', 'true', 'passive', 'index', '4', 'conflict', 'remove', 'w:gp2', 'config_expo_key', 'screen_height', 'replaced', '02', 'screen_width', 'uploadfieldstat', '2:47DEQpj8', 'media-bog1-1.cdn.whatsapp.net', 'encopt', 'url', 'catalog_exists', 'keygen', 'rate', 'offer', 'opus', 'media-mia3-1.cdn.whatsapp.net', 'privacy', 'media-mia3-2.cdn.whatsapp.net', 'signature', 'preaccept', 'token_id', 'media-eze1-1.cdn.whatsapp.net'
-]
-
-export const TOKEN_MAP: { [token: string]: { dict?: number, index: number } } = { }
-
-for(let i = 0;i < SINGLE_BYTE_TOKENS.length;i++) {
-	TOKEN_MAP[SINGLE_BYTE_TOKENS[i]!] = { index: i }
-}
-
-for(let i = 0;i < DOUBLE_BYTE_TOKENS.length;i++) {
-	for(let j = 0;j < DOUBLE_BYTE_TOKENS[i].length;j++) {
-		TOKEN_MAP[DOUBLE_BYTE_TOKENS[i][j]] = { dict: i, index: j }
-	}
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/WABinary/decode.ts b/node_modules/@whiskeysockets/baileys/src/WABinary/decode.ts
deleted file mode 100644
index b900bc4..0000000
--- a/node_modules/@whiskeysockets/baileys/src/WABinary/decode.ts
+++ /dev/null
@@ -1,265 +0,0 @@
-import { inflateSync } from 'zlib'
-import * as constants from './constants'
-import { jidEncode } from './jid-utils'
-import type { BinaryNode, BinaryNodeCodingOptions } from './types'
-
-export const decompressingIfRequired = (buffer: Buffer) => {
-	if(2 & buffer.readUInt8()) {
-		buffer = inflateSync(buffer.slice(1))
-	} else { // nodes with no compression have a 0x00 prefix, we remove that
-		buffer = buffer.slice(1)
-	}
-
-	return buffer
-}
-
-export const decodeDecompressedBinaryNode = (
-	buffer: Buffer,
-	opts: Pick<BinaryNodeCodingOptions, 'DOUBLE_BYTE_TOKENS' | 'SINGLE_BYTE_TOKENS' | 'TAGS'>,
-	indexRef: { index: number } = { index: 0 }
-): BinaryNode => {
-	const { DOUBLE_BYTE_TOKENS, SINGLE_BYTE_TOKENS, TAGS } = opts
-
-	const checkEOS = (length: number) => {
-		if(indexRef.index + length > buffer.length) {
-			throw new Error('end of stream')
-		}
-	}
-
-	const next = () => {
-		const value = buffer[indexRef.index]
-		indexRef.index += 1
-		return value
-	}
-
-	const readByte = () => {
-		checkEOS(1)
-		return next()
-	}
-
-	const readBytes = (n: number) => {
-		checkEOS(n)
-		const value = buffer.slice(indexRef.index, indexRef.index + n)
-		indexRef.index += n
-		return value
-	}
-
-	const readStringFromChars = (length: number) => {
-		return readBytes(length).toString('utf-8')
-	}
-
-	const readInt = (n: number, littleEndian = false) => {
-		checkEOS(n)
-		let val = 0
-		for(let i = 0; i < n; i++) {
-			const shift = littleEndian ? i : n - 1 - i
-			val |= next() << (shift * 8)
-		}
-
-		return val
-	}
-
-	const readInt20 = () => {
-		checkEOS(3)
-		return ((next() & 15) << 16) + (next() << 8) + next()
-	}
-
-	const unpackHex = (value: number) => {
-		if(value >= 0 && value < 16) {
-			return value < 10 ? '0'.charCodeAt(0) + value : 'A'.charCodeAt(0) + value - 10
-		}
-
-		throw new Error('invalid hex: ' + value)
-	}
-
-	const unpackNibble = (value: number) => {
-		if(value >= 0 && value <= 9) {
-			return '0'.charCodeAt(0) + value
-		}
-
-		switch (value) {
-		case 10:
-			return '-'.charCodeAt(0)
-		case 11:
-			return '.'.charCodeAt(0)
-		case 15:
-			return '\0'.charCodeAt(0)
-		default:
-			throw new Error('invalid nibble: ' + value)
-		}
-	}
-
-	const unpackByte = (tag: number, value: number) => {
-		if(tag === TAGS.NIBBLE_8) {
-			return unpackNibble(value)
-		} else if(tag === TAGS.HEX_8) {
-			return unpackHex(value)
-		} else {
-			throw new Error('unknown tag: ' + tag)
-		}
-	}
-
-	const readPacked8 = (tag: number) => {
-		const startByte = readByte()
-		let value = ''
-
-		for(let i = 0; i < (startByte & 127); i++) {
-			const curByte = readByte()
-			value += String.fromCharCode(unpackByte(tag, (curByte & 0xf0) >> 4))
-			value += String.fromCharCode(unpackByte(tag, curByte & 0x0f))
-		}
-
-		if(startByte >> 7 !== 0) {
-			value = value.slice(0, -1)
-		}
-
-		return value
-	}
-
-	const isListTag = (tag: number) => {
-		return tag === TAGS.LIST_EMPTY || tag === TAGS.LIST_8 || tag === TAGS.LIST_16
-	}
-
-	const readListSize = (tag: number) => {
-		switch (tag) {
-		case TAGS.LIST_EMPTY:
-			return 0
-		case TAGS.LIST_8:
-			return readByte()
-		case TAGS.LIST_16:
-			return readInt(2)
-		default:
-			throw new Error('invalid tag for list size: ' + tag)
-		}
-	}
-
-	const readJidPair = () => {
-		const i = readString(readByte())
-		const j = readString(readByte())
-		if(j) {
-			return (i || '') + '@' + j
-		}
-
-		throw new Error('invalid jid pair: ' + i + ', ' + j)
-	}
-
-	const readAdJid = () => {
-		const agent = readByte()
-		const device = readByte()
-		const user = readString(readByte())
-
-		return jidEncode(user, agent === 0 ? 's.whatsapp.net' : 'lid', device)
-	}
-
-	const readString = (tag: number): string => {
-		if(tag >= 1 && tag < SINGLE_BYTE_TOKENS.length) {
-			return SINGLE_BYTE_TOKENS[tag] || ''
-		}
-
-		switch (tag) {
-		case TAGS.DICTIONARY_0:
-		case TAGS.DICTIONARY_1:
-		case TAGS.DICTIONARY_2:
-		case TAGS.DICTIONARY_3:
-			return getTokenDouble(tag - TAGS.DICTIONARY_0, readByte())
-		case TAGS.LIST_EMPTY:
-			return ''
-		case TAGS.BINARY_8:
-			return readStringFromChars(readByte())
-		case TAGS.BINARY_20:
-			return readStringFromChars(readInt20())
-		case TAGS.BINARY_32:
-			return readStringFromChars(readInt(4))
-		case TAGS.JID_PAIR:
-			return readJidPair()
-		case TAGS.AD_JID:
-			return readAdJid()
-		case TAGS.HEX_8:
-		case TAGS.NIBBLE_8:
-			return readPacked8(tag)
-		default:
-			throw new Error('invalid string with tag: ' + tag)
-		}
-	}
-
-	const readList = (tag: number) => {
-		const items: BinaryNode[] = []
-		const size = readListSize(tag)
-		for(let i = 0;i < size;i++) {
-			items.push(decodeDecompressedBinaryNode(buffer, opts, indexRef))
-		}
-
-		return items
-	}
-
-	const getTokenDouble = (index1: number, index2: number) => {
-		const dict = DOUBLE_BYTE_TOKENS[index1]
-		if(!dict) {
-			throw new Error(`Invalid double token dict (${index1})`)
-		}
-
-		const value = dict[index2]
-		if(typeof value === 'undefined') {
-			throw new Error(`Invalid double token (${index2})`)
-		}
-
-		return value
-	}
-
-	const listSize = readListSize(readByte())
-	const header = readString(readByte())
-	if(!listSize || !header.length) {
-		throw new Error('invalid node')
-	}
-
-	const attrs: BinaryNode['attrs'] = { }
-	let data: BinaryNode['content']
-	if(listSize === 0 || !header) {
-		throw new Error('invalid node')
-	}
-
-	// read the attributes in
-	const attributesLength = (listSize - 1) >> 1
-	for(let i = 0; i < attributesLength; i++) {
-		const key = readString(readByte())
-		const value = readString(readByte())
-
-		attrs[key] = value
-	}
-
-	if(listSize % 2 === 0) {
-		const tag = readByte()
-		if(isListTag(tag)) {
-			data = readList(tag)
-		} else {
-			let decoded: Buffer | string
-			switch (tag) {
-			case TAGS.BINARY_8:
-				decoded = readBytes(readByte())
-				break
-			case TAGS.BINARY_20:
-				decoded = readBytes(readInt20())
-				break
-			case TAGS.BINARY_32:
-				decoded = readBytes(readInt(4))
-				break
-			default:
-				decoded = readString(tag)
-				break
-			}
-
-			data = decoded
-		}
-	}
-
-	return {
-		tag: header,
-		attrs,
-		content: data
-	}
-}
-
-export const decodeBinaryNode = (buff: Buffer): BinaryNode => {
-	const decompBuff = decompressingIfRequired(buff)
-	return decodeDecompressedBinaryNode(decompBuff, constants)
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/WABinary/encode.ts b/node_modules/@whiskeysockets/baileys/src/WABinary/encode.ts
deleted file mode 100644
index 5685f5f..0000000
--- a/node_modules/@whiskeysockets/baileys/src/WABinary/encode.ts
+++ /dev/null
@@ -1,236 +0,0 @@
-
-import * as constants from './constants'
-import { FullJid, jidDecode } from './jid-utils'
-import type { BinaryNode, BinaryNodeCodingOptions } from './types'
-
-export const encodeBinaryNode = (
-	{ tag, attrs, content }: BinaryNode,
-	opts: Pick<BinaryNodeCodingOptions, 'TAGS' | 'TOKEN_MAP'> = constants,
-	buffer: number[] = [0]
-) => {
-	const { TAGS, TOKEN_MAP } = opts
-
-	const pushByte = (value: number) => buffer.push(value & 0xff)
-
-	const pushInt = (value: number, n: number, littleEndian = false) => {
-		for(let i = 0; i < n; i++) {
-			const curShift = littleEndian ? i : n - 1 - i
-			buffer.push((value >> (curShift * 8)) & 0xff)
-		}
-	}
-
-	const pushBytes = (bytes: Uint8Array | Buffer | number[]) => (
-		bytes.forEach (b => buffer.push(b))
-	)
-	const pushInt16 = (value: number) => {
-		pushBytes([(value >> 8) & 0xff, value & 0xff])
-	}
-
-	const pushInt20 = (value: number) => (
-		pushBytes([(value >> 16) & 0x0f, (value >> 8) & 0xff, value & 0xff])
-	)
-	const writeByteLength = (length: number) => {
-		if(length >= 4294967296) {
-			throw new Error('string too large to encode: ' + length)
-		}
-
-		if(length >= 1 << 20) {
-			pushByte(TAGS.BINARY_32)
-			pushInt(length, 4) // 32 bit integer
-		} else if(length >= 256) {
-			pushByte(TAGS.BINARY_20)
-			pushInt20(length)
-		} else {
-			pushByte(TAGS.BINARY_8)
-			pushByte(length)
-		}
-	}
-
-	const writeStringRaw = (str: string) => {
-		const bytes = Buffer.from (str, 'utf-8')
-		writeByteLength(bytes.length)
-		pushBytes(bytes)
-	}
-
-	const writeJid = ({ domainType, device, user, server }: FullJid) => {
-		if(typeof device !== 'undefined') {
-			pushByte(TAGS.AD_JID)
-			pushByte(domainType || 0)
-			pushByte(device || 0)
-			writeString(user)
-		} else {
-			pushByte(TAGS.JID_PAIR)
-			if(user.length) {
-				writeString(user)
-			} else {
-				pushByte(TAGS.LIST_EMPTY)
-			}
-
-			writeString(server)
-		}
-	}
-
-	const packNibble = (char: string) => {
-		switch (char) {
-		case '-':
-			return 10
-		case '.':
-			return 11
-		case '\0':
-			return 15
-		default:
-			if(char >= '0' && char <= '9') {
-				return char.charCodeAt(0) - '0'.charCodeAt(0)
-			}
-
-			throw new Error(`invalid byte for nibble "${char}"`)
-		}
-	}
-
-	const packHex = (char: string) => {
-		if(char >= '0' && char <= '9') {
-			return char.charCodeAt(0) - '0'.charCodeAt(0)
-		}
-
-		if(char >= 'A' && char <= 'F') {
-			return 10 + char.charCodeAt(0) - 'A'.charCodeAt(0)
-		}
-
-		if(char >= 'a' && char <= 'f') {
-			return 10 + char.charCodeAt(0) - 'a'.charCodeAt(0)
-		}
-
-		if(char === '\0') {
-			return 15
-		}
-
-		throw new Error(`Invalid hex char "${char}"`)
-	}
-
-	const writePackedBytes = (str: string, type: 'nibble' | 'hex') => {
-		if(str.length > TAGS.PACKED_MAX) {
-			throw new Error('Too many bytes to pack')
-		}
-
-		pushByte(type === 'nibble' ? TAGS.NIBBLE_8 : TAGS.HEX_8)
-
-		let roundedLength = Math.ceil(str.length / 2.0)
-		if(str.length % 2 !== 0) {
-			roundedLength |= 128
-		}
-
-		pushByte(roundedLength)
-		const packFunction = type === 'nibble' ? packNibble : packHex
-
-		const packBytePair = (v1: string, v2: string) => {
-			const result = (packFunction(v1) << 4) | packFunction(v2)
-			return result
-		}
-
-		const strLengthHalf = Math.floor(str.length / 2)
-		for(let i = 0; i < strLengthHalf;i++) {
-			pushByte(packBytePair(str[2 * i], str[2 * i + 1]))
-		}
-
-		if(str.length % 2 !== 0) {
-			pushByte(packBytePair(str[str.length - 1], '\x00'))
-		}
-	}
-
-	const isNibble = (str: string) => {
-		if(str.length > TAGS.PACKED_MAX) {
-			return false
-		}
-
-		for(let i = 0;i < str.length;i++) {
-			const char = str[i]
-			const isInNibbleRange = char >= '0' && char <= '9'
-			if(!isInNibbleRange && char !== '-' && char !== '.') {
-				return false
-			}
-		}
-
-		return true
-	}
-
-	const isHex = (str: string) => {
-		if(str.length > TAGS.PACKED_MAX) {
-			return false
-		}
-
-		for(let i = 0;i < str.length;i++) {
-			const char = str[i]
-			const isInNibbleRange = char >= '0' && char <= '9'
-			if(!isInNibbleRange && !(char >= 'A' && char <= 'F') && !(char >= 'a' && char <= 'f')) {
-				return false
-			}
-		}
-
-		return true
-	}
-
-	const writeString = (str: string) => {
-		const tokenIndex = TOKEN_MAP[str]
-		if(tokenIndex) {
-			if(typeof tokenIndex.dict === 'number') {
-				pushByte(TAGS.DICTIONARY_0 + tokenIndex.dict)
-			}
-
-			pushByte(tokenIndex.index)
-		} else if(isNibble(str)) {
-			writePackedBytes(str, 'nibble')
-		} else if(isHex(str)) {
-			writePackedBytes(str, 'hex')
-		} else if(str) {
-			const decodedJid = jidDecode(str)
-			if(decodedJid) {
-				writeJid(decodedJid)
-			} else {
-				writeStringRaw(str)
-			}
-		}
-	}
-
-	const writeListStart = (listSize: number) => {
-		if(listSize === 0) {
-			pushByte(TAGS.LIST_EMPTY)
-		} else if(listSize < 256) {
-			pushBytes([TAGS.LIST_8, listSize])
-		} else {
-			pushByte(TAGS.LIST_16)
-			pushInt16(listSize)
-		}
-	}
-
-	const validAttributes = Object.keys(attrs).filter(k => (
-		typeof attrs[k] !== 'undefined' && attrs[k] !== null
-	))
-
-	writeListStart(2 * validAttributes.length + 1 + (typeof content !== 'undefined' ? 1 : 0))
-	writeString(tag)
-
-	for(const key of validAttributes) {
-		if(typeof attrs[key] === 'string') {
-			writeString(key)
-			writeString(attrs[key])
-		}
-	}
-
-	if(typeof content === 'string') {
-		writeString(content)
-	} else if(Buffer.isBuffer(content) || content instanceof Uint8Array) {
-		writeByteLength(content.length)
-		pushBytes(content)
-	} else if(Array.isArray(content)) {
-		writeListStart(content.length)
-		for(const item of content) {
-			encodeBinaryNode(item, opts, buffer)
-		}
-	} else if(typeof content === 'undefined') {
-		// do nothing
-	} else {
-		throw new Error(`invalid children for header "${tag}": ${content} (${typeof content})`)
-	}
-
-	return Buffer.from(buffer)
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/WABinary/generic-utils.ts b/node_modules/@whiskeysockets/baileys/src/WABinary/generic-utils.ts
deleted file mode 100644
index 48b323c..0000000
--- a/node_modules/@whiskeysockets/baileys/src/WABinary/generic-utils.ts
+++ /dev/null
@@ -1,121 +0,0 @@
-import { Boom } from '@hapi/boom'
-import { proto } from '../../WAProto'
-import { BinaryNode } from './types'
-
-// some extra useful utilities
-
-export const getBinaryNodeChildren = (node: BinaryNode | undefined, childTag: string) => {
-	if(Array.isArray(node?.content)) {
-		return node!.content.filter(item => item.tag === childTag)
-	}
-
-	return []
-}
-
-export const getAllBinaryNodeChildren = ({ content }: BinaryNode) => {
-	if(Array.isArray(content)) {
-		return content
-	}
-
-	return []
-}
-
-export const getBinaryNodeChild = (node: BinaryNode | undefined, childTag: string) => {
-	if(Array.isArray(node?.content)) {
-		return node?.content.find(item => item.tag === childTag)
-	}
-}
-
-export const getBinaryNodeChildBuffer = (node: BinaryNode | undefined, childTag: string) => {
-	const child = getBinaryNodeChild(node, childTag)?.content
-	if(Buffer.isBuffer(child) || child instanceof Uint8Array) {
-		return child
-	}
-}
-
-export const getBinaryNodeChildString = (node: BinaryNode | undefined, childTag: string) => {
-	const child = getBinaryNodeChild(node, childTag)?.content
-	if(Buffer.isBuffer(child) || child instanceof Uint8Array) {
-		return Buffer.from(child).toString('utf-8')
-	} else if(typeof child === 'string') {
-		return child
-	}
-}
-
-export const getBinaryNodeChildUInt = (node: BinaryNode, childTag: string, length: number) => {
-	const buff = getBinaryNodeChildBuffer(node, childTag)
-	if(buff) {
-		return bufferToUInt(buff, length)
-	}
-}
-
-export const assertNodeErrorFree = (node: BinaryNode) => {
-	const errNode = getBinaryNodeChild(node, 'error')
-	if(errNode) {
-		throw new Boom(errNode.attrs.text || 'Unknown error', { data: +errNode.attrs.code })
-	}
-}
-
-export const reduceBinaryNodeToDictionary = (node: BinaryNode, tag: string) => {
-	const nodes = getBinaryNodeChildren(node, tag)
-	const dict = nodes.reduce(
-		(dict, { attrs }) => {
-			dict[attrs.name || attrs.config_code] = attrs.value || attrs.config_value
-			return dict
-		}, { } as { [_: string]: string }
-	)
-	return dict
-}
-
-export const getBinaryNodeMessages = ({ content }: BinaryNode) => {
-	const msgs: proto.WebMessageInfo[] = []
-	if(Array.isArray(content)) {
-		for(const item of content) {
-			if(item.tag === 'message') {
-				msgs.push(proto.WebMessageInfo.decode(item.content as Buffer))
-			}
-		}
-	}
-
-	return msgs
-}
-
-function bufferToUInt(e: Uint8Array | Buffer, t: number) {
-	let a = 0
-	for(let i = 0; i < t; i++) {
-		a = 256 * a + e[i]
-	}
-
-	return a
-}
-
-const tabs = (n: number) => '\t'.repeat(n)
-
-export function binaryNodeToString(node: BinaryNode | BinaryNode['content'], i = 0) {
-	if(!node) {
-		return node
-	}
-
-	if(typeof node === 'string') {
-		return tabs(i) + node
-	}
-
-	if(node instanceof Uint8Array) {
-		return tabs(i) + Buffer.from(node).toString('hex')
-	}
-
-	if(Array.isArray(node)) {
-		return node.map((x) => tabs(i + 1) + binaryNodeToString(x, i + 1)).join('\n')
-	}
-
-	const children = binaryNodeToString(node.content, i + 1)
-
-	const tag = `<${node.tag} ${Object.entries(node.attrs || {})
-		.filter(([, v]) => v !== undefined)
-		.map(([k, v]) => `${k}='${v}'`)
-		.join(' ')}`
-
-	const content: string = children ? `>\n${children}\n${tabs(i)}</${node.tag}>` : '/>'
-
-	return tag + content
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/WABinary/index.ts b/node_modules/@whiskeysockets/baileys/src/WABinary/index.ts
deleted file mode 100644
index ecf0c9f..0000000
--- a/node_modules/@whiskeysockets/baileys/src/WABinary/index.ts
+++ /dev/null
@@ -1,5 +0,0 @@
-export * from './encode'
-export * from './decode'
-export * from './generic-utils'
-export * from './jid-utils'
-export * from './types'
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/WABinary/jid-utils.ts b/node_modules/@whiskeysockets/baileys/src/WABinary/jid-utils.ts
deleted file mode 100644
index cb58eef..0000000
--- a/node_modules/@whiskeysockets/baileys/src/WABinary/jid-utils.ts
+++ /dev/null
@@ -1,66 +0,0 @@
-export const S_WHATSAPP_NET = '@s.whatsapp.net'
-export const OFFICIAL_BIZ_JID = '16505361212@c.us'
-export const SERVER_JID = 'server@c.us'
-export const PSA_WID = '0@c.us'
-export const STORIES_JID = 'status@broadcast'
-
-export type JidServer = 'c.us' | 'g.us' | 'broadcast' | 's.whatsapp.net' | 'call' | 'lid'
-
-export type JidWithDevice = {
-    user: string
-    device?: number
-}
-
-export type FullJid = JidWithDevice & {
-	server: JidServer | string
-	domainType?: number
-}
-
-export const jidEncode = (user: string | number | null, server: JidServer, device?: number, agent?: number) => {
-	return `${user || ''}${!!agent ? `_${agent}` : ''}${!!device ? `:${device}` : ''}@${server}`
-}
-
-export const jidDecode = (jid: string | undefined): FullJid | undefined => {
-	const sepIdx = typeof jid === 'string' ? jid.indexOf('@') : -1
-	if(sepIdx < 0) {
-		return undefined
-	}
-
-	const server = jid!.slice(sepIdx + 1)
-	const userCombined = jid!.slice(0, sepIdx)
-
-	const [userAgent, device] = userCombined.split(':')
-	const user = userAgent.split('_')[0]
-
-	return {
-		server,
-		user,
-		domainType: server === 'lid' ? 1 : 0,
-		device: device ? +device : undefined
-	}
-}
-
-/** is the jid a user */
-export const areJidsSameUser = (jid1: string | undefined, jid2: string | undefined) => (
-	jidDecode(jid1)?.user === jidDecode(jid2)?.user
-)
-/** is the jid a user */
-export const isJidUser = (jid: string | undefined) => (jid?.endsWith('@s.whatsapp.net'))
-/** is the jid a group */
-export const isLidUser = (jid: string | undefined) => (jid?.endsWith('@lid'))
-/** is the jid a broadcast */
-export const isJidBroadcast = (jid: string | undefined) => (jid?.endsWith('@broadcast'))
-/** is the jid a group */
-export const isJidGroup = (jid: string | undefined) => (jid?.endsWith('@g.us'))
-/** is the jid the status broadcast */
-export const isJidStatusBroadcast = (jid: string) => jid === 'status@broadcast'
-
-export const jidNormalizedUser = (jid: string | undefined) => {
-	const result = jidDecode(jid)
-	if(!result) {
-		return ''
-	}
-
-	const { user, server } = result
-	return jidEncode(user, server === 'c.us' ? 's.whatsapp.net' : server as JidServer)
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/WABinary/types.ts b/node_modules/@whiskeysockets/baileys/src/WABinary/types.ts
deleted file mode 100644
index dcc0ea2..0000000
--- a/node_modules/@whiskeysockets/baileys/src/WABinary/types.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-import * as constants from './constants'
-/**
- * the binary node WA uses internally for communication
- *
- * this is manipulated soley as an object and it does not have any functions.
- * This is done for easy serialization, to prevent running into issues with prototypes &
- * to maintain functional code structure
- * */
-export type BinaryNode = {
-    tag: string
-    attrs: { [key: string]: string }
-	content?: BinaryNode[] | string | Uint8Array
-}
-export type BinaryNodeAttributes = BinaryNode['attrs']
-export type BinaryNodeData = BinaryNode['content']
-
-export type BinaryNodeCodingOptions = typeof constants
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/WAM/BinaryInfo.ts b/node_modules/@whiskeysockets/baileys/src/WAM/BinaryInfo.ts
deleted file mode 100644
index 8eb64ad..0000000
--- a/node_modules/@whiskeysockets/baileys/src/WAM/BinaryInfo.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-import { EventInputType } from './constants'
-
-export class BinaryInfo {
-	protocolVersion = 5
-	sequence = 0
-	events = [] as EventInputType[]
-	buffer: Buffer[] = []
-
-	constructor(options: Partial<BinaryInfo> = {}) {
-		Object.assign(this, options)
-	}
-}
diff --git a/node_modules/@whiskeysockets/baileys/src/WAM/constants.ts b/node_modules/@whiskeysockets/baileys/src/WAM/constants.ts
deleted file mode 100644
index 23fed80..0000000
--- a/node_modules/@whiskeysockets/baileys/src/WAM/constants.ts
+++ /dev/null
@@ -1,15382 +0,0 @@
-export const WEB_EVENTS: Event[] = [
-	{
-		name: 'WebcFingerprint',
-		id: 1704,
-		props: {
-			webcCanvasFingerprint: [25, 'string'],
-			webcDocumentDriverEvaluate: [9, 'boolean'],
-			webcDocumentDriverUnwrapped: [7, 'boolean'],
-			webcDocumentElementAttrDriver: [14, 'boolean'],
-			webcDocumentElementAttrSelenium: [12, 'boolean'],
-			webcDocumentElementAttrWebdriver: [13, 'boolean'],
-			webcDocumentFxdriverEvaluate: [6, 'boolean'],
-			webcDocumentFxdriverUnwrapped: [11, 'boolean'],
-			webcDocumentSeleniumEvaluate: [2, 'boolean'],
-			webcDocumentSeleniumUnwrapped: [10, 'boolean'],
-			webcDocumentWebdriverEvaluate: [1, 'boolean'],
-			webcDocumentWebdriverScriptFn: [5, 'boolean'],
-			webcDocumentWebdriverScriptFunc: [4, 'boolean'],
-			webcDocumentWebdriverScriptFunction: [3, 'boolean'],
-			webcDocumentWebdriverUnwrapped: [8, 'boolean'],
-			webcWebglFingerprint: [24, 'string'],
-			webcWebglRenderer: [23, 'string'],
-			webcWebglVendor: [22, 'string'],
-			webcWindowSeleniumIdeRecorder: [20, 'boolean'],
-			webcWindowCallphantom: [18, 'boolean'],
-			webcWindowCallselenium: [19, 'boolean'],
-			webcWindowNavigatorWebdriver: [
-				21,
-				{
-					FALSE: 0,
-					TRUE: 1,
-					UNDEFINED: 2,
-				},
-			],
-			webcWindowNightmare: [16, 'boolean'],
-			webcWindowPhantom: [15, 'boolean'],
-			webcWindowSelenium: [17, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'Login',
-		id: 460,
-		props: {
-			androidKeystoreState: [
-				10,
-				{
-					NOT_AVAILABLE: 1,
-					SELF_TEST_FAILURE: 2,
-					ENC_KEY_READ_FAILURE: 3,
-					ENC_KEY_STORED_USED: 4,
-					ENC_KEY_PLAIN_DELETED: 5,
-					ENC_KEY_PLAIN_RECOVERED: 6,
-				},
-			],
-			connectionOrigin: [
-				6,
-				{
-					PERSON: 1,
-					PUSH: 2,
-					OTHER: 3,
-					BACKOFF: 4,
-				},
-			],
-			connectionSequenceStep: [
-				11,
-				{
-					PUSH_OVERRIDES: 1,
-					PRIMARY: 2,
-					PUSH_FALLBACKS: 4,
-					HOST_FALLBACK: 5,
-					NO_DNS: 6,
-					SOFTLAYER: 7,
-					PRIMARY_HTTP: 8,
-					SOFTLAYER_HTTP: 9,
-					HOST_FALLBACK_HTTP: 10,
-					NO_DNS_HTTP: 11,
-				},
-			],
-			connectionT: [5, 'timer'],
-			dnsResolutionMethod: [
-				12,
-				{
-					SYSTEM: 1,
-					GOOGLE: 2,
-					HARDCODED: 3,
-					NO_DNS: 4,
-				},
-			],
-			loginDnsResolver: [
-				13,
-				{
-					SYSTEM: 1,
-					GOOGLE: 2,
-					HARDCODED: 3,
-					NO_DNS: 4,
-				},
-			],
-			loginIpSource: [
-				14,
-				{
-					PUSH_OVERRIDES: 1,
-					G_WHATSAPP_NET: 2,
-					PUSH_FALLBACKS: 3,
-					G_FALLBACK_WHATSAPP_NET: 4,
-					HARDCODED_LIST: 5,
-					EX_WHATSAPP_NET: 6,
-				},
-			],
-			loginPort: [
-				15,
-				{
-					P5222: 1,
-					P443: 2,
-					P80: 3,
-					UNKNOWN: 4,
-				},
-			],
-			loginResult: [
-				1,
-				{
-					OK: 1,
-					ERROR_UNKNOWN: 2,
-					SERVER_ERROR: 3,
-					SERVER_GOAWAY: 4,
-					NETWORK_ERROR: 5,
-					ANDROID_KEYSTORE_ERROR: 6,
-					CERTIFICATE_ERROR: 7,
-				},
-			],
-			loginT: [3, 'timer'],
-			longConnect: [4, 'boolean'],
-			noiseProtocolVersion: [16, 'integer'],
-			passive: [8, 'boolean'],
-			pendingAcksCount: [17, 'integer'],
-			retryCount: [2, 'integer'],
-			sequenceStep: [7, 'integer'],
-			serverErrorCode: [9, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcPageLoad',
-		id: 642,
-		props: {
-			webcAppcacheStatus: [
-				29,
-				{
-					UNCACHED: 0,
-					IDLE: 1,
-					CHECKING: 2,
-					DOWNLOADING: 3,
-					UPDATEREADY: 4,
-					OBSOLETE: 5,
-				},
-			],
-			webcCached: [30, 'boolean'],
-			webcConnectEnd: [10, 'timer'],
-			webcConnectStart: [9, 'timer'],
-			webcDomComplete: [19, 'timer'],
-			webcDomContentLoadedEventEnd: [18, 'timer'],
-			webcDomContentLoadedEventStart: [17, 'timer'],
-			webcDomInteractive: [16, 'timer'],
-			webcDomLoading: [15, 'timer'],
-			webcDomainLookupEnd: [8, 'timer'],
-			webcDomainLookupStart: [7, 'timer'],
-			webcExeDone: [23, 'timer'],
-			webcExeStart: [22, 'timer'],
-			webcFetchStart: [6, 'timer'],
-			webcInitialMountT: [38, 'timer'],
-			webcInitialNavMountT: [39, 'timer'],
-			webcInitialPanel: [42, 'string'],
-			webcInitialPanelMountStartT: [43, 'timer'],
-			webcInitialPanelMountT: [40, 'timer'],
-			webcInitialPanelRenderT: [46, 'timer'],
-			webcJsLoadT: [37, 'timer'],
-			webcLoadEventEnd: [21, 'timer'],
-			webcLoadEventStart: [20, 'timer'],
-			webcLoadInForeground: [53, 'boolean'],
-			webcMainScriptEnd: [45, 'timer'],
-			webcMainScriptStart: [44, 'timer'],
-			webcNativeLoadT: [36, 'timer'],
-			webcNavigation: [
-				32,
-				{
-					NAVIGATE_NEXT: 0,
-					RELOAD: 1,
-					BACK_FORWARD: 2,
-					UNDEFINED: 255,
-				},
-			],
-			webcPageLoadT: [34, 'timer'],
-			webcParallellyFetched: [41, 'boolean'],
-			webcQrCode: [31, 'boolean'],
-			webcRedirectCount: [33, 'number'],
-			webcRedirectEnd: [5, 'timer'],
-			webcRedirectStart: [4, 'timer'],
-			webcRequestStart: [12, 'timer'],
-			webcResponseEnd: [14, 'timer'],
-			webcResponseStart: [13, 'timer'],
-			webcSecureConnectionStart: [11, 'timer'],
-			webcUnloadEventEnd: [3, 'timer'],
-			webcUnloadEventStart: [2, 'timer'],
-			webcWsAttempts: [28, 'number'],
-			webcWsNormal: [27, 'timer'],
-			webcWsOpening: [24, 'timer'],
-			webcWsPairing: [25, 'timer'],
-			webcWsSyncing: [26, 'timer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'OfflineResume',
-		id: 3112,
-		props: {
-			affectedBySleepMode: [35, 'boolean'],
-			chatThreadCount: [1, 'integer'],
-			expectedOfflineCallCount: [23, 'integer'],
-			expectedOfflineMessageCount: [17, 'integer'],
-			expectedOfflineNotificationCount: [18, 'integer'],
-			expectedOfflineReceiptCount: [19, 'integer'],
-			isOfflineCompleteMissed: [2, 'boolean'],
-			isResumeInForeground: [13, 'boolean'],
-			isRunningFromServiceExtension: [22, 'boolean'],
-			lastStanzaT: [3, 'timer'],
-			mailboxAge: [14, 'integer'],
-			mainScreenLoadT: [4, 'timer'],
-			offlineCallCount: [24, 'integer'],
-			offlineDecryptErrorCount: [5, 'integer'],
-			offlineMessageCount: [6, 'integer'],
-			offlineNotificationCount: [7, 'integer'],
-			offlinePreviewT: [8, 'timer'],
-			offlineProcessingT: [20, 'timer'],
-			offlineReceiptCount: [9, 'integer'],
-			offlineResumeResult: [
-				21,
-				{
-					COMPLETE: 1,
-					INCOMPLETE_UNKNOWN_ERROR: 2,
-					INCOMPLETE_DISCONNECT: 3,
-					INCOMPLETE_APP_RESTART: 4,
-				},
-			],
-			offlineSizeBytes: [10, 'integer'],
-			onTrickleMode: [15, 'boolean'],
-			pageLoadT: [11, 'timer'],
-			passiveModeT: [25, 'timer'],
-			preackCallCount: [26, 'integer'],
-			preackMessageCount: [27, 'integer'],
-			preackNotificationCount: [28, 'integer'],
-			preackReceiptCount: [29, 'integer'],
-			processedCallCount: [30, 'integer'],
-			processedMessageCount: [31, 'integer'],
-			processedNotificationCount: [32, 'integer'],
-			processedReceiptCount: [33, 'integer'],
-			socketConnectT: [12, 'timer'],
-			transientOfflineSessionId: [34, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcDbOpen',
-		id: 1940,
-		props: {
-			webcDbName: [1, 'string'],
-			webcDbOpenNumAttempts: [3, 'integer'],
-			webcDbOpenWasSuccess: [2, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PsIdUpdate',
-		id: 2862,
-		props: {
-			isFromWamsys: [4, 'boolean'],
-			psIdAction: [
-				2,
-				{
-					CREATED: 1,
-					ROTATED: 2,
-					DELETED: 3,
-				},
-			],
-			psIdKey: [1, 'integer'],
-			psIdRotationFrequence: [3, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebDbVersionsSource',
-		id: 4784,
-		props: {
-			webDbVersionSource: [
-				1,
-				{
-					KNOB: 1,
-					LOCAL: 2,
-					STATIC: 3,
-					KNOB_WITH_LOCAL_OVERRIDE: 4,
-				},
-			],
-			webSchemaInitiator: [
-				2,
-				{
-					MAIN: 1,
-					WEB_WORKER: 2,
-					SERVICE_WORKER: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcAssetLoad',
-		id: 1358,
-		props: {
-			webcAssetCacheType: [
-				4,
-				{
-					UNCACHED: 0,
-					IDB: 1,
-					SW: 2,
-				},
-			],
-			webcAssetFromCache: [2, 'boolean'],
-			webcAssetLoadT: [3, 'timer'],
-			webcAssetName: [1, 'string'],
-			webcAssetSize: [5, 'number'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcStorageStat',
-		id: 1504,
-		props: {
-			webcAgeOfStorage: [3, 'integer'],
-			webcPackingEnabled: [4, 'boolean'],
-			webcStorageQuota: [2, 'integer'],
-			webcStorageUsage: [1, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'OfflineResumeStage',
-		id: 3536,
-		props: {
-			attemptId: [13, 'integer'],
-			chatThreadCount: [4, 'integer'],
-			currentOfflineStage: [
-				1,
-				{
-					PAGE_LOAD: 1,
-					SOCKET_CONNECT: 2,
-					PROCESS_COMPLETE: 3,
-					SCREEN_LOAD: 4,
-					OFFLINE_PREVIEW: 5,
-					OFFLINE_COMPLETE_RECEIVED: 6,
-					PREACKS_SENT: 7,
-				},
-			],
-			isResumeInForeground: [5, 'boolean'],
-			isResumeStartedInForeground: [14, 'boolean'],
-			lastPushTimestampMs: [12, 'integer'],
-			mailboxAge: [6, 'integer'],
-			offlineCallCount: [15, 'integer'],
-			offlineDecryptErrorCount: [7, 'integer'],
-			offlineMessageCount: [8, 'integer'],
-			offlineNotificationCount: [9, 'integer'],
-			offlineReceiptCount: [10, 'integer'],
-			offlineResumeMode: [
-				11,
-				{
-					RESUME_FROM_RESTART: 1,
-					RESUME_FROM_OPEN_TAB: 2,
-					UNKNOWN: 3,
-					CONNECT_REASON_USER: 4,
-					CONNECT_REASON_PUSH: 5,
-					CONNECT_REASON_BACKOFF: 6,
-				},
-			],
-			offlineSessionId: [2, 'string'],
-			offlineSizeBytes: [16, 'integer'],
-			offlineStageTimestampMs: [3, 'integer'],
-			passiveModeT: [17, 'timer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcStreamModeChange',
-		id: 770,
-		props: {
-			webcStreamMode: [
-				1,
-				{
-					QR: 0,
-					MAIN: 1,
-					SYNCING: 2,
-					OFFLINE: 3,
-					CONFLICT: 4,
-					PROXYBLOCK: 5,
-					TOS_BLOCK: 6,
-					SMB_TOS_BLOCK: 7,
-					DEPRECATED_VERSION: 8,
-					LOCK: 9,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcStatusSync',
-		id: 1878,
-		props: {
-			webcStatusMutedItemCount: [4, 'integer'],
-			webcStatusMutedRowCount: [7, 'integer'],
-			webcStatusRecentItemCount: [2, 'integer'],
-			webcStatusRecentRowCount: [5, 'integer'],
-			webcStatusSyncT: [1, 'timer'],
-			webcStatusViewedItemCount: [3, 'integer'],
-			webcStatusViewedRowCount: [6, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'TsNavigation',
-		id: 4334,
-		props: {
-			cid: [19, 'string'],
-			entryPointConversationInitiated: [
-				23,
-				{
-					BUSINESS_INITIATED: 0,
-					CONSUMER_INITIATED: 1,
-					NO_MESSAGES_LAST_24H: 2,
-				},
-			],
-			entryPointConversionApp: [24, 'string'],
-			entryPointConversionSource: [25, 'string'],
-			groupSize: [1, 'integer'],
-			isCatalogVisible: [29, 'boolean'],
-			isCloudapi: [26, 'boolean'],
-			isOnpremises: [27, 'boolean'],
-			isSmb: [28, 'boolean'],
-			navigationDestination: [
-				2,
-				{
-					UNKNOWN: 1,
-					COMMUNITY_HOME: 2,
-					COMMUNITY_TAB: 3,
-					CHAT_THREAD: 4,
-					CHAT_INFO_PAGE: 5,
-					CHAT_LIST: 6,
-					COMMUNITY_NAVIGATION: 7,
-					BACKGROUND: 8,
-					RESIGN: 9,
-					SUBGROUP_SWITCHER: 10,
-					COMMUNITY_COMPOSER: 11,
-					MEDIA_VIEWER: 12,
-					ALL_MEDIA: 13,
-					STREAMING_MEDIA_VIEWER: 14,
-					CALLS_HOME_TAB: 15,
-					IN_CALL_UI: 16,
-					STATUS_HOME_TAB: 17,
-					STATUS_COMPOSER: 18,
-					STATUS_VIEW: 19,
-					CAMERA: 20,
-					PHOTO_VIDEO_LIBRARY: 21,
-					SETTINGS_HOME_TAB: 22,
-					TOOLS_TAB: 23,
-					COMMUNITY_SETTINGS: 24,
-					CHANNEL_UPDATES_HOME: 25,
-					CHANNEL_THREAD: 26,
-					CHANNEL_DIRECTORY: 27,
-					CHANNEL_PROFILE: 28,
-					CHANNEL_FORWARD: 29,
-					CHANNEL_PRODUCER_MEDIA_EDITOR: 30,
-					CHANNEL_CREATE: 31,
-					CHANNEL_EDIT: 32,
-					CHANNEL_DELETE: 33,
-					STATUS_COMPOSER_TEXT: 34,
-					LIGHTWEIGHT_CALL_UI: 35,
-					AI_HOME: 36,
-					LIGHTWEIGHT_CALL_BANNER: 37,
-					LIGHTWEIGHT_CALL_NUX: 38,
-					CALL_INFO_PAGE: 39,
-					SMB_CATALOG: 40,
-					SMB_CATALOG_SHARE_LINK: 41,
-					SMB_CATALOG_SHARE_PRODUCT_LINK: 42,
-					SMB_CATALOG_SETTINGS: 43,
-					SMB_CATALOG_PRODUCT: 44,
-					SMB_CATALOG_NEW_COLLECTION: 45,
-					SMB_CATALOG_EDIT_COLLECTION: 46,
-					SMB_CATALOG_CREATE_PRODUCT: 47,
-					SMB_CATALOG_EDIT_PRODUCT: 48,
-					SMB_CATALOG_NEW_COLLECTION_ADD_ITEMS: 49,
-					SMB_CATALOG_COLLECTION_UPDATE_ITEMS: 50,
-					SMB_CATALOG_COLLECTIONS: 51,
-					SMB_CATALOG_COLLECTION_REORDER: 52,
-					SMB_CATALOG_COLLECTION_PRODUCTS: 53,
-					SMB_CATALOG_COLLECTION_PRODUCTS_REORDER: 54,
-					CREATE_EVENT: 55,
-					EVENT_PAGE: 56,
-					EVENTS_IN_GROUP: 57,
-					CATALOG_HOME: 59,
-					CATALOG_COLLECTION: 60,
-					CATALOG_ITEM: 61,
-					CATALOG_CART: 62,
-					FLOWS_EXPERIENCE: 63,
-					BUSINESS_PROFILE_EDIT: 64,
-					BUSINESS_PROFILE_EDIT_NAME: 65,
-					BUSINESS_PROFILE_EDIT_CATEGORIES: 66,
-					BUSINESS_PROFILE_EDIT_DESCRIPTION: 67,
-					BUSINESS_PROFILE_EDIT_WEBSITE: 68,
-					BUSINESS_PROFILE_EDIT_EMAIL: 69,
-					BUSINESS_PROFILE_EDIT_ADDRESS: 70,
-					BUSINESS_PROFILE_EDIT_HOURS: 71,
-					BUSINESS_PROFILE_EDIT_COVER_PHOTO: 72,
-					BUSINESS_PROFILE_LINK_FB_IG: 73,
-					BUSINESS_PROFILE_HELP_PAGE_LINK_FB_IG: 74,
-					PAYMENTS_HOME: 75,
-					PAYMENTS_HOME_TRANSACTIONS: 76,
-					PAYMENTS_HOME_RECENT_MERCHANTS: 77,
-					PAYMENTS_HOME_INVITE_OTHERS: 78,
-					PAYMENTS_HOME_HELP: 79,
-					MESSAGE_MENU: 80,
-					PIN_MESSAGE_REPLACEMENT_DIALOG: 81,
-					PIN_MESSAGE_EXPIRATION_DIALOG: 82,
-					MY_STATUS_LIST: 83,
-					ALL_STATUS_LIST: 84,
-					PIN_BANNER: 85,
-					CALL_BANNER: 86,
-					LANDING_SCREEN: 87,
-					NEW_CHAT: 88,
-					GROUP_MEMBER_ADD_GROUP_CREATION: 89,
-					GROUP_MEMBER_ADD_EXISTING_GROUP: 90,
-					GROUP_CHAT: 91,
-					GROUP_CREATION: 92,
-				},
-			],
-			navigationSource: [
-				3,
-				{
-					UNKNOWN: 1,
-					COMMUNITY_HOME: 2,
-					COMMUNITY_TAB: 3,
-					CHAT_THREAD: 4,
-					CHAT_INFO_PAGE: 5,
-					CHAT_LIST: 6,
-					COMMUNITY_NAVIGATION: 7,
-					BACKGROUND: 8,
-					RESIGN: 9,
-					SUBGROUP_SWITCHER: 10,
-					COMMUNITY_COMPOSER: 11,
-					MEDIA_VIEWER: 12,
-					ALL_MEDIA: 13,
-					STREAMING_MEDIA_VIEWER: 14,
-					CALLS_HOME_TAB: 15,
-					IN_CALL_UI: 16,
-					STATUS_HOME_TAB: 17,
-					STATUS_COMPOSER: 18,
-					STATUS_VIEW: 19,
-					CAMERA: 20,
-					PHOTO_VIDEO_LIBRARY: 21,
-					SETTINGS_HOME_TAB: 22,
-					TOOLS_TAB: 23,
-					COMMUNITY_SETTINGS: 24,
-					CHANNEL_UPDATES_HOME: 25,
-					CHANNEL_THREAD: 26,
-					CHANNEL_DIRECTORY: 27,
-					CHANNEL_PROFILE: 28,
-					CHANNEL_FORWARD: 29,
-					CHANNEL_PRODUCER_MEDIA_EDITOR: 30,
-					CHANNEL_CREATE: 31,
-					CHANNEL_EDIT: 32,
-					CHANNEL_DELETE: 33,
-					STATUS_COMPOSER_TEXT: 34,
-					LIGHTWEIGHT_CALL_UI: 35,
-					AI_HOME: 36,
-					LIGHTWEIGHT_CALL_BANNER: 37,
-					LIGHTWEIGHT_CALL_NUX: 38,
-					CALL_INFO_PAGE: 39,
-					SMB_CATALOG: 40,
-					SMB_CATALOG_SHARE_LINK: 41,
-					SMB_CATALOG_SHARE_PRODUCT_LINK: 42,
-					SMB_CATALOG_SETTINGS: 43,
-					SMB_CATALOG_PRODUCT: 44,
-					SMB_CATALOG_NEW_COLLECTION: 45,
-					SMB_CATALOG_EDIT_COLLECTION: 46,
-					SMB_CATALOG_CREATE_PRODUCT: 47,
-					SMB_CATALOG_EDIT_PRODUCT: 48,
-					SMB_CATALOG_NEW_COLLECTION_ADD_ITEMS: 49,
-					SMB_CATALOG_COLLECTION_UPDATE_ITEMS: 50,
-					SMB_CATALOG_COLLECTIONS: 51,
-					SMB_CATALOG_COLLECTION_REORDER: 52,
-					SMB_CATALOG_COLLECTION_PRODUCTS: 53,
-					SMB_CATALOG_COLLECTION_PRODUCTS_REORDER: 54,
-					CREATE_EVENT: 55,
-					EVENT_PAGE: 56,
-					EVENTS_IN_GROUP: 57,
-					CATALOG_HOME: 59,
-					CATALOG_COLLECTION: 60,
-					CATALOG_ITEM: 61,
-					CATALOG_CART: 62,
-					FLOWS_EXPERIENCE: 63,
-					BUSINESS_PROFILE_EDIT: 64,
-					BUSINESS_PROFILE_EDIT_NAME: 65,
-					BUSINESS_PROFILE_EDIT_CATEGORIES: 66,
-					BUSINESS_PROFILE_EDIT_DESCRIPTION: 67,
-					BUSINESS_PROFILE_EDIT_WEBSITE: 68,
-					BUSINESS_PROFILE_EDIT_EMAIL: 69,
-					BUSINESS_PROFILE_EDIT_ADDRESS: 70,
-					BUSINESS_PROFILE_EDIT_HOURS: 71,
-					BUSINESS_PROFILE_EDIT_COVER_PHOTO: 72,
-					BUSINESS_PROFILE_LINK_FB_IG: 73,
-					BUSINESS_PROFILE_HELP_PAGE_LINK_FB_IG: 74,
-					PAYMENTS_HOME: 75,
-					PAYMENTS_HOME_TRANSACTIONS: 76,
-					PAYMENTS_HOME_RECENT_MERCHANTS: 77,
-					PAYMENTS_HOME_INVITE_OTHERS: 78,
-					PAYMENTS_HOME_HELP: 79,
-					MESSAGE_MENU: 80,
-					PIN_MESSAGE_REPLACEMENT_DIALOG: 81,
-					PIN_MESSAGE_EXPIRATION_DIALOG: 82,
-					MY_STATUS_LIST: 83,
-					ALL_STATUS_LIST: 84,
-					PIN_BANNER: 85,
-					CALL_BANNER: 86,
-					LANDING_SCREEN: 87,
-					NEW_CHAT: 88,
-					GROUP_MEMBER_ADD_GROUP_CREATION: 89,
-					GROUP_MEMBER_ADD_EXISTING_GROUP: 90,
-					GROUP_CHAT: 91,
-					GROUP_CREATION: 92,
-				},
-			],
-			relativeTimestampMs: [4, 'integer'],
-			smbCatalogBusinessVertical: [20, 'string'],
-			smbCatalogIsCatalogVisible: [21, 'boolean'],
-			smbCatalogIsToggleCart: [22, 'boolean'],
-			threadType: [
-				7,
-				{
-					GROUP: 1,
-					BROADCAST: 2,
-					INDIVIDUAL: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					SUB_GROUP: 6,
-					DEFAULT_SUB_GROUP: 7,
-					PARENT_GROUP: 8,
-				},
-			],
-			tsSessionId: [5, 'integer'],
-			typeOfGroup: [
-				6,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'UserActivity',
-		id: 1384,
-		props: {
-			userActivityBitmapHigh: [4, 'integer'],
-			userActivityBitmapLen: [5, 'integer'],
-			userActivityBitmapLow: [3, 'integer'],
-			userActivitySessionCum: [7, 'integer'],
-			userActivitySessionId: [1, 'string'],
-			userActivitySessionSeq: [6, 'integer'],
-			userActivityStartTime: [2, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'TsBitArray',
-		id: 4332,
-		props: {
-			bitarrayHigh: [1, 'integer'],
-			bitarrayLength: [2, 'integer'],
-			bitarrayLow: [3, 'integer'],
-			cumulativeBits: [4, 'integer'],
-			relativeTimestampMs: [5, 'integer'],
-			sessionSeq: [6, 'integer'],
-			tsSessionId: [7, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcResourceLoad',
-		id: 688,
-		props: {
-			webcResourceCached: [3, 'boolean'],
-			webcResourceDuration: [2, 'timer'],
-			webcResourceName: [1, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdAppStateMessageRange',
-		id: 2522,
-		props: {
-			additionalMessagesCount: [1, 'integer'],
-		},
-		weight: 1000,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdBootstrapDataApplied',
-		id: 2298,
-		props: {
-			collection: [
-				5,
-				{
-					REGULAR: 1,
-					REGULAR_LOW: 2,
-					REGULAR_HIGH: 3,
-					CRITICAL_BLOCK: 4,
-					CRITICAL_UNBLOCK_LOW: 5,
-				},
-			],
-			historySyncChunkOrder: [14, 'integer'],
-			historySyncStageProgress: [11, 'integer'],
-			mdBootstrapContactsCount: [8, 'integer'],
-			mdBootstrapHistoryPayloadType: [
-				10,
-				{
-					INITIAL: 1,
-					RECENT_HISTORY: 2,
-					FULL_HISTORY: 3,
-					PUSHNAME: 4,
-					STATUS_V3: 5,
-					NON_BLOCKING_DATA: 6,
-					ON_DEMAND: 7,
-				},
-			],
-			mdBootstrapPayloadType: [
-				3,
-				{
-					CRITICAL: 1,
-					NON_CRITICAL: 2,
-				},
-			],
-			mdBootstrapSource: [
-				2,
-				{
-					APP_STATE: 1,
-					HISTORY: 2,
-				},
-			],
-			mdBootstrapStepDuration: [6, 'integer'],
-			mdBootstrapStepResult: [
-				12,
-				{
-					SUCCESS: 1,
-					FAILURE: 2,
-				},
-			],
-			mdRegAttemptId: [9, 'string'],
-			mdSessionId: [1, 'string'],
-			mdTimestamp: [4, 'integer'],
-			sentViaMms: [13, 'boolean'],
-			usedSnapshot: [7, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdBootstrapAppStateDataDownloaded',
-		id: 2294,
-		props: {
-			mdBootstrapContactsCount: [5, 'integer'],
-			mdBootstrapHistoryPayloadType: [
-				11,
-				{
-					INITIAL: 1,
-					RECENT_HISTORY: 2,
-					FULL_HISTORY: 3,
-					PUSHNAME: 4,
-					STATUS_V3: 5,
-					NON_BLOCKING_DATA: 6,
-					ON_DEMAND: 7,
-				},
-			],
-			mdBootstrapPayloadSize: [4, 'integer'],
-			mdBootstrapPayloadType: [
-				2,
-				{
-					CRITICAL: 1,
-					NON_CRITICAL: 2,
-				},
-			],
-			mdBootstrapStepDuration: [6, 'integer'],
-			mdBootstrapStepResult: [
-				7,
-				{
-					SUCCESS: 1,
-					FAILURE: 2,
-				},
-			],
-			mdRegAttemptId: [10, 'string'],
-			mdSessionId: [1, 'string'],
-			mdStorageQuotaBytes: [8, 'integer'],
-			mdStorageQuotaUsedBytes: [9, 'integer'],
-			mdTimestamp: [3, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdAppStateKeyRotation',
-		id: 2518,
-		props: {
-			mdAppStateKeyRotationReason: [
-				1,
-				{
-					APP_STATE_SYNC_KEY_EXPIRY: 1,
-					DEVICE_DEREGISTERATION: 2,
-					NO_KEYS: 3,
-				},
-			],
-		},
-		weight: 1000,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdAppStateSyncDaily',
-		id: 2300,
-		props: {
-			crossIndexConflictCount: [11, 'integer'],
-			invalidActionCount: [4, 'integer'],
-			keyRotationRemoveCount: [12, 'integer'],
-			missingKeyCount: [9, 'integer'],
-			mutationCount: [1, 'integer'],
-			storedMutationCount: [7, 'integer'],
-			unsetActionCount: [8, 'integer'],
-			unsupportedActionCount: [5, 'integer'],
-			uploadConflictCount: [10, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcPwaEvent',
-		id: 4116,
-		props: {
-			webcPwaAction: [
-				2,
-				{
-					INSTALL: 1,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'DeepLinkClick',
-		id: 1156,
-		props: {
-			deepLinkHasPhoneNumber: [2, 'boolean'],
-			deepLinkHasText: [1, 'boolean'],
-			deepLinkSessionId: [3, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MessageSecretErrors',
-		id: 3686,
-		props: {
-			messageMediaType: [
-				3,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messageSecretAllowedList: [
-				1,
-				{
-					MESSAGE_POLL: 0,
-				},
-			],
-			messageSecretError: [
-				2,
-				{
-					MISSING_MESSAGE_SECRET: 0,
-					WRONG_LENGTH: 1,
-					ENCRYPTION_ERROR: 2,
-					DECRYPTION_ERROR: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChatMessageCounts',
-		id: 1644,
-		props: {
-			audioMessagesReceived: [149, 'integer'],
-			audioMessagesSent: [150, 'integer'],
-			awayMsgsSent: [56, 'integer'],
-			bizCatalogType: [
-				60,
-				{
-					SHOPS: 0,
-					NATIVE: 1,
-				},
-			],
-			bizConversationDepth: [65, 'integer'],
-			blockReason: [
-				33,
-				{
-					OTHER: 0,
-					NO_LONGER_NEEDED: 1,
-					NO_SIGN_UP: 2,
-					SPAM: 3,
-					OFFENSIVE_MESSAGES: 4,
-					OTP_DID_NOT_REQUEST: 5,
-				},
-			],
-			broadcastMsgsReceived: [30, 'integer'],
-			broadcastMsgsSent: [29, 'integer'],
-			callOffersReceived: [27, 'integer'],
-			callOffersSent: [26, 'integer'],
-			callsResultBusy: [70, 'integer'],
-			callsResultCancelled: [71, 'integer'],
-			callsResultConnected: [72, 'integer'],
-			callsResultError: [78, 'integer'],
-			callsResultMissed: [73, 'integer'],
-			callsResultRejected: [74, 'integer'],
-			canEditDmSettings: [88, 'boolean'],
-			cartViews: [86, 'integer'],
-			chatEphemeralityDuration: [15, 'integer'],
-			chatMuted: [
-				8,
-				{
-					NOT_MUTED: 1,
-					MUTED_NO_NOTIFICATIONS: 2,
-					MUTED_SILENT_NOTIFICATIONS: 3,
-				},
-			],
-			chatOrigins: [
-				179,
-				{
-					LID_USERNAME: 1,
-					LID_CTWA: 2,
-					OTHERS: 3,
-				},
-			],
-			chatOverflowClicks: [79, 'integer'],
-			chatTypeInd: [
-				2,
-				{
-					INDIVIDUAL: 1,
-					SMB: 2,
-					ENT: 3,
-					INTEROP: 4,
-				},
-			],
-			collectionInquiriesSent: [44, 'integer'],
-			commandSheetShow: [174, 'integer'],
-			commentsReceived: [126, 'integer'],
-			commerceMsgsReceived: [41, 'integer'],
-			commerceMsgsSent: [40, 'integer'],
-			disappearingChatInitiator: [
-				59,
-				{
-					CHAT: 1,
-					INITIATED_BY_ME: 2,
-					INITIATED_BY_OTHER: 3,
-					CHAT_PICKER: 4,
-					BIZ_UPGRADE_FB_HOSTING: 5,
-				},
-			],
-			documentMessagesReceived: [151, 'integer'],
-			documentMessagesSent: [152, 'integer'],
-			editedMsgsSent: [100, 'integer'],
-			entryPointConversionApp: [47, 'string'],
-			entryPointConversionSource: [46, 'string'],
-			ephemeralMessagesReceived: [14, 'integer'],
-			ephemeralMessagesSent: [13, 'integer'],
-			ephemeralMessagesUnreadExpired: [69, 'integer'],
-			ephemeralityInitiator: [
-				109,
-				{
-					INITIATED_BY_ME: 1,
-					INITIATED_BY_OTHER: 2,
-					BIZ_UPGRADE_FB_HOSTING: 3,
-				},
-			],
-			ephemeralityTriggerAction: [
-				110,
-				{
-					UNKNOWN: 0,
-					CHAT_SETTINGS: 1,
-					ACCOUNT_SETTINGS: 2,
-					BULK_CHANGE: 3,
-					BIZ_SUPPORTS_FB_HOSTING: 4,
-				},
-			],
-			eventCreationMessagesReceived: [142, 'integer'],
-			eventCreationMessagesSent: [143, 'integer'],
-			eventResponseMessagesReceived: [144, 'integer'],
-			eventResponseMessagesSent: [145, 'integer'],
-			fbCtaInquiriesSent: [45, 'integer'],
-			firstResponseTime: [25, 'integer'],
-			forwardAudioMessagesReceived: [153, 'integer'],
-			forwardAudioMessagesSent: [154, 'integer'],
-			forwardDocumentMessagesReceived: [155, 'integer'],
-			forwardDocumentMessagesSent: [156, 'integer'],
-			forwardGifMessagesReceived: [157, 'integer'],
-			forwardGifMessagesSent: [158, 'integer'],
-			forwardMessagesReceived: [89, 'integer'],
-			forwardMessagesSent: [90, 'integer'],
-			forwardPhotoMessagesReceived: [128, 'integer'],
-			forwardPhotoMessagesSent: [129, 'integer'],
-			forwardPtvMessagesReceived: [159, 'integer'],
-			forwardPtvMessagesSent: [160, 'integer'],
-			forwardStatusReplyMessagesReceived: [161, 'integer'],
-			forwardStatusReplyMessagesSent: [162, 'integer'],
-			forwardStickerMessagesReceived: [163, 'integer'],
-			forwardStickerMessagesSent: [164, 'integer'],
-			forwardTextMessagesReceived: [130, 'integer'],
-			forwardTextMessagesSent: [131, 'integer'],
-			forwardUrlMessagesReceived: [132, 'integer'],
-			forwardUrlMessagesSent: [133, 'integer'],
-			forwardVideoMessagesReceived: [165, 'integer'],
-			forwardVideoMessagesSent: [166, 'integer'],
-			gaStatus: [
-				22,
-				{
-					NEW: 0,
-					RETAINED: 1,
-					RESURRECTED: 2,
-				},
-			],
-			gifMessagesReceived: [167, 'integer'],
-			gifMessagesSent: [168, 'integer'],
-			greetingMsgsSent: [57, 'integer'],
-			groupContainsBiz: [75, 'boolean'],
-			groupInfoSetting: [
-				87,
-				{
-					ADMINS_ONLY: 1,
-					ALL_PARTICIPANTS: 2,
-				},
-			],
-			groupMembershipReplies: [51, 'integer'],
-			groupPrivateReplies: [52, 'integer'],
-			groupSize: [19, 'integer'],
-			hasUsername: [180, 'boolean'],
-			imagineCommandClick: [175, 'integer'],
-			imagineMentionClick: [146, 'integer'],
-			imagineMentionShow: [176, 'integer'],
-			isAContact: [6, 'boolean'],
-			isAGroup: [5, 'boolean'],
-			isArchived: [10, 'boolean'],
-			isAutoMuted: [108, 'boolean'],
-			isBlocked: [32, 'boolean'],
-			isCartAddClicked: [36, 'boolean'],
-			isCommerceViewed: [35, 'boolean'],
-			isCtaOnPdpClicked: [37, 'boolean'],
-			isInviteCreatedThread: [106, 'boolean'],
-			isLabelled: [54, 'boolean'],
-			isMessageYourself: [91, 'boolean'],
-			isOppositePartyInitiated: [62, 'boolean'],
-			isPinned: [9, 'boolean'],
-			isPnhEnabledChat: [92, 'boolean'],
-			isUser1pBizBotChat: [141, 'boolean'],
-			isUser3pBotChat: [140, 'boolean'],
-			isUserAgent: [111, 'boolean'],
-			isUserCreatedAgent: [123, 'boolean'],
-			isWaPayRegistered: [81, 'boolean'],
-			labelledMsgs: [55, 'integer'],
-			locationsSent: [96, 'integer'],
-			messagesRead: [127, 'integer'],
-			messagesReceived: [4, 'integer'],
-			messagesSent: [3, 'integer'],
-			messagesStarred: [12, 'integer'],
-			messagesUnread: [11, 'integer'],
-			metaAiMentionClick: [147, 'integer'],
-			metaAiMentionShow: [148, 'integer'],
-			newThread: [68, 'boolean'],
-			odReceived: [82, 'integer'],
-			oppositeVisibleIdentification: [
-				181,
-				{
-					PHONE_NUMBER: 1,
-					SAVED_CONTACT_NAME: 2,
-					USERNAME: 3,
-					MASKED_PHONE_NUMBER: 4,
-					VERIFIED_BUSINESS_NAME: 5,
-					PLACEHOLDER: 6,
-					PUSHNAME: 7,
-				},
-			],
-			ordersSent: [38, 'integer'],
-			p2mOdNnpTransactionsSent: [83, 'integer'],
-			p2mOdNpTransactionsSent: [84, 'integer'],
-			paymentsSent: [39, 'integer'],
-			pdpInquiriesSent: [42, 'integer'],
-			pdpViews: [61, 'integer'],
-			photoMessagesReceived: [134, 'integer'],
-			photoMessagesSent: [135, 'integer'],
-			pollCreationMessagesReceived: [115, 'integer'],
-			pollCreationMessagesSent: [116, 'integer'],
-			pollUpdateMessagesReceived: [117, 'integer'],
-			pollUpdateMessagesSent: [118, 'integer'],
-			profileReplies: [64, 'integer'],
-			profileViews: [63, 'integer'],
-			pttMessagesReceived: [119, 'integer'],
-			pttMessagesSent: [120, 'integer'],
-			ptvMessagesReceived: [121, 'integer'],
-			ptvMessagesSent: [122, 'integer'],
-			quickRepliesSent: [58, 'integer'],
-			reactionsReceived: [97, 'integer'],
-			reactionsSent: [98, 'integer'],
-			receiverDefaultDisappearingDuration: [21, 'integer'],
-			repliesSent: [80, 'integer'],
-			requestedPhoneNumber: [93, 'boolean'],
-			seenMaskedPhoneNumber: [94, 'boolean'],
-			senderDefaultDisappearingDuration: [20, 'integer'],
-			sharedPhoneNumber: [99, 'boolean'],
-			smbMarketingMessagesReactionsSent: [101, 'integer'],
-			smbMarketingMessagesRepliesSent: [102, 'integer'],
-			smbMarketingMessagesSpamReports: [103, 'integer'],
-			smbMarketingMsgsReceived: [104, 'integer'],
-			smbMarketingMsgsSent: [105, 'integer'],
-			spamReports: [31, 'integer'],
-			startTime: [7, 'integer'],
-			statusReplies: [50, 'integer'],
-			statusReplyMessagesReceived: [169, 'integer'],
-			statusViews: [49, 'integer'],
-			stickerMessagesReceived: [170, 'integer'],
-			stickerMessagesSent: [171, 'integer'],
-			storefrontInquiriesSent: [43, 'integer'],
-			suggestionPromptsClick: [177, 'integer'],
-			suggestionPromptsShow: [178, 'integer'],
-			textMessagesReceived: [136, 'integer'],
-			textMessagesSent: [137, 'integer'],
-			textMessagesToUserCreatedAgentCnt: [124, 'integer'],
-			threadDs: [66, 'string'],
-			threadId: [67, 'string'],
-			totalCallDuration: [28, 'integer'],
-			totalMessageEditsFromAgentCnt: [112, 'integer'],
-			totalMessageFromAgentCnt: [113, 'integer'],
-			totalMessageToAgentCnt: [114, 'integer'],
-			totalMessagesToUserCreatedAgentCnt: [125, 'integer'],
-			typeOfGroup: [
-				85,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-			urlMessagesReceived: [138, 'integer'],
-			urlMessagesSent: [139, 'integer'],
-			viaContactlessChats: [107, 'boolean'],
-			videoCallsOffered: [76, 'integer'],
-			videoMessagesReceived: [172, 'integer'],
-			videoMessagesSent: [173, 'integer'],
-			viewOnceMessagesOpened: [18, 'integer'],
-			viewOnceMessagesReceived: [17, 'integer'],
-			viewOnceMessagesSent: [16, 'integer'],
-			voiceCallsOffered: [77, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'AddressingModeMismatch',
-		id: 4750,
-		props: {
-			iqResponse: [
-				1,
-				{
-					ADD_PARTICIPANT: 1,
-					REMOVE_PARTICIPANT: 2,
-					PROMOTE_PARTICIPANT: 3,
-					DEMOTE_PARTICIPANT: 4,
-				},
-			],
-			localAddressingMode: [
-				2,
-				{
-					PN: 1,
-					LID: 2,
-				},
-			],
-			mismatchOrigin: [
-				6,
-				{
-					INCOMING_GROUP_MESSAGE: 1,
-					ACK_OUTGOING_MESSAGE: 2,
-					GROUP_NOTIFICATION: 3,
-					GROUP_PROFILE_PICTURE_NOTIFICATION: 4,
-					IQ_RESPONSES: 5,
-				},
-			],
-			notificationTag: [3, 'string'],
-			serverAddressingMode: [
-				5,
-				{
-					PN: 1,
-					LID: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdBadDeviceSentMessage',
-		id: 2176,
-		props: {
-			dsmError: [
-				2,
-				{
-					INVALID_SENDER: 1,
-					MISSING_DSM: 2,
-					INVALID_DSM: 3,
-				},
-			],
-			peerType: [
-				1,
-				{
-					PRIMARY: 1,
-					COMPANION: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'GatedMessageReceived',
-		id: 3152,
-		props: {
-			chatGatedReason: [
-				1,
-				{
-					TOS3: 1,
-					COUNTRY: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MessageReceive',
-		id: 450,
-		props: {
-			agentEngagementType: [
-				28,
-				{
-					DIRECT_CHAT: 0,
-					INVOKED: 1,
-					MEMBER: 2,
-				},
-			],
-			botType: [
-				37,
-				{
-					UNKNOWN: 0,
-					METABOT: 1,
-					BOT_1P_BIZ: 2,
-					BOT_3P_BIZ: 3,
-				},
-			],
-			chatOrigins: [
-				38,
-				{
-					LID_USERNAME: 1,
-					LID_CTWA: 2,
-					OTHERS: 3,
-				},
-			],
-			deviceCount: [16, 'integer'],
-			deviceSizeBucket: [
-				10,
-				{
-					LT32: 1,
-					LT64: 2,
-					LT128: 3,
-					LT256: 4,
-					LT512: 5,
-					LT1000: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			disappearingChatInitiator: [
-				14,
-				{
-					CHAT: 1,
-					INITIATED_BY_ME: 2,
-					INITIATED_BY_OTHER: 3,
-					CHAT_PICKER: 4,
-					BIZ_UPGRADE_FB_HOSTING: 5,
-				},
-			],
-			editType: [
-				25,
-				{
-					NOT_EDITED: 0,
-					EDITED: 1,
-					SENDER_REVOKE: 2,
-					ADMIN_REVOKE: 3,
-				},
-			],
-			ephemeralityDuration: [13, 'integer'],
-			ephemeralityInitiator: [
-				26,
-				{
-					INITIATED_BY_ME: 1,
-					INITIATED_BY_OTHER: 2,
-					BIZ_UPGRADE_FB_HOSTING: 3,
-				},
-			],
-			ephemeralityTriggerAction: [
-				27,
-				{
-					UNKNOWN: 0,
-					CHAT_SETTINGS: 1,
-					ACCOUNT_SETTINGS: 2,
-					BULK_CHANGE: 3,
-					BIZ_SUPPORTS_FB_HOSTING: 4,
-				},
-			],
-			hasUsername: [39, 'boolean'],
-			isAComment: [36, 'boolean'],
-			isAReply: [19, 'boolean'],
-			isForwardedForward: [18, 'boolean'],
-			isLid: [24, 'boolean'],
-			isViewOnce: [9, 'boolean'],
-			localAddressingMode: [
-				33,
-				{
-					PN: 1,
-					LID: 2,
-				},
-			],
-			messageAddressingMode: [
-				34,
-				{
-					PN: 1,
-					LID: 2,
-				},
-			],
-			messageIsInternational: [4, 'boolean'],
-			messageIsInvisible: [23, 'boolean'],
-			messageIsOffline: [5, 'boolean'],
-			messageMediaType: [
-				2,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messageQueueTime: [15, 'timer'],
-			messageReceiveT0: [6, 'timer'],
-			messageReceiveT1: [7, 'timer'],
-			messageType: [
-				1,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			mutedGroupMessage: [8, 'boolean'],
-			numOfWebUrlsInTextMessage: [3, 'integer'],
-			offlineCount: [30, 'integer'],
-			oppositeVisibleIdentification: [
-				40,
-				{
-					PHONE_NUMBER: 1,
-					SAVED_CONTACT_NAME: 2,
-					USERNAME: 3,
-					MASKED_PHONE_NUMBER: 4,
-					VERIFIED_BUSINESS_NAME: 5,
-					PLACEHOLDER: 6,
-					PUSHNAME: 7,
-				},
-			],
-			paddingBytesSize: [22, 'integer'],
-			participantCount: [17, 'integer'],
-			receiverDefaultDisappearingDuration: [12, 'integer'],
-			revokeType: [
-				20,
-				{
-					SENDER: 0,
-					ADMIN: 1,
-				},
-			],
-			senderDefaultDisappearingDuration: [11, 'integer'],
-			serverAddressingMode: [
-				35,
-				{
-					PN: 1,
-					LID: 2,
-				},
-			],
-			stickerIsAi: [29, 'boolean'],
-			stickerIsFromStickerMaker: [31, 'boolean'],
-			stickerMakerSourceType: [
-				32,
-				{
-					CUTOUT_IMAGE: 1,
-					WEB_STICKER_MAKER: 2,
-					IOS_STICKER_MAKER: 3,
-					ANDROID_STICKER_MAKER: 4,
-					TRANSPARENT_IMAGE: 5,
-				},
-			],
-			typeOfGroup: [
-				21,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PlaceholderActivity',
-		id: 1980,
-		props: {
-			deviceCount: [9, 'integer'],
-			deviceSizeBucket: [
-				8,
-				{
-					LT32: 1,
-					LT64: 2,
-					LT128: 3,
-					LT256: 4,
-					LT512: 5,
-					LT1000: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			e2eSenderType: [
-				16,
-				{
-					MY_PRIMARY: 1,
-					OTHER_PRIMARY: 2,
-					MY_COMPANION: 3,
-					OTHER_COMPANION: 4,
-					MY_HOSTED_COMPANION: 5,
-					OTHER_HOSTED_COMPANION: 6,
-				},
-			],
-			isHostedChat: [19, 'boolean'],
-			isLid: [12, 'boolean'],
-			messageBeforeReg: [15, 'boolean'],
-			messageIsRevoke: [7, 'boolean'],
-			messageKeyHash: [14, 'string'],
-			messageMediaType: [
-				6,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messageType: [
-				5,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			participantCount: [10, 'integer'],
-			placeholderActionInd: [
-				2,
-				{
-					OTHER: 0,
-					ADD: 1,
-					VIEW: 2,
-					POPULATE: 3,
-				},
-			],
-			placeholderAddReason: [
-				11,
-				{
-					OTHER: 0,
-					SIGNAL_NO_SESSION: 1,
-					DEVICE_VERIFICATION_FAILURE: 2,
-					UNKNOWN_SELF_DEVICE: 3,
-					SIGNAL_INVALID_KEY: 4,
-					SIGNAL_INVALID_KEY_ID: 5,
-					SIGNAL_INVALID_MESSAGE: 6,
-					DEVICE_VERIFICATION_FAILURE_SELF_PEER: 7,
-					UNKNOWN_COMPANION_NO_PREKEY: 8,
-					BAD_EPHEMERAL_SETTING: 9,
-					SIGNAL_FUTURE_MESSAGE: 10,
-					SIGNAL_INVALID_SIGNATURE: 11,
-					SIGNAL_BAD_MAC: 12,
-					SIGNAL_INVALID_SESSION: 13,
-				},
-			],
-			placeholderChatTypeInd: [
-				3,
-				{
-					OTHER: 0,
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					STATUS: 3,
-					BROADCAST: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			placeholderPopulationType: [
-				17,
-				{
-					OTHER: 0,
-					RETRY: 1,
-					PEER_MESSAGE: 2,
-					RESEND: 3,
-				},
-			],
-			placeholderTimePeriod: [4, 'integer'],
-			placeholderTypeInd: [
-				1,
-				{
-					OTHER: 0,
-					CIPHERTEXT: 1,
-					FANOUT: 2,
-					DOWNGRADE: 3,
-				},
-			],
-			typeOfGroup: [
-				13,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'SenderKeyExpired',
-		id: 3130,
-		props: {
-			chatType: [
-				1,
-				{
-					OTHER: 0,
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					STATUS: 3,
-					BROADCAST: 4,
-					CHANNEL: 5,
-				},
-			],
-			deviceSizeBucket: [
-				2,
-				{
-					LT32: 1,
-					LT64: 2,
-					LT128: 3,
-					LT256: 4,
-					LT512: 5,
-					LT1000: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			expiryReason: [
-				3,
-				{
-					USER_LEAVE: 1,
-					DEVICE_UNPAIR: 2,
-					IDENTITY_CHANGE: 3,
-					AUDIENCE_CHANGE: 4,
-					PERIODIC_ROTATION: 5,
-					KEY_CORRUPTION: 6,
-					PEER_COMPANION_UNPAIR: 7,
-					OTHER_DEVICE_UNPAIR: 8,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MexEventV2',
-		id: 4336,
-		props: {
-			mexEventV2DurationMs: [1, 'timer'],
-			mexEventV2EndTime: [2, 'integer'],
-			mexEventV2ErrorCodes: [3, 'string'],
-			mexEventV2Errors: [4, 'string'],
-			mexEventV2HasData: [5, 'boolean'],
-			mexEventV2IsMex: [6, 'boolean'],
-			mexEventV2OperationName: [7, 'string'],
-			mexEventV2QueryId: [8, 'string'],
-			mexEventV2StartTime: [9, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'GraphqlCatalogRequest',
-		id: 3206,
-		props: {
-			businessJid: [4, 'string'],
-			businessType: [
-				5,
-				{
-					SMB: 1,
-					API_DC: 2,
-					API: 3,
-				},
-			],
-			graphqlCatalogEndpoint: [
-				1,
-				{
-					GET_CATALOG: 1,
-					GET_PRODUCT: 2,
-					GET_PRODUCT_LIST: 3,
-					GET_COLLECTIONS: 4,
-					GET_SINGLE_COLLECTION: 5,
-					GET_CATEGORIES: 6,
-					GET_VARIANTS: 7,
-					GET_PROMOTIONS: 8,
-				},
-			],
-			graphqlErrorCode: [3, 'integer'],
-			graphqlRequestResult: [
-				2,
-				{
-					SUCCESS: 1,
-					FAILURE: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 0,
-	},
-	{
-		name: 'MexEvent',
-		id: 3782,
-		props: {
-			isMex: [1, 'boolean'],
-			mexEventData: [2, 'string'],
-			mexEventDurationT: [12, 'timer'],
-			mexEventEndTime: [3, 'integer'],
-			mexEventEnvelopeResponseStatus: [13, 'integer'],
-			mexEventOperation: [7, 'string'],
-			mexEventPayloadResponseStatus: [14, 'integer'],
-			mexEventRequestSize: [8, 'integer'],
-			mexEventResponseSize: [9, 'integer'],
-			mexEventRetries: [10, 'integer'],
-			mexEventStartTime: [11, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'FmxAction',
-		id: 4444,
-		props: {
-			commonGroupNum: [1, 'integer'],
-			countryShown: [2, 'boolean'],
-			fmxEntryPoint: [
-				3,
-				{
-					FMX_CARD: 0,
-					SAFETY_TOOLS: 1,
-				},
-			],
-			fmxEvent: [
-				4,
-				{
-					BLOCK: 0,
-					ADD_CONTACT: 1,
-					REPORT: 2,
-					SAFETY_TOOLS: 3,
-					COMMON_GROUPS: 4,
-					CONTACT_INFO: 5,
-					FMX_CARD_INSERTED: 6,
-					FMX_CARD_VIEWED: 7,
-					LEARN_MORE: 8,
-					HIGHLIGHT_GROUP_NAME: 9,
-				},
-			],
-			highlightGroupType: [
-				6,
-				{
-					UNKNOWN: 0,
-					SINGLE: 1,
-					CREATOR: 2,
-					ADMIN: 3,
-					SAVED_CONTACTS: 4,
-					PARTICIPANTS: 5,
-					MORE: 6,
-				},
-			],
-			isSenderSmb: [7, 'boolean'],
-			notAContactShown: [5, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'UnknownStanza',
-		id: 3448,
-		props: {
-			unknownStanzaTag: [1, 'string'],
-			unknownStanzaType: [2, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'IncomingMessageDrop',
-		id: 3724,
-		props: {
-			agentEngagementType: [
-				12,
-				{
-					DIRECT_CHAT: 0,
-					INVOKED: 1,
-					MEMBER: 2,
-				},
-			],
-			botType: [
-				14,
-				{
-					UNKNOWN: 0,
-					METABOT: 1,
-					BOT_1P_BIZ: 2,
-					BOT_3P_BIZ: 3,
-				},
-			],
-			e2eCiphertextType: [
-				1,
-				{
-					MESSAGE: 0,
-					PREKEY_MESSAGE: 1,
-					SENDER_KEY_MESSAGE: 2,
-					MESSAGE_SECRET_MESSAGE: 3,
-				},
-			],
-			e2eDestination: [
-				2,
-				{
-					INDIVIDUAL: 0,
-					GROUP: 1,
-					LIST: 2,
-					STATUS: 3,
-					CHANNEL: 4,
-					INTEROP: 5,
-				},
-			],
-			e2eFailureReason: [
-				9,
-				{
-					INVALID_MESSAGE: 0,
-					LEGACY_MESSAGE: 1,
-					INVALID_VERSION: 2,
-					PRE_KEY_MESSAGE_MISSING_PRE_KEY: 3,
-					PRE_KEY_MESSAGE_INVALID_KEY: 4,
-					UNTRUSTED_IDENTITY: 5,
-					NO_SESSION_AVAILABLE: 6,
-					PLAINTEXT_BYTE_MISMATCH: 7,
-					UNKNOWN_CIPHERTEXT_TYPE: 8,
-					UNKNOWN_CIPHERTEXT_VERSION: 9,
-					INVALID_PADDING: 10,
-					INVALID_PROTOCOL_BUFFER: 11,
-					INVALID_NUMBER_OF_MESSAGE_TYPES: 12,
-					INVALID_IMAGE_FILE_LENGTH: 13,
-					INVALID_IMAGE_FILE_SHA256: 14,
-					INVALID_IMAGE_MEDIA_URL: 15,
-					INVALID_IMAGE_MEDIA_KEY: 16,
-					INVALID_IMAGE_MIME_TYPE: 17,
-					UNKNOWN_V2_TAGS: 18,
-					INVALID_EDIT_VERSION: 19,
-					INVALID_HSM_NAMESPACE: 20,
-					INVALID_HSM_ELEMENT: 21,
-					UNKNOWN_PROTOCOL_MESSAGE_TYPE: 22,
-					DUPLICATE_MESSAGE: 23,
-					FINGERPRINT_IDENTITY_MISMATCH: 24,
-					FINGERPRINT_VERSION_MISMATCH: 25,
-					INVALID_ARGUMENT: 26,
-					INVALID_KEY: 27,
-					INVALID_KEY_ID: 28,
-					INVALID_MAC: 29,
-					NO_MEMORY: 30,
-					STALE_KEY_EXCHANGE: 31,
-					VRF_SIGNATURE_VERIFICATION_FAILED: 32,
-					ERROR_MINIMUM_VALUE: 33,
-					ERROR_UNKNOWN: 34,
-					INVALID_BROADCAST_STANZA_ATTRIBUTE: 35,
-					INVALID_LIST_REPLY_MESSAGE: 36,
-					INVALID_LIST_REPLY_ROW_IDENTIFIER: 37,
-					INVALID_BUTTONS_RESPONSE_MESSAGE: 38,
-					INVALID_BUTTONS_RESPONSE_BUTTON_IDENTIFIER: 39,
-					INVALID_ORDER_MESSAGE: 40,
-					ERROR_CANCELLED: 41,
-					FUTURE_MESSAGE: 42,
-					INVALID_EMPTY_PROTOBUF_NOT_ALLOWED: 43,
-					SELF_SEND: 44,
-					INVALID_MEDIA_MIME_TYPE_TEMPLATE_MESSAGE: 45,
-					INVALID_MEDIA_ENC_HASH: 46,
-					INVALID_IDENTITY: 47,
-					PASSTHROUGH: 48,
-					NOT_IN_PENDING_DEVICES: 49,
-					EDIT_TYPE_AND_PROTOCOL_MISMATCH: 50,
-					DECRYPTION_FAILED: 51,
-					DESERIALIZE_INVALID_PROTO_FORMAT: 52,
-					DESERIALIZE_RATCHET_KEY_BAD_FORMAT: 53,
-					DESERIALIZE_PK_INVALID_PROTO_FORMAT: 54,
-					DESERIALZE_PK_KEY_BAD_FORMAT: 55,
-					TOO_MANY_MESSAGES_IN_FUTURE: 56,
-					EMPTY_VERSION_CONTENT_SUFFIX: 57,
-					CONTENT_EXCEEDED_EXPECTED_LENGTH: 58,
-					GRP_INVALID_PROTO_FORMAT: 59,
-					GRP_INVALID_KEY_FORMAT: 60,
-					GRP_VERSION_CONTENT_EMPTY: 61,
-					GRP_INVALID_VERSION_CONTENT_LENGTH: 62,
-					GRP_SENDER_KEY_INVALID_PROTO_FORMAT: 63,
-					GRP_SENDER_KEY_PROTO_ERROR: 64,
-					GRP_TOO_MANY_MESSAGES_IN_FUTURE: 65,
-					MISSING_MESSAGE_SECRET: 66,
-					MESSAGE_SECRET_INVALID: 67,
-					INVALID_REACTION_TEXT: 68,
-					UNSUPPORTED_MESSAGE_TYPE: 69,
-					UNSUPPORTED_IN_INTEROP: 70,
-					TARGET_MESSAGE_NOT_FOUND: 71,
-					STATUS_FROM_HOSTED_DEVICE_UNSUPPORTED: 72,
-					GROUP_MESSAGE_FROM_HOSTED_DEVICE_UNSUPPORTED: 73,
-					BROADCAST_FROM_HOSTED_DEVICE_UNSUPPORTED: 74,
-					LIVE_LOCATION_FROM_HOSTED_DEVICE_UNSUPPORTED: 75,
-					MESSAGE_TYPE_MISMATCH: 76,
-					ERROR_SESSION_STATE_UNACKED_PKMSG_GET_BASE_KEY: 77,
-					ERROR_SIGNAL_MESSAGE_GET_SENDER_RATCHET_KEY: 78,
-					ERROR_SESSION_STATE_GET_ROOT_KEY: 79,
-					ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY_PAIR: 80,
-					ERROR_SESSION_STATE_SET_SENDER_CHAIN_KEY: 81,
-					ERROR_SESSION_STATE_FIND_RECEIVER_CHAIN: 82,
-					ERROR_SESSION_RECORD_DESERIALIZE: 83,
-					ERROR_SENDER_KEY_STATE_REMOVE_SENDER_MESSAGE_KEY: 84,
-					ERROR_EMPTY_PLAINTEXT_DATA: 85,
-					ERROR_MAC_LEN_MISMATCH: 86,
-					ERROR_INVALID_MAC_LEN: 87,
-					ERROR_INVALID_SIGNATURE_LEN: 88,
-					ERROR_SENDER_KEY_LOAD_KEY: 89,
-					ERROR_FAST_RATCHET_SENDER_KEY_LOAD_KEY: 90,
-					ERROR_UNKNOWN_LOAD_KEY: 91,
-					ERROR_UNKNOWN_LOAD_SESSION: 92,
-					ERROR_SESSION_RECORD_GET_STATE: 93,
-					ERROR_SESSION_STATE_GET_SENDER_CHAIN_KEY: 94,
-					ERROR_INVALID_KEY_MATEIRAL_DATA_LEN: 95,
-					ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY: 96,
-					ERROR_SESSION_STATE_GET_LOCAL_IDENTITY_KEY: 97,
-					ERROR_SESSION_STATE_GET_REMOTE_IDENTITY_KEY: 98,
-				},
-			],
-			e2eSenderType: [
-				3,
-				{
-					MY_PRIMARY: 1,
-					OTHER_PRIMARY: 2,
-					MY_COMPANION: 3,
-					OTHER_COMPANION: 4,
-					MY_HOSTED_COMPANION: 5,
-					OTHER_HOSTED_COMPANION: 6,
-				},
-			],
-			invisibleMessageCategory: [
-				13,
-				{
-					PEER: 1,
-					INVISIBLE_KEY_DISTRIBUTION: 2,
-					OTHER: 3,
-				},
-			],
-			messageDropReason: [
-				4,
-				{
-					SYNCD_DELETION: 1,
-					ADMIN_REVOKE_NOT_ENABLED: 2,
-					RECEIVED_WITH_OLD_COUNTER: 3,
-					INVALID_STANZA: 4,
-					INVALID_PROTOBUF: 5,
-					MESSAGE_SECRET_ERROR: 6,
-					INVALID_LID_ADDRESSED_MESSAGE: 7,
-					UNKNOWN_MESSAGE_TYPE: 8,
-					DB_OPERATION_FAILED: 9,
-					INTERNAL_ERROR: 10,
-					EXPIRED: 11,
-					INVALID_HOSTED_COMPANION_STANZA: 12,
-					MESSAGE_REVOKED: 13,
-					PAYMENT_MESSAGE_REVOKED: 14,
-					DUPLICATE_MESSAGE: 15,
-					DUPLICATE_DELIVERY: 16,
-				},
-			],
-			messageMediaType: [
-				5,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			offline: [6, 'boolean'],
-			offlineCount: [11, 'integer'],
-			retryCount: [7, 'integer'],
-			revokeType: [
-				8,
-				{
-					SENDER: 0,
-					ADMIN: 1,
-				},
-			],
-			typeOfGroup: [
-				10,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcOfflineNotificationProcess',
-		id: 4222,
-		props: {
-			currentOfflineProcessStage: [
-				4,
-				{
-					PAGE_LOAD: 1,
-					SOCKET_CONNECT: 2,
-					OFFLINE_PREVIEW: 3,
-					PROCESSING: 4,
-					PROCESS_COMPLETE: 5,
-					PROCESS_INTERRUPTED: 6,
-				},
-			],
-			offlineProcessDecryptErrorCount: [5, 'integer'],
-			offlineProcessMailboxAge: [6, 'integer'],
-			offlineProcessMessageCount: [7, 'integer'],
-			offlineProcessNotificationCount: [8, 'integer'],
-			offlineProcessSessionId: [9, 'string'],
-			offlineProcessStageTimestampMs: [10, 'integer'],
-			runReason: [
-				12,
-				{
-					PUSH_NOTIFICATION: 1,
-					PERIODIC_BACKGROUND_SYNC: 2,
-				},
-			],
-			swVersion: [11, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdCriticalEvent',
-		id: 2746,
-		props: {
-			collection: [
-				2,
-				{
-					REGULAR: 1,
-					REGULAR_LOW: 2,
-					REGULAR_HIGH: 3,
-					CRITICAL_BLOCK: 4,
-					CRITICAL_UNBLOCK_LOW: 5,
-				},
-			],
-			mdCriticalEventCode: [
-				1,
-				{
-					MESSAGE_RANGE_UNSET: 1,
-					MESSAGE_RANGE_LAST_SYSTEM_MESSAGE_TIMESTAMP_SET: 2,
-					MESSAGE_RANGE_MESSAGES_UNSET: 3,
-					MESSAGE_RANGE_MESSAGES_EMPTY: 4,
-					MESSAGE_RANGE_MESSAGES_CROSS_LIMIT: 5,
-					MESSAGE_RANGE_MESSAGE_KEY_UNSET: 6,
-					MESSAGE_RANGE_MESSAGE_KEY_REMOTE_JID_UNSET: 7,
-					MESSAGE_RANGE_MESSAGE_KEY_FROM_ME_UNSET: 8,
-					MESSAGE_RANGE_MESSAGE_KEY_STANZA_ID_UNSET: 9,
-					MESSAGE_RANGE_MESSAGE_KEY_REMOTE_JID_INVALID: 10,
-					MESSAGE_RANGE_MESSAGE_KEY_PARTICIPANT_UNSET: 11,
-					MALFORMED_PENDING_MUTATION: 12,
-					ACTION_INVALID_INDEX_DATA: 13,
-					MISSING_MUTATION_TO_REMOVE: 14,
-					LTHASH_INCONSISTENCY_ON_DAILY_CHECK: 15,
-					LTHASH_INCONSISTENCY_ON_SNAPSHOT_MAC_MISMATCH: 16,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdLinkDeviceCompanion',
-		id: 2576,
-		props: {
-			mdDurationS: [8, 'integer'],
-			mdLinkDeviceCompanionErrorCode: [6, 'integer'],
-			mdLinkDeviceCompanionStage: [
-				4,
-				{
-					PAIR_SUCCESS_RECEIVED: 1,
-					PAIR_DEVICE_SIGN_SENT: 2,
-					FIRST_CONNECT: 3,
-					UPLOAD_PREKEYS: 4,
-					COMPLETE: 5,
-					GENERATE_PREKEYS: 6,
-					SENT_PREKEYS: 7,
-				},
-			],
-			mdRegAttemptId: [9, 'string'],
-			mdSessionId: [1, 'string'],
-			mdTimestampS: [7, 'integer'],
-			mdWasUpgraded: [5, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'AdvStoredTimestampExpired',
-		id: 3036,
-		props: {
-			advExpireTimeInHours: [1, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcQplHealth',
-		id: 3134,
-		props: {
-			webcQplHealthEventData: [1, 'string'],
-			webcQplHealthEventType: [
-				2,
-				{
-					ANNOTATION_SIZE_LIMIT_EXCEEDED: 1,
-					MAX_POINT_COUNT_EXCEEDED: 2,
-					MAX_MARKER_COUNT_EXCEEDED: 3,
-					TOO_MANY_OPEN_MARKERS_TO_WRITE: 4,
-					POINT_TO_END_AT_NOT_FOUND: 5,
-					JSON_FORMAT_ERROR: 6,
-					MAX_STORAGE_EVENT_COUNT_REACHED: 7,
-					ERROR_UPLOADING_CHUNK: 8,
-					POINT_NAME_TOO_LONG: 9,
-					ANNOTATION_KEY_TOO_LONG: 10,
-					POINT_DATA_TOO_LONG: 11,
-					ERROR_PARSING_CONFIG: 12,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'CommunityHomeAction',
-		id: 3494,
-		props: {
-			communityHomeGroupDiscoveries: [1, 'integer'],
-			communityHomeGroupJoins: [2, 'integer'],
-			communityHomeGroupNavigations: [3, 'integer'],
-			communityHomeId: [4, 'string'],
-			communityHomeViews: [5, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'CommunityTabAction',
-		id: 3496,
-		props: {
-			communityNoActionTabViews: [4, 'integer'],
-			communityTabGroupNavigations: [1, 'integer'],
-			communityTabToHomeViews: [2, 'integer'],
-			communityTabViews: [3, 'integer'],
-			communityTabViewsViaContextMenu: [5, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'Daily',
-		id: 1158,
-		props: {
-			accessibilityVoiceover: [108, 'boolean'],
-			addressbookSize: [11, 'integer'],
-			addressbookWhatsappSize: [12, 'integer'],
-			androidAdvertisingId: [135, 'string'],
-			androidKeystoreState: [
-				139,
-				{
-					NOT_AVAILABLE: 1,
-					SELF_TEST_FAILURE: 2,
-					ENC_KEY_READ_FAILURE: 3,
-					ENC_KEY_STORED_USED: 4,
-					ENC_KEY_PLAIN_DELETED: 5,
-					ENC_KEY_PLAIN_RECOVERED: 6,
-				},
-			],
-			androidXmppWorkersRuntime: [167, 'integer'],
-			appCodeHash: [103, 'string'],
-			appStandbyBucket: [121, 'integer'],
-			autoDlAudioCellular: [90, 'boolean'],
-			autoDlAudioRoaming: [91, 'boolean'],
-			autoDlAudioWifi: [89, 'boolean'],
-			autoDlDocCellular: [96, 'boolean'],
-			autoDlDocRoaming: [97, 'boolean'],
-			autoDlDocWifi: [95, 'boolean'],
-			autoDlImageCellular: [87, 'boolean'],
-			autoDlImageRoaming: [88, 'boolean'],
-			autoDlImageWifi: [86, 'boolean'],
-			autoDlVideoCellular: [93, 'boolean'],
-			autoDlVideoRoaming: [94, 'boolean'],
-			autoDlVideoWifi: [92, 'boolean'],
-			backupNetworkSetting: [
-				10,
-				{
-					WIFI_ONLY: 0,
-					WIFI_OR_CELLULAR: 1,
-				},
-			],
-			backupRestoreEncryptionVersion: [138, 'integer'],
-			backupSchedule: [
-				9,
-				{
-					OFF: 0,
-					DAILY: 1,
-					WEEKLY: 2,
-					MONTHLY: 3,
-					MANUAL: 4,
-				},
-			],
-			channelsMediaFolderSize: [186, 'integer'],
-			chatDatabaseSize: [19, 'integer'],
-			chatLockFolderCount: [168, 'integer'],
-			countEphemeralThreads: [181, 'integer'],
-			countEphemeralThreadsEnabledByMe: [182, 'integer'],
-			defaultDisappearingDuration: [140, 'integer'],
-			deviceLanguage: [153, 'string'],
-			emailState: [
-				174,
-				{
-					NOT_ADDED: 1,
-					UNVERIFIED: 2,
-					VERIFIED: 3,
-				},
-			],
-			entSecurityNotificationsEnabled: [134, 'boolean'],
-			experimentTmoPreloadGroupDaily: [166, 'integer'],
-			favoritedAnimatedStickerCount: [113, 'integer'],
-			favoritedFirstPartyStickerCount: [112, 'integer'],
-			favoritedTotalStickerCount: [111, 'integer'],
-			hasTextstatusEmojiModified24h: [175, 'boolean'],
-			hasTextstatusModified24h: [176, 'boolean'],
-			hasTextstatusTextModified24h: [177, 'boolean'],
-			hasUsername: [187, 'boolean'],
-			installedAnimatedStickerPackCount: [116, 'integer'],
-			installedAnimatedThirdPartyStickerPackCount: [137, 'integer'],
-			installedFirstPartyStickerPackCount: [115, 'integer'],
-			installedTotalStickerPackCount: [114, 'integer'],
-			ipStr: [122, 'string'],
-			isDefaultDisappearingMessagingUser: [183, 'boolean'],
-			isEphemeralMessagingUser: [184, 'boolean'],
-			keyboardLanguage: [154, 'string'],
-			languageCode: [5, 'string'],
-			lastCloudBackupSize: [185, 'integer'],
-			locationCode: [6, 'string'],
-			lockFolderHidden: [171, 'boolean'],
-			lowestAppStandbyBucket: [160, 'integer'],
-			mdPairTime: [124, 'integer'],
-			mediaFolderFileCount: [21, 'integer'],
-			mediaFolderSize: [20, 'integer'],
-			modifiedInternalProps: [155, 'boolean'],
-			networkIsRoaming: [7, 'boolean'],
-			networkOperatorName: [159, 'string'],
-			numAccounts: [163, 'integer'],
-			numContactsWithTextstatus24h: [178, 'integer'],
-			numContactsWithTextstatusEmoji24h: [179, 'integer'],
-			numContactsWithTextstatusText24h: [180, 'integer'],
-			osBuildNumber: [4, 'string'],
-			osNotificationSetting: [
-				118,
-				{
-					ALLOWED: 1,
-					BLOCKED: 2,
-					UNKNOWN: 3,
-				},
-			],
-			packageName: [102, 'string'],
-			passkeyExists: [165, 'boolean'],
-			paymentsIsEnabled: [100, 'boolean'],
-			permissionAccessCoarseLocation: [57, 'integer'],
-			permissionAccessFineLocation: [58, 'integer'],
-			permissionCamera: [56, 'integer'],
-			permissionContacts: [104, 'boolean'],
-			permissionReadExternalStorage: [53, 'integer'],
-			permissionRecordAudio: [55, 'integer'],
-			phoneCores: [156, 'integer'],
-			phoneyid: [162, 'string'],
-			privacySettingsAbout: [
-				141,
-				{
-					NOBODY: 1,
-					ONLY_SHARE_WITH: 2,
-					MY_CONTACTS: 3,
-					MY_CONTACTS_EXCEPT: 4,
-					EVERYONE: 5,
-				},
-			],
-			privacySettingsAboutExceptNum: [
-				142,
-				{
-					B0: 1,
-					B1: 2,
-					B5: 3,
-					B10: 4,
-					B15: 5,
-					B20: 6,
-					B30: 7,
-					B40: 8,
-					B50: 9,
-					B60: 10,
-					B70: 11,
-					B80: 12,
-					B90: 13,
-					B100: 14,
-				},
-			],
-			privacySettingsGroups: [
-				143,
-				{
-					NOBODY: 1,
-					ONLY_SHARE_WITH: 2,
-					MY_CONTACTS: 3,
-					MY_CONTACTS_EXCEPT: 4,
-					EVERYONE: 5,
-				},
-			],
-			privacySettingsGroupsExceptNum: [
-				144,
-				{
-					B0: 1,
-					B1: 2,
-					B5: 3,
-					B10: 4,
-					B15: 5,
-					B20: 6,
-					B30: 7,
-					B40: 8,
-					B50: 9,
-					B60: 10,
-					B70: 11,
-					B80: 12,
-					B90: 13,
-					B100: 14,
-				},
-			],
-			privacySettingsLastSeen: [
-				145,
-				{
-					NOBODY: 1,
-					ONLY_SHARE_WITH: 2,
-					MY_CONTACTS: 3,
-					MY_CONTACTS_EXCEPT: 4,
-					EVERYONE: 5,
-				},
-			],
-			privacySettingsLastSeenExceptNum: [
-				146,
-				{
-					B0: 1,
-					B1: 2,
-					B5: 3,
-					B10: 4,
-					B15: 5,
-					B20: 6,
-					B30: 7,
-					B40: 8,
-					B50: 9,
-					B60: 10,
-					B70: 11,
-					B80: 12,
-					B90: 13,
-					B100: 14,
-				},
-			],
-			privacySettingsProfilePhoto: [
-				147,
-				{
-					NOBODY: 1,
-					ONLY_SHARE_WITH: 2,
-					MY_CONTACTS: 3,
-					MY_CONTACTS_EXCEPT: 4,
-					EVERYONE: 5,
-				},
-			],
-			privacySettingsProfilePhotoExceptNum: [
-				148,
-				{
-					B0: 1,
-					B1: 2,
-					B5: 3,
-					B10: 4,
-					B15: 5,
-					B20: 6,
-					B30: 7,
-					B40: 8,
-					B50: 9,
-					B60: 10,
-					B70: 11,
-					B80: 12,
-					B90: 13,
-					B100: 14,
-				},
-			],
-			privacySettingsStatus: [
-				150,
-				{
-					NOBODY: 1,
-					ONLY_SHARE_WITH: 2,
-					MY_CONTACTS: 3,
-					MY_CONTACTS_EXCEPT: 4,
-					EVERYONE: 5,
-				},
-			],
-			privacySettingsStatusExceptNum: [
-				151,
-				{
-					B0: 1,
-					B1: 2,
-					B5: 3,
-					B10: 4,
-					B15: 5,
-					B20: 6,
-					B30: 7,
-					B40: 8,
-					B50: 9,
-					B60: 10,
-					B70: 11,
-					B80: 12,
-					B90: 13,
-					B100: 14,
-				},
-			],
-			privacySettingsStatusShareNum: [
-				152,
-				{
-					B0: 1,
-					B1: 2,
-					B5: 3,
-					B10: 4,
-					B15: 5,
-					B20: 6,
-					B30: 7,
-					B40: 8,
-					B50: 9,
-					B60: 10,
-					B70: 11,
-					B80: 12,
-					B90: 13,
-					B100: 14,
-				},
-			],
-			receiptsEnabled: [8, 'boolean'],
-			secretCodeActive: [172, 'boolean'],
-			showMetaAiButtonSetting: [173, 'boolean'],
-			simMcc: [2, 'integer'],
-			simMnc: [3, 'integer'],
-			storageAvailSize: [31, 'integer'],
-			storageTotalSize: [32, 'integer'],
-			supportedDecoders: [169, 'string'],
-			supportedEncoders: [170, 'string'],
-			videoFolderFileCount: [23, 'integer'],
-			videoFolderSize: [22, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'KeepInChatNotif',
-		id: 3484,
-		props: {
-			kicGroupNotificationTaps: [3, 'integer'],
-			kicGroupNotifications: [4, 'integer'],
-			kicNotificationTaps: [5, 'integer'],
-			kicNotifications: [6, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'NotificationSetting',
-		id: 3684,
-		props: {
-			groupReactionNotification: [1, 'boolean'],
-			groupShowNotification: [2, 'boolean'],
-			groupSoundTone: [
-				3,
-				{
-					DEFAULT: 1,
-					CUSTOM: 2,
-				},
-			],
-			inAppNotificationAlertStyle: [
-				4,
-				{
-					NONE: 1,
-					BANNERS: 2,
-					ALERTS: 3,
-				},
-			],
-			inAppNotificationSound: [5, 'boolean'],
-			inAppNotificationVibrate: [6, 'boolean'],
-			messageReactionNotification: [7, 'boolean'],
-			messageShowNotification: [8, 'boolean'],
-			messageSoundTone: [
-				9,
-				{
-					DEFAULT: 1,
-					CUSTOM: 2,
-				},
-			],
-			offlineNotification: [11, 'boolean'],
-			showPreview: [10, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PnhDailyCtwa',
-		id: 4280,
-		props: {
-			matMessagesReceived: [1, 'integer'],
-			threadDs: [3, 'string'],
-			threadId: [2, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PnhDaily',
-		id: 3806,
-		props: {
-			communityId: [1, 'string'],
-			mappingMissing: [7, 'integer'],
-			pnhIndicatorClicksChat: [2, 'integer'],
-			pnhIndicatorClicksInfoScreen: [3, 'integer'],
-			reactionDeleteCount: [4, 'integer'],
-			reactionOpenTrayCount: [5, 'integer'],
-			totalContacts: [8, 'integer'],
-			typeOfGroup: [
-				6,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PrivacyHighlightDaily',
-		id: 3522,
-		props: {
-			dialogAppearCount: [1, 'integer'],
-			dialogSelectCount: [2, 'integer'],
-			narrativeAppearCount: [3, 'integer'],
-			privacyHighlightCategory: [
-				4,
-				{
-					E2EE: 0,
-				},
-			],
-			privacyHighlightSurface: [
-				5,
-				{
-					GOLDEN_BOX_CONTACT: 0,
-					GOLDEN_BOX_GROUP: 1,
-					GOLDEN_BOX_BROADCAST: 2,
-					INFO_SCREEN_CONTACT: 3,
-					INFO_SCREEN_GROUP: 4,
-					INFO_SCREEN_BROADCAST: 5,
-					CALLS_LIST: 6,
-					CHATS_LIST: 7,
-					STATUS_LIST: 8,
-					LINKED_DEVICES_SCREEN: 9,
-					CALLING_SCREEN_AUDIO: 10,
-					CALLING_SCREEN_VIDEO: 11,
-					SPLIT_VIEW_HOME_PLACEHOLDER: 12,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PttDaily',
-		id: 2938,
-		props: {
-			pttCancelBroadcast: [9, 'integer'],
-			pttCancelGroup: [8, 'integer'],
-			pttCancelIndividual: [7, 'integer'],
-			pttCancelInterop: [42, 'integer'],
-			pttCancelNewsletter: [32, 'integer'],
-			pttDraftReviewBroadcast: [15, 'integer'],
-			pttDraftReviewGroup: [14, 'integer'],
-			pttDraftReviewIndividual: [13, 'integer'],
-			pttDraftReviewInterop: [43, 'integer'],
-			pttDraftReviewNewsletter: [33, 'integer'],
-			pttFastplaybackBroadcast: [21, 'integer'],
-			pttFastplaybackGroup: [20, 'integer'],
-			pttFastplaybackIndividual: [19, 'integer'],
-			pttFastplaybackInterop: [44, 'integer'],
-			pttFastplaybackNewsletter: [34, 'integer'],
-			pttLockBroadcast: [12, 'integer'],
-			pttLockGroup: [11, 'integer'],
-			pttLockIndividual: [10, 'integer'],
-			pttLockInterop: [45, 'integer'],
-			pttLockNewsletter: [35, 'integer'],
-			pttOutOfChatBroadcast: [29, 'integer'],
-			pttOutOfChatGroup: [30, 'integer'],
-			pttOutOfChatIndividual: [31, 'integer'],
-			pttOutOfChatInterop: [46, 'integer'],
-			pttOutOfChatNewsletter: [36, 'integer'],
-			pttPausedRecordBroadcast: [22, 'integer'],
-			pttPausedRecordGroup: [23, 'integer'],
-			pttPausedRecordIndividual: [24, 'integer'],
-			pttPausedRecordInterop: [47, 'integer'],
-			pttPausedRecordNewsletter: [37, 'integer'],
-			pttPlaybackBroadcast: [18, 'integer'],
-			pttPlaybackGroup: [17, 'integer'],
-			pttPlaybackIndividual: [16, 'integer'],
-			pttPlaybackInterop: [48, 'integer'],
-			pttPlaybackNewsletter: [38, 'integer'],
-			pttRecordBroadcast: [3, 'integer'],
-			pttRecordGroup: [2, 'integer'],
-			pttRecordIndividual: [1, 'integer'],
-			pttRecordInterop: [49, 'integer'],
-			pttRecordNewsletter: [39, 'integer'],
-			pttSendBroadcast: [6, 'integer'],
-			pttSendGroup: [5, 'integer'],
-			pttSendIndividual: [4, 'integer'],
-			pttSendInterop: [50, 'integer'],
-			pttSendNewsletter: [40, 'integer'],
-			pttStopTapBroadcast: [25, 'integer'],
-			pttStopTapGroup: [26, 'integer'],
-			pttStopTapIndividual: [27, 'integer'],
-			pttStopTapInterop: [51, 'integer'],
-			pttStopTapNewsletter: [41, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ScreenLockSettingsData',
-		id: 4802,
-		props: {
-			screenAutoLockDuration: [1, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ScreenLockSettings',
-		id: 3872,
-		props: {
-			screenLockDuration: [1, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 113760892,
-	},
-	{
-		name: 'WebcFtsStorage',
-		id: 3642,
-		props: {
-			ftsTotalSize: [1, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'NotificationEngagement',
-		id: 3796,
-		props: {
-			avgNotifEngagementT: [1, 'timer'],
-			groupSizeBucket: [
-				2,
-				{
-					SMALL: 1,
-					MEDIUM: 2,
-					LARGE: 3,
-					EXTRA_LARGE: 4,
-					XX_LARGE: 5,
-					XXX_LARGE: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			groupTypeClient: [
-				3,
-				{
-					REGULAR_GROUP: 1,
-					SUB_GROUP: 2,
-					DEFAULT_SUB_GROUP: 3,
-					PARENT_GROUP: 4,
-				},
-			],
-			isAGroup: [4, 'boolean'],
-			isWebBackgroundSyncNotif: [18, 'boolean'],
-			threadId: [5, 'string'],
-			totalMessageReminderNotifShown: [16, 'integer'],
-			totalMessageReminderNotifTapToOpen: [17, 'integer'],
-			totalNotifMarkAsRead: [6, 'integer'],
-			totalNotifMissedCallVoipCallback: [7, 'integer'],
-			totalNotifMissedCallVoipMessage: [8, 'integer'],
-			totalNotifOthers: [9, 'integer'],
-			totalNotifReply: [10, 'integer'],
-			totalNotifRtcVoipAccept: [11, 'integer'],
-			totalNotifRtcVoipDecline: [12, 'integer'],
-			totalNotifShowPreview: [13, 'integer'],
-			totalNotifShown: [14, 'integer'],
-			totalNotifTapToOpen: [15, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdBootstrapHistorySyncStatusAfterPairing',
-		id: 4652,
-		props: {
-			activeTimeAfterPairing: [
-				1,
-				{
-					MINS_10: 1,
-					MINS_20: 2,
-					MINS_40: 3,
-					MINS_60: 4,
-					MINS_5: 5,
-				},
-			],
-			isLoopRunning: [12, 'boolean'],
-			lastProcessedNotificationChunkOrder: [2, 'integer'],
-			lastProcessedNotificationChunkProgress: [3, 'integer'],
-			mdBootstrapHistoryPayloadType: [
-				4,
-				{
-					INITIAL: 1,
-					RECENT_HISTORY: 2,
-					FULL_HISTORY: 3,
-					PUSHNAME: 4,
-					STATUS_V3: 5,
-					NON_BLOCKING_DATA: 6,
-					ON_DEMAND: 7,
-				},
-			],
-			mdHistorySyncStatusResult: [
-				5,
-				{
-					SUCCESS: 1,
-					UNFINISHED: 2,
-					FAIL_TO_DOWNLOAD: 3,
-					MISSING_CHUNK: 4,
-					PROTOBUF_ERROR: 5,
-					FAIL_TO_STORE: 6,
-					OTHER_ERROR: 7,
-					IN_PROGRESS: 8,
-					FAIL_TO_RECEIVE: 9,
-					FAIL_TO_STORE_CHUNK: 10,
-					FAIL_TO_FETCH: 11,
-					FAIL_TO_PREPROCESS: 12,
-					FAIL_TO_ENCRYPT: 13,
-				},
-			],
-			mdSessionId: [6, 'string'],
-			mdTimestamp: [7, 'integer'],
-			missingNotificationCount: [8, 'integer'],
-			nextNotificationChunkOrder: [9, 'integer'],
-			totalProcessedMessageCount: [10, 'integer'],
-			unprocessedNotificationCount: [11, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebDbVersionNonAnonymous',
-		id: 4816,
-		props: {
-			webDbName: [
-				1,
-				{
-					MODEL_STORAGE: 1,
-					FTS_STORAGE: 2,
-					JOBS_STORAGE: 3,
-					LOADGEN_STORAGE: 4,
-					LRU_MEDIA_STORAGE_IDB: 5,
-					OFFD_STORAGE: 6,
-					QPL_STORAGE: 7,
-					SIGNAL_STORAGE: 8,
-					WORKER_STORAGE: 9,
-					SW: 10,
-					WAWC: 11,
-					WAWC_DB_ENC: 12,
-				},
-			],
-			webDbVersionNumber: [2, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'SyncdKeyCount',
-		id: 3978,
-		props: {
-			keysUsedInSnapshotCount: [1, 'integer'],
-			p80MuationsPerKey: [2, 'integer'],
-			p95MuationsPerKey: [3, 'integer'],
-			syncdSessionLengthDays: [4, 'integer'],
-			totalKeyCount: [5, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdAppStateSyncMutationStats',
-		id: 3180,
-		props: {
-			applied: [
-				1,
-				{
-					ZERO: 1,
-					ONE: 2,
-					LT10: 3,
-					LT100: 4,
-					LT500: 5,
-					LT1K: 6,
-					LT5K: 7,
-					GTE5K: 8,
-				},
-			],
-			failed: [
-				2,
-				{
-					ZERO: 1,
-					ONE: 2,
-					LT10: 3,
-					LT100: 4,
-					LT500: 5,
-					LT1K: 6,
-					LT5K: 7,
-					GTE5K: 8,
-				},
-			],
-			invalid: [
-				3,
-				{
-					ZERO: 1,
-					ONE: 2,
-					LT10: 3,
-					LT100: 4,
-					LT500: 5,
-					LT1K: 6,
-					LT5K: 7,
-					GTE5K: 8,
-				},
-			],
-			orphan: [
-				4,
-				{
-					ZERO: 1,
-					ONE: 2,
-					LT10: 3,
-					LT100: 4,
-					LT500: 5,
-					LT1K: 6,
-					LT5K: 7,
-					GTE5K: 8,
-				},
-			],
-			syncdAction: [5, 'string'],
-			unsupported: [
-				6,
-				{
-					ZERO: 1,
-					ONE: 2,
-					LT10: 3,
-					LT100: 4,
-					LT500: 5,
-					LT1K: 6,
-					LT5K: 7,
-					GTE5K: 8,
-				},
-			],
-		},
-		weight: 20,
-		wamChannel: 'private',
-		privateStatsIdInt: 0,
-	},
-	{
-		name: 'GroupJoinC',
-		id: 158,
-		props: {},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MessageHighRetryCount',
-		id: 3132,
-		props: {
-			deviceSizeBucket: [
-				5,
-				{
-					LT32: 1,
-					LT64: 2,
-					LT128: 3,
-					LT256: 4,
-					LT512: 5,
-					LT1000: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			e2eSenderType: [
-				3,
-				{
-					MY_PRIMARY: 1,
-					OTHER_PRIMARY: 2,
-					MY_COMPANION: 3,
-					OTHER_COMPANION: 4,
-					MY_HOSTED_COMPANION: 5,
-					OTHER_HOSTED_COMPANION: 6,
-				},
-			],
-			mediaType: [
-				1,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messageType: [
-				4,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			retryCount: [2, 'integer'],
-		},
-		weight: 20,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'OfflineCountTooHigh',
-		id: 2638,
-		props: {
-			callStanzaType: [
-				7,
-				{
-					OFFER: 0,
-					ACCEPT: 1,
-					REJECT: 2,
-					VIDEO: 3,
-					TERMINATE: 4,
-					ENC_REKEY: 5,
-					RELAYLATENCY: 6,
-					TRANSPORT: 7,
-					PREACCEPT: 8,
-					GROUP_UPDATE: 9,
-					MUTE_V2: 10,
-					INTERRUPTION: 11,
-					FLOWCONTROL: 12,
-					NOTIFY: 13,
-					OFFER_NOTICE: 14,
-					CALL_RELAY: 15,
-					MUTE: 16,
-					SCREEN_SHARE: 17,
-					UNKNOWN: 18,
-				},
-			],
-			mediaType: [
-				3,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messageType: [
-				4,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			notificationStanzaType: [6, 'string'],
-			offlineCount: [2, 'integer'],
-			receiptStanzaType: [5, 'string'],
-			stanzaType: [
-				1,
-				{
-					MESSAGE: 1,
-					RECEIPT: 2,
-					CALL: 3,
-					NOTIFICATION: 4,
-					APPDATA: 5,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'E2eMessageRecv',
-		id: 478,
-		props: {
-			agentEngagementType: [
-				15,
-				{
-					DIRECT_CHAT: 0,
-					INVOKED: 1,
-					MEMBER: 2,
-				},
-			],
-			botType: [
-				19,
-				{
-					UNKNOWN: 0,
-					METABOT: 1,
-					BOT_1P_BIZ: 2,
-					BOT_3P_BIZ: 3,
-				},
-			],
-			e2eCiphertextType: [
-				5,
-				{
-					MESSAGE: 0,
-					PREKEY_MESSAGE: 1,
-					SENDER_KEY_MESSAGE: 2,
-					MESSAGE_SECRET_MESSAGE: 3,
-				},
-			],
-			e2eCiphertextVersion: [6, 'integer'],
-			e2eDestination: [
-				4,
-				{
-					INDIVIDUAL: 0,
-					GROUP: 1,
-					LIST: 2,
-					STATUS: 3,
-					CHANNEL: 4,
-					INTEROP: 5,
-				},
-			],
-			e2eFailureReason: [
-				2,
-				{
-					INVALID_MESSAGE: 0,
-					LEGACY_MESSAGE: 1,
-					INVALID_VERSION: 2,
-					PRE_KEY_MESSAGE_MISSING_PRE_KEY: 3,
-					PRE_KEY_MESSAGE_INVALID_KEY: 4,
-					UNTRUSTED_IDENTITY: 5,
-					NO_SESSION_AVAILABLE: 6,
-					PLAINTEXT_BYTE_MISMATCH: 7,
-					UNKNOWN_CIPHERTEXT_TYPE: 8,
-					UNKNOWN_CIPHERTEXT_VERSION: 9,
-					INVALID_PADDING: 10,
-					INVALID_PROTOCOL_BUFFER: 11,
-					INVALID_NUMBER_OF_MESSAGE_TYPES: 12,
-					INVALID_IMAGE_FILE_LENGTH: 13,
-					INVALID_IMAGE_FILE_SHA256: 14,
-					INVALID_IMAGE_MEDIA_URL: 15,
-					INVALID_IMAGE_MEDIA_KEY: 16,
-					INVALID_IMAGE_MIME_TYPE: 17,
-					UNKNOWN_V2_TAGS: 18,
-					INVALID_EDIT_VERSION: 19,
-					INVALID_HSM_NAMESPACE: 20,
-					INVALID_HSM_ELEMENT: 21,
-					UNKNOWN_PROTOCOL_MESSAGE_TYPE: 22,
-					DUPLICATE_MESSAGE: 23,
-					FINGERPRINT_IDENTITY_MISMATCH: 24,
-					FINGERPRINT_VERSION_MISMATCH: 25,
-					INVALID_ARGUMENT: 26,
-					INVALID_KEY: 27,
-					INVALID_KEY_ID: 28,
-					INVALID_MAC: 29,
-					NO_MEMORY: 30,
-					STALE_KEY_EXCHANGE: 31,
-					VRF_SIGNATURE_VERIFICATION_FAILED: 32,
-					ERROR_MINIMUM_VALUE: 33,
-					ERROR_UNKNOWN: 34,
-					INVALID_BROADCAST_STANZA_ATTRIBUTE: 35,
-					INVALID_LIST_REPLY_MESSAGE: 36,
-					INVALID_LIST_REPLY_ROW_IDENTIFIER: 37,
-					INVALID_BUTTONS_RESPONSE_MESSAGE: 38,
-					INVALID_BUTTONS_RESPONSE_BUTTON_IDENTIFIER: 39,
-					INVALID_ORDER_MESSAGE: 40,
-					ERROR_CANCELLED: 41,
-					FUTURE_MESSAGE: 42,
-					INVALID_EMPTY_PROTOBUF_NOT_ALLOWED: 43,
-					SELF_SEND: 44,
-					INVALID_MEDIA_MIME_TYPE_TEMPLATE_MESSAGE: 45,
-					INVALID_MEDIA_ENC_HASH: 46,
-					INVALID_IDENTITY: 47,
-					PASSTHROUGH: 48,
-					NOT_IN_PENDING_DEVICES: 49,
-					EDIT_TYPE_AND_PROTOCOL_MISMATCH: 50,
-					DECRYPTION_FAILED: 51,
-					DESERIALIZE_INVALID_PROTO_FORMAT: 52,
-					DESERIALIZE_RATCHET_KEY_BAD_FORMAT: 53,
-					DESERIALIZE_PK_INVALID_PROTO_FORMAT: 54,
-					DESERIALZE_PK_KEY_BAD_FORMAT: 55,
-					TOO_MANY_MESSAGES_IN_FUTURE: 56,
-					EMPTY_VERSION_CONTENT_SUFFIX: 57,
-					CONTENT_EXCEEDED_EXPECTED_LENGTH: 58,
-					GRP_INVALID_PROTO_FORMAT: 59,
-					GRP_INVALID_KEY_FORMAT: 60,
-					GRP_VERSION_CONTENT_EMPTY: 61,
-					GRP_INVALID_VERSION_CONTENT_LENGTH: 62,
-					GRP_SENDER_KEY_INVALID_PROTO_FORMAT: 63,
-					GRP_SENDER_KEY_PROTO_ERROR: 64,
-					GRP_TOO_MANY_MESSAGES_IN_FUTURE: 65,
-					MISSING_MESSAGE_SECRET: 66,
-					MESSAGE_SECRET_INVALID: 67,
-					INVALID_REACTION_TEXT: 68,
-					UNSUPPORTED_MESSAGE_TYPE: 69,
-					UNSUPPORTED_IN_INTEROP: 70,
-					TARGET_MESSAGE_NOT_FOUND: 71,
-					STATUS_FROM_HOSTED_DEVICE_UNSUPPORTED: 72,
-					GROUP_MESSAGE_FROM_HOSTED_DEVICE_UNSUPPORTED: 73,
-					BROADCAST_FROM_HOSTED_DEVICE_UNSUPPORTED: 74,
-					LIVE_LOCATION_FROM_HOSTED_DEVICE_UNSUPPORTED: 75,
-					MESSAGE_TYPE_MISMATCH: 76,
-					ERROR_SESSION_STATE_UNACKED_PKMSG_GET_BASE_KEY: 77,
-					ERROR_SIGNAL_MESSAGE_GET_SENDER_RATCHET_KEY: 78,
-					ERROR_SESSION_STATE_GET_ROOT_KEY: 79,
-					ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY_PAIR: 80,
-					ERROR_SESSION_STATE_SET_SENDER_CHAIN_KEY: 81,
-					ERROR_SESSION_STATE_FIND_RECEIVER_CHAIN: 82,
-					ERROR_SESSION_RECORD_DESERIALIZE: 83,
-					ERROR_SENDER_KEY_STATE_REMOVE_SENDER_MESSAGE_KEY: 84,
-					ERROR_EMPTY_PLAINTEXT_DATA: 85,
-					ERROR_MAC_LEN_MISMATCH: 86,
-					ERROR_INVALID_MAC_LEN: 87,
-					ERROR_INVALID_SIGNATURE_LEN: 88,
-					ERROR_SENDER_KEY_LOAD_KEY: 89,
-					ERROR_FAST_RATCHET_SENDER_KEY_LOAD_KEY: 90,
-					ERROR_UNKNOWN_LOAD_KEY: 91,
-					ERROR_UNKNOWN_LOAD_SESSION: 92,
-					ERROR_SESSION_RECORD_GET_STATE: 93,
-					ERROR_SESSION_STATE_GET_SENDER_CHAIN_KEY: 94,
-					ERROR_INVALID_KEY_MATEIRAL_DATA_LEN: 95,
-					ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY: 96,
-					ERROR_SESSION_STATE_GET_LOCAL_IDENTITY_KEY: 97,
-					ERROR_SESSION_STATE_GET_REMOTE_IDENTITY_KEY: 98,
-				},
-			],
-			e2eSenderType: [
-				8,
-				{
-					MY_PRIMARY: 1,
-					OTHER_PRIMARY: 2,
-					MY_COMPANION: 3,
-					OTHER_COMPANION: 4,
-					MY_HOSTED_COMPANION: 5,
-					OTHER_HOSTED_COMPANION: 6,
-				},
-			],
-			e2eSuccessful: [1, 'boolean'],
-			editType: [
-				13,
-				{
-					NOT_EDITED: 0,
-					EDITED: 1,
-					SENDER_REVOKE: 2,
-					ADMIN_REVOKE: 3,
-				},
-			],
-			isHostedChat: [20, 'boolean'],
-			isLid: [11, 'boolean'],
-			localAddressingMode: [
-				16,
-				{
-					PN: 1,
-					LID: 2,
-				},
-			],
-			messageAddressingMode: [
-				17,
-				{
-					PN: 1,
-					LID: 2,
-				},
-			],
-			messageMediaType: [
-				7,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			offline: [9, 'boolean'],
-			retryCount: [3, 'integer'],
-			revokeType: [
-				10,
-				{
-					SENDER: 0,
-					ADMIN: 1,
-				},
-			],
-			serverAddressingMode: [
-				18,
-				{
-					PN: 1,
-					LID: 2,
-				},
-			],
-			stanzaType: [
-				14,
-				{
-					MESSAGE: 1,
-					RECEIPT: 2,
-					CALL: 3,
-					NOTIFICATION: 4,
-					APPDATA: 5,
-				},
-			],
-			typeOfGroup: [
-				12,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-		},
-		weight: 20,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ReceiptStanzaReceive',
-		id: 2496,
-		props: {
-			dbReadsCount: [12, 'integer'],
-			dbWritesCount: [13, 'integer'],
-			mediaType: [
-				2,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messageType: [
-				10,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			receiptAggregation: [
-				11,
-				{
-					NONE: 0,
-					MULTI_MESSAGES: 1,
-					MULTI_PARTICIPANTS: 2,
-				},
-			],
-			receiptStanzaDuration: [1, 'timer'],
-			receiptStanzaHasOrphaned: [6, 'boolean'],
-			receiptStanzaOfflineCount: [3, 'integer'],
-			receiptStanzaProcessedCount: [8, 'integer'],
-			receiptStanzaRetryVer: [5, 'integer'],
-			receiptStanzaStage: [
-				9,
-				{
-					OVERALL: 0,
-					PARSE: 1,
-					WAITING_TO_PROCESS: 2,
-					PROCESS: 3,
-					WAITING_TO_ACK: 5,
-					ACK: 4,
-				},
-			],
-			receiptStanzaTotalCount: [7, 'integer'],
-			receiptStanzaType: [4, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'CtwaActionBannerUnderstand',
-		id: 3586,
-		props: {
-			bannerIdentifier: [1, 'string'],
-			bannerLocale: [2, 'string'],
-			clientLocale: [3, 'string'],
-			hasLocalLink: [4, 'boolean'],
-			hasUniversalLink: [5, 'boolean'],
-			invalidLink: [6, 'string'],
-			lwiFlowIdentifier: [7, 'string'],
-			preferredLink: [
-				8,
-				{
-					LOCAL: 0,
-					UNIVERSAL: 1,
-				},
-			],
-			validLocale: [9, 'boolean'],
-			validNotification: [10, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 0,
-	},
-	{
-		name: 'WaOldCode',
-		id: 3940,
-		props: {
-			deviceId: [1, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'NotificationDelivery',
-		id: 3748,
-		props: {
-			clientMessageId: [1, 'string'],
-			notificationAction: [
-				2,
-				{
-					SHOW: 1,
-					REMOVE: 2,
-				},
-			],
-			notificationDeliveryT: [3, 'integer'],
-			notificationDestination: [
-				4,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					OTHER: 3,
-					CHANNEL: 4,
-					INTEROP: 5,
-				},
-			],
-			notificationId: [5, 'string'],
-			notificationSource: [
-				6,
-				{
-					PUSH_TRIGGERED: 1,
-					MAIN_APP: 2,
-					IN_APP: 3,
-				},
-			],
-			threadId: [7, 'string'],
-			uiNotificationType: [
-				8,
-				{
-					TEXT_MESSAGE: 1,
-					VOICE_MESSAGE: 2,
-					FILE_MESSAGE: 3,
-					PHOTO_MESSAGE: 4,
-					VIDEO_MESSAGE: 5,
-					MISSED_VOICE_CALL: 6,
-					MISSED_VIDEO_CALL: 7,
-					STICKER_MESSAGE: 8,
-					REACTION_MESSAGE: 9,
-					GROUP_INVITE_MESSAGE: 10,
-					REQUEST_MEDIA_REUPLOAD: 11,
-					WEB_CLIENT_LOGIN: 12,
-					BACKUP: 13,
-					KEEP_IN_CHAT: 14,
-					PAYMENT: 15,
-					POLL_MESSAGE: 16,
-					LOCATION_MESSAGE: 17,
-					WEB_PAGE_MESSAGE: 18,
-					FAILED_UPLOAD: 19,
-					GDPR_REPORT: 20,
-					INCOMING_VOICE_CALL: 21,
-					INCOMING_VIDEO_CALL: 22,
-					VIDEO_CALL_UPGRADE: 23,
-					WAFFLE: 24,
-					XPLAT_MIGRATION: 25,
-					OTHER: 26,
-					INVITE_JOINED: 27,
-					SCHEDULED_CALL_LOCAL_REMINDER: 28,
-					PTV_MESSAGE: 29,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdAppStateDirtyBits',
-		id: 2520,
-		props: {
-			dirtyBitsFalsePositive: [2, 'boolean'],
-		},
-		weight: 1000,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdAppStateOfflineNotifications',
-		id: 2602,
-		props: {
-			redundantCount: [1, 'integer'],
-		},
-		weight: 1000,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdRetryFromUnknownDevice',
-		id: 2178,
-		props: {
-			offline: [2, 'boolean'],
-			senderType: [
-				1,
-				{
-					PRIMARY: 1,
-					COMPANION: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'E2eRetryReject',
-		id: 3578,
-		props: {
-			messageType: [
-				1,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			msgRetryCount: [2, 'integer'],
-			retryRejectReason: [
-				3,
-				{
-					OTHER: 0,
-					DOUBLE_CHECKMARK: 1,
-					IDENTITY_CHANGE: 2,
-					MESSAGE_NOT_EXIST: 3,
-				},
-			],
-			retryRevoke: [4, 'boolean'],
-			senderDeviceType: [
-				5,
-				{
-					PRIMARY: 1,
-					COMPANION: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ClockSkewDifferenceT',
-		id: 3178,
-		props: {
-			clockSkewHourly: [1, 'integer'],
-		},
-		weight: 10000,
-		wamChannel: 'private',
-		privateStatsIdInt: 37887164,
-	},
-	{
-		name: 'MdBootstrapAppStateCriticalDataProcessing',
-		id: 3164,
-		props: {
-			bootstrapAppStateDataStage: [
-				1,
-				{
-					REQUEST_BUILT: 1,
-					RESPONSE_RECEIVED: 2,
-					RESPONSE_PARSED_VALID: 3,
-					MISSING_KEYS_REQUESTED: 4,
-					MISSING_KEYS_RECEIVED: 5,
-					MUTATIONS_DECRYPTED: 6,
-					ABOUT_TO_APPLY_MUTATIONS: 7,
-					APPLIED_MUTATIONS: 8,
-					PUSHNAME_APPLIED: 9,
-					PUSHNAME_INVALID: 10,
-					ENTERED_RETRY_MODE: 11,
-				},
-			],
-			mdBootstrapPayloadType: [
-				2,
-				{
-					CRITICAL: 1,
-					NON_CRITICAL: 2,
-				},
-			],
-			mdRegAttemptId: [3, 'string'],
-			mdSessionId: [4, 'string'],
-			mdTimestamp: [5, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcNativeUpsellCta',
-		id: 3934,
-		props: {
-			webcNativeUpsellCtaEventType: [
-				2,
-				{
-					IMPRESSION: 1,
-					CTA_BTN_CLICK: 2,
-					CTA_DISMISS: 3,
-				},
-			],
-			webcNativeUpsellCtaSource: [
-				1,
-				{
-					INTRO_PANEL: 1,
-					CHATLIST_DROPDOWN: 2,
-					BUTTERBAR: 3,
-					QR_BANNER: 4,
-					SEARCH_RESULTS: 5,
-					CALL_BTN_MODAL: 6,
-					CALL_BTN_MODAL_2: 7,
-					MISSED_CALL_MODAL: 8,
-					MISSED_CALL_MODAL_2: 9,
-					QR_BANNER_2: 10,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebDbTableUsage',
-		id: 5074,
-		props: {
-			offlineSessionId: [1, 'string'],
-			webScenario: [
-				2,
-				{
-					OFFLINE_RESUME: 0,
-				},
-			],
-			webTable: [3, 'string'],
-			webTableLogReason: [
-				4,
-				{
-					BASE: 0,
-					EXCEEDED_THRESHOLD: 1,
-				},
-			],
-			webTableReadCount: [5, 'integer'],
-			webTableWriteCount: [6, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebDbLoadFromVersionFailureNonAnonymous',
-		id: 4814,
-		props: {
-			webDbLoader: [
-				1,
-				{
-					MAIN: 1,
-					WEB_WORKER: 2,
-					SERVICE_WORKER: 3,
-				},
-			],
-			webDbName: [
-				2,
-				{
-					MODEL_STORAGE: 1,
-					FTS_STORAGE: 2,
-					JOBS_STORAGE: 3,
-					LOADGEN_STORAGE: 4,
-					LRU_MEDIA_STORAGE_IDB: 5,
-					OFFD_STORAGE: 6,
-					QPL_STORAGE: 7,
-					SIGNAL_STORAGE: 8,
-					WORKER_STORAGE: 9,
-					SW: 10,
-					WAWC: 11,
-					WAWC_DB_ENC: 12,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcJobInfo',
-		id: 3054,
-		props: {
-			jobName: [1, 'string'],
-			jobPriority: [2, 'string'],
-			jobResultType: [
-				5,
-				{
-					COMPLETED: 0,
-					ERROR: 1,
-					TIMEOUT: 2,
-					ABORTED: 3,
-				},
-			],
-			pendingJobsCount: [4, 'integer'],
-			scenario: [
-				3,
-				{
-					INITIAL_PAIRING: 0,
-					OFFLINE_RESUME: 1,
-					IDLE: 2,
-				},
-			],
-			webcJobAddedT: [6, 'integer'],
-			webcJobCompletedT: [8, 'integer'],
-			webcJobStartedT: [7, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcRawPlatforms',
-		id: 2416,
-		props: {
-			webcRawPlatform: [1, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebWamForceFlush',
-		id: 3264,
-		props: {},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChatMute',
-		id: 2280,
-		props: {
-			actionConducted: [
-				3,
-				{
-					MUTE: 1,
-					UNMUTE: 2,
-					EXPIRE: 3,
-				},
-			],
-			chatMuteNotificationChoice: [
-				5,
-				{
-					NO_NOTIFICATIONS_WHEN_MUTED: 1,
-					YES_NOTIFICATIONS_WHEN_MUTED: 2,
-				},
-			],
-			muteChatType: [
-				4,
-				{
-					ONE_ON_ONE: 1,
-					GROUP: 2,
-					CHANNEL: 3,
-					INTEROP: 4,
-				},
-			],
-			muteDuration: [1, 'timer'],
-			muteEntryPoint: [
-				6,
-				{
-					CHAT_LIST_SCREEN: 1,
-					CONTACT_INFO: 2,
-					CONVERSATION_SCREEN: 3,
-				},
-			],
-			muteGroupSize: [2, 'integer'],
-			waOfficialAccountName: [
-				7,
-				{
-					WHATSAPP_CHATPSA: 1,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChatPsaAction',
-		id: 3572,
-		props: {
-			messageMediaType: [
-				1,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			psaCampaignId: [4, 'string'],
-			psaMessageActionType: [
-				2,
-				{
-					SAVE: 1,
-					FORWARD: 2,
-					REACT: 3,
-					LINK_CLICK: 4,
-					MEDIA_PLAY: 5,
-					DELETE: 6,
-				},
-			],
-			psaMsgId: [5, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChatPsaRead',
-		id: 3574,
-		props: {
-			messageMediaType: [
-				1,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			psaCampaignId: [4, 'string'],
-			psaMsgId: [5, 'string'],
-			readEntryPoint: [
-				3,
-				{
-					CHAT_LIST: 1,
-					CHAT: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChatPsaRemove',
-		id: 3582,
-		props: {
-			lastReceivedMediaType: [
-				2,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			lastReceivedMessageTs: [4, 'timer'],
-			lastReceivedMsgId: [8, 'string'],
-			psaBlockReason: [
-				10,
-				{
-					OTHER: 0,
-					MESSAGES_ARENT_HELPFUL: 1,
-					TOO_MANY_MESSAGES: 2,
-					IT_LOOKS_SUSPICIOUS: 3,
-				},
-			],
-			psaCampaignId: [9, 'string'],
-			psaMessageRemoveAction: [
-				5,
-				{
-					BLOCK: 1,
-					UNBLOCK: 2,
-					ARCHIVE: 3,
-					UNARCHIVE: 4,
-					CLEAR: 5,
-					DELETE_ALL: 6,
-				},
-			],
-			psaMessageRemoveEntryPoint: [
-				6,
-				{
-					BLOCK_FROM_CONTACT_INFO: 1,
-					BLOCK_FROM_CHAT: 2,
-					UNBLOCK_FROM_CONTACT_INFO: 3,
-					UNBLOCK_FROM_CHAT: 4,
-					UNBLOCK_FROM_PRIVACY_SETTINGS: 5,
-					ARCHIVE_FROM_CHAT_LIST: 6,
-					ARCHIVE_FROM_DELETE_OPTION: 7,
-					UNARCHIVE_FROM_ARCHIVED_CHAT_LIST: 8,
-					CLEAR_FROM_CONTACT_INFO: 9,
-					CLEAR_FROM_CHAT_LIST: 10,
-					DELETE_ALL_FROM_CHAT_LIST: 11,
-					DELETE_ALL_FROM_CONTACT_INFO: 12,
-					DELETE_ALL_FROM_CONVERSATION: 13,
-					CLEAR_FROM_CONVERSATION: 14,
-					BLOCK_FROM_CONSENT_MODAL: 15,
-				},
-			],
-			waOfficialAccountName: [
-				7,
-				{
-					WHATSAPP_CHATPSA: 1,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ForwardSend',
-		id: 1728,
-		props: {
-			disappearingChatInitiator: [
-				21,
-				{
-					CHAT: 1,
-					INITIATED_BY_ME: 2,
-					INITIATED_BY_OTHER: 3,
-					CHAT_PICKER: 4,
-					BIZ_UPGRADE_FB_HOSTING: 5,
-				},
-			],
-			e2eCiphertextType: [
-				12,
-				{
-					MESSAGE: 0,
-					PREKEY_MESSAGE: 1,
-					SENDER_KEY_MESSAGE: 2,
-					MESSAGE_SECRET_MESSAGE: 3,
-				},
-			],
-			e2eCiphertextVersion: [11, 'integer'],
-			ephemeralityDuration: [18, 'integer'],
-			ephemeralityInitiator: [
-				24,
-				{
-					INITIATED_BY_ME: 1,
-					INITIATED_BY_OTHER: 2,
-					BIZ_UPGRADE_FB_HOSTING: 3,
-				},
-			],
-			ephemeralityTriggerAction: [
-				25,
-				{
-					UNKNOWN: 0,
-					CHAT_SETTINGS: 1,
-					ACCOUNT_SETTINGS: 2,
-					BULK_CHANGE: 3,
-					BIZ_SUPPORTS_FB_HOSTING: 4,
-				},
-			],
-			fastForwardEnabled: [5, 'boolean'],
-			isForwardedForward: [22, 'boolean'],
-			isFrequentlyForwarded: [14, 'boolean'],
-			mediaCaptionPresent: [10, 'boolean'],
-			messageBizType: [
-				26,
-				{
-					NOT_BIZ_MSG: 0,
-					API_MARKETING: 1,
-					API_UTILITY: 2,
-					OTHER_API_BIZ_MSG: 3,
-					SMB_BIZ_MSG: 4,
-				},
-			],
-			messageForwardAgeT: [4, 'timer'],
-			messageIsFanout: [6, 'boolean'],
-			messageIsFastForward: [3, 'boolean'],
-			messageIsInternational: [9, 'boolean'],
-			messageMediaType: [
-				2,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messageSendT: [13, 'timer'],
-			messageType: [
-				1,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			receiverDefaultDisappearingDuration: [20, 'integer'],
-			resendCount: [8, 'integer'],
-			retryCount: [7, 'integer'],
-			senderDefaultDisappearingDuration: [19, 'integer'],
-			typeOfGroup: [
-				23,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-			wouldBeFrequentlyForwardedAt3: [16, 'boolean'],
-			wouldBeFrequentlyForwardedAt4: [17, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'NonMessagePeerDataMediaUpload',
-		id: 3902,
-		props: {
-			peerDataErrorCount: [1, 'integer'],
-			peerDataExistingDataNoUploadCount: [2, 'integer'],
-			peerDataNotFoundCount: [3, 'integer'],
-			peerDataRequestCount: [4, 'integer'],
-			peerDataRequestSessionId: [5, 'string'],
-			peerDataRequestType: [
-				6,
-				{
-					UPLOAD_STICKER: 0,
-					SEND_RECENT_STICKER_BOOTSTRAP: 1,
-					GENERAL_LINK_PREVIEW: 2,
-					HISTORY_SYNC_ON_DEMAND: 3,
-					PLACEHOLDER_MESSAGE_RESEND: 4,
-				},
-			],
-			peerDataResponseResult: [
-				8,
-				{
-					SUCCESS: 1,
-					OTHER_ERROR: 2,
-					REQUEST_TARGET_NOT_FOUND: 3,
-					REQUEST_INVALID: 4,
-					FAIL_TO_UPLOAD: 5,
-					FAIL_TO_SEND_RESPONSE: 6,
-					REQUEST_TOO_OLD: 7,
-				},
-			],
-			peerDataSuccessInlineNoUploadCount: [9, 'integer'],
-			peerDataSuccessUploadCount: [7, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'NonMessagePeerDataOperationResponse',
-		id: 3904,
-		props: {
-			peerDataErrorCount: [1, 'integer'],
-			peerDataNotFoundCount: [2, 'integer'],
-			peerDataRequestSessionId: [3, 'string'],
-			peerDataRequestType: [
-				4,
-				{
-					UPLOAD_STICKER: 0,
-					SEND_RECENT_STICKER_BOOTSTRAP: 1,
-					GENERAL_LINK_PREVIEW: 2,
-					HISTORY_SYNC_ON_DEMAND: 3,
-					PLACEHOLDER_MESSAGE_RESEND: 4,
-				},
-			],
-			peerDataResponseApplyResult: [
-				8,
-				{
-					SUCCESS: 1,
-					OTHER_ERROR: 2,
-					INVALID_RESPONSE: 3,
-					FAIL_TO_DOWNLOAD: 4,
-					REQUEST_TIMEOUT: 5,
-				},
-			],
-			peerDataResponseCount: [5, 'integer'],
-			peerDataSuccessProcessCount: [6, 'integer'],
-			peerDataSuccessResponseCount: [7, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'NonMessagePeerDataRequest',
-		id: 3906,
-		props: {
-			peerDataRequestCount: [1, 'integer'],
-			peerDataRequestSessionId: [2, 'string'],
-			peerDataRequestType: [
-				3,
-				{
-					UPLOAD_STICKER: 0,
-					SEND_RECENT_STICKER_BOOTSTRAP: 1,
-					GENERAL_LINK_PREVIEW: 2,
-					HISTORY_SYNC_ON_DEMAND: 3,
-					PLACEHOLDER_MESSAGE_RESEND: 4,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcLinkPreviewResponseHandle',
-		id: 3860,
-		props: {
-			didRespondHqPreview: [5, 'boolean'],
-			isPreviewSuccess: [2, 'boolean'],
-			previewDurationMs: [4, 'integer'],
-			previewSessionId: [3, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdBootstrapHistoryDataDownloaded',
-		id: 2296,
-		props: {
-			historySyncChunkOrder: [15, 'integer'],
-			historySyncStageProgress: [14, 'integer'],
-			mdBootstrapChatsCount: [6, 'integer'],
-			mdBootstrapHistoryPayloadType: [
-				13,
-				{
-					INITIAL: 1,
-					RECENT_HISTORY: 2,
-					FULL_HISTORY: 3,
-					PUSHNAME: 4,
-					STATUS_V3: 5,
-					NON_BLOCKING_DATA: 6,
-					ON_DEMAND: 7,
-				},
-			],
-			mdBootstrapMessagesCount: [5, 'integer'],
-			mdBootstrapPayloadSize: [4, 'integer'],
-			mdBootstrapPayloadType: [
-				2,
-				{
-					CRITICAL: 1,
-					NON_CRITICAL: 2,
-				},
-			],
-			mdBootstrapStepDuration: [7, 'integer'],
-			mdBootstrapStepResult: [
-				8,
-				{
-					SUCCESS: 1,
-					FAILURE: 2,
-				},
-			],
-			mdHsOldestMessageTimestamp: [11, 'integer'],
-			mdRegAttemptId: [12, 'string'],
-			mdSessionId: [1, 'string'],
-			mdStorageQuotaBytes: [9, 'integer'],
-			mdStorageQuotaUsedBytes: [10, 'integer'],
-			mdTimestamp: [3, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdBootstrapHistoryDataStartDownloading',
-		id: 4650,
-		props: {
-			historySyncChunkOrder: [1, 'integer'],
-			historySyncStageProgress: [2, 'integer'],
-			mdBootstrapHistoryPayloadType: [
-				3,
-				{
-					INITIAL: 1,
-					RECENT_HISTORY: 2,
-					FULL_HISTORY: 3,
-					PUSHNAME: 4,
-					STATUS_V3: 5,
-					NON_BLOCKING_DATA: 6,
-					ON_DEMAND: 7,
-				},
-			],
-			mdBootstrapPayloadSize: [4, 'integer'],
-			mdBootstrapPayloadType: [
-				5,
-				{
-					CRITICAL: 1,
-					NON_CRITICAL: 2,
-				},
-			],
-			mdBootstrapStepDuration: [6, 'integer'],
-			mdSessionId: [7, 'string'],
-			mdTimestamp: [8, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'E2eMessageSend',
-		id: 476,
-		props: {
-			agentEngagementType: [
-				15,
-				{
-					DIRECT_CHAT: 0,
-					INVOKED: 1,
-					MEMBER: 2,
-				},
-			],
-			botType: [
-				17,
-				{
-					UNKNOWN: 0,
-					METABOT: 1,
-					BOT_1P_BIZ: 2,
-					BOT_3P_BIZ: 3,
-				},
-			],
-			e2eCiphertextType: [
-				5,
-				{
-					MESSAGE: 0,
-					PREKEY_MESSAGE: 1,
-					SENDER_KEY_MESSAGE: 2,
-					MESSAGE_SECRET_MESSAGE: 3,
-				},
-			],
-			e2eCiphertextVersion: [6, 'integer'],
-			e2eDestination: [
-				4,
-				{
-					INDIVIDUAL: 0,
-					GROUP: 1,
-					LIST: 2,
-					STATUS: 3,
-					CHANNEL: 4,
-					INTEROP: 5,
-				},
-			],
-			e2eFailureReason: [
-				2,
-				{
-					INVALID_MESSAGE: 0,
-					LEGACY_MESSAGE: 1,
-					INVALID_VERSION: 2,
-					PRE_KEY_MESSAGE_MISSING_PRE_KEY: 3,
-					PRE_KEY_MESSAGE_INVALID_KEY: 4,
-					UNTRUSTED_IDENTITY: 5,
-					NO_SESSION_AVAILABLE: 6,
-					PLAINTEXT_BYTE_MISMATCH: 7,
-					UNKNOWN_CIPHERTEXT_TYPE: 8,
-					UNKNOWN_CIPHERTEXT_VERSION: 9,
-					INVALID_PADDING: 10,
-					INVALID_PROTOCOL_BUFFER: 11,
-					INVALID_NUMBER_OF_MESSAGE_TYPES: 12,
-					INVALID_IMAGE_FILE_LENGTH: 13,
-					INVALID_IMAGE_FILE_SHA256: 14,
-					INVALID_IMAGE_MEDIA_URL: 15,
-					INVALID_IMAGE_MEDIA_KEY: 16,
-					INVALID_IMAGE_MIME_TYPE: 17,
-					UNKNOWN_V2_TAGS: 18,
-					INVALID_EDIT_VERSION: 19,
-					INVALID_HSM_NAMESPACE: 20,
-					INVALID_HSM_ELEMENT: 21,
-					UNKNOWN_PROTOCOL_MESSAGE_TYPE: 22,
-					DUPLICATE_MESSAGE: 23,
-					FINGERPRINT_IDENTITY_MISMATCH: 24,
-					FINGERPRINT_VERSION_MISMATCH: 25,
-					INVALID_ARGUMENT: 26,
-					INVALID_KEY: 27,
-					INVALID_KEY_ID: 28,
-					INVALID_MAC: 29,
-					NO_MEMORY: 30,
-					STALE_KEY_EXCHANGE: 31,
-					VRF_SIGNATURE_VERIFICATION_FAILED: 32,
-					ERROR_MINIMUM_VALUE: 33,
-					ERROR_UNKNOWN: 34,
-					INVALID_BROADCAST_STANZA_ATTRIBUTE: 35,
-					INVALID_LIST_REPLY_MESSAGE: 36,
-					INVALID_LIST_REPLY_ROW_IDENTIFIER: 37,
-					INVALID_BUTTONS_RESPONSE_MESSAGE: 38,
-					INVALID_BUTTONS_RESPONSE_BUTTON_IDENTIFIER: 39,
-					INVALID_ORDER_MESSAGE: 40,
-					ERROR_CANCELLED: 41,
-					FUTURE_MESSAGE: 42,
-					INVALID_EMPTY_PROTOBUF_NOT_ALLOWED: 43,
-					SELF_SEND: 44,
-					INVALID_MEDIA_MIME_TYPE_TEMPLATE_MESSAGE: 45,
-					INVALID_MEDIA_ENC_HASH: 46,
-					INVALID_IDENTITY: 47,
-					PASSTHROUGH: 48,
-					NOT_IN_PENDING_DEVICES: 49,
-					EDIT_TYPE_AND_PROTOCOL_MISMATCH: 50,
-					DECRYPTION_FAILED: 51,
-					DESERIALIZE_INVALID_PROTO_FORMAT: 52,
-					DESERIALIZE_RATCHET_KEY_BAD_FORMAT: 53,
-					DESERIALIZE_PK_INVALID_PROTO_FORMAT: 54,
-					DESERIALZE_PK_KEY_BAD_FORMAT: 55,
-					TOO_MANY_MESSAGES_IN_FUTURE: 56,
-					EMPTY_VERSION_CONTENT_SUFFIX: 57,
-					CONTENT_EXCEEDED_EXPECTED_LENGTH: 58,
-					GRP_INVALID_PROTO_FORMAT: 59,
-					GRP_INVALID_KEY_FORMAT: 60,
-					GRP_VERSION_CONTENT_EMPTY: 61,
-					GRP_INVALID_VERSION_CONTENT_LENGTH: 62,
-					GRP_SENDER_KEY_INVALID_PROTO_FORMAT: 63,
-					GRP_SENDER_KEY_PROTO_ERROR: 64,
-					GRP_TOO_MANY_MESSAGES_IN_FUTURE: 65,
-					MISSING_MESSAGE_SECRET: 66,
-					MESSAGE_SECRET_INVALID: 67,
-					INVALID_REACTION_TEXT: 68,
-					UNSUPPORTED_MESSAGE_TYPE: 69,
-					UNSUPPORTED_IN_INTEROP: 70,
-					TARGET_MESSAGE_NOT_FOUND: 71,
-					STATUS_FROM_HOSTED_DEVICE_UNSUPPORTED: 72,
-					GROUP_MESSAGE_FROM_HOSTED_DEVICE_UNSUPPORTED: 73,
-					BROADCAST_FROM_HOSTED_DEVICE_UNSUPPORTED: 74,
-					LIVE_LOCATION_FROM_HOSTED_DEVICE_UNSUPPORTED: 75,
-					MESSAGE_TYPE_MISMATCH: 76,
-					ERROR_SESSION_STATE_UNACKED_PKMSG_GET_BASE_KEY: 77,
-					ERROR_SIGNAL_MESSAGE_GET_SENDER_RATCHET_KEY: 78,
-					ERROR_SESSION_STATE_GET_ROOT_KEY: 79,
-					ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY_PAIR: 80,
-					ERROR_SESSION_STATE_SET_SENDER_CHAIN_KEY: 81,
-					ERROR_SESSION_STATE_FIND_RECEIVER_CHAIN: 82,
-					ERROR_SESSION_RECORD_DESERIALIZE: 83,
-					ERROR_SENDER_KEY_STATE_REMOVE_SENDER_MESSAGE_KEY: 84,
-					ERROR_EMPTY_PLAINTEXT_DATA: 85,
-					ERROR_MAC_LEN_MISMATCH: 86,
-					ERROR_INVALID_MAC_LEN: 87,
-					ERROR_INVALID_SIGNATURE_LEN: 88,
-					ERROR_SENDER_KEY_LOAD_KEY: 89,
-					ERROR_FAST_RATCHET_SENDER_KEY_LOAD_KEY: 90,
-					ERROR_UNKNOWN_LOAD_KEY: 91,
-					ERROR_UNKNOWN_LOAD_SESSION: 92,
-					ERROR_SESSION_RECORD_GET_STATE: 93,
-					ERROR_SESSION_STATE_GET_SENDER_CHAIN_KEY: 94,
-					ERROR_INVALID_KEY_MATEIRAL_DATA_LEN: 95,
-					ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY: 96,
-					ERROR_SESSION_STATE_GET_LOCAL_IDENTITY_KEY: 97,
-					ERROR_SESSION_STATE_GET_REMOTE_IDENTITY_KEY: 98,
-				},
-			],
-			e2eReceiverType: [
-				8,
-				{
-					PRIMARY: 1,
-					COMPANION: 2,
-				},
-			],
-			e2eSuccessful: [1, 'boolean'],
-			editType: [
-				14,
-				{
-					NOT_EDITED: 0,
-					EDITED: 1,
-					SENDER_REVOKE: 2,
-					ADMIN_REVOKE: 3,
-				},
-			],
-			encRetryCount: [9, 'integer'],
-			isLid: [12, 'boolean'],
-			localAddressingMode: [
-				16,
-				{
-					PN: 1,
-					LID: 2,
-				},
-			],
-			messageIsInvisible: [10, 'boolean'],
-			messageMediaType: [
-				7,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			retryCount: [3, 'integer'],
-			revokeType: [
-				11,
-				{
-					SENDER: 0,
-					ADMIN: 1,
-				},
-			],
-			typeOfGroup: [
-				13,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PrekeysDepletion',
-		id: 3014,
-		props: {
-			deviceSizeBucket: [
-				3,
-				{
-					LT32: 1,
-					LT64: 2,
-					LT128: 3,
-					LT256: 4,
-					LT512: 5,
-					LT1000: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			messageType: [
-				2,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			prekeysFetchReason: [
-				1,
-				{
-					SEND_MESSAGE: 1,
-					GET_VNAME_CERTIFICATE: 2,
-					SEND_LIVE_LOCATION_RETRY: 3,
-					SEND_LIVE_LOCATION_KEY: 4,
-					SEND_PEER_MESSAGE: 5,
-					MULTI_DEVICE_CALL: 6,
-					CALL_PEER_E2E_FAIL: 7,
-					IDENTITY_CHANGE_NOTIFICATION: 8,
-					BACK_OFF: 9,
-					USER_INTENT_PREFETCH: 10,
-					RESEND_MESSAGE: 11,
-					RETRY_MESSAGE: 12,
-					USER_INTENT_STATUS_PREFETCH: 13,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'AndroidMessageSendPerf',
-		id: 1994,
-		props: {
-			appRestart: [16, 'boolean'],
-			bucketedSenderKeyDistributionCountPercentage: [32, 'integer'],
-			bucketedSenderKeyDistributionHashTime: [35, 'integer'],
-			deviceCount: [36, 'integer'],
-			deviceSizeBucket: [
-				26,
-				{
-					LT32: 1,
-					LT64: 2,
-					LT128: 3,
-					LT256: 4,
-					LT512: 5,
-					LT1000: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			durationAbs: [11, 'timer'],
-			durationRelative: [12, 'timer'],
-			durationT: [1, 'timer'],
-			editType: [
-				42,
-				{
-					NOT_EDITED: 0,
-					EDITED: 1,
-					SENDER_REVOKE: 2,
-					ADMIN_REVOKE: 3,
-				},
-			],
-			fetchPrekeys: [15, 'boolean'],
-			fetchPrekeysPercentage: [21, 'integer'],
-			groupSizeBucket: [
-				17,
-				{
-					SMALL: 1,
-					MEDIUM: 2,
-					LARGE: 3,
-					EXTRA_LARGE: 4,
-					XX_LARGE: 5,
-					XXX_LARGE: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			isDirectedMessage: [33, 'boolean'],
-			isE2eBackfill: [27, 'boolean'],
-			isLid: [41, 'boolean'],
-			isMessageFanout: [9, 'boolean'],
-			isMessageForward: [8, 'boolean'],
-			isRevokeMessage: [24, 'boolean'],
-			isViewOnce: [29, 'boolean'],
-			jobsInQueue: [18, 'integer'],
-			mediaType: [
-				3,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messageIsFirstUserMessage: [30, 'boolean'],
-			messageIsInvisible: [31, 'boolean'],
-			messageType: [
-				4,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			networkWasDisconnected: [14, 'boolean'],
-			participantCount: [37, 'integer'],
-			phoneCores: [34, 'integer'],
-			prekeysEligibleForPrallelProcessing: [28, 'boolean'],
-			receiverDeviceCount: [39, 'integer'],
-			sendCount: [13, 'integer'],
-			sendRetryCount: [10, 'integer'],
-			sendStage: [
-				2,
-				{
-					CLIENT_RENDERED: 1,
-					CLIENT_SAVED: 2,
-					CLIENT_WRITTEN_WIRE: 3,
-					CLIENT_QUEUED: 4,
-					CLIENT_WAITING_TO_ENCRYPT: 5,
-					CLIENT_READY_TO_SEND: 6,
-					CLIENT_ENCRYPT: 7,
-					CLIENT_PREKEYS_FETCH: 8,
-				},
-			],
-			senderDeviceCount: [40, 'integer'],
-			senderKeyDistributionCountPercentage: [23, 'integer'],
-			sessionsMissingWhenComposing: [25, 'boolean'],
-			targetDeviceGroupSizeBucket: [
-				20,
-				{
-					SMALL: 1,
-					MEDIUM: 2,
-					LARGE: 3,
-					EXTRA_LARGE: 4,
-					XX_LARGE: 5,
-					XXX_LARGE: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			threadsInExecution: [19, 'integer'],
-			typeOfGroup: [
-				38,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-		},
-		weight: 2000,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdDeviceSyncAck',
-		id: 2180,
-		props: {
-			chatType: [
-				1,
-				{
-					OTHER: 0,
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					STATUS: 3,
-					BROADCAST: 4,
-					CHANNEL: 5,
-				},
-			],
-			isLid: [3, 'boolean'],
-			localAddressingMode: [
-				5,
-				{
-					PN: 1,
-					LID: 2,
-				},
-			],
-			revoke: [2, 'boolean'],
-			serverAddressingMode: [
-				6,
-				{
-					PN: 1,
-					LID: 2,
-				},
-			],
-			typeOfGroup: [
-				4,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'AdvMetadataCreationFailure',
-		id: 3048,
-		props: {
-			advMetadataIsMe: [1, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdGroupParticipantMissAck',
-		id: 4146,
-		props: {
-			groupSizeBucket: [
-				1,
-				{
-					SMALL: 1,
-					MEDIUM: 2,
-					LARGE: 3,
-					EXTRA_LARGE: 4,
-					XX_LARGE: 5,
-					XXX_LARGE: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			isLid: [2, 'boolean'],
-			messageIsRevoke: [3, 'boolean'],
-			participantAddCount: [4, 'integer'],
-			participantRemoveCount: [5, 'integer'],
-			typeOfGroup: [
-				6,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'CrashLog',
-		id: 494,
-		props: {
-			crashContext: [3, 'string'],
-			crashCount: [5, 'integer'],
-			crashReason: [2, 'string'],
-			crashType: [
-				6,
-				{
-					CRASH: 0,
-					OOM: 1,
-					MAIN_THREAD_STALL_3_SECONDS: 15,
-					MAIN_THREAD_STALL_30_SECONDS: 2,
-					MAIN_THREAD_STALL_60_SECONDS: 16,
-					MAIN_THREAD_STALL_POKED: 17,
-					MAIN_THREAD_STALL_DEBUG: 3,
-					AUDIO_TRANSCODING_ERROR: 4,
-					VIDEO_TRANSCODING_ERROR: 5,
-					ANR: 6,
-					CRITICAL_EVENT: 7,
-					UNHANDLED_EXCEPTION: 8,
-					APP_CRASH: 9,
-					NATIVE_CRASH: 10,
-					UFAD: 11,
-					EXPERIMENTAL_UFAD_DETECTION: 12,
-					UX_BREAKING_EXCEPTION: 13,
-					UX_GRACEFUL_RECOVERY_EXCEPTION: 14,
-				},
-			],
-		},
-		weight: 100,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcPageResume',
-		id: 884,
-		props: {
-			webcResumeCount: [1, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcPhoneDisconnected',
-		id: 878,
-		props: {
-			webcPhoneBbarShownT: [2, 'timer'],
-			webcPhoneDisconnectedT: [1, 'timer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdSyncdDogfoodingFeatureUsage',
-		id: 3016,
-		props: {
-			mdSyncdDogfoodingFeature: [
-				1,
-				{
-					PIN_MUTATION: 1,
-					UNPIN_4TH_CHAT_MUTATION: 2,
-					DELETE_MUTATION: 3,
-					CLEAR_CHAT_REMOVE_STARRED_MUTATION: 4,
-					CLEAR_CHAT_KEEP_STARRED_MUTATION: 5,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdFatalError',
-		id: 2304,
-		props: {
-			collection: [
-				2,
-				{
-					REGULAR: 1,
-					REGULAR_LOW: 2,
-					REGULAR_HIGH: 3,
-					CRITICAL_BLOCK: 4,
-					CRITICAL_UNBLOCK_LOW: 5,
-				},
-			],
-			currentPrimaryAppVersion: [14, 'string'],
-			daysSinceLastPeriodicSync: [11, 'integer'],
-			didBootstrapFromSnapshot: [38, 'boolean'],
-			hoursSinceFirstFiniteFailure: [12, 'integer'],
-			isBootstrap: [3, 'boolean'],
-			isFatal: [16, 'boolean'],
-			isPatchSenderPrimary: [23, 'boolean'],
-			isPreviousPatchAnIncomingPatch: [24, 'boolean'],
-			isPreviousPatchSenderPrimary: [25, 'boolean'],
-			isSenderIndexSameAsPreviousSenderIndex: [39, 'boolean'],
-			isThereAnotherSyncdCompanion: [40, 'boolean'],
-			isWebLthashConsistent: [17, 'boolean'],
-			macFatalCollectionNameMismatch: [18, 'boolean'],
-			macFatalCurrentLthashMismatch: [19, 'boolean'],
-			macFatalDidPreviousPatchFailPostSaveValidation: [26, 'boolean'],
-			macFatalDidUseMacFetchFallback: [36, 'boolean'],
-			macFatalFirstTwoBytesFromAHashOfSnapshotMacKeyMismatch: [20, 'boolean'],
-			macFatalHasMissingRemove: [37, 'boolean'],
-			macFatalNewLthashMismatch: [21, 'boolean'],
-			macFatalNewLthashSubtractMismatch: [27, 'boolean'],
-			macFatalNumberAddMismatch: [28, 'boolean'],
-			macFatalNumberHasOverrideMutation: [29, 'boolean'],
-			macFatalNumberNumAddMutation: [30, 'integer'],
-			macFatalNumberNumRemoveMutation: [31, 'integer'],
-			macFatalNumberOverrideMismatch: [32, 'boolean'],
-			macFatalNumberRemoveMismatch: [33, 'boolean'],
-			macFatalPatchVersionMismatch: [22, 'boolean'],
-			macFatalPreviousPatchNewLthashToCurrentPatchCurrentLthash: [34, 'boolean'],
-			macFatalSenderCurrentLthashToLocalCalculatedCurrentLthashMismatch: [35, 'boolean'],
-			mailboxAgeDays: [13, 'integer'],
-			mdFatalErrorCode: [
-				1,
-				{
-					TOO_MANY_INTERNAL_SERVER_ERRORS_IN_7D: 1,
-					SERVER_DATA_MISMATCH: 2,
-					PROTOBUF_DESERIALIZATION_FAILED: 3,
-					EXTERNAL_PATCH_EXPIRED: 4,
-					MISSING_OR_EMPTY_INDEX: 5,
-					SAME_INDEX_FOR_MULTIPLE_MUTATIONS_IN_PATCH: 6,
-					DECRYPTION_FAILED: 7,
-					MISSING_PATCH_VERSION: 8,
-					DUPLICATE_PATCH_VERSION_IN_COLLECTION: 9,
-					ENCRYPTION_FAILED: 10,
-					MISSING_MUTATION_VERSION: 11,
-					MISSING_MUTATION_VALUE: 12,
-					INVALID_MUTATION_INDEX: 13,
-					PATCH_WITH_BOTH_INLINE_AND_EXTERNAL_MUTATIONS: 14,
-					MISSING_MUTATION_OPERATION: 15,
-					MISSING_MUTATION_RECORD: 16,
-					MISSING_MUTATION_KEY_ID: 17,
-					PATCH_PROTOBUF_DESERIALIZATION_FAILED: 18,
-					ACTION_DATA_PROTOBUF_DESERIALIZATION_FAILED: 19,
-					MISSING_MUTATION_INDEX: 20,
-					MISSING_ACTION_INDEX: 21,
-					INVALID_ACTION_INDEX: 22,
-					MISSING_ACTION_VALUE: 23,
-					MISSING_ACTION_VERSION: 24,
-					MISSING_ACTION_TIMESTAMP: 25,
-					MUTATIONS_PROTOBUF_DESERIALIZATION_FAILED: 26,
-					MUTATIONS_PROTOBUF_SERIALIZATION_FAILED: 27,
-					PATCH_PROTOBUF_SERIALIZATION_FAILED: 28,
-					ACTION_DATA_PROTOBUF_SERIALIZATION_FAILED: 29,
-					MISSING_KEY_ON_ALL_CLIENTS: 30,
-					TIMEOUT_WHILE_WAITING_FOR_MISSING_KEY: 31,
-					MAC_MISMATCH_SNAPSHOT: 33,
-					MAC_MISMATCH_PATCH: 34,
-					DB_STORE_NOT_READY: 35,
-					TERMINAL_PATCH_MISSING_DATA: 36,
-					TERMINAL_PATCH_DESERIALIZATION_ERROR: 37,
-					TERMINAL_PATCH_UNKNOWN: 38,
-					CYCLIC_MUTATION_DEPENDENCY_IN_PATCH: 39,
-					MISSING_SNAPSHOT_VERSION: 45,
-					MISSING_SNAPSHOT_MAC: 46,
-					MISSING_PATCH_SNAPSHOT_MAC: 47,
-					MISSING_PATCH_MAC: 48,
-					MISSING_EXTERNAL_BLOB_REFERENCE_MEDIA_KEY: 49,
-					MISSING_EXTERNAL_BLOB_REFERENCE_DIRECT_PATH: 50,
-					MISSING_EXTERNAL_BLOB_REFERENCE_FILE_SHA256: 51,
-					MISSING_EXTERNAL_BLOB_REFERENCE_FILE_ENC_SHA256: 52,
-					INVALID_KEY_SHARE_KEY_ID: 53,
-					MISSING_PATCH_KEY_ID: 56,
-					INVALID_KEY_SHARE_KEY_DATA: 57,
-					SNAPSHOT_EXPIRED: 58,
-					MISSING_SNAPSHOT_KEY_ID: 59,
-					SNAPSHOT_MAC_MISMATCH_IN_PATCH: 60,
-					SNAPSHOT_MAC_MISMATCH_IN_SNAPSHOT: 61,
-					XMPP_BAD_REQUEST_FOR_COLLECTION: 62,
-					XMPP_NOT_FOUND_FOR_COLLECTION: 63,
-					XMPP_BAD_REQUEST_GLOBAL_ERROR: 64,
-					XMPP_NOT_FOUND_GLOBAL_ERROR: 65,
-					XMPP_BAD_METHOD_GLOBAL_ERROR: 66,
-					XMPP_NOT_ACCEPTABLE_GLOBAL_ERROR: 67,
-					SAME_INDEX_FOR_MULTIPLE_MUTATIONS_IN_SNAPSHOT: 68,
-					EXTERNAL_BLOB_REFERENCE_PROTOBUF_DESERIALIZATION_FAILED: 69,
-					SNAPSHOT_PROTOBUF_DESERIALIZATION_FAILED: 70,
-					REQUESTING_MISSING_KEY_WITH_NO_CLIENTS: 71,
-					DB_STORE_NOT_READY_LOW_DISK_SPACE: 72,
-					SERVER_DID_NOT_SEND_ALL_PATCHES: 73,
-					SERVER_SENT_EARLIER_PATCH: 74,
-					MISSING_KEY_FOR_MUTATION_IN_LOCAL_SNAPSHOT: 75,
-					MISSING_ACTIVE_KEY_AFTER_ROTATION: 76,
-					MISSING_ACTIVE_KEY_FOR_ENCRYPTION: 77,
-					MISSING_CURRENT_EPOCH_FOR_ACTIVE_KEY_VALIDATION: 78,
-					SAME_INDEX_FOR_MULTIPLE_MUTATIONS_IN_OUTGOING_PATCH: 79,
-					INVALID_SNAPSHOT_RECORDS: 80,
-					MISSING_EXTERNAL_BLOB_REFERENCE_HANDLE: 81,
-					INVALID_EXTERNAL_BLOB_REFERENCE_UPLOADED: 82,
-					INVALID_PATCH_KEY_ID_SIZE: 83,
-					INVALID_PATCH_MAC_SIZE: 84,
-					INVALID_PATCH_SNAPSHOT_MAC_SIZE: 85,
-					INVALID_COLLECTION_SNAPSHOT_HASH_SIZE: 86,
-					MISSING_COLLECTION_SNAPSHOT_HASH: 87,
-					INVALID_PATCH_KEY_ID_DEVICE_ID: 88,
-					INVALID_PATCH_KEY_ID_EPOCH: 89,
-					DECRYPTION_FAILED_KEY_ID_MISMATCH: 90,
-					DECRYPTION_FAILED_VALUE_MAC_MISMATCH: 91,
-					DECRYPTION_FAILED_INDEX_MAC_MISMATCH: 92,
-					EXTERNAL_PATCH_MISSING_BLOB: 93,
-					COLLECTION_PULL_REQUEST_RECEIVED_PUSH_RESPONSE_WITH_UPDATED_VERSION: 94,
-					COLLECTION_PUSH_REQUEST_RECEIVED_RESPONSE_WITH_VERSION_MISMATCH: 95,
-					MMS_ERROR_INVALID_FILEHASH: 96,
-					UNKNOWN: 97,
-					MALFORMED_MUTATION_CLEAR_CHAT: 98,
-					MALFORMED_MUTATION_DELETE_CHAT: 99,
-					FAILED_MUTATION_CLEAR_CHAT: 100,
-					FAILED_MUTATION_DELETE_CHAT: 101,
-					CHAT_DB_CORRUPTION: 102,
-				},
-			],
-			patchSnapshotMutationCount: [9, 'integer'],
-			patchVersion: [5, 'integer'],
-			sessionStartPrimaryAppVersion: [15, 'string'],
-			sourceType: [
-				10,
-				{
-					SNAPSHOT: 1,
-					EXTERNAL_PATCH: 2,
-					INLINE_PATCH: 3,
-				},
-			],
-			timeSincePairingMs: [6, 'integer'],
-			timeSinceRefreshMs: [7, 'integer'],
-			timeSinceTabTakeoverMs: [8, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MediaUpload2',
-		id: 1588,
-		props: {
-			batchSize: [57, 'integer'],
-			connectionType: [
-				43,
-				{
-					HOSTNAME: 0,
-					IP4: 1,
-					IP6: 2,
-				},
-			],
-			debugMediaException: [34, 'string'],
-			debugMediaIp: [32, 'string'],
-			debugUrl: [33, 'string'],
-			estimatedBandwidth: [45, 'number'],
-			fileHeight: [55, 'integer'],
-			fileWidth: [56, 'integer'],
-			finalizeConnectT: [28, 'timer'],
-			finalizeHttpCode: [31, 'integer'],
-			finalizeIsReuse: [30, 'boolean'],
-			finalizeNetworkT: [29, 'timer'],
-			httpProtocolVersionType: [
-				51,
-				{
-					HTTP1: 0,
-					HTTP2: 1,
-					HTTP3: 2,
-				},
-			],
-			isViewOnce: [49, 'boolean'],
-			mediaId: [46, 'integer'],
-			messageKeyHash: [58, 'string'],
-			networkStack: [
-				42,
-				{
-					NATIVE: 0,
-					OK_HTTP: 1,
-					LIGER: 2,
-					APACHE: 3,
-					WATLS: 4,
-					CRONET: 5,
-				},
-			],
-			originalSize: [53, 'integer'],
-			overallAttemptCount: [4, 'integer'],
-			overallConnBlockFetchT: [10, 'timer'],
-			overallConnectionClass: [41, 'string'],
-			overallCumT: [37, 'timer'],
-			overallCumUserVisibleT: [38, 'timer'],
-			overallDomain: [5, 'string'],
-			overallEncryptT: [50, 'timer'],
-			overallIsFinal: [36, 'boolean'],
-			overallIsForward: [16, 'boolean'],
-			overallIsManual: [13, 'boolean'],
-			overallLastUploadRetryPhase: [
-				11,
-				{
-					RESUME_CHECK: 1,
-					UPLOAD: 2,
-					FINALIZE: 3,
-				},
-			],
-			overallMediaKeyReuse: [
-				40,
-				{
-					NONE_NEW_CONTENT: 1,
-					NONE_EXPIRED: 2,
-					REUSED: 3,
-					NONE_WAS_STATUS: 4,
-				},
-			],
-			overallMediaSize: [7, 'number'],
-			overallMediaType: [
-				1,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			overallMmsVersion: [6, 'integer'],
-			overallOptimisticFlag: [
-				12,
-				{
-					NONE: 0,
-					OPTIMISTIC: 1,
-					OPT_USED: 2,
-					OPT_TAKEOVER: 3,
-					OPT_DISABLED: 4,
-				},
-			],
-			overallQueueT: [9, 'timer'],
-			overallRetryCount: [3, 'integer'],
-			overallT: [8, 'timer'],
-			overallTranscodeT: [15, 'timer'],
-			overallUploadMode: [
-				39,
-				{
-					REGULAR: 1,
-					FAST_FORWARD_EXIST_CHECK: 2,
-					VIDEO_EXIST_CHECK: 3,
-					PRODUCT: 4,
-					MEDIA_RETRY: 5,
-					WEB_REUPLOAD: 6,
-					THUMBNAIL: 7,
-					EXPRESS_PATH_UPLOAD: 8,
-				},
-			],
-			overallUploadOrigin: [
-				44,
-				{
-					UNKNOWN: 1,
-					CHAT_PERSONAL: 2,
-					CHAT_GROUP: 3,
-					STATUS_USER: 4,
-					PRODUCT_CATALOG: 5,
-					STICKER_WEB: 6,
-					PAYMENTS_KYC: 7,
-					MESSAGE_HISTORY_SYNC: 8,
-					COMMUNITY: 9,
-					CHANNEL: 10,
-					BROADCAST: 11,
-					MULTI_CHAT: 12,
-					INTEROP: 13,
-				},
-			],
-			overallUploadResult: [
-				35,
-				{
-					OK: 1,
-					DUPLICATE: 3,
-					ERROR_UNKNOWN: 2,
-					ERROR_REQUEST: 4,
-					ERROR_UPLOAD: 5,
-					ERROR_OOM: 6,
-					ERROR_IO: 7,
-					ERROR_NO_PERMISSIONS: 8,
-					ERROR_BAD_MEDIA: 9,
-					ERROR_INSUFFICIENT_SPACE: 10,
-					ERROR_FNF: 11,
-					ERROR_CANCEL: 12,
-					ERROR_SERVER: 13,
-					ERROR_REQUEST_TIMEOUT: 14,
-					ERROR_NOT_FINALIZED: 15,
-					ERROR_OPTIMISTIC_HASH: 16,
-					ERROR_MEDIA_CONN: 17,
-					ERROR_DNS: 18,
-					ERROR_THROTTLE: 19,
-					ERROR_SSL: 20,
-					ERROR_NO_CLIENT_NETWORK: 21,
-					SKIPPED_EP_NOT_ONLINE: 22,
-					SKIPPED_EP_NOT_1TO1CHAT: 23,
-					SKIPPED_EP_UPLOAD_FAILED: 24,
-					SKIPPED_EP_MULTI_CHAT: 25,
-					SKIPPED_EP_NO_PRIMARY_HOST: 26,
-					ERROR_CRONET: 27,
-					ERROR_INCOMPLETE_SERVER_RESPONSE: 28,
-					ERROR_TRANSCODING: 29,
-					ERROR_CANCEL_PROGRAMMATIC: 30,
-					ERROR_NO_ROUTE: 31,
-					ERROR_TOO_LARGE: 32,
-					ERROR_CANNOT_TRANSCODE: 33,
-					ERROR_UNKNOWN_MIMETYPE: 34,
-					ERROR_UNSUPPORTED_MIMETYPE: 35,
-					ERROR_SERVER_REJECTED_MEDIA: 36,
-					ERROR_IO_ENCRYPTION: 37,
-					ERROR_NO_ENCRYPTION_ALGORITHM: 38,
-					ERROR_HOST_SWITCH_REQUIRED: 39,
-					ERROR_WAMSYS: 40,
-					ERROR_INVALID_URL: 41,
-				},
-			],
-			overallUserVisibleT: [14, 'timer'],
-			photoQualitySetting: [
-				52,
-				{
-					AUTO: 0,
-					DATA_SAVER: 1,
-					HIGH_QUALITY: 2,
-					HIGHEST_QUALITY: 3,
-				},
-			],
-			resumeConnectT: [17, 'timer'],
-			resumeHttpCode: [20, 'integer'],
-			resumeIsReuse: [19, 'boolean'],
-			resumeNetworkT: [18, 'timer'],
-			uploadBytesTransferred: [27, 'number'],
-			uploadConnectT: [22, 'timer'],
-			uploadHttpCode: [25, 'integer'],
-			uploadIsReuse: [24, 'boolean'],
-			uploadIsStreaming: [26, 'boolean'],
-			uploadNetworkT: [23, 'timer'],
-			uploadResumePoint: [21, 'integer'],
-			uploadSource: [
-				48,
-				{
-					OTHER: 1,
-					CAMERA: 2,
-					GALLERY: 3,
-					SHARE: 4,
-				},
-			],
-			usedFallbackHint: [47, 'string'],
-			videoQualitySetting: [
-				54,
-				{
-					AUTO: 0,
-					DATA_SAVER: 1,
-					HIGH_QUALITY: 2,
-					HIGHEST_QUALITY: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcMediaErrorUnknownDetails',
-		id: 2352,
-		props: {
-			mediaId: [1, 'integer'],
-			webcMediaErrorMessage: [4, 'string'],
-			webcMediaErrorName: [3, 'string'],
-			webcMediaOperation: [
-				2,
-				{
-					DOWNLOAD: 1,
-					UPLOAD: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcMediaLoad',
-		id: 1202,
-		props: {
-			webcMediaLoadResult: [
-				2,
-				{
-					SUCCESS: 0,
-					SILENCE: 1,
-					ZEROWIDTH: 2,
-				},
-			],
-			webcMediaLoadT: [1, 'timer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'StickerError',
-		id: 5024,
-		props: {
-			stickerErrorType: [
-				1,
-				{
-					DECOMPRESSION: 2,
-					SENDER_VALIDATION: 3,
-					RECEIVER_VALIDATION: 4,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'StickerLatency',
-		id: 5026,
-		props: {
-			size: [1, 'integer'],
-			stickerLatencyAction: [
-				2,
-				{
-					DECOMPRESSION: 2,
-				},
-			],
-			stickerLatencyTtAction: [3, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcProgressiveImage',
-		id: 2226,
-		props: {
-			webcFirstRenderScans: [1, 'integer'],
-			webcFirstRenderT: [2, 'timer'],
-			webcFullQualityT: [4, 'timer'],
-			webcMidQualityT: [3, 'timer'],
-		},
-		weight: 10,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'SendDocument',
-		id: 2172,
-		props: {
-			documentSize: [1, 'number'],
-			documentType: [
-				2,
-				{
-					OTHER: 1,
-					IMAGE: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					DOCUMENT: 5,
-					COMPRESSED_FILE: 6,
-					EXECUTABLE: 7,
-					VCARD: 8,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcMediaAnalyzed',
-		id: 912,
-		props: {
-			webcMediaAnalyzeT: [3, 'timer'],
-			webcMediaExtensions: [2, 'string'],
-			webcMediaSupported: [1, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'VideoTranscoder',
-		id: 1802,
-		props: {
-			sourceAudioBitRate: [12, 'number'],
-			sourceDuration: [8, 'timer'],
-			sourceFileSize: [7, 'number'],
-			sourceFormat: [
-				14,
-				{
-					SLOMO: 0,
-					VIDEO: 1,
-					GIF: 2,
-				},
-			],
-			sourceFrameRate: [13, 'number'],
-			sourceHeight: [10, 'number'],
-			sourceVideoBitRate: [11, 'number'],
-			sourceWidth: [9, 'number'],
-			targetAudioBitRate: [20, 'number'],
-			targetDuration: [16, 'timer'],
-			targetFileSize: [15, 'number'],
-			targetFormat: [
-				22,
-				{
-					IMAGE: 0,
-					VIDEO: 1,
-					GIF: 2,
-				},
-			],
-			targetFrameRate: [21, 'number'],
-			targetHeight: [18, 'number'],
-			targetVideoBitRate: [19, 'number'],
-			targetWidth: [17, 'number'],
-			transcoderAlgorithm: [
-				1,
-				{
-					WA_IPHONE: 0,
-					FB_IPHONE: 1,
-				},
-			],
-			transcoderContainsVideocomposition: [5, 'boolean'],
-			transcoderHasEdits: [6, 'boolean'],
-			transcoderIsPassthrough: [4, 'boolean'],
-			transcoderResult: [
-				2,
-				{
-					UNKNOWN: 0,
-					SUCCEEDED: 1,
-					FAILED: 2,
-					CANCELLED: 3,
-				},
-			],
-			transcoderT: [3, 'timer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'StickerSend',
-		id: 1840,
-		props: {
-			stickerIsAi: [7, 'boolean'],
-			stickerIsAnimated: [3, 'boolean'],
-			stickerIsAvatar: [6, 'boolean'],
-			stickerIsFirstParty: [2, 'boolean'],
-			stickerIsFromStickerMaker: [5, 'boolean'],
-			stickerIsGiphy: [10, 'boolean'],
-			stickerIsLottie: [9, 'boolean'],
-			stickerIsTenor: [11, 'boolean'],
-			stickerMakerSourceType: [
-				8,
-				{
-					CUTOUT_IMAGE: 1,
-					WEB_STICKER_MAKER: 2,
-					IOS_STICKER_MAKER: 3,
-					ANDROID_STICKER_MAKER: 4,
-					TRANSPARENT_IMAGE: 5,
-				},
-			],
-			stickerSendMessageType: [
-				4,
-				{
-					REGULAR: 1,
-					PAYMENTS: 2,
-				},
-			],
-			stickerSendOrigin: [
-				1,
-				{
-					STICKER_SEARCH: 1,
-					FORWARD: 2,
-					STICKER_PICKER_TAB_RECENTS: 3,
-					STICKER_PICKER_TAB_FAVORITES: 4,
-					STICKER_PICKER_TAB_EMOTION: 5,
-					STICKER_PICKER_TAB_PACK: 6,
-					STICKER_PICKER_TAB_CONTEXTUAL_SUGGESTIONS: 7,
-					STICKER_MAKER: 8,
-					STICKER_STORE: 9,
-					AI_STICKER_CREATE: 10,
-					AI_STICKER_CREATE_TRAY: 11,
-					AI_STICKER_CREATE_CHAT: 12,
-					STATUS_QUICK_REPLY: 13,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MediaDownload2',
-		id: 1590,
-		props: {
-			clientMessageId: [50, 'string'],
-			connectionType: [
-				31,
-				{
-					HOSTNAME: 0,
-					IP4: 1,
-					IP6: 2,
-				},
-			],
-			daysSinceReceive: [46, 'integer'],
-			debugMediaException: [24, 'string'],
-			debugMediaIp: [22, 'string'],
-			debugUrl: [23, 'string'],
-			deviceCount: [49, 'integer'],
-			downloadBytesTransferred: [20, 'number'],
-			downloadConnectT: [15, 'timer'],
-			downloadHttpCode: [18, 'integer'],
-			downloadIsReuse: [17, 'boolean'],
-			downloadIsStreaming: [19, 'boolean'],
-			downloadNetworkT: [16, 'timer'],
-			downloadQuality: [
-				37,
-				{
-					NORMAL_QUALITY: 1,
-					MID_QUALITY: 2,
-					INELIGIBLE_IMAGE_TOO_SMALL: 3,
-					INELIGIBLE_PARTIAL_HASHES_NOT_FOUND: 4,
-					ERROR_DETERMINING_ELIGIBILITY: 5,
-					NOT_DOWNLOADED_ENOUGH_BYTES_TO_DETERMINE_ELIGIBILITY: 6,
-				},
-			],
-			downloadResumePoint: [14, 'integer'],
-			downloadTimeToFirstByteT: [21, 'timer'],
-			estimatedBandwidth: [36, 'number'],
-			expressPathBytesSaved: [42, 'number'],
-			expressPathTimeSavedMs: [43, 'timer'],
-			fileHeight: [47, 'integer'],
-			fileWidth: [48, 'integer'],
-			hasLeveragedExpressPath: [44, 'boolean'],
-			httpProtocolVersionType: [
-				45,
-				{
-					HTTP1: 0,
-					HTTP2: 1,
-					HTTP3: 2,
-				},
-			],
-			isSenderPlatformCapi: [52, 'boolean'],
-			isViewOnce: [41, 'boolean'],
-			mediaId: [38, 'integer'],
-			networkStack: [
-				30,
-				{
-					NATIVE: 0,
-					OK_HTTP: 1,
-					LIGER: 2,
-					APACHE: 3,
-					WATLS: 4,
-					CRONET: 5,
-				},
-			],
-			overallAttemptCount: [4, 'integer'],
-			overallBackendStore: [
-				39,
-				{
-					UNKNOWN: 0,
-					NON_DIRECT_PATH: 1,
-					EVERSTORE: 2,
-					OIL: 3,
-					EXPRESS_PATH: 4,
-					STATIC: 5,
-					MANIFOLD: 6,
-				},
-			],
-			overallConnBlockFetchT: [10, 'timer'],
-			overallConnectionClass: [29, 'string'],
-			overallCumT: [27, 'timer'],
-			overallCumV2T: [53, 'timer'],
-			overallDecryptT: [12, 'timer'],
-			overallDomain: [5, 'string'],
-			overallDownloadMode: [
-				11,
-				{
-					MANUAL: 1,
-					FULL: 2,
-					PREFETCH: 3,
-					HEADER: 4,
-					THUMBNAIL: 5,
-					EXPRESS_PATH_DOWNLOAD: 6,
-				},
-			],
-			overallDownloadOrigin: [
-				35,
-				{
-					CHAT_PERSONAL: 1,
-					CHAT_GROUP: 2,
-					STATUS_USER: 3,
-					STATUS_ADS: 4,
-					PRODUCT_CATALOG: 5,
-					GDPR: 6,
-					STICKER_PICKER: 7,
-					PROFILE_PICTURE: 8,
-					BLOKS: 9,
-					P2B: 10,
-					MESSAGE_HISTORY_SYNC: 11,
-					COMMUNITY: 12,
-					CHANNEL: 13,
-					BROADCAST: 14,
-					INTEROP: 15,
-				},
-			],
-			overallDownloadResult: [
-				25,
-				{
-					OK: 1,
-					ERROR_UNKNOWN: 2,
-					ERROR_TIMEOUT: 3,
-					ERROR_DNS: 4,
-					ERROR_INSUFFICIENT_SPACE: 5,
-					ERROR_TOO_OLD: 6,
-					ERROR_CANNOT_RESUME: 7,
-					ERROR_HASH_MISMATCH: 8,
-					ERROR_INVALID_URL: 9,
-					ERROR_OUTPUT_STREAM: 10,
-					ERROR_CANCEL: 11,
-					DEDUPED: 12,
-					ERROR_ENC_HASH_MISMATCH: 14,
-					PREFETCH_END: 15,
-					ERROR_CANCEL_PROGRAMMATIC: 16,
-					ERROR_MEDIA_CONN: 17,
-					ERROR_THROTTLE: 18,
-					ERROR_SSL: 19,
-					ERROR_NETWORK: 20,
-					ERROR_CONNECT: 21,
-					ERROR_EP_NOTIFY_DECRYPTION_FAILURE: 22,
-					SKIPPED_EP_DIFFERENT_POP: 23,
-					SKIPPED_EP_AUTODOWNLOAD_DISABLED: 24,
-					ERROR_SERVER: 25,
-					ERROR_WATLS: 26,
-					ERROR_INVALID_CODE: 27,
-					ERROR_WAMSYS: 28,
-					ERROR_GENERIC: 29,
-					ERROR_CRONET: 30,
-					ERROR_NO_CLIENT_NETWORK: 31,
-					ERROR_HOST_SWITCH_REQUIRED: 32,
-					ERROR_SUSPICIOUS_CONTENT: 33,
-					ERROR_NO_ENCRYPTION_ALGORITHM: 34,
-					ERROR_NO_ENCRYPTED_HASH: 35,
-					ERROR_NO_MEDIA_HASH: 36,
-					ERROR_NO_MEDIA_KEY: 37,
-					ERROR_NO_SIDECAR: 38,
-					ERROR_HASH_VERIFICATION_FAILURE: 39,
-				},
-			],
-			overallFileValidationT: [13, 'timer'],
-			overallIsEncrypted: [28, 'boolean'],
-			overallIsFinal: [26, 'boolean'],
-			overallMediaSize: [7, 'number'],
-			overallMediaType: [
-				1,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			overallMmsVersion: [6, 'integer'],
-			overallQueueT: [9, 'timer'],
-			overallRetryCount: [3, 'integer'],
-			overallT: [8, 'timer'],
-			sleepModeAffected: [51, 'boolean'],
-			usedFallbackHint: [40, 'string'],
-		},
-		weight: 50,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcMediaRmr',
-		id: 1906,
-		props: {
-			messageMediaType: [
-				10,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			webcBrowserNetworkType: [2, 'string'],
-			webcBrowserStorageQuotaBytes: [11, 'integer'],
-			webcBrowserStorageQuotaUsedBytes: [12, 'integer'],
-			webcChatPosition: [1, 'integer'],
-			webcChatType: [
-				9,
-				{
-					INDIVIDUAL: 0,
-					GROUP: 1,
-					BROADCAST_LIST: 2,
-					COMMUNITY: 3,
-					NEWSLETTER: 4,
-				},
-			],
-			webcMediaRmrError: [8, 'boolean'],
-			webcMediaRmrT: [6, 'timer'],
-			webcMediaSize: [7, 'integer'],
-			webcMessageIndex: [3, 'integer'],
-			webcMessageT: [5, 'timer'],
-			webcRmrReason: [
-				14,
-				{
-					OTHER: 0,
-					MSG_CLICK: 1,
-					STICKER_PANEL_ICON: 2,
-					MEDIA_VIEWER: 3,
-					VIDEO_STREAMING: 4,
-					STATUS_V3: 5,
-					MULTI_SELECT_DOWNLOAD: 6,
-					DOCUMENT_DOWNLOAD: 7,
-					PIP: 8,
-					STICKER_PANEL_STICKER: 9,
-					SEND_TO_CHAT: 10,
-					UPLOAD: 11,
-					MSG_INIT: 12,
-					MSG_UPDATE: 13,
-					MSG_DELETE: 14,
-					MSG_RENDER: 15,
-				},
-			],
-			webcRmrStatusCode: [13, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'BlockEventsFs',
-		id: 4288,
-		props: {
-			blockEntryPoint: [
-				1,
-				{
-					OTHER: 0,
-					CHAT: 1,
-					PROFILE: 2,
-					BLOCK_LIST: 3,
-					TRIGGERED_BLOCK: 4,
-					ACCOUNT_INFO: 5,
-					CALL_LOG: 6,
-					OVERFLOW_MENU: 7,
-					GROUP_INFO: 8,
-					BLOCK_DIALOG: 9,
-					MESSAGE_MENU: 10,
-					MEDIA_VIEWER: 11,
-					OVERFLOW_MENU_BLOCK: 12,
-					ONE_TO_ONE_OLD_SPAM_BANNER_BLOCK: 13,
-					ONE_TO_ONE_SPAM_BANNER_BLOCK: 14,
-					BIZ_SPAM_BANNER_BLOCK: 15,
-					BLOCK_HEADER_CHAT: 16,
-					OVERFLOW_MENU_REPORT: 17,
-					ACCOUNT_INFO_REPORT: 18,
-					BIZ_OLD_SPAM_BANNER_BLOCK: 19,
-					CHAT_LIST_BLOCK: 20,
-					CHAT_LIST_NOINSUB_BLOCK: 21,
-					CHAT_LIST_CONTEXT_MENU_BLOCK: 22,
-					NOTIFICATION_BLOCK: 23,
-					ONE_TO_ONE_SPAM_BANNER_REPORT: 24,
-					BIZ_EXTENSION_MENU: 25,
-					VIEW_ONCE_VIEWER: 26,
-					STATUS_OVERFLOW_MENU_REPORT: 27,
-					ALBUM_MEDIA_MENU_REPORT: 28,
-					STATUS_POST_REPORT: 29,
-					MISSED_CALL_NOTIFICATION_BLOCK: 30,
-					CHAT_FMX_CARD_BLOCK: 31,
-					CHAT_FMX_CARD_BLOCK_SUSPICIOUS: 32,
-					CHAT_FMX_CARD_SAFETY_TOOLS_BLOCK: 33,
-					CHAT_FMX_CARD_SAFETY_TOOLS_BLOCK_SUSPICIOUS: 34,
-					CHAT_FMX_CARD_SAFETY_TOOLS_REPORT: 35,
-					CHAT_FMX_CARD_SAFETY_TOOLS_REPORT_SUSPICIOUS: 36,
-					ACCOUNT_INFO_BLOCK: 37,
-					CALL_LOG_BLOCK: 38,
-					BIZ_BLOCK_HEADER_CHAT: 39,
-					BIZ_OVERFLOW_MENU_BLOCK: 40,
-					PSA_BANNER_BLOCK: 41,
-					COMMENT_ACTIONS_BOTTOM_SHEET: 42,
-					CALL_SPAM_DIALOG_REPORT: 43,
-					CALL_SPAM_DIALOG_BLOCK: 44,
-					BIZ_ACCOUNT_INFO_BLOCK: 45,
-					BIZ_BLOCK_LIST: 46,
-					BIZ_CALL_LOG_BLOCK: 47,
-					ONGOING_CALL_LINK_BLOCK: 48,
-					ONE_TO_ONE_BLOCKED_CHAT_COMPOSER: 49,
-				},
-			],
-			blockEventActionType: [
-				2,
-				{
-					BLOCK: 0,
-					UNBLOCK: 1,
-				},
-			],
-			blockEventIsSuspicious: [3, 'boolean'],
-			blockEventIsUnsub: [4, 'boolean'],
-			pastCall: [5, 'boolean'],
-			pastCallResult: [
-				6,
-				{
-					INVALID: 0,
-					CONNECTED: 1,
-					REJECTED_BY_USER: 2,
-					REJECTED_BY_SERVER: 3,
-					MISSED: 4,
-					BUSY: 5,
-					SETUP_ERROR: 6,
-					SERVER_NACK: 7,
-					CALL_OFFER_ACK_NOT_RECEIVED: 8,
-					MISSED_NO_RECEIPT: 9,
-					ACCEPTED_BUT_NOT_CONNECTED: 10,
-					CALL_CANCELED_CELLULAR_IN_PROGRESS: 11,
-					CALL_CANCELED_AIRPLANE_MODE_ON: 12,
-					CALL_CANCELED_NO_NETWORK: 13,
-					CALL_OFFER_ACK_CORRUPT: 14,
-					CALL_REJECTED_TOS: 15,
-					CALL_REJECTED_E2E: 16,
-					CALL_REJECTED_UNAVAILABLE: 17,
-					CALL_CANCELED_OFFER_NOT_SENT: 18,
-					PEER_SETUP_ERROR: 19,
-					ACTIVE_ELSEWHERE: 20,
-					NO_DECRYPTED_OFFER: 21,
-					ACCEPTED_ELSEWHERE: 22,
-					REJECTED_ELSEWHERE: 23,
-					LONELY: 24,
-					CALL_IS_FULL: 25,
-					SILENCED: 26,
-					CALL_MISSED_SILENCED: 27,
-					CALL_DOES_NOT_EXIST_FOR_REJOIN: 28,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'SignCredential',
-		id: 2242,
-		props: {
-			applicationState: [
-				6,
-				{
-					FOREGROUND: 1,
-					BACKGROUND: 2,
-				},
-			],
-			isFromWameta: [8, 'boolean'],
-			overallT: [4, 'timer'],
-			projectCode: [
-				7,
-				{
-					DIT: 1,
-					DIRECTORY_SEARCH: 2,
-				},
-			],
-			retryCount: [2, 'integer'],
-			signCredentialResult: [
-				1,
-				{
-					SUCCESS: 1,
-					ERROR_BAD_REQUEST: 2,
-					ERROR_SERVER: 3,
-					ERROR_OTHER: 4,
-					ERROR_CLIENT_NETWORK: 5,
-				},
-			],
-			signCredentialT: [3, 'timer'],
-			waConnectedToChatd: [5, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PsBufferUpload',
-		id: 2244,
-		props: {
-			applicationState: [
-				6,
-				{
-					FOREGROUND: 1,
-					BACKGROUND: 2,
-				},
-			],
-			isFromWamsys: [12, 'boolean'],
-			isUserSampled: [14, 'boolean'],
-			psBufferSequenceNumber: [13, 'integer'],
-			psBufferUploadHttpResponseCode: [3, 'integer'],
-			psBufferUploadResult: [
-				1,
-				{
-					SUCCESS: 1,
-					ERROR_PARSING: 2,
-					ERROR_DECODING: 3,
-					ERROR_CREDENTIAL: 4,
-					ERROR_OTHER: 5,
-					ERROR_CLIENT_NETWORK: 6,
-					ERROR_WAIT_FOR_TOKEN: 7,
-					ERROR_SERVER_OTHER: 8,
-					SKIPPED_NO_NETWORK: 9,
-					SKIPPED_NO_DATA: 10,
-					ERROR_ACCESS_TOKEN: 11,
-				},
-			],
-			psBufferUploadT: [2, 'timer'],
-			psDitheredT: [11, 'integer'],
-			psForceUpload: [10, 'boolean'],
-			psTokenNotReadyReason: [
-				4,
-				{
-					NO_REASON: 0,
-					REASON_UNKNOWN: 1,
-					REASON_WAIT_FOR_FIRST_TOKEN: 2,
-					REASON_INVALID_SHARED_KEY: 3,
-					REASON_INVALID_FACTOR: 4,
-					REASON_GEN_FACTOR_FAILURE: 5,
-					REASON_COMPUTE_HMAC_FAILURE: 6,
-					REASON_BLIND_FAILURE: 7,
-					REASON_UNBLIND_FAILURE: 8,
-					REASON_LAST_SIGNREQ_NETWORK_FAILURE: 9,
-					REASON_LAST_SIGNREQ_SERVER_ERROR: 10,
-					REASON_LAST_SIGNREQ_BAD_REQUEST: 11,
-					REASON_LAST_SIGNREQ_OTHER_ERROR: 12,
-					REASON_WAIT_FOR_GEN_TOKEN: 13,
-					REASON_GEN_SHAREDKEY_FAILURE: 14,
-					REASON_WAIT_FOR_GEN_FIRST_TOKEN: 15,
-				},
-			],
-			psUploadReason: [
-				9,
-				{
-					REASON_PS_PINGER: 0,
-					REASON_PS_OFFCYCLE: 1,
-				},
-			],
-			waConnectedToChatd: [5, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'EditMessageSend',
-		id: 3990,
-		props: {
-			editDuration: [1, 'integer'],
-			editType: [
-				2,
-				{
-					NOT_EDITED: 0,
-					EDITED: 1,
-					SENDER_REVOKE: 2,
-					ADMIN_REVOKE: 3,
-				},
-			],
-			mediaType: [
-				8,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messageSendResultIsTerminal: [3, 'boolean'],
-			messageType: [
-				4,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			resendCount: [5, 'integer'],
-			retryCount: [6, 'integer'],
-			typeOfGroup: [
-				9,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MessageSend',
-		id: 854,
-		props: {
-			agentEngagementType: [
-				49,
-				{
-					DIRECT_CHAT: 0,
-					INVOKED: 1,
-					MEMBER: 2,
-				},
-			],
-			botType: [
-				55,
-				{
-					UNKNOWN: 0,
-					METABOT: 1,
-					BOT_1P_BIZ: 2,
-					BOT_3P_BIZ: 3,
-				},
-			],
-			chatOrigins: [
-				58,
-				{
-					LID_USERNAME: 1,
-					LID_CTWA: 2,
-					OTHERS: 3,
-				},
-			],
-			deviceCount: [31, 'integer'],
-			deviceSizeBucket: [
-				25,
-				{
-					LT32: 1,
-					LT64: 2,
-					LT128: 3,
-					LT256: 4,
-					LT512: 5,
-					LT1000: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			disappearingChatInitiator: [
-				30,
-				{
-					CHAT: 1,
-					INITIATED_BY_ME: 2,
-					INITIATED_BY_OTHER: 3,
-					CHAT_PICKER: 4,
-					BIZ_UPGRADE_FB_HOSTING: 5,
-				},
-			],
-			e2eBackfill: [23, 'boolean'],
-			e2eCiphertextType: [
-				10,
-				{
-					MESSAGE: 0,
-					PREKEY_MESSAGE: 1,
-					SENDER_KEY_MESSAGE: 2,
-					MESSAGE_SECRET_MESSAGE: 3,
-				},
-			],
-			e2eCiphertextVersion: [9, 'integer'],
-			e2eFailureReason: [
-				46,
-				{
-					INVALID_MESSAGE: 0,
-					LEGACY_MESSAGE: 1,
-					INVALID_VERSION: 2,
-					PRE_KEY_MESSAGE_MISSING_PRE_KEY: 3,
-					PRE_KEY_MESSAGE_INVALID_KEY: 4,
-					UNTRUSTED_IDENTITY: 5,
-					NO_SESSION_AVAILABLE: 6,
-					PLAINTEXT_BYTE_MISMATCH: 7,
-					UNKNOWN_CIPHERTEXT_TYPE: 8,
-					UNKNOWN_CIPHERTEXT_VERSION: 9,
-					INVALID_PADDING: 10,
-					INVALID_PROTOCOL_BUFFER: 11,
-					INVALID_NUMBER_OF_MESSAGE_TYPES: 12,
-					INVALID_IMAGE_FILE_LENGTH: 13,
-					INVALID_IMAGE_FILE_SHA256: 14,
-					INVALID_IMAGE_MEDIA_URL: 15,
-					INVALID_IMAGE_MEDIA_KEY: 16,
-					INVALID_IMAGE_MIME_TYPE: 17,
-					UNKNOWN_V2_TAGS: 18,
-					INVALID_EDIT_VERSION: 19,
-					INVALID_HSM_NAMESPACE: 20,
-					INVALID_HSM_ELEMENT: 21,
-					UNKNOWN_PROTOCOL_MESSAGE_TYPE: 22,
-					DUPLICATE_MESSAGE: 23,
-					FINGERPRINT_IDENTITY_MISMATCH: 24,
-					FINGERPRINT_VERSION_MISMATCH: 25,
-					INVALID_ARGUMENT: 26,
-					INVALID_KEY: 27,
-					INVALID_KEY_ID: 28,
-					INVALID_MAC: 29,
-					NO_MEMORY: 30,
-					STALE_KEY_EXCHANGE: 31,
-					VRF_SIGNATURE_VERIFICATION_FAILED: 32,
-					ERROR_MINIMUM_VALUE: 33,
-					ERROR_UNKNOWN: 34,
-					INVALID_BROADCAST_STANZA_ATTRIBUTE: 35,
-					INVALID_LIST_REPLY_MESSAGE: 36,
-					INVALID_LIST_REPLY_ROW_IDENTIFIER: 37,
-					INVALID_BUTTONS_RESPONSE_MESSAGE: 38,
-					INVALID_BUTTONS_RESPONSE_BUTTON_IDENTIFIER: 39,
-					INVALID_ORDER_MESSAGE: 40,
-					ERROR_CANCELLED: 41,
-					FUTURE_MESSAGE: 42,
-					INVALID_EMPTY_PROTOBUF_NOT_ALLOWED: 43,
-					SELF_SEND: 44,
-					INVALID_MEDIA_MIME_TYPE_TEMPLATE_MESSAGE: 45,
-					INVALID_MEDIA_ENC_HASH: 46,
-					INVALID_IDENTITY: 47,
-					PASSTHROUGH: 48,
-					NOT_IN_PENDING_DEVICES: 49,
-					EDIT_TYPE_AND_PROTOCOL_MISMATCH: 50,
-					DECRYPTION_FAILED: 51,
-					DESERIALIZE_INVALID_PROTO_FORMAT: 52,
-					DESERIALIZE_RATCHET_KEY_BAD_FORMAT: 53,
-					DESERIALIZE_PK_INVALID_PROTO_FORMAT: 54,
-					DESERIALZE_PK_KEY_BAD_FORMAT: 55,
-					TOO_MANY_MESSAGES_IN_FUTURE: 56,
-					EMPTY_VERSION_CONTENT_SUFFIX: 57,
-					CONTENT_EXCEEDED_EXPECTED_LENGTH: 58,
-					GRP_INVALID_PROTO_FORMAT: 59,
-					GRP_INVALID_KEY_FORMAT: 60,
-					GRP_VERSION_CONTENT_EMPTY: 61,
-					GRP_INVALID_VERSION_CONTENT_LENGTH: 62,
-					GRP_SENDER_KEY_INVALID_PROTO_FORMAT: 63,
-					GRP_SENDER_KEY_PROTO_ERROR: 64,
-					GRP_TOO_MANY_MESSAGES_IN_FUTURE: 65,
-					MISSING_MESSAGE_SECRET: 66,
-					MESSAGE_SECRET_INVALID: 67,
-					INVALID_REACTION_TEXT: 68,
-					UNSUPPORTED_MESSAGE_TYPE: 69,
-					UNSUPPORTED_IN_INTEROP: 70,
-					TARGET_MESSAGE_NOT_FOUND: 71,
-					STATUS_FROM_HOSTED_DEVICE_UNSUPPORTED: 72,
-					GROUP_MESSAGE_FROM_HOSTED_DEVICE_UNSUPPORTED: 73,
-					BROADCAST_FROM_HOSTED_DEVICE_UNSUPPORTED: 74,
-					LIVE_LOCATION_FROM_HOSTED_DEVICE_UNSUPPORTED: 75,
-					MESSAGE_TYPE_MISMATCH: 76,
-					ERROR_SESSION_STATE_UNACKED_PKMSG_GET_BASE_KEY: 77,
-					ERROR_SIGNAL_MESSAGE_GET_SENDER_RATCHET_KEY: 78,
-					ERROR_SESSION_STATE_GET_ROOT_KEY: 79,
-					ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY_PAIR: 80,
-					ERROR_SESSION_STATE_SET_SENDER_CHAIN_KEY: 81,
-					ERROR_SESSION_STATE_FIND_RECEIVER_CHAIN: 82,
-					ERROR_SESSION_RECORD_DESERIALIZE: 83,
-					ERROR_SENDER_KEY_STATE_REMOVE_SENDER_MESSAGE_KEY: 84,
-					ERROR_EMPTY_PLAINTEXT_DATA: 85,
-					ERROR_MAC_LEN_MISMATCH: 86,
-					ERROR_INVALID_MAC_LEN: 87,
-					ERROR_INVALID_SIGNATURE_LEN: 88,
-					ERROR_SENDER_KEY_LOAD_KEY: 89,
-					ERROR_FAST_RATCHET_SENDER_KEY_LOAD_KEY: 90,
-					ERROR_UNKNOWN_LOAD_KEY: 91,
-					ERROR_UNKNOWN_LOAD_SESSION: 92,
-					ERROR_SESSION_RECORD_GET_STATE: 93,
-					ERROR_SESSION_STATE_GET_SENDER_CHAIN_KEY: 94,
-					ERROR_INVALID_KEY_MATEIRAL_DATA_LEN: 95,
-					ERROR_SESSION_STATE_GET_SENDER_RATCHET_KEY: 96,
-					ERROR_SESSION_STATE_GET_LOCAL_IDENTITY_KEY: 97,
-					ERROR_SESSION_STATE_GET_REMOTE_IDENTITY_KEY: 98,
-				},
-			],
-			editDuration: [43, 'integer'],
-			editType: [
-				44,
-				{
-					NOT_EDITED: 0,
-					EDITED: 1,
-					SENDER_REVOKE: 2,
-					ADMIN_REVOKE: 3,
-				},
-			],
-			ephemeralityDuration: [21, 'integer'],
-			ephemeralityInitiator: [
-				47,
-				{
-					INITIATED_BY_ME: 1,
-					INITIATED_BY_OTHER: 2,
-					BIZ_UPGRADE_FB_HOSTING: 3,
-				},
-			],
-			ephemeralityTriggerAction: [
-				48,
-				{
-					UNKNOWN: 0,
-					CHAT_SETTINGS: 1,
-					ACCOUNT_SETTINGS: 2,
-					BULK_CHANGE: 3,
-					BIZ_SUPPORTS_FB_HOSTING: 4,
-				},
-			],
-			excessPayloadKbSize: [40, 'integer'],
-			fastForwardEnabled: [15, 'boolean'],
-			hasUsername: [59, 'boolean'],
-			isAComment: [54, 'boolean'],
-			isAReply: [35, 'boolean'],
-			isFromWamsys: [19, 'boolean'],
-			isLid: [39, 'boolean'],
-			isViewOnce: [22, 'boolean'],
-			localAddressingMode: [
-				53,
-				{
-					PN: 1,
-					LID: 2,
-				},
-			],
-			mediaCaptionPresent: [8, 'boolean'],
-			messageDistributionType: [
-				41,
-				{
-					REGULAR_MESSAGE: 0,
-					DIRECT_MESSAGE: 1,
-					SENDER_KEY_DISTRIBUTION_MESSAGE: 2,
-				},
-			],
-			messageForwardAgeT: [14, 'timer'],
-			messageIsFanout: [5, 'boolean'],
-			messageIsFastForward: [13, 'boolean'],
-			messageIsFirstUserMessage: [26, 'boolean'],
-			messageIsForward: [4, 'boolean'],
-			messageIsInternational: [7, 'boolean'],
-			messageIsInvisible: [29, 'boolean'],
-			messageIsRevoke: [24, 'boolean'],
-			messageKeyHash: [57, 'string'],
-			messageMediaType: [
-				3,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messageSendOptUploadEnabled: [12, 'boolean'],
-			messageSendResult: [
-				1,
-				{
-					OK: 1,
-					ERROR_UNKNOWN: 3,
-					ERROR_NETWORK: 4,
-					ERROR_EXPIRED: 5,
-					ERROR_CANCELLED: 6,
-					ERROR_UPLOAD: 7,
-					ERROR_BACKFILL_USYNC_FAILED: 8,
-					ERROR_PAYLOAD_TOO_BIG: 9,
-					ERROR_LOCATION: 10,
-					ERROR_INVALID_MESSAGE: 11,
-					ERROR_E2EE: 12,
-					ERROR_INVALID_PROTOBUF: 13,
-					SERVER_ERROR: 14,
-					EPHEMERALLY_EXPIRED: 15,
-				},
-			],
-			messageSendResultIsTerminal: [17, 'boolean'],
-			messageSendT: [11, 'timer'],
-			messageType: [
-				2,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			networkWasDisconnected: [37, 'boolean'],
-			oppositeVisibleIdentification: [
-				60,
-				{
-					PHONE_NUMBER: 1,
-					SAVED_CONTACT_NAME: 2,
-					USERNAME: 3,
-					MASKED_PHONE_NUMBER: 4,
-					VERIFIED_BUSINESS_NAME: 5,
-					PLACEHOLDER: 6,
-					PUSHNAME: 7,
-				},
-			],
-			overallMediaSize: [42, 'number'],
-			participantCount: [32, 'integer'],
-			receiverDefaultDisappearingDuration: [28, 'integer'],
-			resendCount: [16, 'integer'],
-			retryCount: [6, 'integer'],
-			revokeDuration: [33, 'integer'],
-			revokeType: [
-				34,
-				{
-					SENDER: 0,
-					ADMIN: 1,
-				},
-			],
-			sendButtonPressT: [45, 'integer'],
-			senderDefaultDisappearingDuration: [27, 'integer'],
-			serverErrorCode: [56, 'integer'],
-			stickerIsAi: [50, 'boolean'],
-			stickerIsAvatar: [38, 'boolean'],
-			stickerIsFirstParty: [18, 'boolean'],
-			stickerIsFromStickerMaker: [51, 'boolean'],
-			stickerMakerSourceType: [
-				52,
-				{
-					CUTOUT_IMAGE: 1,
-					WEB_STICKER_MAKER: 2,
-					IOS_STICKER_MAKER: 3,
-					ANDROID_STICKER_MAKER: 4,
-					TRANSPARENT_IMAGE: 5,
-				},
-			],
-			thumbSize: [20, 'number'],
-			typeOfGroup: [
-				36,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'RevokeMessageSend',
-		id: 3656,
-		props: {
-			messageSendResultIsTerminal: [1, 'boolean'],
-			messageType: [
-				2,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			resendCount: [3, 'integer'],
-			retryCount: [4, 'integer'],
-			revokeDuration: [5, 'integer'],
-			revokeType: [
-				6,
-				{
-					SENDER: 0,
-					ADMIN: 1,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'BotBizJourney',
-		id: 4868,
-		props: {
-			appSessionId: [1, 'string'],
-			botBizActionType: [
-				5,
-				{
-					BOT_BIZ_CARD_CLICK: 1,
-					BOT_BIZ_CARD_MESSAGE_CLICK: 2,
-					BOT_BIZ_CARD_VIEW_AI_CLICK: 3,
-					BOT_BIZ_DEEPLINK_CLICK: 4,
-					BOT_BIZ_NUX_APPEAR: 5,
-					BOT_BIZ_NUX_DISMISS: 6,
-					BOT_BIZ_NUX_SELECT: 7,
-					BOT_BIZ_INFO_CHAT_CLICK: 8,
-				},
-			],
-			botBizEntryPoint: [
-				6,
-				{
-					SHARED_BOT_BIZ_CARD: 1,
-					SHARED_BOT_BIZ_DEEPLINK: 2,
-					BOT_BIZ_CHAT: 3,
-				},
-			],
-			botBizType: [
-				7,
-				{
-					BOT_BIZ_3P: 1,
-					BOT_BIZ_1P: 2,
-				},
-			],
-			botType: [
-				4,
-				{
-					UNKNOWN: 0,
-					METABOT: 1,
-					BOT_1P_BIZ: 2,
-					BOT_3P_BIZ: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'TsExternal',
-		id: 4574,
-		props: {
-			relativeTimestampMs: [1, 'integer'],
-			tsDuration: [2, 'integer'],
-			tsExternalEventSource: [
-				3,
-				{
-					CALL: 1,
-					VIDEO: 2,
-					PTT_RECORD: 3,
-					PTT_PLAY: 4,
-				},
-			],
-			tsSessionId: [4, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'DeepLinkConversion',
-		id: 1432,
-		props: {
-			callInitiator: [
-				8,
-				{
-					BUSINESS: 0,
-					CONSUMER: 1,
-				},
-			],
-			ctwaChatCreationMode: [
-				4,
-				{
-					JID: 0,
-					LID: 1,
-				},
-			],
-			ctwaConversionType: [
-				3,
-				{
-					FIRST_MESSAGE: 0,
-					DEEP_CONVERSATION: 1,
-					FIRST_BIZ_REPLY: 2,
-					FIRST_CALL: 3,
-					FIRST_LONG_CALL: 4,
-					SECOND_MESSAGE: 5,
-					SECOND_BIZ_REPLY: 6,
-					THIRD_MESSAGE: 7,
-					CART_RECEIVED: 8,
-					ORDER_CREATED: 9,
-					FIRST_MESSAGE_CONTINUATION: 10,
-					FIRST_BIZ_REPLY_CONTINUATION: 11,
-					SECOND_MESSAGE_CONTINUATION: 12,
-					SECOND_BIZ_REPLY_CONTINUATION: 13,
-					THIRD_MESSAGE_CONTINUATION: 14,
-				},
-			],
-			deepLinkConversionData: [2, 'string'],
-			deepLinkConversionSource: [1, 'string'],
-			isPriority: [7, 'boolean'],
-			trustBannerAction: [
-				5,
-				{
-					VIEWED: 0,
-					DISMISSED: 1,
-				},
-			],
-			trustBannerType: [6, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'EphemeralOutOfSyncInfo',
-		id: 3892,
-		props: {
-			groupSizeBucket: [
-				1,
-				{
-					SMALL: 1,
-					MEDIUM: 2,
-					LARGE: 3,
-					EXTRA_LARGE: 4,
-					XX_LARGE: 5,
-					XXX_LARGE: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			incomingMessageEphemeralityDuration: [2, 'integer'],
-			isAGroup: [3, 'boolean'],
-			isNewThreadForUser: [5, 'boolean'],
-			otherDefaultModeDuration: [6, 'integer'],
-			threadEphemeralityDuration: [7, 'integer'],
-			threadId: [8, 'string'],
-			userDefaultModeDuration: [9, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'EphemeralSyncResponseReceive',
-		id: 4780,
-		props: {
-			clientDisappearingModeInitiator: [
-				1,
-				{
-					CHAT: 1,
-					INITIATED_BY_ME: 2,
-					INITIATED_BY_OTHER: 3,
-					CHAT_PICKER: 4,
-					BIZ_UPGRADE_FB_HOSTING: 5,
-				},
-			],
-			clientEphemeralityDuration: [2, 'integer'],
-			clientEphemeralityInitiator: [
-				3,
-				{
-					INITIATED_BY_ME: 1,
-					INITIATED_BY_OTHER: 2,
-					BIZ_UPGRADE_FB_HOSTING: 3,
-				},
-			],
-			clientEphemeralitySettingTimestamp: [4, 'integer'],
-			clientEphemeralityTriggerAction: [
-				5,
-				{
-					UNKNOWN: 0,
-					CHAT_SETTINGS: 1,
-					ACCOUNT_SETTINGS: 2,
-					BULK_CHANGE: 3,
-					BIZ_SUPPORTS_FB_HOSTING: 4,
-				},
-			],
-			esrDisappearingModeInitiator: [
-				6,
-				{
-					CHAT: 1,
-					INITIATED_BY_ME: 2,
-					INITIATED_BY_OTHER: 3,
-					CHAT_PICKER: 4,
-					BIZ_UPGRADE_FB_HOSTING: 5,
-				},
-			],
-			esrEphemeralityDuration: [7, 'integer'],
-			esrEphemeralityInitiator: [
-				8,
-				{
-					INITIATED_BY_ME: 1,
-					INITIATED_BY_OTHER: 2,
-					BIZ_UPGRADE_FB_HOSTING: 3,
-				},
-			],
-			esrEphemeralitySettingTimestamp: [9, 'integer'],
-			esrEphemeralityTriggerAction: [
-				10,
-				{
-					UNKNOWN: 0,
-					CHAT_SETTINGS: 1,
-					ACCOUNT_SETTINGS: 2,
-					BULK_CHANGE: 3,
-					BIZ_SUPPORTS_FB_HOSTING: 4,
-				},
-			],
-			esrFailureReason: [
-				11,
-				{
-					ESR_ABPROP_OFF: 1,
-					DM_RELIABILITY_ABPROP_OFF: 2,
-					INVALID_MESSAGE_TYPE: 3,
-					OLDER_EPHEMERAL_SETTING_TIMESTAMP: 4,
-					NO_EPHEMERAL_INFO: 5,
-					ATTEMPTS_EXHAUSTED: 6,
-					NO_USER_INFO: 7,
-					NO_CHAT_SESSION: 8,
-					INVALID_EPHEMERAL_DURATION: 9,
-				},
-			],
-			esrResolveResult: [
-				12,
-				{
-					SUCCESS: 1,
-					ERROR: 2,
-				},
-			],
-			isAGroup: [13, 'boolean'],
-			threadId: [14, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'EphemeralSyncResponseSend',
-		id: 4778,
-		props: {
-			clientDisappearingModeInitiator: [
-				1,
-				{
-					CHAT: 1,
-					INITIATED_BY_ME: 2,
-					INITIATED_BY_OTHER: 3,
-					CHAT_PICKER: 4,
-					BIZ_UPGRADE_FB_HOSTING: 5,
-				},
-			],
-			clientEphemeralityDuration: [2, 'integer'],
-			clientEphemeralityInitiator: [
-				3,
-				{
-					INITIATED_BY_ME: 1,
-					INITIATED_BY_OTHER: 2,
-					BIZ_UPGRADE_FB_HOSTING: 3,
-				},
-			],
-			clientEphemeralitySettingTimestamp: [4, 'integer'],
-			clientEphemeralityTriggerAction: [
-				5,
-				{
-					UNKNOWN: 0,
-					CHAT_SETTINGS: 1,
-					ACCOUNT_SETTINGS: 2,
-					BULK_CHANGE: 3,
-					BIZ_SUPPORTS_FB_HOSTING: 4,
-				},
-			],
-			esrDisappearingModeInitiator: [
-				6,
-				{
-					CHAT: 1,
-					INITIATED_BY_ME: 2,
-					INITIATED_BY_OTHER: 3,
-					CHAT_PICKER: 4,
-					BIZ_UPGRADE_FB_HOSTING: 5,
-				},
-			],
-			esrEphemeralityDuration: [7, 'integer'],
-			esrEphemeralityInitiator: [
-				8,
-				{
-					INITIATED_BY_ME: 1,
-					INITIATED_BY_OTHER: 2,
-					BIZ_UPGRADE_FB_HOSTING: 3,
-				},
-			],
-			esrEphemeralitySettingTimestamp: [9, 'integer'],
-			esrEphemeralityTriggerAction: [
-				10,
-				{
-					UNKNOWN: 0,
-					CHAT_SETTINGS: 1,
-					ACCOUNT_SETTINGS: 2,
-					BULK_CHANGE: 3,
-					BIZ_SUPPORTS_FB_HOSTING: 4,
-				},
-			],
-			esrFailureReason: [
-				11,
-				{
-					ESR_ABPROP_OFF: 1,
-					DM_RELIABILITY_ABPROP_OFF: 2,
-					INVALID_MESSAGE_TYPE: 3,
-					OLDER_EPHEMERAL_SETTING_TIMESTAMP: 4,
-					NO_EPHEMERAL_INFO: 5,
-					ATTEMPTS_EXHAUSTED: 6,
-					NO_USER_INFO: 7,
-					NO_CHAT_SESSION: 8,
-					INVALID_EPHEMERAL_DURATION: 9,
-				},
-			],
-			esrSendAttempt: [12, 'integer'],
-			esrSendResult: [
-				13,
-				{
-					SUCCESS: 1,
-					ERROR: 2,
-				},
-			],
-			isAGroup: [14, 'boolean'],
-			messageDisappearingModeInitiator: [
-				15,
-				{
-					CHAT: 1,
-					INITIATED_BY_ME: 2,
-					INITIATED_BY_OTHER: 3,
-					CHAT_PICKER: 4,
-					BIZ_UPGRADE_FB_HOSTING: 5,
-				},
-			],
-			messageEphemeralityDuration: [16, 'integer'],
-			messageEphemeralityInitiator: [
-				17,
-				{
-					INITIATED_BY_ME: 1,
-					INITIATED_BY_OTHER: 2,
-					BIZ_UPGRADE_FB_HOSTING: 3,
-				},
-			],
-			messageEphemeralitySettingTimestamp: [18, 'integer'],
-			messageEphemeralityTriggerAction: [
-				19,
-				{
-					UNKNOWN: 0,
-					CHAT_SETTINGS: 1,
-					ACCOUNT_SETTINGS: 2,
-					BULK_CHANGE: 3,
-					BIZ_SUPPORTS_FB_HOSTING: 4,
-				},
-			],
-			threadId: [20, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChannelGapDetected',
-		id: 4768,
-		props: {
-			channelIsForeground: [1, 'boolean'],
-			channelUserType: [
-				2,
-				{
-					OWNER: 1,
-					ADMIN: 2,
-					FOLLOWER: 3,
-					GUEST: 4,
-				},
-			],
-			cid: [3, 'string'],
-			gapSize: [4, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChannelMessageHistoryRequest',
-		id: 4770,
-		props: {
-			batchSize: [1, 'integer'],
-			channelMessageHistoryRequestType: [
-				2,
-				{
-					UNKNOWN: 0,
-					OLDER: 1,
-					NEWER: 2,
-					LATEST: 3,
-					EXACT: 4,
-					GAP: 5,
-				},
-			],
-			channelUserType: [
-				3,
-				{
-					OWNER: 1,
-					ADMIN: 2,
-					FOLLOWER: 3,
-					GUEST: 4,
-				},
-			],
-			cid: [4, 'string'],
-			processingDurationT: [5, 'timer'],
-			requestDurationT: [6, 'timer'],
-			requestSuccessful: [7, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChannelCoreEvent',
-		id: 4692,
-		props: {
-			channelCoreEventSequenceNumber: [8, 'integer'],
-			channelCoreEventType: [
-				1,
-				{
-					FOLLOW: 1,
-					UNFOLLOW: 2,
-					MUTE: 3,
-					UNMUTE: 4,
-				},
-			],
-			channelDirectorySessionId: [7, 'integer'],
-			channelEntryPoint: [
-				2,
-				{
-					UNKNOWN: 0,
-					UPDATES_TAB: 1,
-					DIRECTORY: 2,
-					LINK: 3,
-					DEEPLINK: 4,
-					FORWARDED_MESSAGE: 5,
-					DIRECTORY_SEARCH: 6,
-					RECOMMENDED_LIST: 7,
-					NOTIFICATION: 8,
-					UPDATES_TAB_SEARCH: 9,
-					STATUS: 10,
-					ADMIN_INVITE_MESSAGE: 11,
-					MEDIA_BROWSER: 12,
-					SIMILAR_CHANNEL: 13,
-				},
-			],
-			channelEntryPointApp: [
-				3,
-				{
-					EXTERNAL_UNKNOWN: 1,
-					WHATSAPP: 2,
-				},
-			],
-			channelEntryPointMetadata: [
-				10,
-				{
-					STATUS_HEADER: 1,
-					LINK_TOOLTIP: 2,
-					LINK_BUTTON: 3,
-					POST_TOOLTIP: 4,
-				},
-			],
-			channelEventUnit: [
-				12,
-				{
-					RECOMMENDED_CHANNELS: 1,
-					SIMILAR_CHANNELS: 2,
-				},
-			],
-			cid: [4, 'string'],
-			directoryChannelIndex: [9, 'integer'],
-			entryPointMetadata: [5, 'string'],
-			eventSurface: [
-				6,
-				{
-					CHANNEL_UPDATES_HOME: 1,
-					CHANNEL_THREAD: 2,
-					CHANNEL_DIRECTORY: 3,
-					CHANNEL_DIRECTORY_SEARCH: 4,
-					CHANNEL_PROFILE: 5,
-					CHANNEL_UPDATES_HOME_SEARCH: 6,
-				},
-			],
-			similarChannelsSessionId: [13, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'UserNoticeError',
-		id: 2474,
-		props: {
-			noticeType: [
-				4,
-				{
-					LEGACY_USER_NOTICE: 0,
-					BADGED_USER_NOTICE: 1,
-					PDFN_DISCLOSURE: 2,
-				},
-			],
-			userNoticeContentVersion: [2, 'integer'],
-			userNoticeErrorEvent: [
-				3,
-				{
-					INVALID_STANZA: 1,
-					JSON_FETCH: 2,
-					JSON_PARSE: 3,
-					IMAGE_FETCH: 4,
-					NO_ELIGIBLE_DISCLOSURE: 5,
-					DISCLOSURE_STAGE_FETCH: 6,
-					UI_TEMPLATE_MISMATCHED: 7,
-					ERROR_UNKNOWN: 8,
-					SYNC_STAGE_MISMATCH: 9,
-					IMAGE_FETCH_400: 10,
-					JSON_FETCH_400: 11,
-					JSON_FETCH_REDIRECT: 12,
-					IMAGE_FETCH_REDIRECT: 13,
-					IMAGE_FETCH_FORBIDDEN: 14,
-					JSON_FETCH_FORBIDDEN: 15,
-				},
-			],
-			userNoticeId: [1, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'StickerCommonQueryToStaticServer',
-		id: 2740,
-		props: {
-			httpResponseCode: [2, 'integer'],
-			params: [3, 'string'],
-			queryLatencyMs: [4, 'timer'],
-			queryType: [
-				1,
-				{
-					STICKER_STORE_DATA: 0,
-					PREVIEW_IMAGE_DOWNLOAD: 1,
-					STICKER_PACK_DATA: 2,
-					STICKER_SEARCH: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdExpansionAgentBrowserMdId',
-		id: 3390,
-		props: {
-			agentId: [1, 'string'],
-			browserId: [2, 'string'],
-			companionMdId: [5, 'integer'],
-			isCustomAgentName: [6, 'boolean'],
-			isNewAgent: [9, 'boolean'],
-			loginTimestamp: [3, 'integer'],
-			logoutTimestamp: [4, 'integer'],
-			mdLinkedCount: [8, 'integer'],
-			multideviceAction: [
-				7,
-				{
-					LOGIN: 0,
-					LOGOUT: 1,
-					CUSTOM_AGENT_NAME: 2,
-					MESSAGE_INFO: 3,
-					ACTIVE: 4,
-					DELETE: 5,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PsPhoneNumberHyperlink',
-		id: 3266,
-		props: {
-			isPhoneNumHyperlinkOwner: [1, 'boolean'],
-			phoneNumHyperlinkAction: [
-				2,
-				{
-					PHONE_NUM_HYPERLINK_MSG_RECEIVED: 1,
-					LONG_PRESS_PHONE_NUM_HYPERLINK: 2,
-					CLICK_PHONE_NUM_HYPERLINK: 3,
-					CLICK_CALL: 4,
-					CLICK_ADD_TO_CONTACTS: 5,
-					CLICK_MESSAGE_ON_WHATSAPP: 6,
-					CLICK_COPY_PHONE_NUMBER: 7,
-					CLOSE_DIALOG_BOX: 8,
-					MESSAGE_SENT: 9,
-					CLICK_CALL_ON_WHATSAPP: 10,
-				},
-			],
-			phoneNumberStatusOnWa: [3, 'boolean'],
-			sequenceNumber: [4, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 113760892,
-	},
-	{
-		name: 'GroupCreateC',
-		id: 156,
-		props: {},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'SendRevokeMessage',
-		id: 1348,
-		props: {
-			messageMediaType: [
-				2,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messageType: [
-				1,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			revokeSendDelay: [3, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'UtmMessageSend',
-		id: 4018,
-		props: {
-			businessPhoneNumber: [1, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 0,
-	},
-	{
-		name: 'WebcMessageSend',
-		id: 2072,
-		props: {
-			messageIsForward: [3, 'boolean'],
-			messageMediaType: [
-				2,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messageSendT: [4, 'timer'],
-			messageType: [
-				1,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdChatAssignmentSecondaryAction',
-		id: 3716,
-		props: {
-			mdChatAssignmentSecondaryActionAgentId: [1, 'string'],
-			mdChatAssignmentSecondaryActionAssignmentType: [
-				8,
-				{
-					ASSIGNED: 0,
-					UNASSIGNED: 1,
-				},
-			],
-			mdChatAssignmentSecondaryActionBrowserId: [2, 'string'],
-			mdChatAssignmentSecondaryActionChatType: [
-				3,
-				{
-					GROUP: 0,
-					BROADCAST_LIST: 1,
-					INDIVIDUAL: 2,
-					COMMUNITY: 3,
-					CHANNEL: 4,
-					INTEROP: 5,
-				},
-			],
-			mdChatAssignmentSecondaryActionError: [
-				4,
-				{
-					ERROR_FETCHING_AGENT_NAME: 0,
-					ERROR_FETCHING_CHAT: 1,
-					ERROR_OTHER: 2,
-				},
-			],
-			mdChatAssignmentSecondaryActionMdId: [5, 'integer'],
-			mdChatAssignmentSecondaryActionSource: [
-				6,
-				{
-					NONE: 0,
-					BOOTSTRAP: 1,
-				},
-			],
-			mdChatAssignmentSecondaryActionType: [
-				7,
-				{
-					ACTION_SYSTEM_MESSAGE_ADDED_TO_CHAT_HISTORY: 0,
-					ACTION_SYSTEM_MESSAGE_CREATION_ERROR: 1,
-					ACTION_SYSTEM_MESSAGE_RENDERED: 2,
-					ACTION_CHAT_STATUS_TICKER_SHOWN: 3,
-					ACTION_TOOLTIP_SHOWN: 4,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdChatAssignment',
-		id: 3752,
-		props: {
-			assignerAgentId: [1, 'string'],
-			assignerBrowserId: [2, 'string'],
-			assignerMdId: [3, 'integer'],
-			chatAssignmentAction: [
-				4,
-				{
-					ACTION_ASSIGNED: 0,
-					ACTION_UNASSIGNED: 1,
-					ACTION_REASSIGNED: 2,
-				},
-			],
-			chatAssignmentAgentId: [5, 'string'],
-			chatAssignmentBrowserId: [6, 'string'],
-			chatAssignmentChatType: [
-				7,
-				{
-					INDIVIDUAL: 0,
-					GROUP: 1,
-					COMMUNITY: 2,
-					CHANNEL: 3,
-				},
-			],
-			chatAssignmentEntryPoint: [
-				8,
-				{
-					CONVERSATION_OVERFLOW_MENU: 0,
-					CONTACT_INFO_SCREEN: 1,
-					MULTI_SELECT: 2,
-					SYSTEM_MESSAGE: 3,
-					CHAT_LIST_SWIPE: 4,
-				},
-			],
-			chatAssignmentMdId: [9, 'integer'],
-			chatsCnt: [10, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'OtpRetriever',
-		id: 3468,
-		props: {
-			businessPhoneNumber: [1, 'integer'],
-			chatId: [19, 'string'],
-			chatsFolderType: [
-				12,
-				{
-					INBOX: 1,
-					ARCHIVED: 2,
-				},
-			],
-			ctaFallbackReason: [
-				2,
-				{
-					NO_OTP_REQUEST_RECEIVED: 0,
-					OTP_REQUEST_EXPIRED: 1,
-					HASH_MISMATCH: 2,
-					NO_ACTIVITY_LISTENING_ON_THIRD_PARTY_APP: 3,
-					OTHER: 4,
-					NO_PACKAGE_NAME_ON_MESSAGE: 5,
-					NO_CTA_DISPLAY_NAME: 6,
-					INCOMPATIBLE_OS_VERSION: 7,
-					NO_RETRIEVER_BUTTON: 8,
-					FEATURE_DISABLED: 9,
-					AMBIGUOUS_DELIVERY_DESTINATION: 10,
-				},
-			],
-			ctaType: [
-				3,
-				{
-					COPY_CODE: 0,
-					AUTOFILL: 1,
-				},
-			],
-			isKeepChatsArchivedEnabled: [13, 'boolean'],
-			isMessageNotificationEnabled: [14, 'boolean'],
-			isNotificationEnabled: [15, 'boolean'],
-			messageReceivedElapsedTimeSeconds: [11, 'integer'],
-			otpCorrelationId: [20, 'string'],
-			otpEventSource: [
-				5,
-				{
-					NOTIFICATION_CTA: 0,
-					NOTIFICATION_BODY: 1,
-					CHAT_CTA: 2,
-					OTHER: 3,
-					OTP_MESSAGE: 4,
-					OTP_MESSAGE_INFO: 5,
-					OTP_CONFIGURATION: 6,
-					OTP_REQUEST_SENDER: 7,
-					OTP_ZERO_TAP_SENDER: 8,
-					OTP_CONF_OPTION: 9,
-				},
-			],
-			otpEventType: [
-				6,
-				{
-					CLICK: 0,
-					IMPRESSION: 1,
-					OTP_CODE_REQUESTED: 2,
-					OTP_CODE_SENT: 3,
-					MESSAGE_RECEIVED: 4,
-					MESSAGE_READ: 5,
-					MESSAGE_DELETED: 6,
-					ZERO_TAP_ENABLED: 7,
-					ZERO_TAP_DISABLED: 8,
-					ZERO_TAP_NOTICE_VIEWED: 9,
-					CLEAR_CHAT: 10,
-					ZERO_TAP_SEND_CODE_STARTED: 11,
-					ZERO_TAP_SEND_CODE_COMPLETED: 12,
-					ZERO_TAP_SEND_CODE_FAILED: 13,
-					OTP_CONF_OPT_ZERO_TAP_FLAG_ENABLED: 14,
-					OTP_CONF_OPT_ZERO_TAP_FLAG_DISABLED: 15,
-					HANDSHAKE_CONFIRMATION_SENT: 16,
-				},
-			],
-			otpFailureReason: [16, 'string'],
-			otpHandshakeElapsedTimeMs: [21, 'integer'],
-			otpHandshakeId: [23, 'string'],
-			otpMaskLinkedDevices: [24, 'boolean'],
-			otpProductType: [
-				7,
-				{
-					ONE_TAP: 0,
-					ZERO_TAP: 1,
-					COPY_CODE: 2,
-				},
-			],
-			otpSdkVersion: [22, 'string'],
-			otpSessionId: [8, 'string'],
-			receiverCountryCode: [18, 'string'],
-			templateId: [17, 'string'],
-			thirdPartyPackageNameFromIntent: [9, 'string'],
-			thirdPartyPackageSignatureHash: [10, 'string'],
-			waDeviceId: [25, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 113760892,
-	},
-	{
-		name: 'BizCatalogView',
-		id: 3006,
-		props: {
-			bizPlatform: [
-				14,
-				{
-					UNKNOWN: 1,
-					SMB: 2,
-					ENT: 3,
-					CLOUDAPI: 4,
-				},
-			],
-			cartToggle: [13, 'boolean'],
-			catalogCategoryId: [19, 'string'],
-			catalogEntryPoint: [
-				2,
-				{
-					CATALOG_ENTRY_POINT_PROFILE: 1,
-					CATALOG_ENTRY_POINT_SETTINGS: 2,
-					CATALOG_ENTRY_POINT_MESSAGE: 3,
-					CATALOG_ENTRY_POINT_ATTACHMENT_PANEL: 4,
-					CATALOG_ENTRY_POINT_NUX: 5,
-					CATALOG_ENTRY_POINT_DEEPLINK: 6,
-					CATALOG_ENTRY_POINT_CHAT: 7,
-					CATALOG_ENTRY_POINT_ORDER_MESSAGE: 8,
-					CATALOG_ENTRY_POINT_INVOICE_ATTACHMENT_PANEL: 9,
-					CATALOG_ENTRY_POINT_PRODUCT_LIST_MESSAGE: 10,
-					CATALOG_ENTRY_POINT_TOP_BAR: 11,
-					CATALOG_ENTRY_POINT_PROFILE_ITEM_CLICK: 12,
-					CATALOG_ENTRY_POINT_PROFILE_SEE_ALL: 13,
-					CATALOG_ENTRY_POINT_QUOTED_PRODUCT: 14,
-					CATALOG_ENTRY_POINT_CATALOG_MESSAGE: 15,
-					CATALOG_ENTRY_QBM: 16,
-					CATALOG_ENTRY_POINT_ADS_DEEPLINK: 17,
-					CATALOG_ENTRY_POINT_WA_PAGES: 18,
-					CATALOG_ENTRY_POINT_DIRECTORY_BARE_TIPS: 19,
-					CATALOG_ENTRY_POINT_BIZ_ACTION_BAR: 20,
-					CATALOG_ENTRY_POINT_BIZ_ONBOARDING: 21,
-					CATALOG_ENTRY_POINT_TRUST_CARD: 22,
-					CATALOG_ENTRY_POINT_FLOWS: 23,
-				},
-			],
-			catalogEventSampled: [11, 'boolean'],
-			catalogOwnerJid: [10, 'string'],
-			catalogReportReasonCode: [8, 'string'],
-			catalogSessionId: [3, 'string'],
-			catalogViewAction: [
-				1,
-				{
-					ACTION_CARD_ITEM_CLICK: 2,
-					ACTION_CARD_MORE_CLICK: 3,
-					ACTION_LIST_IMPRESSION: 4,
-					ACTION_DETAIL_IMAGE_CLICK: 6,
-					ACTION_DETAIL_LINK_CLICK: 7,
-					ACTION_FULL_IMAGE_SWIPE: 11,
-					ACTION_DETAIL_IMPRESSION: 12,
-					ACTION_REPORT_PRODUCT: 13,
-					ACTION_SEND_PRODUCT_MESSAGE: 14,
-					ACTION_REPORT_PRODUCT_SUCCESS: 15,
-					ACTION_REPORT_PRODUCT_FAILURE: 16,
-					ACTION_QUOTED_PRODUCT_IN_CONVERSATION_CLICK: 17,
-					ACTION_PRODUCT_IN_CONVERSATION_CLICK: 18,
-					ACTION_SHARE_CATALOG_LINK_CLICK: 19,
-					ACTION_SHARE_PRODUCT_LINK_CLICK: 20,
-					ACTION_CATALOG_IN_CONVERSATION_CLICK: 21,
-					ACTION_SHARE_CATALOG_VIA_WA_LINK_CLICK: 22,
-					ACTION_SHARE_PRODUCT_VIA_WA_LINK_CLICK: 23,
-					ACTION_SHARE_CATALOG_COPY_LINK_CLICK: 24,
-					ACTION_SHARE_PRODUCT_COPY_LINK_CLICK: 25,
-					ACTION_CHAT_CATALOG_ICON_CLICK: 26,
-					ACTION_MESSAGE_BUSINESS_BUTTON_CLICK: 27,
-					ACTION_CART_ADD_PRODUCT: 28,
-					ACTION_CART_EDIT_PRODUCT: 29,
-					ACTION_CART_DELETE_PRODUCT: 30,
-					ACTION_CART_ABANDON: 31,
-					ACTION_CART_ICON_CLICK: 32,
-					ACTION_CART_SNACKBAR_CLICK: 33,
-					ACTION_SEND_ORDER_MESSAGE: 34,
-					ACTION_ORDER_LIST_IMPRESSION: 35,
-					ACTION_QUOTED_PRODUCT_MESSAGE_SEND: 36,
-					ACTION_CART_LIST_IMPRESSION: 37,
-					ACTION_ORDER_MESSAGE_CLICK: 38,
-					ACTION_ORDER_LIST_ITEM_CLICK: 39,
-					ACTION_PLM_CART_CTA_CLICK: 40,
-					ACTION_CART_CHAT_ICON_CLICK: 42,
-					ACTION_CREATE_CART: 43,
-					ACTION_PLP_PRODUCT_VARIANT_BOTTOM_SHEET_OPEN: 44,
-					ACTION_PLP_PRODUCT_VARIANT_CHANGE: 45,
-					ACTION_PDP_PRODUCT_VARIANT_CHANGE: 46,
-					ACTION_PLP_BOTTOM_SHEET_SEE_MORE_DETAILS: 47,
-				},
-			],
-			collectionId: [15, 'string'],
-			collectionIndex: [16, 'string'],
-			deepLinkOpenFrom: [
-				12,
-				{
-					DEEP_LINK_EXTERNAL: 1,
-					DEEP_LINK_WA_LINK_CLICK: 2,
-					QR_CODE_SHEET: 3,
-					DEEP_LINK_BANNER: 4,
-					DEEP_LINK_SMB_NOTIFICATION: 5,
-					DEEP_LINK_MESSENGER_APP: 6,
-				},
-			],
-			entryPointConversationInitiated: [
-				22,
-				{
-					BUSINESS_INITIATED: 0,
-					CONSUMER_INITIATED: 1,
-					NO_MESSAGES_LAST_24H: 2,
-				},
-			],
-			entryPointConversionApp: [20, 'string'],
-			entryPointConversionSource: [21, 'string'],
-			hasVariants: [23, 'boolean'],
-			isNewProductAddedToCart: [7, 'boolean'],
-			isOrderMsgAttached: [5, 'boolean'],
-			orderId: [4, 'string'],
-			productId: [9, 'string'],
-			productIndex: [17, 'string'],
-			quantity: [6, 'integer'],
-			sequenceNumber: [18, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 0,
-	},
-	{
-		name: 'CatalogBiz',
-		id: 1722,
-		props: {
-			cartToggle: [13, 'boolean'],
-			catalogAppealReason: [4, 'string'],
-			catalogBizAction: [
-				1,
-				{
-					ACTION_PRODUCT_ADD_CLICKED: 1,
-					ACTION_PRODUCT_ADD_SUCCESS: 2,
-					ACTION_PRODUCT_ADD_FAILED: 3,
-					ACTION_PRODUCT_EDIT_CLICKED: 4,
-					ACTION_PRODUCT_EDIT_SUCCESS: 5,
-					ACTION_PRODUCT_EDIT_FAILED: 6,
-					ACTION_PRODUCT_DELETE_CLICKED: 7,
-					ACTION_PRODUCT_DELETE_SUCCESS: 8,
-					ACTION_PRODUCT_DELETE_FAILED: 9,
-					ACTION_APPEAL_PRODUCT_CLICKED: 10,
-					ACTION_APPEAL_PRODUCT_SUCCESS: 11,
-					ACTION_APPEAL_PRODUCT_FAILED: 12,
-					ACTION_CREATE_PRODUCT_CATALOG: 13,
-					ACTION_CREATE_PRODUCT_CATALOG_SUCCESS: 14,
-					ACTION_CREATE_PRODUCT_CATALOG_FAILED: 15,
-					ACTION_CATALOG_MENU_ITEM_CLICKED: 16,
-					ACTION_PRODUCT_RESUBMIT_CLICKED: 17,
-					ACTION_START_IMPORT_FLOW: 18,
-					ACTION_IMPORT_POST: 19,
-					ACTION_CARD_ITEM_CLICK: 21,
-					ACTION_CARD_MORE_CLICK: 22,
-					ACTION_LIST_IMPRESSION: 23,
-					ACTION_DETAIL_IMAGE_CLICK: 25,
-					ACTION_DETAIL_LINK_CLICK: 26,
-					ACTION_FULL_IMAGE_SWIPE: 30,
-					ACTION_DETAIL_IMPRESSION: 31,
-					ACTION_QUOTED_PRODUCT_IN_CONVERSATION_CLICK: 32,
-					ACTION_PRODUCT_IN_CONVERSATION_CLICK: 33,
-					ACTION_SEND_PRODUCT_MESSAGE: 34,
-					ACTION_ONBOARD_IMPRESSION: 35,
-					ACTION_SHARE_CATALOG_LINK_CLICK: 36,
-					ACTION_SHARE_PRODUCT_LINK_CLICK: 37,
-					ACTION_CATALOG_IN_CONVERSATION_CLICK: 38,
-					ACTION_SHARE_CATALOG_VIA_WA_LINK_CLICK: 39,
-					ACTION_SHARE_PRODUCT_VIA_WA_LINK_CLICK: 40,
-					ACTION_SHARE_CATALOG_COPY_LINK_CLICK: 41,
-					ACTION_SHARE_PRODUCT_COPY_LINK_CLICK: 42,
-					ACTION_SEND_CATALOG_CLICK: 43,
-					ACTION_ORDER_MESSAGE_CLICK: 44,
-					ACTION_ORDER_LIST_IMPRESSION: 45,
-					ACTION_ORDER_LIST_ITEM_CLICK: 46,
-					ACTION_MESSAGE_BUSINESS_BUTTON_CLICK: 47,
-					ACTION_QUOTED_PRODUCT_MESSAGE_SEND: 48,
-					ACTION_CART_ADD_PRODUCT: 49,
-					ACTION_CART_ICON_CLICK: 50,
-					ACTION_CART_SNACKBAR_CLICK: 51,
-					ACTION_CART_LIST_IMPRESSION: 52,
-					ACTION_CART_EDIT_PRODUCT: 53,
-					ACTION_CART_DELETE_PRODUCT: 54,
-					ACTION_CART_ABANDON: 55,
-					ACTION_SEND_ORDER_MESSAGE: 56,
-					ACTION_MENU_CLICK: 57,
-					ACTION_PRODUCT_HIDE_CLICKED: 58,
-					ACTION_PRODUCT_HIDE_SUCCESS: 59,
-					ACTION_PRODUCT_HIDE_CANCELLED: 60,
-					ACTION_PRODUCT_HIDE_FAILED: 61,
-					ACTION_PRODUCT_UNHIDE_CLICKED: 62,
-					ACTION_PRODUCT_UNHIDE_SUCCESS: 63,
-					ACTION_PRODUCT_UNHIDE_CANCELLED: 64,
-					ACTION_PRODUCT_UNHIDE_FAILED: 65,
-					ACTION_CATALOG_LIST_MENU_CLICKED: 66,
-					ACTION_CATALOG_LIST_MENU_CLICKED_WITH_ADVERTISE_SHOWN: 67,
-					ACTION_COLLECTION_CREATE_CLICKED: 68,
-					ACTION_COLLECTION_CREATED: 69,
-					ACTION_MENU_COLLECTIONS_CLICK: 70,
-					ACTION_COLLECTION_RENAME_CLICKED: 71,
-					ACTION_COLLECTION_RENAME_CANCELLED: 72,
-					ACTION_COLLECTION_RENAMED: 73,
-					ACTION_COLLECTION_DELETE_CLICKED: 74,
-					ACTION_COLLECTION_DELETE_CANCELLED: 75,
-					ACTION_COLLECTION_DELETED: 76,
-					ACTION_COLLECTION_ASSIGN_ITEMS: 77,
-					ACTION_COLLECTION_UNASSIGN_ITEMS: 78,
-					ACTION_COLLECTION_CHANGE_ORDER: 80,
-					ACTION_COLLECTION_ITEM_CHANGE_ORDER: 81,
-				},
-			],
-			catalogEntryPoint: [
-				7,
-				{
-					CATALOG_ENTRY_POINT_PROFILE: 1,
-					CATALOG_ENTRY_POINT_SETTINGS: 2,
-					CATALOG_ENTRY_POINT_MESSAGE: 3,
-					CATALOG_ENTRY_POINT_ATTACHMENT_PANEL: 4,
-					CATALOG_ENTRY_POINT_NUX: 5,
-					CATALOG_ENTRY_POINT_DEEPLINK: 6,
-					CATALOG_ENTRY_POINT_CHAT: 7,
-					CATALOG_ENTRY_POINT_ORDER_MESSAGE: 8,
-					CATALOG_ENTRY_POINT_INVOICE_ATTACHMENT_PANEL: 9,
-					CATALOG_ENTRY_POINT_PRODUCT_LIST_MESSAGE: 10,
-					CATALOG_ENTRY_POINT_TOP_BAR: 11,
-					CATALOG_ENTRY_POINT_PROFILE_ITEM_CLICK: 12,
-					CATALOG_ENTRY_POINT_PROFILE_SEE_ALL: 13,
-					CATALOG_ENTRY_POINT_QUOTED_PRODUCT: 14,
-					CATALOG_ENTRY_POINT_CATALOG_MESSAGE: 15,
-					CATALOG_ENTRY_QBM: 16,
-					CATALOG_ENTRY_POINT_ADS_DEEPLINK: 17,
-					CATALOG_ENTRY_POINT_WA_PAGES: 18,
-					CATALOG_ENTRY_POINT_DIRECTORY_BARE_TIPS: 19,
-					CATALOG_ENTRY_POINT_BIZ_ACTION_BAR: 20,
-					CATALOG_ENTRY_POINT_BIZ_ONBOARDING: 21,
-					CATALOG_ENTRY_POINT_TRUST_CARD: 22,
-					CATALOG_ENTRY_POINT_FLOWS: 23,
-				},
-			],
-			catalogSessionId: [3, 'string'],
-			collectionCount: [18, 'integer'],
-			collectionId: [14, 'string'],
-			collectionIndex: [15, 'string'],
-			deepLinkOpenFrom: [
-				8,
-				{
-					DEEP_LINK_EXTERNAL: 1,
-					DEEP_LINK_WA_LINK_CLICK: 2,
-					QR_CODE_SHEET: 3,
-					DEEP_LINK_BANNER: 4,
-					DEEP_LINK_SMB_NOTIFICATION: 5,
-					DEEP_LINK_MESSENGER_APP: 6,
-				},
-			],
-			errorCode: [5, 'integer'],
-			isOrderMsgAttached: [10, 'boolean'],
-			orderId: [9, 'string'],
-			productCount: [6, 'integer'],
-			productId: [2, 'string'],
-			productIds: [12, 'string'],
-			productIndex: [16, 'string'],
-			quantity: [11, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcImgError',
-		id: 1700,
-		props: {
-			webcImgErrorCode: [1, 'number'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'GroupJourney',
-		id: 4512,
-		props: {
-			actionType: [
-				1,
-				{
-					OPEN: 1,
-					SELECT_FILTER: 2,
-					SEARCH_WITH_FILTER: 3,
-					SEARCH: 4,
-					SEARCH_ITEM_SELECTED: 5,
-					SEARCH_MSG_SENT: 6,
-					UNSELECT_FILTER: 7,
-					AUTO_CLEAR_FILTER: 8,
-					VIEW: 9,
-					GROUP_NAVIGATION: 10,
-					GROUP_DISCOVERY: 11,
-					GROUP_JOIN: 12,
-					SUBGROUP_SWITCHER_CLICK: 13,
-					SUBGROUP_MENTION_CLICK: 14,
-					COMMUNITY_RICH_SYSTEM_MESSAGE_CLICK: 15,
-					GROUP_SYSTEM_MESSAGE_CLICK: 16,
-					NESTING_VIEW_COMMUNITY_CLICK: 17,
-					SELECT_COMMUNITY_ADMINS_CAN_ADD_GROUPS: 18,
-					SELECT_EVERYONE_CAN_ADD_GROUPS: 19,
-					GROUP_JOIN_REQUEST: 20,
-					NOTIFICATION_RECEIVED: 21,
-					NOTIFICATION_RENDERED: 22,
-					TAP_TO_OPEN: 23,
-					TAP_TO_REPLY: 24,
-					VOIP_CALLBACK: 25,
-					VOIP_MESSAGE: 26,
-					VOIP_DECLINE: 27,
-					MARK_AS_READ: 28,
-					AI_NEW_CHAT_CLICK: 29,
-					AI_TAB_SELECTION_CLICK: 30,
-					AI_PERSONA_SELECTION_CLICK: 31,
-					AI_TOS_VIEW: 32,
-					AI_TOS_ACCEPT_CLICK: 33,
-					AI_TOS_DISMISS_CLICK: 34,
-					AI_NEW_UGC_CLICK: 35,
-					AI_UGC_CREATION_START_CLICK: 36,
-					AI_GENDER_AGE_SELECTION_CLICK: 37,
-					AI_PERSONALITY_SELECTION_CLICK: 38,
-					AI_INTEREST_SELECTION_CLICK: 39,
-					AI_AVATAR_SELECTION_CLICK: 40,
-					AI_NAME_SELECTION_CLICK: 41,
-					AI_UGC_CREATION_FINISH_CLICK: 42,
-					REQUEST_WAITLIST_DIALOG_APPEAR: 43,
-					REQUEST_WAITLIST_SELECT: 44,
-					FILTER_VIEWED: 45,
-					FILTER_EMPTY_STATE_VIEWED: 46,
-					BUSINESS_SERP_LOADED: 47,
-					BIZ_SEE_MORE_CLICKED: 48,
-					IMPRESSION: 49,
-					BIZ_SEARCH_SET_LOCATION_CLICKED: 50,
-					CLOSE_BTN_CLICKED: 51,
-					AI_CHAT_CLICK: 52,
-					NEW_CHAT_CLICK: 53,
-					SERP_LOADED: 54,
-				},
-			],
-			appSessionId: [2, 'string'],
-			groupSize: [3, 'integer'],
-			surface: [
-				4,
-				{
-					CHAT: 1,
-					CHATLIST: 2,
-					GALLERY: 3,
-					COMMUNITY_HOME: 4,
-					COMMUNITY_TAB: 5,
-					COMMUNITY_NAV: 6,
-					COMMUNITY_NAV_SHEET: 7,
-					COMMUNITY_SETTINGS: 8,
-					GROUP_INFO: 9,
-					NOTIFICATION: 10,
-					EXPRESSIONS_EMOJI: 11,
-					INVITE_NON_WA_CONTACT: 12,
-				},
-			],
-			threadType: [
-				5,
-				{
-					GROUP: 1,
-					BROADCAST: 2,
-					INDIVIDUAL: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					SUB_GROUP: 6,
-					DEFAULT_SUB_GROUP: 7,
-					PARENT_GROUP: 8,
-				},
-			],
-			uiSurface: [
-				7,
-				{
-					UNKNOWN: 1,
-					COMMUNITY_HOME: 2,
-					COMMUNITY_TAB: 3,
-					CHAT_THREAD: 4,
-					CHAT_INFO_PAGE: 5,
-					CHAT_LIST: 6,
-					COMMUNITY_NAVIGATION: 7,
-					BACKGROUND: 8,
-					RESIGN: 9,
-					SUBGROUP_SWITCHER: 10,
-					COMMUNITY_COMPOSER: 11,
-					MEDIA_VIEWER: 12,
-					ALL_MEDIA: 13,
-					STREAMING_MEDIA_VIEWER: 14,
-					CALLS_HOME_TAB: 15,
-					IN_CALL_UI: 16,
-					STATUS_HOME_TAB: 17,
-					STATUS_COMPOSER: 18,
-					STATUS_VIEW: 19,
-					CAMERA: 20,
-					PHOTO_VIDEO_LIBRARY: 21,
-					SETTINGS_HOME_TAB: 22,
-					TOOLS_TAB: 23,
-					COMMUNITY_SETTINGS: 24,
-					CHANNEL_UPDATES_HOME: 25,
-					CHANNEL_THREAD: 26,
-					CHANNEL_DIRECTORY: 27,
-					CHANNEL_PROFILE: 28,
-					CHANNEL_FORWARD: 29,
-					CHANNEL_PRODUCER_MEDIA_EDITOR: 30,
-					CHANNEL_CREATE: 31,
-					CHANNEL_EDIT: 32,
-					CHANNEL_DELETE: 33,
-					STATUS_COMPOSER_TEXT: 34,
-					LIGHTWEIGHT_CALL_UI: 35,
-					AI_HOME: 36,
-					LIGHTWEIGHT_CALL_BANNER: 37,
-					LIGHTWEIGHT_CALL_NUX: 38,
-					CALL_INFO_PAGE: 39,
-					SMB_CATALOG: 40,
-					SMB_CATALOG_SHARE_LINK: 41,
-					SMB_CATALOG_SHARE_PRODUCT_LINK: 42,
-					SMB_CATALOG_SETTINGS: 43,
-					SMB_CATALOG_PRODUCT: 44,
-					SMB_CATALOG_NEW_COLLECTION: 45,
-					SMB_CATALOG_EDIT_COLLECTION: 46,
-					SMB_CATALOG_CREATE_PRODUCT: 47,
-					SMB_CATALOG_EDIT_PRODUCT: 48,
-					SMB_CATALOG_NEW_COLLECTION_ADD_ITEMS: 49,
-					SMB_CATALOG_COLLECTION_UPDATE_ITEMS: 50,
-					SMB_CATALOG_COLLECTIONS: 51,
-					SMB_CATALOG_COLLECTION_REORDER: 52,
-					SMB_CATALOG_COLLECTION_PRODUCTS: 53,
-					SMB_CATALOG_COLLECTION_PRODUCTS_REORDER: 54,
-					CREATE_EVENT: 55,
-					EVENT_PAGE: 56,
-					EVENTS_IN_GROUP: 57,
-					CATALOG_HOME: 59,
-					CATALOG_COLLECTION: 60,
-					CATALOG_ITEM: 61,
-					CATALOG_CART: 62,
-					FLOWS_EXPERIENCE: 63,
-					BUSINESS_PROFILE_EDIT: 64,
-					BUSINESS_PROFILE_EDIT_NAME: 65,
-					BUSINESS_PROFILE_EDIT_CATEGORIES: 66,
-					BUSINESS_PROFILE_EDIT_DESCRIPTION: 67,
-					BUSINESS_PROFILE_EDIT_WEBSITE: 68,
-					BUSINESS_PROFILE_EDIT_EMAIL: 69,
-					BUSINESS_PROFILE_EDIT_ADDRESS: 70,
-					BUSINESS_PROFILE_EDIT_HOURS: 71,
-					BUSINESS_PROFILE_EDIT_COVER_PHOTO: 72,
-					BUSINESS_PROFILE_LINK_FB_IG: 73,
-					BUSINESS_PROFILE_HELP_PAGE_LINK_FB_IG: 74,
-					PAYMENTS_HOME: 75,
-					PAYMENTS_HOME_TRANSACTIONS: 76,
-					PAYMENTS_HOME_RECENT_MERCHANTS: 77,
-					PAYMENTS_HOME_INVITE_OTHERS: 78,
-					PAYMENTS_HOME_HELP: 79,
-					MESSAGE_MENU: 80,
-					PIN_MESSAGE_REPLACEMENT_DIALOG: 81,
-					PIN_MESSAGE_EXPIRATION_DIALOG: 82,
-					MY_STATUS_LIST: 83,
-					ALL_STATUS_LIST: 84,
-					PIN_BANNER: 85,
-					CALL_BANNER: 86,
-					LANDING_SCREEN: 87,
-					NEW_CHAT: 88,
-					GROUP_MEMBER_ADD_GROUP_CREATION: 89,
-					GROUP_MEMBER_ADD_EXISTING_GROUP: 90,
-					GROUP_CHAT: 91,
-					GROUP_CREATION: 92,
-				},
-			],
-			userRole: [
-				6,
-				{
-					MEMBER: 0,
-					ADMIN: 1,
-					CADMIN: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcMessageQuery',
-		id: 1876,
-		props: {
-			webcAudioMessageCount: [14, 'integer'],
-			webcBrowserNetworkType: [1, 'string'],
-			webcBrowserStorageQuotaBytes: [20, 'integer'],
-			webcBrowserStorageQuotaUsedBytes: [21, 'integer'],
-			webcChatPosition: [2, 'integer'],
-			webcChatType: [
-				13,
-				{
-					INDIVIDUAL: 0,
-					GROUP: 1,
-					BROADCAST_LIST: 2,
-					COMMUNITY: 3,
-					NEWSLETTER: 4,
-				},
-			],
-			webcDocumentMessageCount: [16, 'integer'],
-			webcEarliestMessageIndex: [11, 'integer'],
-			webcEarliestMessageT: [12, 'timer'],
-			webcMessageCount: [4, 'integer'],
-			webcMessageQueryTrigger: [
-				19,
-				{
-					UNKNOWN: 0,
-					USER_SCROLL: 1,
-					NEW_MESSAGE_PREFETCH: 2,
-					SEARCH_RESULT_CLICK: 3,
-				},
-			],
-			webcMessageQueryType: [
-				3,
-				{
-					LOAD_PREV: 0,
-					LOAD_NEXT: 1,
-					LOAD_AROUND: 2,
-				},
-			],
-			webcOtherMessageCount: [18, 'integer'],
-			webcPhotoMessageCount: [7, 'integer'],
-			webcPttMessageCount: [15, 'integer'],
-			webcQueryT: [9, 'timer'],
-			webcResponseBytes: [10, 'integer'],
-			webcStickerMessageCount: [17, 'integer'],
-			webcTextMessageCount: [5, 'integer'],
-			webcVideoMessageCount: [6, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MediaPicker',
-		id: 1038,
-		props: {
-			audienceSelectorClicked: [24, 'boolean'],
-			audienceSelectorUpdated: [25, 'boolean'],
-			chatRecipients: [16, 'integer'],
-			isViewOnce: [22, 'boolean'],
-			mediaPickerAvatarStickers: [33, 'integer'],
-			mediaPickerChanged: [4, 'integer'],
-			mediaPickerCroppedRotated: [10, 'integer'],
-			mediaPickerDeleted: [3, 'integer'],
-			mediaPickerDrawing: [11, 'integer'],
-			mediaPickerFilter: [18, 'integer'],
-			mediaPickerHasLocationSticker: [26, 'boolean'],
-			mediaPickerLikeDoc: [19, 'integer'],
-			mediaPickerNotLikeDoc: [20, 'integer'],
-			mediaPickerOrigin: [
-				14,
-				{
-					CHAT_PHOTO_LIBRARY: 1,
-					CAMERA_TAB_CAPTURE: 2,
-					FORWARD: 3,
-					PASTE: 4,
-					SHARE_EXTENSION: 5,
-					EXPORT: 6,
-					MENU_CAMERA_CAPTURE: 7,
-					EXTERNAL_CAMERA: 8,
-					LINK_PREVIEW_DOWNLOAD: 9,
-					CAMERA_TAB_MEDIA_STRIP: 10,
-					CAMERA_TAB_PHOTO_LIBRARY: 11,
-					CHAT_BUTTON_CAMERA_CAPTURE: 12,
-					CHAT_BUTTON_CAMERA_MEDIA_STRIP: 13,
-					CHAT_BUTTON_CAMERA_PHOTO_LIBRARY: 14,
-					STATUS_TAB_CAMERA_CAPTURE: 15,
-					STATUS_TAB_CAMERA_MEDIA_STRIP: 16,
-					STATUS_TAB_CAMERA_PHOTO_LIBRARY: 17,
-					STATUS_REPLY_CAMERA_CAPTURE: 18,
-					STATUS_REPLY_CAMERA_MEDIA_STRIP: 19,
-					STATUS_REPLY_CAMERA_PHOTO_LIBRARY: 20,
-					MENU_CAMERA_PHOTO_LIBRARY: 21,
-					CHAT_GIF_INAPP: 22,
-					CHAT_GIF_EXTERNAL: 23,
-					STATUS_REPLY_GIF_INAPP: 24,
-					STATUS_REPLY_GIF_EXTERNAL: 25,
-					SMB_QUICK_REPLY_EDIT: 26,
-					SMB_QUICK_REPLY_SEND: 27,
-					MEDIA_BROWSER: 28,
-					CHAT_QUICK_EDIT: 29,
-					CAMERA_TAB_GIF: 30,
-					STATUS_TAB_GIF: 31,
-					PAYMENT_COMPOSER: 32,
-					PHOTO_RECEIVED: 33,
-					PHOTO_RECEIVED_GALLERY: 34,
-					AD_CREATION: 35,
-					EXTERNAL_DROP: 36,
-					IN_APP_BROWSER: 37,
-					PREMIUM_MESSAGE_COMPOSER: 38,
-					DOCUMENT_PICKER: 39,
-					IN_APP_BUG_REPORTING: 40,
-					STICKER_TRAY_CREATE_STICKER: 41,
-					STICKER_TRAY_EDIT_STICKER: 42,
-					STICKER_MESSAGE_CREATE_YOUR_OWN: 43,
-					STICKER_MESSAGE_EDIT_STICKER: 44,
-					MEDIA_VIEWER_CREATE_STICKER: 45,
-					STATUS_NEWSLETTER_CARD: 46,
-					CUTOUT_IMAGE_EDIT_STICKER: 47,
-					STICKER_TRAY_CREATE_STICKER_CAPTURE: 48,
-					THUNDERSTORM_IN_APP_PHOTO_LIBRARY: 49,
-					TRANSPARENT_IMAGE_EDIT_STICKER: 50,
-					BUSINESS_FLOWS: 51,
-					SYSTEM_INTENT: 52,
-				},
-			],
-			mediaPickerOriginThirdParty: [21, 'boolean'],
-			mediaPickerSent: [2, 'integer'],
-			mediaPickerSentUnchanged: [5, 'integer'],
-			mediaPickerSessionId: [29, 'string'],
-			mediaPickerStickers: [12, 'integer'],
-			mediaPickerT: [15, 'timer'],
-			mediaPickerText: [13, 'integer'],
-			mediaType: [
-				1,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			motionPhotoImpressionCount: [31, 'integer'],
-			motionPhotoSentCount: [32, 'integer'],
-			photoGalleryDurationT: [23, 'timer'],
-			photoQualitySetting: [
-				27,
-				{
-					AUTO: 0,
-					DATA_SAVER: 1,
-					HIGH_QUALITY: 2,
-					HIGHEST_QUALITY: 3,
-				},
-			],
-			pickerSessionId: [30, 'integer'],
-			statusRecipients: [17, 'integer'],
-			videoQualitySetting: [
-				28,
-				{
-					AUTO: 0,
-					DATA_SAVER: 1,
-					HIGH_QUALITY: 2,
-					HIGHEST_QUALITY: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcStatusSession',
-		id: 1880,
-		props: {
-			webcStatusMutedItemCount: [4, 'integer'],
-			webcStatusMutedRowCount: [7, 'integer'],
-			webcStatusRecentItemCount: [2, 'integer'],
-			webcStatusRecentRowCount: [5, 'integer'],
-			webcStatusSessionId: [1, 'integer'],
-			webcStatusViewedItemCount: [3, 'integer'],
-			webcStatusViewedRowCount: [6, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'TestAnonymousDailyId',
-		id: 2958,
-		props: {
-			psTestEnumField: [
-				1,
-				{
-					TEST_VALUE1: 1,
-					TEST_VALUE2: 2,
-				},
-			],
-			psTestFloatField: [2, 'number'],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 248614979,
-	},
-	{
-		name: 'TestAnonymousDaily',
-		id: 2328,
-		props: {},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 113760892,
-	},
-	{
-		name: 'TestAnonymousIdLess',
-		id: 3004,
-		props: {
-			psTimeSinceLastEventInMin: [1, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 0,
-	},
-	{
-		name: 'TestAnonymousMonthlyId',
-		id: 2960,
-		props: {},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 191000728,
-	},
-	{
-		name: 'TestAnonymousWeeklyId',
-		id: 2956,
-		props: {
-			psTestBooleanField: [2, 'boolean'],
-			psTestStringField: [3, 'string'],
-			psTimeSinceLastEventInMin: [1, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 42196056,
-	},
-	{
-		name: 'ChannelSimilarChannels',
-		id: 5202,
-		props: {
-			bannerStatus: [
-				1,
-				{
-					DISPLAYED: 0,
-					HIDDEN: 1,
-					CLOSED: 2,
-				},
-			],
-			bannerStatusReason: [
-				2,
-				{
-					NO_SIMILAR_CHANNELS_FOUND: 0,
-					NOT_ENOUGH_SIMILAR_CHANNELS: 1,
-					SIMILAR_CHANNELS_FOUND: 2,
-					CLOSE_TAP: 3,
-					UNFOLLOW_TAP: 4,
-				},
-			],
-			cid: [3, 'string'],
-			similarChannelDisplayRank: [4, 'integer'],
-			similarChannelEventSurface: [
-				5,
-				{
-					CHANNEL_UPDATES_HOME: 1,
-					CHANNEL_THREAD: 2,
-					CHANNEL_DIRECTORY: 3,
-					CHANNEL_DIRECTORY_SEARCH: 4,
-					CHANNEL_PROFILE: 5,
-					CHANNEL_UPDATES_HOME_SEARCH: 6,
-				},
-			],
-			similarChannelId: [6, 'string'],
-			similarChannelRank: [7, 'integer'],
-			similarChannelUserType: [
-				9,
-				{
-					OWNER: 1,
-					ADMIN: 2,
-					FOLLOWER: 3,
-					GUEST: 4,
-				},
-			],
-			similarChannelsSessionId: [10, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'UiMessageYourselfAction',
-		id: 3780,
-		props: {
-			uiMessageYourselfActionSessionId: [1, 'string'],
-			uiMessageYourselfActionType: [
-				2,
-				{
-					NEW_CHAT_PRESSED: 1,
-					YOU_SELECTED: 2,
-					SEARCH_BAR_PRESSED: 3,
-					SEARCH_FULL_NAME_YOU_SELECTED: 4,
-					NEW_NTS_CREATED: 5,
-					EXISTING_NTS_OPENED: 6,
-				},
-			],
-			uiMessageYourselfFunnelName: [
-				3,
-				{
-					NEW_CHAT: 1,
-					CONTACT_AND_GLOBAL_SEARCH: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MediaStreamPlayback',
-		id: 1584,
-		props: {
-			bytesDownloadedStart: [4, 'number'],
-			bytesTransferred: [5, 'number'],
-			didPlay: [15, 'boolean'],
-			forcedPlayCount: [12, 'integer'],
-			initialBufferingT: [7, 'timer'],
-			mediaSize: [2, 'number'],
-			mediaType: [
-				3,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			overallPlayT: [10, 'timer'],
-			overallT: [1, 'timer'],
-			playbackCount: [14, 'integer'],
-			playbackError: [17, 'integer'],
-			playbackOrigin: [
-				16,
-				{
-					CONVERSATION: 1,
-					STATUS: 2,
-					CHANNELS: 3,
-				},
-			],
-			playbackState: [
-				11,
-				{
-					IDLE: 1,
-					READY_PLAY: 2,
-					READY_PAUSE: 3,
-					BUFFERING: 4,
-					OUTSIDE: 5,
-					ENDED: 6,
-					ERROR: 7,
-				},
-			],
-			seekCount: [13, 'integer'],
-			totalRebufferingCount: [9, 'integer'],
-			totalRebufferingT: [8, 'timer'],
-			videoDuration: [6, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PrivacyTipAction',
-		id: 4794,
-		props: {
-			privacyTipActionType: [
-				1,
-				{
-					VIEW: 1,
-					CLICK_PRIVACY_TIP: 2,
-					CLICK_OK: 3,
-					CLICK_OUTSIDE: 4,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'UiAction',
-		id: 472,
-		props: {
-			agentEngagementType: [
-				9,
-				{
-					DIRECT_CHAT: 0,
-					INVOKED: 1,
-					MEMBER: 2,
-				},
-			],
-			botType: [
-				11,
-				{
-					UNKNOWN: 0,
-					METABOT: 1,
-					BOT_1P_BIZ: 2,
-					BOT_3P_BIZ: 3,
-				},
-			],
-			dbMainThreadCount: [13, 'integer'],
-			dbReadsCount: [14, 'integer'],
-			dbWritesCount: [15, 'integer'],
-			deviceCount: [5, 'integer'],
-			isLid: [8, 'boolean'],
-			localAddressingMode: [
-				10,
-				{
-					PN: 1,
-					LID: 2,
-				},
-			],
-			participantCount: [6, 'integer'],
-			sizeBucket: [
-				4,
-				{
-					LT32: 1,
-					LT64: 2,
-					LT128: 3,
-					LT256: 4,
-					LT512: 5,
-					LT1000: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			uiActionChatType: [
-				7,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					SUBGROUP: 3,
-					DEFAULT_SUBGROUP: 4,
-					CHANNEL: 5,
-				},
-			],
-			uiActionPreloaded: [2, 'boolean'],
-			uiActionT: [3, 'timer'],
-			uiActionTtrcSurfaceName: [12, 'string'],
-			uiActionType: [
-				1,
-				{
-					OTHER: 1,
-					APP_OPEN: 2,
-					CHAT_OPEN: 3,
-					IMAGE_OPEN: 4,
-					FIRST_FTS_RESULT: 5,
-					CONTACTS_OPEN: 6,
-					GROUP_INFO_OPEN: 7,
-					MSG_INFO_OPEN: 8,
-					COMMUNITY_INFO_OPEN: 9,
-					DEFAULT_SUBGROUP_INFO_OPEN: 10,
-					COMMUNITY_CREATE: 11,
-					COMMUNITY_LINK: 12,
-					EMOJI_OBI_DECOMPRESSION: 13,
-					EMOJI_PNG_DECOMPRESSION: 14,
-					CHAT_LIST_OPEN: 15,
-					CALL_LIST_OPEN: 16,
-					CHANNEL_INFO_OPEN: 17,
-					TTRC: 18,
-				},
-			],
-		},
-		weight: 5000,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'AdvertiseTooltipImpression',
-		id: 4024,
-		props: {
-			lwiEntryPoint: [
-				1,
-				{
-					SMB_CATALG_LIST_LWI_ADVERTISE_BANNER: 1,
-					SMB_CATALOG_LIST_ADVERTISE_MENU_ITEM: 2,
-					SMB_BUSINESS_TOOLS_ADVERTISE_LIST_ITEM: 3,
-					SMB_STATUS_DETAILS_ADVERTISE_MENU_ITEM: 4,
-					SMB_STATUS_PREVIEW_ADVERTISE_MENU_ITEM: 5,
-					SMB_CONVERSATIONS_LIST_BANNER_WITH_VALID_PRODUCT: 6,
-					SMB_CONVERSATIONS_LIST_BANNER_WITHOUT_VALID_PRODUCT: 7,
-					SMB_STATUS_3DTOUCH_ADVERTISE_MENU_ITEM: 8,
-					SMB_HOME_SCREEN_OVERFLOW_MENU_ITEM: 9,
-					SMB_BUSINESS_TOOLS_ADVERTISE_LIST_FIRST_ITEM: 10,
-					SMB_SETTINGS_ADVERTISE_LIST_ITEM: 11,
-					SMB_ADVERTISE_FROM_NOTIFICATION: 12,
-					SMB_ADVERTISE_FROM_BANNER: 13,
-					SMB_ADVERTISE_FROM_DEEP_LINK: 14,
-					SMB_BUSINESS_TOOLS_TAB_ADVERTISE: 15,
-					SMB_CATALOG_LIST_ADVERTISE_BUTTON: 16,
-					SMB_PRODUCT_DETAILS_ADVERTISE_BUTTON: 17,
-					SMB_ADVERTISE_FROM_STATUS_MESSAGE: 18,
-					SMB_HOME_SCREEN_ICON: 19,
-					SMB_HOME_BANNER: 20,
-					SMB_ADVERTISE_FROM_STATUS_MESSAGE_SELF_VIEW: 21,
-					SMB_STATUS_MAIN_TAB_ADVERTISE: 22,
-					SMB_STATUS_MAIN_TAB_BANNER: 23,
-					SMB_BUSINESS_HOME_CARD_CREATE_FIRST_AD: 24,
-					SMB_BUSINESS_HOME_CARD_CREATE_RETURNING_AD: 25,
-					SMB_MEDIA_SHARE_VIA_GROUP: 26,
-					SMB_MEDIA_SHARE_VIA_BROADCAST: 27,
-					STATUS_PLAYBACK_SCREEN_ICON: 28,
-					CATALOG_SHARED_IN_GROUP: 29,
-					CATALOG_SHARED_IN_BROADCAST_LIST: 30,
-					CATALOG_SHARED_IN_SINGLE_CHAT: 31,
-					PRODUCT_SHARED_IN_SINGLE_CHAT: 32,
-					PRODUCT_SHARED_IN_BROADCAST_LIST: 33,
-					PRODUCT_SHARED_IN_GROUP: 34,
-					PRODUCT_LINK_SHARED_IN_SINGLE_CHAT: 35,
-					PRODUCT_LINK_SHARED_IN_BROADCAST_LIST: 36,
-					PRODUCT_LINK_SHARED_IN_GROUP: 37,
-					SMB_MESSAGING_GUIDE_AD_CREATION: 38,
-					SMB_BUSINESS_HOME_ADVERTISE_FROM_BANNER: 39,
-					SMB_STATUS_UPSELL_BOTTOM_SHEET: 40,
-					BUSINESS_PROFILE: 41,
-					SMB_BUSINESS_HOME_CARD_ACTIVE_AD: 42,
-					SMB_STATUS_CHANNELS_TAB_ADVERTISE: 43,
-					SMB_STATUS_CHANNELS_TAB_BANNER: 44,
-					SMB_PRODUCT_UPSELL_BOTTOM_SHEET: 45,
-					SMB_STATUS_CHANNELS_UPSELL_BOTTOM_SHEET: 46,
-					SMB_ADVERTISE_FROM_FORWARD_SCREEN_INDIVIDUAL: 47,
-					SMB_ADVERTISE_FROM_FORWARD_SCREEN_GROUP: 48,
-					SMB_ADVERTISE_FROM_FORWARD_SCREEN_BROADCAST: 49,
-					SMB_BUSINESS_HOME_CARD_ACTIVE_AD_DISMISS: 50,
-					SMB_BUSINESS_HOME_CARD_DRAFT_AD: 51,
-					SMB_BUSINESS_HOME_MANAGE_AD: 52,
-					SMB_BUSINESS_TOOLS_MANAGE_AD: 53,
-					SMB_HOME_SCREEN_OVERFLOW_MANAGE_ITEM: 54,
-					SMB_BUSINESS_HOME_QP_CARD: 55,
-					SMB_CREATED_AD: 56,
-					SMB_BUSINESS_HOME_CARD_COUPON_PROMOTION: 57,
-				},
-			],
-			tooltipAction: [
-				2,
-				{
-					EMPTY: 1,
-					ENTER_AD_CREATION_FLOW: 2,
-					DISMISS: 3,
-					IGNORE: 4,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChannelLinkShare',
-		id: 4728,
-		props: {
-			channelLinkShareDirection: [
-				1,
-				{
-					WHATSAPP: 1,
-					STATUS: 2,
-					EXTERNAL: 3,
-				},
-			],
-			channelLinkShareEntryPoint: [
-				2,
-				{
-					CHANNEL_INFO_PAGE: 1,
-					CHANNEL_THREAD: 2,
-					PRODUCER_CONTEXT_CARD: 3,
-				},
-			],
-			channelLinkShareScreen: [
-				4,
-				{
-					CONTEXT_CARD: 1,
-					CHANNEL_INFO: 2,
-					CHANNEL_THREAD: 3,
-					SHARE_LINK_SCREEN: 4,
-				},
-			],
-			cid: [3, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'CommunityFeatureUsage',
-		id: 3696,
-		props: {
-			communityId: [2, 'string'],
-			communityUiAction: [
-				4,
-				{
-					ENTRY: 1,
-					GROUP_NAV: 2,
-					GROUP_ADD: 3,
-					COMMUNITY_NAV: 4,
-				},
-			],
-			communityUiFeature: [
-				3,
-				{
-					SUBGROUP_SWITCH: 1,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'GroupProfilePicture',
-		id: 3652,
-		props: {
-			groupCreationDs: [1, 'string'],
-			groupProfileAction: [
-				7,
-				{
-					CHANGE_PROFILE_PHOTO: 1,
-					TAP_ACTION_ITEM_TAKE_PHOTO: 2,
-					TAP_ACTION_ITEM_VIEW_PHOTO: 3,
-					TAP_ACTION_ITEM_EMOJI_STICKER: 4,
-					TAP_ACTION_ITEM_UPLOAD_PHOTO: 5,
-					TAP_ACTION_ITEM_REMOVE_PHOTO: 6,
-					TAP_ACTION_ITEM_WEB_SEARCH: 7,
-					EMOJI_PANEL_OPEN: 8,
-					STICKER_PANEL_OPEN: 9,
-					PROFILE_PIC_UPDATED: 10,
-				},
-			],
-			hasProfilePicture: [3, 'boolean'],
-			isAdmin: [4, 'boolean'],
-			preciseGroupSizeBucket: [
-				5,
-				{
-					LT4: 1,
-					LT8: 2,
-					LT16: 3,
-					LT32: 4,
-					LT64: 5,
-					LT128: 6,
-					LT256: 7,
-					LT512: 8,
-					LT1000: 9,
-					LT1500: 10,
-					LT2000: 11,
-					LT2500: 12,
-					LT3000: 13,
-					LT3500: 14,
-					LT4000: 15,
-					LT4500: 16,
-					LT5000: 17,
-					LARGEST_BUCKET: 18,
-				},
-			],
-			profilePictureType: [
-				6,
-				{
-					PHOTO_CAMERA: 1,
-					PHOTO_UPLOAD: 2,
-					WEB_SEARCH: 3,
-					EMOJI: 4,
-					STICKER: 5,
-					REMOVE_PHOTO: 6,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'KeepInChatNux',
-		id: 3486,
-		props: {
-			chatEphemeralityDuration: [1, 'integer'],
-			kicNuxActionName: [
-				2,
-				{
-					FIRST_DM_NUX_IMPRESSION: 1,
-					KIC_NUX_IMPRESSION: 2,
-					KIC_NUX_LEARN_MORE_TAP: 3,
-					KIC_SYSTEM_MESSAGE_GENERATE: 4,
-				},
-			],
-			threadId: [3, 'string'],
-			trigger: [
-				4,
-				{
-					CHAT_ENTRY: 1,
-					SYSTEM_MESSAGE: 2,
-					KEEP_MESSAGE_FIRST_TIME: 3,
-					USER_MESSAGE_KEPT: 4,
-					KEPT_FOLDER_TAP_FIRST_TIME: 5,
-					UNKEEP_MESSAGE_FIRST_TIME: 6,
-					EPHEMERAL_SETTINGS: 7,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'LwiEntryPointImpression',
-		id: 2906,
-		props: {
-			businessToolsSessionId: [2, 'string'],
-			catalogSessionId: [1, 'string'],
-			itemsCount: [7, 'integer'],
-			lwiEntryPoint: [
-				3,
-				{
-					SMB_CATALG_LIST_LWI_ADVERTISE_BANNER: 1,
-					SMB_CATALOG_LIST_ADVERTISE_MENU_ITEM: 2,
-					SMB_BUSINESS_TOOLS_ADVERTISE_LIST_ITEM: 3,
-					SMB_STATUS_DETAILS_ADVERTISE_MENU_ITEM: 4,
-					SMB_STATUS_PREVIEW_ADVERTISE_MENU_ITEM: 5,
-					SMB_CONVERSATIONS_LIST_BANNER_WITH_VALID_PRODUCT: 6,
-					SMB_CONVERSATIONS_LIST_BANNER_WITHOUT_VALID_PRODUCT: 7,
-					SMB_STATUS_3DTOUCH_ADVERTISE_MENU_ITEM: 8,
-					SMB_HOME_SCREEN_OVERFLOW_MENU_ITEM: 9,
-					SMB_BUSINESS_TOOLS_ADVERTISE_LIST_FIRST_ITEM: 10,
-					SMB_SETTINGS_ADVERTISE_LIST_ITEM: 11,
-					SMB_ADVERTISE_FROM_NOTIFICATION: 12,
-					SMB_ADVERTISE_FROM_BANNER: 13,
-					SMB_ADVERTISE_FROM_DEEP_LINK: 14,
-					SMB_BUSINESS_TOOLS_TAB_ADVERTISE: 15,
-					SMB_CATALOG_LIST_ADVERTISE_BUTTON: 16,
-					SMB_PRODUCT_DETAILS_ADVERTISE_BUTTON: 17,
-					SMB_ADVERTISE_FROM_STATUS_MESSAGE: 18,
-					SMB_HOME_SCREEN_ICON: 19,
-					SMB_HOME_BANNER: 20,
-					SMB_ADVERTISE_FROM_STATUS_MESSAGE_SELF_VIEW: 21,
-					SMB_STATUS_MAIN_TAB_ADVERTISE: 22,
-					SMB_STATUS_MAIN_TAB_BANNER: 23,
-					SMB_BUSINESS_HOME_CARD_CREATE_FIRST_AD: 24,
-					SMB_BUSINESS_HOME_CARD_CREATE_RETURNING_AD: 25,
-					SMB_MEDIA_SHARE_VIA_GROUP: 26,
-					SMB_MEDIA_SHARE_VIA_BROADCAST: 27,
-					STATUS_PLAYBACK_SCREEN_ICON: 28,
-					CATALOG_SHARED_IN_GROUP: 29,
-					CATALOG_SHARED_IN_BROADCAST_LIST: 30,
-					CATALOG_SHARED_IN_SINGLE_CHAT: 31,
-					PRODUCT_SHARED_IN_SINGLE_CHAT: 32,
-					PRODUCT_SHARED_IN_BROADCAST_LIST: 33,
-					PRODUCT_SHARED_IN_GROUP: 34,
-					PRODUCT_LINK_SHARED_IN_SINGLE_CHAT: 35,
-					PRODUCT_LINK_SHARED_IN_BROADCAST_LIST: 36,
-					PRODUCT_LINK_SHARED_IN_GROUP: 37,
-					SMB_MESSAGING_GUIDE_AD_CREATION: 38,
-					SMB_BUSINESS_HOME_ADVERTISE_FROM_BANNER: 39,
-					SMB_STATUS_UPSELL_BOTTOM_SHEET: 40,
-					BUSINESS_PROFILE: 41,
-					SMB_BUSINESS_HOME_CARD_ACTIVE_AD: 42,
-					SMB_STATUS_CHANNELS_TAB_ADVERTISE: 43,
-					SMB_STATUS_CHANNELS_TAB_BANNER: 44,
-					SMB_PRODUCT_UPSELL_BOTTOM_SHEET: 45,
-					SMB_STATUS_CHANNELS_UPSELL_BOTTOM_SHEET: 46,
-					SMB_ADVERTISE_FROM_FORWARD_SCREEN_INDIVIDUAL: 47,
-					SMB_ADVERTISE_FROM_FORWARD_SCREEN_GROUP: 48,
-					SMB_ADVERTISE_FROM_FORWARD_SCREEN_BROADCAST: 49,
-					SMB_BUSINESS_HOME_CARD_ACTIVE_AD_DISMISS: 50,
-					SMB_BUSINESS_HOME_CARD_DRAFT_AD: 51,
-					SMB_BUSINESS_HOME_MANAGE_AD: 52,
-					SMB_BUSINESS_TOOLS_MANAGE_AD: 53,
-					SMB_HOME_SCREEN_OVERFLOW_MANAGE_ITEM: 54,
-					SMB_BUSINESS_HOME_QP_CARD: 55,
-					SMB_CREATED_AD: 56,
-					SMB_BUSINESS_HOME_CARD_COUPON_PROMOTION: 57,
-				},
-			],
-			lwiSubEntryPoint: [
-				6,
-				{
-					SMB_HOME_SCREEN_CONVERSATIONS_TAB: 1,
-					SMB_HOME_SCREEN_STATUS_TAB: 2,
-					SMB_HOME_SCREEN_CALL_HISTORY_TAB: 3,
-					SMB_HOME_SCREEN_COMMUNITIES_TAB: 4,
-					SMB_HOME_SCREEN_BIZ_HOME_TAB: 5,
-				},
-			],
-			statusSessionId: [5, 'integer'],
-			userHasLinkedFbPage: [4, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'LwiEntryTap',
-		id: 2770,
-		props: {
-			businessToolsSessionId: [4, 'string'],
-			catalogSessionId: [2, 'string'],
-			itemsCount: [11, 'integer'],
-			lwiEntryPoint: [
-				3,
-				{
-					SMB_CATALG_LIST_LWI_ADVERTISE_BANNER: 1,
-					SMB_CATALOG_LIST_ADVERTISE_MENU_ITEM: 2,
-					SMB_BUSINESS_TOOLS_ADVERTISE_LIST_ITEM: 3,
-					SMB_STATUS_DETAILS_ADVERTISE_MENU_ITEM: 4,
-					SMB_STATUS_PREVIEW_ADVERTISE_MENU_ITEM: 5,
-					SMB_CONVERSATIONS_LIST_BANNER_WITH_VALID_PRODUCT: 6,
-					SMB_CONVERSATIONS_LIST_BANNER_WITHOUT_VALID_PRODUCT: 7,
-					SMB_STATUS_3DTOUCH_ADVERTISE_MENU_ITEM: 8,
-					SMB_HOME_SCREEN_OVERFLOW_MENU_ITEM: 9,
-					SMB_BUSINESS_TOOLS_ADVERTISE_LIST_FIRST_ITEM: 10,
-					SMB_SETTINGS_ADVERTISE_LIST_ITEM: 11,
-					SMB_ADVERTISE_FROM_NOTIFICATION: 12,
-					SMB_ADVERTISE_FROM_BANNER: 13,
-					SMB_ADVERTISE_FROM_DEEP_LINK: 14,
-					SMB_BUSINESS_TOOLS_TAB_ADVERTISE: 15,
-					SMB_CATALOG_LIST_ADVERTISE_BUTTON: 16,
-					SMB_PRODUCT_DETAILS_ADVERTISE_BUTTON: 17,
-					SMB_ADVERTISE_FROM_STATUS_MESSAGE: 18,
-					SMB_HOME_SCREEN_ICON: 19,
-					SMB_HOME_BANNER: 20,
-					SMB_ADVERTISE_FROM_STATUS_MESSAGE_SELF_VIEW: 21,
-					SMB_STATUS_MAIN_TAB_ADVERTISE: 22,
-					SMB_STATUS_MAIN_TAB_BANNER: 23,
-					SMB_BUSINESS_HOME_CARD_CREATE_FIRST_AD: 24,
-					SMB_BUSINESS_HOME_CARD_CREATE_RETURNING_AD: 25,
-					SMB_MEDIA_SHARE_VIA_GROUP: 26,
-					SMB_MEDIA_SHARE_VIA_BROADCAST: 27,
-					STATUS_PLAYBACK_SCREEN_ICON: 28,
-					CATALOG_SHARED_IN_GROUP: 29,
-					CATALOG_SHARED_IN_BROADCAST_LIST: 30,
-					CATALOG_SHARED_IN_SINGLE_CHAT: 31,
-					PRODUCT_SHARED_IN_SINGLE_CHAT: 32,
-					PRODUCT_SHARED_IN_BROADCAST_LIST: 33,
-					PRODUCT_SHARED_IN_GROUP: 34,
-					PRODUCT_LINK_SHARED_IN_SINGLE_CHAT: 35,
-					PRODUCT_LINK_SHARED_IN_BROADCAST_LIST: 36,
-					PRODUCT_LINK_SHARED_IN_GROUP: 37,
-					SMB_MESSAGING_GUIDE_AD_CREATION: 38,
-					SMB_BUSINESS_HOME_ADVERTISE_FROM_BANNER: 39,
-					SMB_STATUS_UPSELL_BOTTOM_SHEET: 40,
-					BUSINESS_PROFILE: 41,
-					SMB_BUSINESS_HOME_CARD_ACTIVE_AD: 42,
-					SMB_STATUS_CHANNELS_TAB_ADVERTISE: 43,
-					SMB_STATUS_CHANNELS_TAB_BANNER: 44,
-					SMB_PRODUCT_UPSELL_BOTTOM_SHEET: 45,
-					SMB_STATUS_CHANNELS_UPSELL_BOTTOM_SHEET: 46,
-					SMB_ADVERTISE_FROM_FORWARD_SCREEN_INDIVIDUAL: 47,
-					SMB_ADVERTISE_FROM_FORWARD_SCREEN_GROUP: 48,
-					SMB_ADVERTISE_FROM_FORWARD_SCREEN_BROADCAST: 49,
-					SMB_BUSINESS_HOME_CARD_ACTIVE_AD_DISMISS: 50,
-					SMB_BUSINESS_HOME_CARD_DRAFT_AD: 51,
-					SMB_BUSINESS_HOME_MANAGE_AD: 52,
-					SMB_BUSINESS_TOOLS_MANAGE_AD: 53,
-					SMB_HOME_SCREEN_OVERFLOW_MANAGE_ITEM: 54,
-					SMB_BUSINESS_HOME_QP_CARD: 55,
-					SMB_CREATED_AD: 56,
-					SMB_BUSINESS_HOME_CARD_COUPON_PROMOTION: 57,
-				},
-			],
-			lwiFlowId: [1, 'string'],
-			lwiSubEntryPoint: [
-				7,
-				{
-					SMB_HOME_SCREEN_CONVERSATIONS_TAB: 1,
-					SMB_HOME_SCREEN_STATUS_TAB: 2,
-					SMB_HOME_SCREEN_CALL_HISTORY_TAB: 3,
-					SMB_HOME_SCREEN_COMMUNITIES_TAB: 4,
-					SMB_HOME_SCREEN_BIZ_HOME_TAB: 5,
-				},
-			],
-			statusSessionId: [6, 'integer'],
-			statusTypeMedia: [
-				12,
-				{
-					IMAGE: 1,
-					VIDEO: 2,
-				},
-			],
-			userHasLinkedFbPage: [5, 'boolean'],
-			waCampaignId: [10, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'LwiScreen',
-		id: 2772,
-		props: {
-			adContentRecommendation: [
-				41,
-				{
-					REGULAR: 1,
-					RECOMMENDED: 2,
-				},
-			],
-			adMediaOriginalAspectRatio: [47, 'string'],
-			adMediaPreviewAspectRatio: [48, 'string'],
-			adMediaTypeSelected: [
-				40,
-				{
-					IMAGE: 1,
-					VIDEO: 2,
-				},
-			],
-			adsContentSelected: [
-				42,
-				{
-					LWI_ADS_CONTENT_TYPE_PRODUCT: 1,
-					LWI_ADS_CONTENT_TYPE_STATUS: 2,
-					LWI_ADS_CONTENT_TYPE_DEVICE_MEDIA: 3,
-					LWI_ADS_CONTENT_TYPE_BUSINESS_PROFILE_PIC: 4,
-					LWI_ADS_CONTENT_TYPE_CAMERA: 9,
-					LWI_ADS_CONTENT_TYPE_RECENTLY_USED_MEDIA: 10,
-					LWI_ADS_CONTENT_TYPE_CATALOGS_ALL: 11,
-					LWI_ADS_CONTENT_TYPE_STATUSES_ALL: 12,
-				},
-			],
-			alertCount: [33, 'integer'],
-			audienceType: [
-				45,
-				{
-					REGION: 1,
-					MAP: 2,
-				},
-			],
-			billingStatus: [
-				36,
-				{
-					UNKNOWN: 1,
-					NO_ACTION_REQUIRED: 2,
-					HAS_PENDING_ACTIONS: 3,
-				},
-			],
-			createAdEnabled: [12, 'boolean'],
-			ctwaAdAccountType: [
-				58,
-				{
-					CTWA_FB_PAGE_LINKED_ACCOUNT: 0,
-					CTWA_FB_PAGELESS_ACCOUNT: 1,
-					CTWA_WA_AD_ACCOUNT: 2,
-				},
-			],
-			ctwaLoginType: [
-				59,
-				{
-					CTWA_LOGIN_TYPE_FB_NATIVE: 0,
-					CTWA_LOGIN_TYPE_FB_WEB: 1,
-					CTWA_LOGIN_TYPE_WA_AD_ACCOUNT: 2,
-				},
-			],
-			defaultAdsContentSelected: [
-				9,
-				{
-					LWI_ADS_CONTENT_TYPE_PRODUCT: 1,
-					LWI_ADS_CONTENT_TYPE_STATUS: 2,
-					LWI_ADS_CONTENT_TYPE_DEVICE_MEDIA: 3,
-					LWI_ADS_CONTENT_TYPE_BUSINESS_PROFILE_PIC: 4,
-					LWI_ADS_CONTENT_TYPE_CAMERA: 9,
-					LWI_ADS_CONTENT_TYPE_RECENTLY_USED_MEDIA: 10,
-					LWI_ADS_CONTENT_TYPE_CATALOGS_ALL: 11,
-					LWI_ADS_CONTENT_TYPE_STATUSES_ALL: 12,
-				},
-			],
-			defaultAudienceLocationType: [
-				57,
-				{
-					CITY_LEVEL: 1,
-					COUNTRY_LEVEL: 2,
-				},
-			],
-			itemCount: [39, 'integer'],
-			lwiAdCampaignId: [46, 'string'],
-			lwiAdsIdentityType: [
-				22,
-				{
-					PAGE: 1,
-					WHATSAPP: 2,
-				},
-			],
-			lwiAlertReason: [
-				6,
-				{
-					LWI_ERROR_CATALOG_LIST_FB_PAGE_NOT_LINKED: 1,
-					LWI_ERROR_CATALOG_LIST_EMPTY: 2,
-					LWI_ERROR_CATALOG_LIST_NO_ELIGIBLE_PRODUCT: 3,
-					LWI_ERROR_UNSUPPORTED_OLD_FB_VERSION: 4,
-					LWI_ERROR_STATUS_EMPTY: 5,
-					LWI_NONCE_ERROR: 6,
-					LWI_ERROR_AD_ACCOUNT_CURRENCY_MISMATCH: 7,
-					LWI_AD_CREATION_ERROR: 8,
-					LWI_MISSING_PAYMENT_METHOD: 9,
-					LWI_NO_INTERNET_CONNECTION: 10,
-					LWI_SPECIAL_ADS_CATEGORY: 11,
-					LWI_LOGIN_ON_FACEBOOK: 12,
-					LWI_REMOVE_FB_ACCOUNT: 13,
-					LWI_WEBSITE_NOT_SAFE: 14,
-					LWI_WEBSITE_NOT_AVAILABLE: 15,
-					LWI_NON_HTTPS: 16,
-					LWI_FB_WEB_LOGIN_TOKEN_FETCH_ERROR: 17,
-					LWI_RETRY_WEB_LOGIN_DIALOG_ERROR: 18,
-					LWI_UNABLE_TO_REDIRECT_BROWSER_NOT_FOUND: 19,
-					LWI_AD_ACCOUNT_SWITCH_ERROR: 20,
-					LWI_POLICY_REVIEW_REQUIRED: 21,
-					LWI_SOMETHING_WENT_WRONG: 22,
-					LWI_MAXIMUM_RETRY_CODE_REACH: 23,
-					LWI_ERROR_WRONG_CODE: 24,
-					LWI_ERROR_INCORRECT_EMAIL_FORMAT: 25,
-					LWI_NO_RESULTS_FOUND: 26,
-					LWI_ACTION_ESTIMATED_REACH_FAILED_TO_LOAD: 27,
-					LWI_ACTION_INVALID_USER: 28,
-					LWI_LOCATION_ACCESS_PERMISSION: 29,
-					LWI_ACTION_INVALID_MEDIA_SELECTION: 30,
-					LWI_ACTION_SCREEN_DESTROYED: 31,
-					LWI_ACTION_INFO_BUTTON_TAPPED: 32,
-					LWI_INTEGRITY_ERROR: 33,
-					LWI_INVALID_STATE: 34,
-					LWI_FAILED_TO_ENROLL_COUPON: 35,
-					LWI_CHANGES_NOT_SAVED: 36,
-					LWI_LOCATION_SYSTEM_SETTING_RESOLUTION_REQUIRED: 37,
-				},
-			],
-			lwiBudgetInLocal: [15, 'integer'],
-			lwiBudgetOptionsInLocal: [54, 'string'],
-			lwiCtwaAdCtaType: [
-				24,
-				{
-					PROMOTE_AGAIN: 1,
-					PAUSE_AD: 2,
-					RESUME_AD: 3,
-					ADD_BUDGET: 4,
-					VIEW_AD: 5,
-					COMPLETE_PAYMENT: 6,
-					RECREATE_AD_WITH_RECOMMENDATION: 7,
-					EDIT_AD_WITH_RECOMMENDATION: 8,
-				},
-			],
-			lwiCtwaAdStatusType: [
-				25,
-				{
-					ACTIVE: 1,
-					SCHEDULED: 2,
-					PAUSED: 3,
-					NOT_DELIVERING: 4,
-					REJECTED: 5,
-					FINISHED: 6,
-					IN_REVIEW: 7,
-					COMPLETED: 8,
-					EXTENDABLE: 9,
-					UNABLE_TO_CREATE: 10,
-					LIMITED_DELIVERY: 11,
-				},
-			],
-			lwiCurrency: [16, 'string'],
-			lwiDefaultBudgetInLocal: [17, 'integer'],
-			lwiDefaultDurationInDays: [18, 'integer'],
-			lwiDefaultTargetingSpec: [
-				19,
-				{
-					UNKOWN: 1,
-					MATCHES_TARGETING_SPEC: 2,
-					DIFFERS_FROM_TARGETING_SPEC: 3,
-				},
-			],
-			lwiDurationInDays: [20, 'integer'],
-			lwiEventSequenceNumber: [2, 'integer'],
-			lwiExtras: [30, 'string'],
-			lwiFlowId: [1, 'string'],
-			lwiIsFbAppInstalled: [27, 'boolean'],
-			lwiIsIgAppInstalled: [51, 'boolean'],
-			lwiLocationTypesSetOnAudienceSelection: [55, 'string'],
-			lwiMaxDurationInDays: [52, 'integer'],
-			lwiMinDurationInDays: [53, 'integer'],
-			lwiScreenAction: [
-				5,
-				{
-					LWI_ACTION_VIEW: 1,
-					LWI_ACTION_BACK_BUTTON_TAPPED: 2,
-					LWI_ACTION_CREATE_ADS_TAPPED: 3,
-					LWI_ACTION_MANAGE_ADS_TAPPED: 4,
-					LWI_ACTION_LEARN_MORE_TAPPED: 5,
-					LWI_ACTION_PRODUCT_SELECTED: 6,
-					LWI_ACTION_CONTINUE_TAPPED: 7,
-					LWI_MANAGE_ADS_DISPLAYED: 8,
-					LWI_ALERT: 9,
-					LWI_ACTION_PROMOTE_CATALOG_ITEMS_TAPPED: 10,
-					LWI_ACTION_PROMOTE_STATUSES_TAPPED: 11,
-					LWI_ACTION_PROMOTE_NEW_CONTENT_TAPPED: 12,
-					LWI_ACTION_CONTACT_US_TAPPED: 13,
-					LWI_ACTION_HELP_TAPPED: 14,
-					LWI_ACTION_STATUS_SELECTED: 15,
-					LWI_ACTION_PRODUCT_DESELECTED: 16,
-					LWI_ACTION_NUX_CONTINUE_TAPPED: 17,
-					LWI_ACTION_RECOMMENDED_CATALOG_ITEM_SELECTED: 18,
-					LWI_ACTION_RECOMMENDED_STATUS_ITEM_SELECTED: 19,
-					LWI_ACTION_NO_CATALOG_TO_ADVERTISE_TAPPED: 20,
-					LWI_ACTION_NO_STATUS_TO_ADVERTISE_TAPPED: 21,
-					LWI_CREATE_AD_DISPLAYED: 22,
-					LWI_ACTION_CONTINUE_TO_MEDIA_SELECTOR_TAPPED: 23,
-					LWI_ACTION_AD_DESCRIPTION_TAPPED: 24,
-					LWI_ACTION_AD_DESCRIPTION_SAVE_TAPPED: 25,
-					LWI_ACTION_AD_DESCRIPTION_CANCEL_TAPPED: 26,
-					LWI_ACTION_EDIT_BUDGET_TAPPED: 27,
-					LWI_ACTION_DAILY_BUDGET_SELECTED: 28,
-					LWI_ACTION_CUSTOM_DAILY_BUDGET_TAPPED: 29,
-					LWI_ACTION_CUSTOM_DAILY_BUDGET_SAVE_TAPPED: 30,
-					LWI_ACTION_CUSTOM_DAILY_BUDGET_CANCEL_TAPPED: 31,
-					LWI_ACTION_AD_DURATION_UPDATED: 32,
-					LWI_ACTION_EDIT_AUDIENCE_TAPPED: 33,
-					LWI_ACTION_EDIT_AUDIENCE_LOCATION_TAPPED: 34,
-					LWI_ACTION_AUDIENCE_LOCATION_SELECTED: 35,
-					LWI_ACTION_AUDIENCE_LOCATION_DESELECTED: 36,
-					LWI_ACTION_AUDIENCE_AGE_RANGE_UPDATED: 37,
-					LWI_ACTION_AUDIENCE_GENDER_SELECTED: 38,
-					LWI_ACTION_SPECIAL_ADS_CATEGORY_TAPPED: 39,
-					LWI_ACTION_SPECIAL_ADS_CATEGORY_CONTINUE_TAPPED: 40,
-					LWI_ACTION_SPECIAL_ADS_CATEGORY_CANCEL_TAPPED: 41,
-					LWI_ACTION_ADD_PAYMENT_TAPPED: 42,
-					LWI_ACTION_CREATE_AD_TAPPED: 43,
-					LWI_ACTION_EDIT_ACCOUNT_TAPPED: 44,
-					LWI_ACTION_EDIT_PAYMENT_TAPPED: 45,
-					LWI_ACTION_REMOVE_ACCOUNT_TAPPED: 46,
-					LWI_ACTION_REMOVE_ACCOUNT_REMOVE_TAPPED: 47,
-					LWI_ACTION_REMOVE_ACCOUNT_CANCEL_TAPPED: 48,
-					LWI_ACTION_CONSENT_CONTINUE_TAPPED: 49,
-					LWI_ACTION_AD_CREATED_BANNER_IMPRESSION: 50,
-					LWI_ACTION_AD_CREATED_BANNER_CLICK: 51,
-					LWI_ACTION_AD_CREATED_BANNER_DISMISS: 52,
-					LWI_ACTION_AD_SETTINGS_TAPPED: 53,
-					LWI_ACTION_REFRESH_AD_DETAILS_SCREEN: 54,
-					LWI_ACTION_CONTINUE_TO_AD_SETTINGS_WITH_RECOMMENDED_STATUS_SELECTED: 55,
-					LWI_ACTION_CONTINUE_TO_AD_SETTINGS_WITH_PHONE_MEDIA_SELECTED: 56,
-					LWI_ACTION_MEDIA_SELECTION_COMPLETE: 57,
-					LWI_ACTION_CROP_IMAGE_DONE: 58,
-					LWI_ACTION_CONSENT_NOT_YOU_TAPPED: 59,
-					LWI_ACTION_SWITCH_ACCOUNT_TAPPED: 60,
-					LWI_ACTION_SWITCH_ACCOUNT_SWITCH_TAPPED: 61,
-					LWI_ACTION_SWITCH_ACCOUNT_CANCEL_TAPPED: 62,
-					LWI_ACTION_WEB_LOGIN_PAGE_LOADED: 63,
-					LWI_ACTION_WEB_LOGIN_SUCCESS: 64,
-					LWI_ACTION_CONSENT_LOGIN_TAPPED: 65,
-					LWI_ACTION_WEB_LOGIN_CANCELLED: 66,
-					LWI_ACTION_WEB_LOGIN_TRY_AGAIN: 67,
-					LWI_NEW_MANAGE_ADS_TAB_ADS_LOADED: 68,
-					LWI_NEW_MANAGE_ADS_TAB_AD_CLICKED: 69,
-					LWI_NEW_MANAGE_ADS_TAB_AD_CTA_MENU_CLICKED: 70,
-					LWI_NEW_MANAGE_ADS_TAB_AD_CTA_ITEM_CLICKED: 71,
-					LWI_NEW_MANAGE_ADS_TAB_EDUCATION_BANNER_SHOWN: 72,
-					LWI_NEW_MANAGE_ADS_TAB_EDUCATION_BANNER_CANCELLED: 73,
-					LWI_NEW_MANAGE_ADS_TAB_CONSENT_SHOWN: 74,
-					LWI_NEW_MANAGE_ADS_TAB_CONSENT_ACCEPTED: 75,
-					LWI_NEW_MANAGE_ADS_TAB_CONSENT_DIFFERENT_USER_SIGN_IN: 76,
-					LWI_NEW_MANAGE_ADS_TAB_WEB_LOGIN_CONSENT_SCREEN_SHOWN: 77,
-					LWI_NEW_MANAGE_ADS_TAB_CONSENT_WEB_LOGIN_SIGN_IN: 78,
-					LWI_NEW_MANAGE_ADS_TAB_WEB_LOGIN_SUCCESSFUL: 79,
-					LWI_MANAGE_ADS_TAPPED_V2: 80,
-					LWI_NEW_MANAGE_ADS_TAB_AD_CREATED_BANNER_CANCELLED: 81,
-					LWI_NEW_MANAGE_ADS_TAB_AD_CREATED_BANNER_BACK_PRESED: 82,
-					LWI_NO_PERMISSION_TO_MANAGE_ADS_DIALOG_SHOWN: 83,
-					LWI_SWITCH_ACCCOUNT_ON_NO_MANAGE_ADS_PERMISSION_DIALOG_PRESSED: 84,
-					LWI_LOGIN_PRESSED_ON_SESSION_EXPIRED: 85,
-					LWI_ASYNC_DATA: 86,
-					LWI_ACTION_AD_ACCOUNTS_TAPPED: 87,
-					LWI_ACTION_AD_ACCOUNT_SELECTED: 88,
-					LWI_ACTION_AD_ACCOUNT_SWITCH_SUCCESS: 89,
-					LWI_ACTION_AD_ACCOUNT_SWITCH_CANCELLED: 90,
-					LWI_ACTION_SELECT_SAVED_AUDIENCE: 91,
-					LWI_ACTION_SELECT_DEFAULT_AUDIENCE: 92,
-					LWI_ACTION_EDIT_DEFAULT_AUDIENCE: 93,
-					LWI_ACTION_NON_DISCRIMINATION_POLICY_ACCEPT_TAPPED: 94,
-					LWI_ACTION_POLICY_REVIEW_REQUIRED_EXIT_TAPPED: 95,
-					LWI_ACTION_POLICY_REVIEW_REQUIRED_REVIEW_TAPPED: 96,
-					LWI_ACTION_NON_DISCRIMINATION_POLICY_ACCEPT_SUCCESS: 97,
-					LWI_ACTION_NON_DISCRIMINATION_POLICY_CANCELLED: 98,
-					LWI_ACTION_NON_DISCRIMINATION_POLICY_TRY_AGAIN: 99,
-					LWI_ACTION_LOADED: 100,
-					LWI_CTA_MENU_CLICKED: 101,
-					LWI_ACTION_CTA_ITEM_CLICKED: 102,
-					LWI_ACTION_AD_PREVIEW_TAPPED: 103,
-					LWI_AD_PREVIEW_STARTED: 104,
-					LWI_BILLING_LOADED: 105,
-					LWI_BILLING_ERROR: 106,
-					LWI_IMAGE_URL_DETAILS_LOADED: 107,
-					LWI_ACTION_BILLING_RETRY_TAPPED: 108,
-					LWI_ACTION_VIEW_DETAILED_INSIGHTS_TAPPED: 109,
-					LWI_ACTION_VIEW_ADVANCED_AUDIENCE_TAPPED: 110,
-					LWI_ACTION_PROMOTE_AGAIN_TAPPED: 111,
-					LWI_ACTION_EDIT_ON_FACEBOOK_TAPPED: 113,
-					LWI_ACTION_SWIPE_REFRESH: 114,
-					LWI_ACTION_VIEW_FACEBOOK_AD_PREVIEW: 115,
-					LWI_ACTION_VIEW_INSTAGRAM_AD_PREVIEW: 116,
-					LWI_ACTION_NEXT_BUTTON_TAPPED: 117,
-					LWI_ACTION_LOADING_ERROR: 118,
-					LWI_ACTION_DIALOG_DISMISSED: 119,
-					LWI_NETWORK_ERROR_SHOWN: 120,
-					LWI_GENERIC_ERROR_SHOWN: 121,
-					LWI_RETRY_BUTTON_TAPPED: 122,
-					LWI_ACTION_RECOMMENDED_BUINESS_POFILE_ITEM_SELECTED: 123,
-					LWI_ACTION_BUINESS_POFILE_ITEM_SELECTED: 124,
-					LWI_ACTION_CONTINUE_TO_AD_SETTINGS_WITH_RECOMMENDED_BUSINESS_PROFILE_SELECTED: 125,
-					LWI_ACTION_CONTINUE_TO_AD_SETTINGS_WITH_BUSINESS_PROFILE_SELECTED: 126,
-					LWI_ACTION_EDIT_IMAGE_DONE: 127,
-					LWI_ACTION_WA_PAGELESS_BUTTON_TAPPED: 128,
-					LWI_ACTION_SWITCH_FACEBOOK_ACCOUNT_BUTTON_TAPPED: 129,
-					LWI_ACTION_TRY_AGAIN_DIALOG_BUTTON_TAPPED: 130,
-					LWI_ACTION_CANCEL_DIALOG_BUTTON_TAPPED: 131,
-					LWI_PAGE_PERMISSION_ERROR_RESOLVED: 132,
-					LWI_PAGE_PERMISSION_ERROR_UNRESOLVED: 133,
-					LWI_ACTION_PROMOTE_TEXT_TAPPED: 134,
-					LWI_ACTION_EXIT_CONF_SHOWN: 135,
-					LWI_ACTION_EXIT_CONF_EXIT_TAPPED: 136,
-					LWI_ACTION_EXIT_CONF_RETURN_TO_AD_TAPPED: 137,
-					AD_WITH_ALERT_DISPLAYED: 138,
-					LWI_ACTION_CONTINUE_TO_AD_SETTINGS_WITH_CAMERA_SELECTED: 139,
-					LWI_ACTION_CONTINUE_TO_AD_SETTINGS_WITH_GALLERY_SELECTED: 140,
-					LWI_ACTION_CAMERA_ITEM_SELECTED: 141,
-					LWI_ACTION_GALLERY_ITEM_SELECTED: 142,
-					LWI_ACTION_CHOOSE_DIFFERENT_MEDIA_CLICKED: 143,
-					LWI_ACTION_GET_STARTED_CLICKED: 144,
-					LWI_ACTION_SELECT_PHOTO_FROM_GALLERY: 145,
-					LWI_ACTION_PUBLISH_FB_PAGE_BUTTON_TAPPED: 146,
-					LWI_ACTION_ADMIN_RIGHTS_SUB_STEP_VIEW: 147,
-					LWI_ACTION_SEND_CODE_BUTTON_TAPPED: 148,
-					LWI_ACTION_OPEN_EMAIL_APP_TAPPED: 149,
-					LWI_ACTION_CHANGE_EMAIL_TAPPED: 150,
-					LWI_ACTION_RESEND_TAPPED: 151,
-					LWI_ACTION_NONCE_SUBMIT: 152,
-					LWI_ACTION_VERIFY_SUCCESS: 153,
-					LWI_ACTION_CODE_FIELD_TAPPED: 154,
-					LWI_ACTION_AD_ACC_SETTINGS_MENU_OPT_TAPPED: 155,
-					LWI_ACTION_AD_PAYMENTS_ROW_TAPPED: 156,
-					LWI_ACTION_AD_DESIGN_UPDATE_TAPPED: 157,
-					LWI_ACTION_AD_SETTINGS_UPDATE_TAPPED: 158,
-					LWI_ACTION_CANCEL_BUTTON_TAPPED: 159,
-					LWI_ACTION_SAVE_BUTTON_TAPPED: 160,
-					LWI_EDIT_AD_ACC_EMAIL_SUCCESS: 161,
-					LWI_ACTION_AD_APPEAL_BANNER_SHOWN: 164,
-					LWI_ACTION_APPEAL_REQUEST_REVIEW_TAPPED: 165,
-					LWI_ACTION_APPEAL_VIEW_STATUS_TAPPED: 166,
-					LWI_ACTION_APPEAL_LEARN_MORE_TAPPED: 167,
-					LWI_ACTION_AD_ACCOUNT_APPEAL_BANNER_SHOWN: 168,
-					LWI_ACTION_SUBMIT_TAPPED: 169,
-					LWI_MEDIA_PARSING_STARTED: 170,
-					LWI_MEDIA_PARSING_SUCCESS: 171,
-					LWI_MEDIA_PARSING_FAILURE: 172,
-					LWI_ACTION_VIDEO_AD_PREVIEW_AUDIO_MUTE_TAPPED: 174,
-					LWI_ACTION_VIDEO_AD_PREVIEW_AUDIO_UNMUTE_TAPPED: 175,
-					SMB_STATUS_UPSELL_BOTTOM_SHEET_DISMISS: 178,
-					LWI_ACTION_ITEM_SELECTED: 179,
-					LWI_ACTION_CONTEXTUAL_HELP_OPENED: 180,
-					LWI_ACTION_EMAIL_INPUT_STARTED: 181,
-					LWI_ACTION_SEARCH_ADDRESS_TAPPED: 182,
-					LWI_ACTION_SAVE_MAP_AUDIENCE_TAPPED: 183,
-					LWI_ACTION_MAP_RADIUS_SELECTED: 184,
-					LWI_ACTION_MAP_LOCATION_ITEM_TAPPED: 185,
-					LWI_ACTION_SAVE_MAP_AUDIENCE_SUCCESS: 186,
-					LWI_ACTION_AUDIENCE_REGION_OPTION_SELECTED: 187,
-					LWI_ACTION_AUDIENCE_MAP_OPTION_SELECTED: 188,
-					LWI_ACTION_EDIT_MAP_AUDIENCE_TAPPED: 189,
-					LWI_ACTION_ESTIMATED_REACH_SUCCESS: 190,
-					LWI_ACTION_CONTINUE_TO_STATUS_PICKER_SELECTED: 191,
-					LWI_ACTION_ITEM_DESELECT: 192,
-					LWI_ACTION_EDIT_MEDIA_CLICKED: 193,
-					LWI_ACTION_EDIT_MEDIA_COMPLETE: 194,
-					LWI_ACTION_EDIT_MEDIA_CANCELLED: 195,
-					LWI_ACTION_AD_CREATION_HUB_DRAFT_AD_TAP: 196,
-					LWI_ACTION_AD_CREATION_DRAFT_AD_SAVED: 197,
-					LWI_NEW_MANAGE_ADS_TAB_STARTED_LOADING_ADS: 198,
-					LWI_MANAGE_ADS_ITEM_MAIN_CTA_IMPRESSION: 199,
-					LWI_MANAGE_ADS_ITEM_MAIN_CTA_TAP: 200,
-					LWI_ACTION_WEB_LINK_CLICKED: 201,
-					LWI_ACTION_NON_DISCRIMINATION_POLICY_HEC_CLICKED: 202,
-					LWI_ACTION_NON_DISCRIMINATION_POLICY_FULL_CLICKED: 203,
-					LWI_ACTION_BUDGET_DURATION_INFO_ICON_TAPPED: 204,
-					LWI_ACTION_AUDIENCE_INFO_ICON_TAPPED: 205,
-					LWI_ACTION_REVIEW_AD_TAPPED: 206,
-					LWI_SIMPLIFIED_LOADER_AUTO_DISMISSED: 207,
-					LWI_PENDING_PAYMENT_REQUEST_STARTED: 208,
-					LWI_ACTION_LOGIN_PROMPT_FOR_MAP_OPTION_SHOWN: 209,
-					LWI_ACTION_MAP_USE_CURRENT_LOCATION_TAPPED: 210,
-					LWI_ACTION_LOCATION_PERMISSION_ACCESS_ALLOW_TAPPED: 211,
-					LWI_ACTION_LOCATION_PERMISSION_ACCESS_DENY_TAPPED: 212,
-					LWI_ACTION_ITEM_DESELECTED: 213,
-					LWI_ACTION_MEDIA_FILTER_APPLIED: 214,
-					LWI_ACTION_MEDIA_FILTER_CLEARED: 215,
-					LWI_ACTION_SCREEN_DESTROYED: 216,
-					LWI_ACTION_GALLERY_REQUEST_PERMISSION_DIALOG_SHOWN: 217,
-					LWI_ACTION_GALLERY_REQUEST_GRANTED: 218,
-					LWI_ACTION_GALLERY_REQUEST_DENIED: 219,
-					LWI_FAST_TRACK_STEP_LOADED: 220,
-					LWI_FAST_TRACK_STEP_CLOSED: 221,
-					LWI_CUSTOM_TAB_OPENED: 222,
-					LWI_CUSTOM_TAB_REDIRECT_RECEIVED: 223,
-					LWI_ACTION_CURRENT_LOCATION_APPLIED: 224,
-					LWI_ACTION_PADDED_STATUS_IMAGE_DISPLAYED: 225,
-					LWI_ACTION_GOOGLE_DIALOG_CANCELLED: 226,
-					LWI_ACTION_GOOGLE_ACCOUNT_SELECTED: 227,
-					LWI_ACTION_GOOGLE_SIGNIN_TAPPED: 228,
-					LWI_ACTION_GOOGLE_ACCOUNT_SELECTION_FAILED: 229,
-					LWI_ACTION_GOOGLE_ACCOUNT_ONBOARDING_FAILED: 230,
-					LWI_ACTION_GOOGLE_ACCOUNT_ONBOARDING_SUCCESS: 231,
-					LWI_ACTION_AD_STATUS_ISSUE_BANNER_SHOWN: 232,
-					LWI_ACTION_AD_STATUS_ISSUE_BANNER_LEARN_MORE_TAPPED: 233,
-					LWI_ACTION_CROP_MEDIA_CLICKED: 234,
-					LWI_ACTION_CROP_MEDIA_COMPLETE: 235,
-					LWI_ACTION_CROP_MEDIA_CANCELLED: 236,
-					LWI_ACTION_USE_EMAIL_TAPPED: 237,
-					LWI_ACTION_USE_FB_TAPPED: 238,
-					LWI_ACTION_COUPON_PROMOTION_NUX_CONTINUE_TAPPED: 239,
-					LWI_ACTION_SAVE_CHANGES_DIALOG_OPTION_TAPPED: 240,
-					LWI_ACTION_GO_BACK_DIALOG_OPTION_TAPPED: 241,
-					LWI_ACTION_LOCATION_SYSTEM_SETTING_TURN_ON_OK_TAPPED: 242,
-					LWI_ACTION_LOCATION_SYSTEM_SETTING_TURN_ON_NO_THANKS_TAPPED: 243,
-				},
-			],
-			lwiScreenReference: [
-				4,
-				{
-					LWI_SCREEN_ADSCREATION_HUB: 1,
-					LWI_SCREEN_PRODUCT_SELECTOR: 2,
-					LWI_SCREEN_CATALOG_LIST: 3,
-					LWI_SCREEN_CONTENT_SELECTOR: 4,
-					LWI_SCREEN_HELP: 5,
-					LWI_SCREEN_STATUS_SELECTOR: 6,
-					LWI_SCREEN_MULTI_PRODUCT_SELECTOR: 7,
-					LWI_SCREEN_NUX_EDUCATION: 8,
-					LWI_SCREEN_ADSCREATION_HUB_V2: 9,
-					LWI_SCREEN_AD_DETAILS: 10,
-					LWI_SCREEN_FB_CONSENT_CONFIRM: 11,
-					LWI_SCREEN_ADSCREATION_HUB_MANAGE: 12,
-					LWI_SCREEN_INSTAGRAM_AD_PREVIEW: 13,
-					LWI_SCREEN_AD_BUDGET: 14,
-					LWI_SCREEN_AD_AUDIENCE: 15,
-					LWI_SCREEN_AD_AUDIENCE_LOCATION: 16,
-					LWI_SCREEN_AD_SETTINGS: 17,
-					LWI_SCREEN_WEB_PAYMENT: 18,
-					LWI_SCREEN_MEDIA_SELECTION_FLOW: 19,
-					LWI_SCREEN_IMAGE_CROPPING: 20,
-					LWI_SCREEN_FB_WEB_LOGIN_CONSENT_CONFIRM: 21,
-					LWI_SCREEN_FB_WEB_LOGIN: 22,
-					LWI_MANAGE_ADS_TAB: 23,
-					LWI_MANAGE_ADS_FB_CONSENT: 24,
-					LWI_MANAGE_ADS_FB_CONSENT_NOT_LOGGED_IN: 25,
-					LWI_SCREEN_AD_AUDIENCE_LIST: 26,
-					LWI_SCREEN_NATIVE_NON_DISCRIMINATION_CERTIFICATION: 27,
-					LWI_MANAGE_AD_DETAILS_PAGE: 28,
-					LWI_SCREEN_AD_PREVIEW: 29,
-					LWI_NATIVE_ADS_STEPPED_FLOW_DESIGN_AD: 30,
-					LWI_NATIVE_ADS_STEPPED_FLOW_AD_SETTINGS: 31,
-					LWI_NATIVE_ADS_STEPPED_FLOW_AD_REVIEW: 32,
-					LWI_SCREEN_IMAGE_EDITING: 33,
-					LWI_FAST_TRACK_PAGE_PERMISSION: 34,
-					LWI_FAST_TRACK_HOST: 35,
-					LWI_NATIVE_ADS_NUX_EDUCATION_WITH_MEDIA: 36,
-					LWI_PUBLISH_FB_PAGE: 37,
-					LWI_SCREEN_AD_ACCOUNT_EMAIL_SUBMIT: 38,
-					LWI_SCREEN_NONCE_SUBMIT: 39,
-					LWI_SCREEN_AD_ACCOUNTS_SETTINGS: 40,
-					LWI_SCREEN_BILLING_HUB: 41,
-					LWI_SCREEN_EDIT_AD_ACC_EMAIL: 42,
-					LWI_SCREEN_RECOVERY_AD_ACCOUNT: 43,
-					LWI_SCREEN_MULTI_STATUS_SELECTOR: 44,
-					LWI_SCREEN_APPEAL_REJECTED_AD: 45,
-					LWI_SCREEN_APPEAL_AD_ACCOUNT_BAN: 46,
-					LWI_SCREEN_AD_APPEAL_STATUS: 47,
-					LWI_SCREEN_AD_ACCOUNT_APPEAL_STATUS: 48,
-					LWI_DIALOG_GALLERY_MEDIA_SOURCE_SELECTOR: 49,
-					LWI_SCREEN_NATIVE_EDIT_MAP_AUDIENCE: 50,
-					LWI_SCREEN_MEDIA_PICKER_RECENTLY_USED: 51,
-					LWI_SCREEN_MEDIA_PICKER_STATUSES: 52,
-					LWI_SCREEN_MEDIA_PICKER_CATALOG: 53,
-					LWI_NEW_MANAGE_ADS: 54,
-					LWI_SCREEN_NON_DISCRIMINATION_NATIVE: 55,
-					LWI_SCREEN_NON_DISCRIMINATION_HEC_NATIVE: 56,
-					LWI_SCREEN_NON_DISCRIMINATION_FULL_NATIVE: 57,
-					LWI_SCREEN_SIMPLIFIED_LOADER: 58,
-					LWI_SCREEN_SIMPLIFIED_EXPLAINER: 59,
-					LWI_SCREEN_PENDING_AD_VALIDATION: 60,
-					LWI_SCREEN_MESSAGING_GUIDE: 61,
-					LWI_SCREEN_MULTISOURCE_PICKER: 62,
-					LWI_SCREEN_PAYMENT_SUMMARY: 63,
-					LWI_SCREEN_EDUCATIVE_LOADER: 64,
-					LWI_SCREEN_FB_LOGIN_APP_REDIRECT_CONSENT: 65,
-					LWI_SCREEN_BENEFICIARY_INFO_SCREEN: 66,
-					LWI_SCREEN_FB_LOGIN_APP_REDIRECT_CONSENT_MANAGE_ADS: 67,
-					LWI_SCREEN_FB_CUSTOM_TAB_WEB_LOGIN: 68,
-					LWI_SCREEN_GOOGLE_AUTH_SYSTEM_DIALOG: 69,
-					LWI_WA_AD_ACCOUNT_RECOVERY_PLACEHOLDER: 70,
-					LWI_SCREEN_CONSENT_HOST: 71,
-					LWI_SCREEN_COUPON_PROMOTION_NUX: 72,
-					LWI_DIALOG_LOCATION_PERMISSION: 73,
-					LWI_DIALOG_SYSTEM_LOCATION_SETTINGS_RESOLUTION: 74,
-				},
-			],
-			lwiTargetingSpec: [21, 'string'],
-			lwiTotalCtwaAds: [26, 'integer'],
-			lwiViewerHasEditPermission: [28, 'boolean'],
-			lwiViewerHasPromotePermission: [32, 'boolean'],
-			mediaEdited: [49, 'boolean'],
-			onboardingEntryPoint: [
-				38,
-				{
-					ONBOARDING_ENTRY_POINT_FAST_TRACK: 1,
-					ONBOARDING_ENTRY_POINT_AD_REVIEW_SCREEN: 2,
-					ONBOARDING_ENTRY_POINT_CONSENT_HOST: 3,
-				},
-			],
-			paymentMethodSet: [13, 'boolean'],
-			productId: [3, 'string'],
-			selectedProductsIdsList: [8, 'string'],
-			totalMediaCount: [50, 'integer'],
-			usedSavedAudience: [31, 'boolean'],
-			userHasAdvancedAudience: [35, 'boolean'],
-			userHasBpCredentials: [43, 'boolean'],
-			userHasCatalogItemsToPromote: [10, 'boolean'],
-			userHasChangedDefaultCityLevelAudience: [56, 'boolean'],
-			userHasLinkedFbPage: [7, 'boolean'],
-			userHasMultisourceMedia: [60, 'boolean'],
-			userHasSeenRecommendedBudget: [34, 'boolean'],
-			userHasStatusToPromote: [11, 'boolean'],
-			userProvidedFbConsent: [14, 'boolean'],
-			userWentThroughFbWebLogin: [23, 'boolean'],
-			validationStatus: [
-				37,
-				{
-					UNKNOWN: 1,
-					NO_ACTION_REQUIRED: 2,
-					HAS_ERRORS: 3,
-				},
-			],
-			waAdAccountId: [44, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ManageAdsEntryPointImpression',
-		id: 4124,
-		props: {
-			manageAdsEntryPoint: [
-				1,
-				{
-					WEB_OVERFLOW_MENU: 1,
-					SMB_CHAT_LIST_CTWA_BANNER: 2,
-					SMB_NATIVE_ADS_MANAGEMENT: 3,
-					SMB_BUSINESS_TOOLS_MANAGE_ADS_LIST_ITEM: 4,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ManageAdsEntryPointTap',
-		id: 4126,
-		props: {
-			manageAdsEntryPoint: [
-				1,
-				{
-					WEB_OVERFLOW_MENU: 1,
-					SMB_CHAT_LIST_CTWA_BANNER: 2,
-					SMB_NATIVE_ADS_MANAGEMENT: 3,
-					SMB_BUSINESS_TOOLS_MANAGE_ADS_LIST_ITEM: 4,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'SmbDataSharingConsentScreen',
-		id: 3972,
-		props: {
-			smbDataSharingConsentScreenEntryPoint: [
-				3,
-				{
-					NEW_ORDER: 0,
-					CART: 1,
-					LABEL_CHAT: 2,
-					LABEL_MESSAGE: 3,
-				},
-			],
-			smbDataSharingConsentScreenType: [
-				1,
-				{
-					SMB_DATA_SHARING_CONSENT_SCREEN_VIEW: 0,
-					SMB_DATA_SHARING_CONSENT_SCREEN_AGREE: 1,
-					SMB_DATA_SHARING_CONSENT_SCREEN_DISAGREE: 2,
-					SMB_DATA_SHARING_CONSENT_SCREEN_CANCEL: 3,
-				},
-			],
-			smbDataSharingConsentScreenVersion: [2, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'SuspendedGroupDelete',
-		id: 4342,
-		props: {
-			deleteBtnSource: [
-				1,
-				{
-					BOTTOM_SHEET_BTN: 1,
-					BLOCKED_COMPOSER_BTN: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 0,
-	},
-	{
-		name: 'SupportAiSession',
-		id: 4970,
-		props: {
-			contactUsEntryPoint: [2, 'string'],
-			supportAiEventType: [
-				1,
-				{
-					CONTACT_US_CLICKED: 1,
-					START_CHAT_CLICKED: 2,
-					CONTACT_US_VIA_EMAIL_MENU_ITEM_CLICKED: 3,
-					FALLBACK_EMAIL_DIALOG_SHOWN: 4,
-					FALLBACK_EMAIL_BUTTON_CLICKED: 5,
-					NO_INTERNET_DIALOG_SHOWN: 6,
-					TICKET_CREATION_DIALOG_SHOWN: 7,
-					REVIEW_INFORMATION_LEARN_MORE_CLICKED: 8,
-					SUPPORT_AI_SCREEN_SHOWN: 9,
-					THUMB_UP_CLICKED: 10,
-					THUMB_DOWN_CLICKED: 11,
-					SUBMIT_MESSAGE_FEEDBACK: 12,
-					SUBMIT_MESSAGE_FEEDBACK_FAILED: 13,
-					SUBMIT_MESSAGE_FEEDBACK_SUCCEEDED: 14,
-					NEGATIVE_FEEDBACK_OPTIONS_SCREEN_CANCELLED: 15,
-					NEGATIVE_FEEDBACK_OPTIONS_SCREEN_SHOWN: 16,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'BannerEvent',
-		id: 1578,
-		props: {
-			bannerId: [3, 'string'],
-			bannerOperation: [
-				2,
-				{
-					SHOWN: 1,
-					CLICK: 2,
-					DISMISS: 3,
-					ELIGIBLE: 4,
-					REVOKED: 5,
-					RENDERED: 6,
-				},
-			],
-			bannerType: [
-				1,
-				{
-					GROUP: 1,
-					SMB_WELCOME: 2,
-					SMB_VERIFIED: 3,
-					SMB_EDIT_PROFILE: 4,
-					SMB_EDIT_DESCRIPTION: 5,
-					SMB_EDIT_CATEGORY: 6,
-					SMB_EDIT_HOURS: 7,
-					SMB_EDIT_EMAIL: 8,
-					SMB_CATALOG: 9,
-					SMB_CATALOG_SHARE_BANNER: 10,
-					CROSS_SELL_PROFILE_INTERSTITIAL: 11,
-					CROSS_SELL_CHATS_INTERSTITIAL: 12,
-					CROSS_SELL_CHATS_BANNER: 13,
-					BUSINESS_ACCOUNT_SYSTEM_MESSAGE: 14,
-					SMB_CATALOG_CART_INTERSTITIAL: 15,
-					PAYMENTS_ONBOARD_BANNER: 16,
-					SMB_DIRECTORY_UPSELL: 17,
-					SMB_CATALG_LIST_LWI_ADVERTISE_BANNER: 18,
-					SMB_LWI_AD_HUB_EDUCATIONAL_BANNER: 19,
-					SMB_COLLECTION_CREATION: 20,
-					SMB_AWAY_MESSAGE: 21,
-					SMB_GREETING_MESSAGE: 22,
-					PAYMENTS_INCENTIVE_BANNER: 23,
-					SMB_ADSCREATION_CONVERSATIONS_BANNER_WITH_VALID_PRODUCT: 24,
-					SMB_ADSCREATION_CONVERSATIONS_BANNER_WITHOUT_VALID_PRODUCT: 25,
-					SMB_MD_AWARENESS: 26,
-					BACKUP_QUOTA: 27,
-					SMB_ADD_COVER_PHOTO: 28,
-					PAYMENTS_MERCHANT_ONBOARDING_BANNER: 29,
-					SMB_PAYMENTS_MERCHANT_ACCOUNT_STATUS_BANNER: 30,
-					SMB_CTWA_AD_ACTION_BANNER: 31,
-					BIZ_INTEGRITY_WARNING_BANNER: 32,
-					SMB_CTWA_AUTO_LABEL_BANNER: 33,
-					SMB_UPDATE_CATEGORY_BANNER: 34,
-					SMB_PREMIUM_UPSELL_CHAT_BANNER: 35,
-					SMB_PREMIUM_SUBS_PAYMENT_FAILED_BANNER: 36,
-					SMB_PREMIUM_SUBS_UNINTENTIONAL_CANCELED_BANNER: 37,
-					SMB_CLICK_GET_PAID_ON_WA: 38,
-					SMB_CONTINUE_AD_CREATION_REMINDER_BANNER: 39,
-					SMB_CONTINUE_AD_CREATION_REMINDER_BOTTOM_SHEET: 40,
-					P2M_ORDER_HOME_BANNER: 41,
-					SMB_ADSCREATION_HOME_BANNER: 42,
-					PRIORITY_INBOX_BANNER: 43,
-					SMB_BUSINESS_HOME_BANNER: 44,
-					SMB_CHAT_LIST_QP_BANNER: 45,
-					SMB_ARCHIVE_STATUS_SETTINGS_BANNER: 46,
-					QP_BANNER_GROUP_INFO: 47,
-					P2M_TOOLS_ORDERS: 48,
-					PRIVACY_CHECKUP: 49,
-					QP_BANNER_PROFILE: 50,
-					ANDROID_BACKUP_SETTINGS_BANNER: 51,
-					ORDERS_UPSELL_BANNER_FROM_ORDERS_HOME: 52,
-					BACKUP_ERROR: 53,
-					CURRENT_LOCATION_BANNER: 54,
-					ORDERS_EDUCATION_BANNER_FROM_ORDERS_HOME: 55,
-					COLOR_REFRESH_NUX_BANNER: 56,
-					MV_ONBOARD_FROM_BIZ_PROFILE: 57,
-					MV_BIZ_TOOLS_SUBSCRIPTION_ACTIVATED: 58,
-					MV_BIZ_TOOLS_SUBSCRIPTION_NOT_ACTIVE: 59,
-					MV_BIZ_TOOLS_SUBSCRIPTION_CANCELED: 60,
-					MV_BIZ_TOOLS_PENDING_BIZ_VERIFICATION: 61,
-					MANAGE_GOOGLE_STORAGE_BUTTON: 62,
-					GOOGLE_STORAGE_80_PERCENT_FULL: 63,
-					GOOGLE_STORAGE_90_PERCENT_FULL: 64,
-					GOOGLE_BACKUP_GB_THRESHOLD: 65,
-					PAYMENTS_PIX_ONBOARDING_BANNER: 66,
-					P2M_PIX_ORDER_HOME_BANNER: 67,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ViewBusinessProfile',
-		id: 1522,
-		props: {
-			bizFbSize: [
-				9,
-				{
-					B0: 1,
-					B1: 2,
-					B2: 3,
-					B11: 4,
-					B51: 5,
-					B101: 6,
-					B501: 7,
-					B1K: 8,
-					B10K: 9,
-					B100K: 10,
-					B1M: 11,
-				},
-			],
-			bizIgSize: [
-				10,
-				{
-					B0: 1,
-					B1: 2,
-					B2: 3,
-					B11: 4,
-					B51: 5,
-					B101: 6,
-					B501: 7,
-					B1K: 8,
-					B10K: 9,
-					B100K: 10,
-					B1M: 11,
-				},
-			],
-			businessProfileJid: [3, 'string'],
-			catalogSessionId: [6, 'string'],
-			hasCoverPhoto: [12, 'boolean'],
-			isProfileLinked: [11, 'boolean'],
-			isSelfView: [7, 'boolean'],
-			linkedAccount: [
-				5,
-				{
-					FACEBOOK: 0,
-					INSTAGRAM: 1,
-				},
-			],
-			profileEntryPoint: [
-				8,
-				{
-					CONTACT_CARD: 1,
-					CHAT_HEADER: 2,
-					CHAT_MENU: 3,
-					GROUP_MEMBERSHIP_SCREEN: 4,
-					STATUS: 5,
-					CALLS: 6,
-					BROADCAST_LIST: 7,
-					PRODUCT: 8,
-					CATALOG: 9,
-					SETTINGS: 10,
-					SPAM_BLOCK: 11,
-					CHATS_HOME: 12,
-					SHOPS: 13,
-					MENTION: 14,
-					EPHEMERAL_SETTINGS_MESSAGE: 15,
-					MAP: 16,
-					SEARCH: 17,
-					PAYMENT_TRANSACTION_DETAILS: 18,
-					CUSTOM_URL_LINK: 19,
-					CUSTOM_URL_QR_CODE: 20,
-					NOTIFICATION_BLOCK_ACTION: 21,
-					REPORT_TO_ADMIN_PARTICIPANTS_SCREEN: 22,
-					MISSED_CALL_NOTIFICATION_BLOCK_ACTION: 23,
-					INTEROP: 24,
-					FORWARDED_BIZ_MSG_DIRECT_TAP: 25,
-					FORWARDED_BIZ_MSG_CHAT_HEADER: 26,
-				},
-			],
-			scrollDepth: [4, 'integer'],
-			viewBusinessProfileAction: [
-				1,
-				{
-					ACTION_IMPRESSION: 1,
-					ACTION_CLICK_WEBSITE: 2,
-					ACTION_CLICK_LOCATION: 3,
-					ACTION_CLICK_HOURS: 4,
-					ACTION_CLICK_DESCRIPTION: 5,
-					ACTION_CLICK_EMAIL: 6,
-					ACTION_CLICK_ADDTOCONTACT: 7,
-					ACTION_CLICK_MORE_BIZ_PROFILE: 8,
-					ACTION_CLICK_MESSAGE: 9,
-					ACTION_CLICK_VOICE_CALL: 10,
-					ACTION_CLICK_VIDEO_CALL: 11,
-					ACTION_CLICK_FORWARD: 12,
-					ACTION_CLICK_CATALOG_ICON: 13,
-					ACTION_CLICK_SHOPS_ICON: 14,
-					ACTION_CLICK_APP_LINK: 15,
-					ACTION_APP_IMPRESSION: 16,
-					ACTION_CLICK_STATUS: 17,
-					ACTION_EXIT: 18,
-					ACTION_COVER_PHOTO_IMPRESSION: 19,
-				},
-			],
-			websiteSource: [
-				2,
-				{
-					SOURCE_OTHER: 1,
-					SOURCE_INSTAGRAM: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'DisappearingMessageKeepInChat',
-		id: 3482,
-		props: {
-			canEditDmSettings: [16, 'boolean'],
-			chatEphemeralityDuration: [1, 'integer'],
-			isAGroup: [2, 'boolean'],
-			isAdmin: [3, 'boolean'],
-			keptCount: [15, 'integer'],
-			keptDelta: [4, 'integer'],
-			kicActionName: [
-				5,
-				{
-					KEEP_MESSAGE: 1,
-					UNKEEP_MESSAGE: 2,
-					VIEW_KEPT_MESSAGES: 3,
-					SEARCH_RESULTS_DISPLAY: 4,
-					SEARCH_RESULTS_TAP: 5,
-				},
-			],
-			kicActor: [
-				6,
-				{
-					SENDER: 1,
-					RECIPIENT: 2,
-				},
-			],
-			kicEntryPoint: [
-				7,
-				{
-					CHAT_INFO: 1,
-					SEARCH: 2,
-					CHAT: 3,
-					MEDIA: 4,
-					DOCS: 5,
-					LINKS: 6,
-				},
-			],
-			mediaType: [
-				8,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messageExpiredOnUnkeep: [9, 'boolean'],
-			messageExpiryTimer: [10, 'integer'],
-			messagesInFolder: [11, 'integer'],
-			messagesSelected: [12, 'integer'],
-			threadId: [13, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MdBootstrapHistoryDataReceived',
-		id: 2998,
-		props: {
-			historySyncChunkOrder: [6, 'integer'],
-			historySyncStageProgress: [5, 'integer'],
-			mdBootstrapHistoryPayloadType: [
-				3,
-				{
-					INITIAL: 1,
-					RECENT_HISTORY: 2,
-					FULL_HISTORY: 3,
-					PUSHNAME: 4,
-					STATUS_V3: 5,
-					NON_BLOCKING_DATA: 6,
-					ON_DEMAND: 7,
-				},
-			],
-			mdBootstrapPayloadType: [
-				2,
-				{
-					CRITICAL: 1,
-					NON_CRITICAL: 2,
-				},
-			],
-			mdSessionId: [1, 'string'],
-			mdTimestamp: [4, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'AttachmentTrayActions',
-		id: 3980,
-		props: {
-			actionDurationMs: [1, 'integer'],
-			attachmentTrayAction: [
-				2,
-				{
-					CLICK: 1,
-					SEND: 2,
-					CANCEL: 3,
-				},
-			],
-			attachmentTrayActionTarget: [
-				3,
-				{
-					ATTACHMENT_TRAY: 1,
-					DOCUMENT: 2,
-					CAMERA: 3,
-					CAMERA_LIBRARY: 4,
-					GALLERY: 5,
-					PHOTO_AND_VIDEO_LIBRARY: 6,
-					AUDIO: 7,
-					LOCATION: 8,
-					CONTACT: 9,
-					POLL: 10,
-					PAYMENT: 11,
-					SHOP: 12,
-					ORDER: 13,
-					CATALOG: 14,
-					QUICK_REPLY: 15,
-					STICKER_MAKER: 16,
-				},
-			],
-			groupSizeBucket: [
-				4,
-				{
-					SMALL: 1,
-					MEDIUM: 2,
-					LARGE: 3,
-					EXTRA_LARGE: 4,
-					XX_LARGE: 5,
-					XXX_LARGE: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			isAGroup: [5, 'boolean'],
-			isSuccessful: [6, 'boolean'],
-			sendMediaType: [
-				7,
-				{
-					PHOTO: 1,
-					VIDEO: 2,
-					MIXED: 3,
-				},
-			],
-			sendTime: [8, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'AutoMuteLargeGroupActions',
-		id: 3880,
-		props: {
-			autoMuteAction: [
-				1,
-				{
-					AUTO_MUTE_EXISTING_GROUP: 1,
-					AUTO_MUTE_GROWING_GROUP: 2,
-					AUTO_MUTE_NEW_GROUP: 3,
-					USER_DIALOG_VIEW: 4,
-					USER_ADMIT_BY_OK: 5,
-					USER_ADMIT_BY_MESSAGE_SEND: 6,
-					USER_DISMISS_BY_UNMUTE: 7,
-				},
-			],
-			autoMuteGroupId: [2, 'string'],
-			autoMuteGroupSize: [3, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'BusinessMute',
-		id: 1376,
-		props: {
-			muteT: [2, 'timer'],
-			muteeId: [1, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'BusinessUnmute',
-		id: 1378,
-		props: {
-			muteeId: [1, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChannelOpen',
-		id: 4316,
-		props: {
-			channelDirectorySessionId: [8, 'integer'],
-			channelEntryPoint: [
-				1,
-				{
-					UNKNOWN: 0,
-					UPDATES_TAB: 1,
-					DIRECTORY: 2,
-					LINK: 3,
-					DEEPLINK: 4,
-					FORWARDED_MESSAGE: 5,
-					DIRECTORY_SEARCH: 6,
-					RECOMMENDED_LIST: 7,
-					NOTIFICATION: 8,
-					UPDATES_TAB_SEARCH: 9,
-					STATUS: 10,
-					ADMIN_INVITE_MESSAGE: 11,
-					MEDIA_BROWSER: 12,
-					SIMILAR_CHANNEL: 13,
-				},
-			],
-			channelEntryPointMetadata: [
-				9,
-				{
-					STATUS_HEADER: 1,
-					LINK_TOOLTIP: 2,
-					LINK_BUTTON: 3,
-					POST_TOOLTIP: 4,
-				},
-			],
-			channelSessionId: [3, 'integer'],
-			channelUserType: [
-				4,
-				{
-					OWNER: 1,
-					ADMIN: 2,
-					FOLLOWER: 3,
-					GUEST: 4,
-				},
-			],
-			cid: [6, 'string'],
-			hasNetworkConnection: [7, 'boolean'],
-			similarChannelsSessionId: [11, 'integer'],
-			unreadMessages: [5, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'GroupCatchUp',
-		id: 3058,
-		props: {
-			mentionsCountPendingPercentage: [4, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'InlineVideoPlaybackClosed',
-		id: 2032,
-		props: {
-			inlineVideoCancelBeforePlayStateT: [7, 'timer'],
-			inlineVideoComplete: [8, 'boolean'],
-			inlineVideoCompletionRate: [9, 'integer'],
-			inlineVideoCtaClick: [
-				10,
-				{
-					LOGO: 1,
-					MUSIC: 2,
-					AUTHOR: 3,
-					WATCH_MORE_END: 4,
-				},
-			],
-			inlineVideoDurationT: [2, 'timer'],
-			inlineVideoError: [11, 'string'],
-			inlineVideoPlayStartT: [6, 'timer'],
-			inlineVideoPlayed: [3, 'boolean'],
-			inlineVideoStallT: [4, 'timer'],
-			inlineVideoType: [
-				1,
-				{
-					FACEBOOK: 1,
-					FACEBOOK_WATCH: 2,
-					INSTAGRAM: 3,
-					YOUTUBE: 4,
-					STREAMABLE: 5,
-					NETFLIX: 6,
-					LASSO: 7,
-					SHARECHAT: 8,
-				},
-			],
-			inlineVideoWatchT: [5, 'timer'],
-			messageType: [
-				12,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MessageDeleteActions',
-		id: 3626,
-		props: {
-			deleteActionType: [
-				1,
-				{
-					DELETE_FOR_ME: 0,
-					DELETE_FOR_EVERYONE: 1,
-				},
-			],
-			isAGroup: [2, 'boolean'],
-			mediaType: [
-				6,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messagesDeleted: [3, 'integer'],
-			threadId: [4, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'Ptt',
-		id: 458,
-		props: {
-			pttDraftPlayCnt: [7, 'integer'],
-			pttDraftSeekCnt: [8, 'integer'],
-			pttDuration: [5, 'timer'],
-			pttLock: [4, 'boolean'],
-			pttPauseCnt: [9, 'integer'],
-			pttResult: [
-				1,
-				{
-					SENT: 1,
-					CANCELLED: 2,
-					TOO_SHORT: 3,
-				},
-			],
-			pttSize: [3, 'number'],
-			pttSource: [
-				2,
-				{
-					FROM_CONVERSATION: 0,
-					FROM_VOICEMAIL: 1,
-				},
-			],
-			pttStop: [6, 'boolean'],
-			pttStopTapCnt: [10, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'SnackbarDeleteUndo',
-		id: 3628,
-		props: {
-			isAGroup: [1, 'boolean'],
-			mediaType: [
-				6,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messagesUndeleted: [2, 'integer'],
-			snackbarActionType: [
-				3,
-				{
-					SNACKBAR_SHOWN: 0,
-					MESSAGE_UNDELETE: 1,
-				},
-			],
-			threadId: [4, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebInternDogfoodingUpsell',
-		id: 5072,
-		props: {
-			webInternDogfoodingUpsellAction: [
-				3,
-				{
-					SHOWN: 0,
-					ACCEPT: 1,
-					DISMISS: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcChatOpen',
-		id: 864,
-		props: {
-			webcChatOpenBeforePaintT: [7, 'timer'],
-			webcChatOpenPaintedT: [6, 'timer'],
-			webcChatOpenT: [2, 'timer'],
-			webcFinalRenderedMessageCount: [5, 'integer'],
-			webcRenderedMessageCount: [4, 'integer'],
-			webcUnreadCount: [1, 'number'],
-			webcWindowHeightFloat: [8, 'number'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcElectronDeprecationCta',
-		id: 4642,
-		props: {
-			webcElectronDeprecationCtaEventType: [
-				1,
-				{
-					IMPRESSION: 1,
-					CTA_BTN_CLICK: 2,
-					CTA_DISMISS: 3,
-				},
-			],
-			webcElectronDeprecationCtaSource: [
-				2,
-				{
-					INTRO_PANEL: 1,
-					BUTTERBAR: 2,
-					LINK_DEVICE_BANNER: 3,
-				},
-			],
-			webcElectronDeprecationCtaType: [
-				3,
-				{
-					SOFT_MIGRATION: 1,
-					APP_EXPIRY_NOTICE: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcLogin',
-		id: 1664,
-		props: {
-			webcBrowserNetworkType: [14, 'string'],
-			webcBrowserStorageQuotaBytes: [15, 'integer'],
-			webcBrowserStorageQuotaUsedBytes: [16, 'integer'],
-			webcLoginT: [3, 'timer'],
-			webcPersistentLoginEnabled: [17, 'boolean'],
-			webcQrCodes: [1, 'integer'],
-			webcQrLoadT: [2, 'timer'],
-			webcSyncChatCount: [8, 'integer'],
-			webcSyncChatSize: [10, 'integer'],
-			webcSyncChatT: [9, 'timer'],
-			webcSyncContactCount: [11, 'integer'],
-			webcSyncContactSize: [13, 'integer'],
-			webcSyncContactT: [12, 'timer'],
-			webcSyncMessageCount: [5, 'integer'],
-			webcSyncMessageSize: [7, 'integer'],
-			webcSyncMessageT: [6, 'timer'],
-			webcSyncT: [4, 'timer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcMemoryStat',
-		id: 1188,
-		props: {
-			hasVerifiedNumber: [12, 'boolean'],
-			jsHeapSizeLimit: [9, 'integer'],
-			numMessages: [8, 'number'],
-			totalJsHeapSize: [10, 'integer'],
-			uptime: [6, 'number'],
-			usedJsHeapSize: [11, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcMenu',
-		id: 2504,
-		props: {
-			webcMenuAction: [
-				2,
-				{
-					THREADS_SCREEN_CLICK: 1,
-					CHAT_SCREEN_CLICK: 2,
-					SETTINGS_SCREEN_CLICK: 3,
-				},
-			],
-			webcMenuItemLabel: [
-				3,
-				{
-					NEW_GROUP: 1,
-					CREATE_A_ROOM: 2,
-					PROFILE: 3,
-					CATALOG: 4,
-					ARCHIVED: 5,
-					STARRED: 6,
-					LABELS: 7,
-					SETTINGS: 8,
-					LOG_OUT: 9,
-					CONTACT_INFO: 10,
-					SELECT_MESSAGES: 11,
-					CLOSE_CHAT: 12,
-					MUTE_NOTIFICATIONS: 13,
-					CLEAR_MESSAGES: 14,
-					DELETE_CHAT: 15,
-					REPORT_BUSINESS: 16,
-					BLOCK: 17,
-					SETTINGS_NOTIFICATIONS: 18,
-					SETTINGS_THEME: 19,
-					SETTINGS_CHAT_WALLPAPER: 20,
-					SETTINGS_BLOCKED: 21,
-					SETTINGS_HELP: 22,
-					OPEN: 23,
-					CLOSE: 24,
-					BUSINESS_TOOLS: 25,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChatFolderOpen',
-		id: 2808,
-		props: {
-			activityIndicatorCount: [2, 'integer'],
-			folderType: [1, 'string'],
-			hasImportantMessages: [3, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'OrderDetailsActionsSmb',
-		id: 3456,
-		props: {
-			acceptedPayMethods: [1, 'string'],
-			actionCategory: [2, 'string'],
-			entryPointConversionSource: [13, 'string'],
-			extraAttributes: [3, 'string'],
-			hasAddedPrice: [4, 'boolean'],
-			hasCatalog: [5, 'boolean'],
-			hasNote: [6, 'boolean'],
-			lastMessageDirection: [
-				14,
-				{
-					OPPOSITE_PARTY_INITIATED: 0,
-					SELF_INITIATED: 1,
-				},
-			],
-			messageDepth: [15, 'integer'],
-			orderDetailEntryPoint: [7, 'string'],
-			orderDetailsCreationAction: [
-				8,
-				{
-					CLICK_VIEW_RECEIVED_CART: 1,
-					SEND_DECLINE_CART: 2,
-					USER_DELETED_CART: 3,
-					CLICK_CREATE_ORDER_DETAILS_FROM_CART: 4,
-					CLICK_ORDER_FROM_ICON_MENU: 5,
-					CLICK_CREATE_ORDER_DETAILS_FROM_FAB: 6,
-					SEND_ORDER_DETAILS: 7,
-					VIEW_ORDER_DETAILS_HUB: 8,
-					VIEW_ORDER_DETAILS: 9,
-					CLICK_SORT_ORDERS: 10,
-					CLICK_UPDATE_ORDER_STATUS: 11,
-					SEND_ORDER_STATUS: 12,
-					CLICK_PAYMENT_DETAILS: 13,
-					SEND_MARK_AS_PAID: 14,
-					SEND_MARK_AS_UNPAID: 15,
-					CLICK_HELP: 16,
-					CLICK_MESSAGE_CUSTOMER: 17,
-					CLICK_ADD_PAYMENT_OPTION: 18,
-					CLICK_SAVE_ADD_PAYMENT_OPTION: 19,
-					CLICK_SAVE_EDIT_PAYMENT_OPTION: 20,
-					CLICK_EDIT_PAYMENT_OPTION: 21,
-					CLICK_DELETE_PAYMENT_OPTION: 22,
-					CLICK_GET_PAID_ON_WA: 23,
-					CLICK_SEE_ALL_OTHER_ORDERS: 24,
-					ADD_PAYMENT_OPTION_TO_OD: 25,
-					EDIT_PAYMENT_OPTION_IN_OD: 26,
-					CLICK_ADD_CUSTOM_ITEM_TO_ORDER: 27,
-					ADD_ADDITIONAL_CHARGES_TO_ORDER: 28,
-					CLICK_ADD_ITEM: 29,
-					CLICK_ADD_ADDITIONAL_CHARGES: 30,
-					VIEW_EPHEMERAL_MESSAGES_PROMPT: 31,
-					CONFIRM_SENDING_ORDER_DETAILS: 32,
-					CANCEL_SENDING_ORDER_DETAILS: 33,
-					DO_NOT_SHOW_EPHEMERAL_MESSAGES_PROMPT: 34,
-					DISMISS_EPHEMERAL_MESSAGES_PROMPT: 35,
-					VIEW_EVENT_SHARING_TOS_PROMPT: 37,
-					DISMISS_EVENT_SHARING_TOS_PROMPT: 38,
-					CLICK_EVENT_SHARING_TOS: 39,
-					ACCEPT_EVENT_SHARING_TOS: 40,
-					REJECT_EVENT_SHARING_TOS: 41,
-					VIEW_CREATE_ORDER: 42,
-					DISPLAY_ORDER_STATUS_SHARING_TOS: 43,
-					CLICK_ORDER_STATUS_SHARING_TOS: 44,
-					CLICK_EDIT_INSTALLMENTS: 45,
-					VIEW_EDIT_INSTALLMENTS_PROMPT: 46,
-					SET_DEFAULT_INSTALLMENTS: 47,
-					SAVE_DEFAULT_INSTALLMENTS: 48,
-					DISMISS_EDIT_INSTALLMENTS_PROMPT: 49,
-					VIEW_ORDERS_VALUE_PROP: 50,
-					CONTINUE_FROM_ORDERS_VALUE_PROP: 51,
-					DISMISS_ORDERS_VALUE_PROP: 52,
-					CLICK_SEE_ALL_ORDER_REQUESTS: 53,
-					BIZ_ACTION_BAR: 54,
-					CLICK_ADD_ITEMS: 55,
-					CANCEL_ORDER_REQUEST: 56,
-					CONTINUE_ORDER_REQUEST: 57,
-					VIEW_PROMPT: 58,
-					CLICK_PROCEED_WITHOUT_CATALOG: 59,
-					CLICK_CREATE_ORDER_DETAILS_FROM_PAYMENT_METHOD_ADDED_PROMPT: 60,
-				},
-			],
-			orderEligibleToSend: [11, 'boolean'],
-			paymentStatus: [9, 'boolean'],
-			paymentType: [10, 'string'],
-			sharingOrderStatusEvents: [12, 'boolean'],
-			threadIdHmac: [16, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcStickerMakerEvents',
-		id: 3104,
-		props: {
-			stickerMakerEventName: [
-				1,
-				{
-					STICKER_MAKER_BUTTON_TAP: 0,
-					IMAGE_UPLOADED: 1,
-					IMAGE_CROPPED: 2,
-					EMOJI_ADDED: 3,
-					STICKER_ADDED: 4,
-					TEXT_ADDED: 5,
-					IMAGE_OUTLINED: 6,
-					SEND_STICKER: 7,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'QuickReply',
-		id: 1468,
-		props: {
-			attachmentGifCount: [7, 'integer'],
-			attachmentImageCount: [5, 'integer'],
-			attachmentVideoCount: [6, 'integer'],
-			isSmartDefault: [10, 'boolean'],
-			labelThreadId: [12, 'string'],
-			lastMessageDirection: [
-				16,
-				{
-					OPPOSITE_PARTY_INITIATED: 0,
-					SELF_INITIATED: 1,
-				},
-			],
-			messageDepth: [17, 'integer'],
-			quickReplyAction: [
-				1,
-				{
-					ACTION_SETTINGS_IMPRESSION: 1,
-					ACTION_SETTINGS_ADD_CLICK: 2,
-					ACTION_SETTINGS_ADD_ABANDONED: 3,
-					ACTION_SETTINGS_ADDED: 4,
-					ACTION_SETTINGS_DELETED: 5,
-					ACTION_CHAT_IMPRESSION: 6,
-					ACTION_CHAT_CLICK: 7,
-					ACTION_SETTINGS_EDITED: 8,
-					ACTION_CHAT_INVALID_ATTACHMENTS: 9,
-					ACTION_SETTINGS_INVALID_ATTACHMENTS: 10,
-					ACTION_SETTINGS_MEDIA_TRANSCODE: 11,
-					ACTION_CHAT_CLICK_CANCEL: 12,
-					ACTION_SMART_DEFAULT_CLICK: 13,
-					QUICK_REPLY_MESSAGE_SENT: 14,
-				},
-			],
-			quickReplyCount: [2, 'integer'],
-			quickReplyEntryPoint: [
-				11,
-				{
-					QUICK_REPLY_ENTRY_POINT_KEYBOARD: 1,
-					QUICK_REPLY_ENTRY_POINT_ATTACHMENT_PANEL: 2,
-					QUICK_REPLY_ENTRY_POINT_SETTINGS_MENU: 3,
-					QUICK_REPLY_ENTRY_POINT_BANNERS: 4,
-					QUICK_REPLY_ENTRY_POINT_NUX: 5,
-					QUICK_REPLY_ENTRY_POINT_ACTION_BAR: 6,
-				},
-			],
-			quickReplyKeywordCount: [3, 'integer'],
-			quickReplyKeywordMatched: [4, 'boolean'],
-			quickReplyOrigin: [
-				9,
-				{
-					UNKNOWN: 0,
-					CONVERSATIONS: 1,
-					BUTTON: 2,
-					KEYBOARD: 3,
-				},
-			],
-			quickReplyTranscodeResult: [
-				8,
-				{
-					QUICK_REPLY_TRANSCODE_RESULT_OK: 1,
-					QUICK_REPLY_TRANSCODE_RESULT_CANCELLED: 2,
-					QUICK_REPLY_TRANSCODE_RESULT_FAIL_IMAGE_UNKNOWN: 3,
-					QUICK_REPLY_TRANSCODE_RESULT_FAIL_IMAGE_ENCODING: 4,
-					QUICK_REPLY_TRANSCODE_RESULT_FAIL_IMAGE_FILE_COPY: 5,
-					QUICK_REPLY_TRANSCODE_RESULT_FAIL_VIDEO_UNKNOWN: 6,
-				},
-			],
-			threadCreationDate: [14, 'string'],
-			threadEntryPoint: [13, 'string'],
-			threadIdHmac: [15, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'UserNotice',
-		id: 2472,
-		props: {
-			noticeTriggeredBy: [
-				5,
-				{
-					AUTO_START: 0,
-					BANNER: 1,
-					DEEP_LINK: 2,
-					JUST_IN_TIME: 3,
-				},
-			],
-			noticeType: [
-				4,
-				{
-					LEGACY_USER_NOTICE: 0,
-					BADGED_USER_NOTICE: 1,
-					PDFN_DISCLOSURE: 2,
-				},
-			],
-			userNoticeContentVersion: [2, 'integer'],
-			userNoticeEvent: [
-				3,
-				{
-					TRIGGERED: 0,
-					BANNER_APPEAR: 1,
-					BANNER_SELECT: 2,
-					MODAL_APPEAR: 3,
-					MODAL_DISMISS: 4,
-					MODAL_LINK_FOLLOW: 5,
-					MODAL_ACCEPT: 6,
-					BLOCKING_MODAL_APPEAR: 7,
-					BLOCKING_MODAL_LINK_FOLLOW: 8,
-					BLOCKING_MODAL_ACCEPT: 9,
-					BANNER_DISMISS: 10,
-					EDUCATION_1_APPEAR: 11,
-					EDUCATION_1_DISMISS: 12,
-					EDUCATION_1_CONTINUE: 13,
-					MODAL_BACK: 14,
-					BLOCKING_MODAL_BACK: 15,
-					STARTED: 100,
-					PDFN_SHOWN_0: 105,
-					BADGE_APPEARED_NEXT_TO_SETTINGS: 110,
-					PDFN_SHOWN_1: 111,
-					PDFN_SHOWN_2: 112,
-					PDFN_SHOWN_3: 113,
-					PDFN_SHOWN_4: 114,
-					PDFN_SHOWN_5: 115,
-					PDFN_SHOWN_6: 116,
-					PDFN_SHOWN_7: 117,
-					PDFN_SHOWN_8: 118,
-					PDFN_SHOWN_9: 119,
-					BADGE_APPEARED_NEXT_TO_HELP: 120,
-					BADGE_SHOWN_IN_HELP: 130,
-					PDFN_DISMISSED: 145,
-					BADGE_EXPIRED: 150,
-					PDFN_OK: 155,
-					PDFN_SOFT_OPT_IN: 160,
-					PDFN_SOFT_OPT_OUT: 162,
-					PDFN_DENIED: 165,
-					BADGE_SELECTED: 170,
-					PDFN_ACCEPTED: 175,
-					PDFN_FAILED_TO_DOWNLOAD: 400,
-					PDFN_PARTIAL_DOWNLOAD: 410,
-					PDFN_ERROR_MISMATCHED_TEMPLATE: 420,
-					PDFN_ERROR_UNKNOWN: 499,
-					FINAL_END: 999,
-					PDFN_0_SECONDARY_BTN_CLICKED: 1014,
-					PDFN_1_SECONDARY_BTN_CLICKED: 1015,
-					PDFN_2_SECONDARY_BTN_CLICKED: 1016,
-					PDFN_3_SECONDARY_BTN_CLICKED: 1017,
-					PDFN_4_SECONDARY_BTN_CLICKED: 1018,
-					PDFN_5_SECONDARY_BTN_CLICKED: 1019,
-					PDFN_6_SECONDARY_BTN_CLICKED: 1020,
-					PDFN_7_SECONDARY_BTN_CLICKED: 1021,
-					PDFN_8_SECONDARY_BTN_CLICKED: 1022,
-					PDFN_9_SECONDARY_BTN_CLICKED: 1023,
-				},
-			],
-			userNoticeId: [1, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MessageContextMenuActions',
-		id: 3694,
-		props: {
-			isAGroup: [1, 'boolean'],
-			isMultiAction: [2, 'boolean'],
-			isOriginalSender: [3, 'boolean'],
-			messageContextMenuAction: [
-				4,
-				{
-					OPEN: 1,
-					CLICK: 2,
-					COMPLETE: 3,
-					CANCEL: 4,
-				},
-			],
-			messageContextMenuOption: [
-				5,
-				{
-					UNKNOWN: 1,
-					OVERFLOW: 2,
-					FORWARD: 3,
-					DELETE: 4,
-					REPLY: 5,
-					REPLY_PRIVATELY: 6,
-					STAR_OR_UNSTAR: 7,
-					COPY: 8,
-					REPORT: 9,
-					MESSAGE_CONTACT: 10,
-					MESSAGE_INFO: 11,
-					EDIT: 12,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WaFsGroupJoinRequestAction',
-		id: 3944,
-		props: {
-			groupJid: [1, 'string'],
-			groupJoinRequestAction: [
-				2,
-				{
-					MEMBERSHIP_REQUEST_CREATE: 1,
-					VIEW_PENDING_PARTICIPANTS: 2,
-					MEMBERSHIP_REQUEST_APPROVAL_MODE_ON: 3,
-					MEMBERSHIP_REQUEST_APPROVAL_MODE_OFF: 4,
-					MEMBERSHIP_REQUEST_APPROVE: 5,
-					MEMBERSHIP_REQUEST_REJECT: 6,
-					MEMBERSHIP_REQUEST_CANCEL: 7,
-				},
-			],
-			groupJoinRequestGroupsInCommon: [5, 'integer'],
-			isSuccessful: [3, 'boolean'],
-			serverResponseTime: [4, 'timer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ReportToAdminEvents',
-		id: 4420,
-		props: {
-			reportToAdminInteraction: [
-				1,
-				{
-					CLICK_OPEN_ADMIN_DASHBOARD: 0,
-					CLICK_SEND_FOR_ADMIN_REVIEW: 1,
-					CLICK_CONFIRM_SEND_FOR_ADMIN_REVIEW: 2,
-					CLICK_CANCEL_SEND_FOR_ADMIN_REVIEW: 3,
-				},
-			],
-			rtaGroupId: [2, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChatAction',
-		id: 2312,
-		props: {
-			chatActionChatType: [
-				3,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BUSINESS: 3,
-					BROADCAST_LIST: 4,
-				},
-			],
-			chatActionEntryPoint: [
-				2,
-				{
-					CONVERSATION_LIST: 1,
-					CONTACT_INFO: 2,
-					GROUP_INFO: 3,
-					SEARCH_LIST: 4,
-					CONVERSATION_LIST_BULK_EDIT: 5,
-					CONVERSATION_MENU: 6,
-					WEB_ACTION: 7,
-					SYSTEM_NOTIFICATIONS: 8,
-				},
-			],
-			chatActionMuteDuration: [4, 'timer'],
-			chatActionType: [
-				1,
-				{
-					MUTE: 1,
-					UNMUTE: 2,
-					ARCHIVE: 3,
-					CLEAR: 4,
-					EXIT_GROUP: 5,
-					DELETE: 6,
-					PIN: 7,
-					UNREAD: 8,
-					READ: 9,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'LabelEvent',
-		id: 1422,
-		props: {
-			customLabelTitle: [9, 'string'],
-			entryPointConversionSource: [10, 'string'],
-			itemsLabeledCount: [5, 'integer'],
-			labelCount: [4, 'integer'],
-			labelOperation: [
-				2,
-				{
-					ADD: 1,
-					EDIT: 2,
-					DELETE: 3,
-					VIEW: 4,
-					CLICK_POSITIVE: 5,
-					CLICK_NEGATIVE: 6,
-					UPDATE_LABEL_COUNT: 7,
-					AUTO_ADDED: 8,
-				},
-			],
-			labelOperationEntryPoint: [6, 'string'],
-			labelTarget: [
-				1,
-				{
-					LABEL: 1,
-					MESSAGE: 2,
-					CONTACT: 3,
-					LABELS_SCREEN: 4,
-					LABEL_DETAILS_SCREEN: 5,
-					EDIT_LABEL_DIALOG: 6,
-					DELETE_LABEL_DIALOG: 7,
-					LABEL_MESSAGE_DIALOG: 8,
-					LABEL_CHAT_DIALOG: 9,
-					ADD_LABEL_DIALOG: 10,
-					BULK_UNLABEL_DIALOG: 11,
-					LABEL_COMBINED_DIALOG: 12,
-					GROUP: 13,
-					BROADCAST: 14,
-				},
-			],
-			lastMessageDirection: [
-				14,
-				{
-					OPPOSITE_PARTY_INITIATED: 0,
-					SELF_INITIATED: 1,
-				},
-			],
-			messageDepth: [15, 'integer'],
-			predefinedLabelNumber: [3, 'integer'],
-			threadCreationDate: [11, 'string'],
-			threadId: [12, 'string'],
-			threadIdHmac: [13, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'StatusReportingEvents',
-		id: 3920,
-		props: {
-			statusReportInteraction: [
-				1,
-				{
-					CLICK_REPORT: 0,
-					CLICK_SUBMIT_REPORT: 1,
-					CLICK_CANCEL_REPORT: 2,
-					CLICK_SUBMIT_REPORT_BLOCK: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'BusinessInteraction',
-		id: 3450,
-		props: {
-			businessInteractionAction: [
-				1,
-				{
-					ACTION_CLICK: 1,
-					ACTION_MSG_SENT: 2,
-				},
-			],
-			businessInteractionTargetScreen: [
-				2,
-				{
-					INDIVIDUAL_CHAT: 1,
-					LANDING_PAGE: 2,
-					OTHER: 3,
-				},
-			],
-			businessJid: [3, 'string'],
-			entryPointApp: [
-				4,
-				{
-					FACEBOOK: 1,
-					INSTAGRAM: 2,
-					WHATSAPP: 3,
-					EXTERNAL: 4,
-				},
-			],
-			entryPointSource: [
-				5,
-				{
-					CLICK_TO_CHAT_LINK: 1,
-					MESSAGE_SHORT_LINK: 2,
-					QR_CODE: 3,
-					CUSTOM_LINK: 4,
-					CUSTOM_QR_CODE_LINK: 5,
-				},
-			],
-			internalEntryPoint: [
-				6,
-				{
-					STATUS: 1,
-					INDIVIDUAL_CHAT: 2,
-					GROUP: 3,
-					OTHER: 4,
-					OUTSIDE_OF_WA: 5,
-					CHANNEL: 6,
-				},
-			],
-			sequenceNumber: [7, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 113760892,
-	},
-	{
-		name: 'BusinessToolsClick',
-		id: 2218,
-		props: {
-			businessToolsEntryPoint: [
-				5,
-				{
-					ENTRY_BANNER: 0,
-					ENTRY_REGISTRATION_ONBOARDING: 1,
-					ENTRY_CONVERSATIONS: 2,
-					ENTRY_SETTINGS: 3,
-					ENTRY_DEEPLINK: 4,
-					ENTRY_STATUS_TAB_MENU: 5,
-					ENTRY_CALLS_TAB_MENU: 6,
-					ENTRY_BUSINESS_TOOLS_TAB: 7,
-				},
-			],
-			businessToolsItem: [
-				3,
-				{
-					OVERFLOW: 0,
-					PROFILE: 1,
-					CATALOG: 2,
-					AWAY_MESSAGE: 3,
-					GREETING_MESSAGE: 4,
-					QUICK_REPLIES: 5,
-					LABELS: 6,
-					LINKED_ACCOUNTS: 7,
-					SHORT_LINK: 8,
-					STATISTICS: 9,
-					CREATE_ACCOUNT_LINK: 10,
-					MANAGE_CTA: 11,
-					CREATE_AD: 12,
-					CONTINUE_PROMPT: 13,
-					ADVERTISE_LIST_ITEM: 14,
-					SHOPS: 15,
-					DISABLED_CATALOG: 16,
-					BANNED_SHOP: 17,
-					PREMIUM_TOOLS: 18,
-					BUSINESS_DIRECTORY: 19,
-					MANAGE_ADS: 20,
-					META_VERIFIED: 21,
-				},
-			],
-			businessToolsSequenceNumber: [2, 'integer'],
-			businessToolsSessionId: [1, 'string'],
-			linkingTarget: [
-				4,
-				{
-					FACEBOOK: 0,
-					INSTAGRAM: 1,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'BusinessToolsEntry',
-		id: 2216,
-		props: {
-			businessToolsEntryPoint: [
-				3,
-				{
-					ENTRY_BANNER: 0,
-					ENTRY_REGISTRATION_ONBOARDING: 1,
-					ENTRY_CONVERSATIONS: 2,
-					ENTRY_SETTINGS: 3,
-					ENTRY_DEEPLINK: 4,
-					ENTRY_STATUS_TAB_MENU: 5,
-					ENTRY_CALLS_TAB_MENU: 6,
-					ENTRY_BUSINESS_TOOLS_TAB: 7,
-				},
-			],
-			businessToolsSequenceNumber: [2, 'integer'],
-			businessToolsSessionId: [1, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'BusinessToolsImpression',
-		id: 2220,
-		props: {
-			businessToolsEntryPoint: [
-				4,
-				{
-					ENTRY_BANNER: 0,
-					ENTRY_REGISTRATION_ONBOARDING: 1,
-					ENTRY_CONVERSATIONS: 2,
-					ENTRY_SETTINGS: 3,
-					ENTRY_DEEPLINK: 4,
-					ENTRY_STATUS_TAB_MENU: 5,
-					ENTRY_CALLS_TAB_MENU: 6,
-					ENTRY_BUSINESS_TOOLS_TAB: 7,
-				},
-			],
-			businessToolsSequenceNumber: [2, 'integer'],
-			businessToolsSessionId: [1, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'CadminDemote',
-		id: 3426,
-		props: {
-			cadminDemoteOrigin: [
-				1,
-				{
-					PROMOTION_NOTIFICATION: 1,
-					MEMBER_LIST: 2,
-				},
-			],
-			cadminDemoteResult: [
-				2,
-				{
-					SUCCESS: 1,
-					FAILURE: 2,
-					CANCEL: 3,
-					RETRY_SUCCESS: 4,
-					RETRY_FAILURE: 5,
-					RETRY_CANCEL: 6,
-				},
-			],
-			isLastCadminOrCreator: [4, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChannelAdmin',
-		id: 4556,
-		props: {
-			adminFlowActionSequenceNumber: [1, 'integer'],
-			adminFlowType: [
-				2,
-				{
-					CREATION: 1,
-					EDIT: 2,
-				},
-			],
-			channelAdminAction: [
-				3,
-				{
-					CHANNEL_CREATION_TAP: 1,
-					CHANNEL_CREATE_LAUNCH_SUCCESS: 2,
-					CHANNEL_CREATE_LAUNCH_ERROR: 3,
-					CHANNEL_CREATE_LAUNCH_BLOCKED: 4,
-					EDIT_CHANNEL_TAP: 5,
-					CHANNEL_NAME_SET: 6,
-					CHANNEL_ICON_SET_CAMERA: 7,
-					CHANNEL_ICON_SET_GALLERY: 8,
-					CHANNEL_ICON_SET_EMOJI_STICKER: 9,
-					CHANNEL_ICON_SET_WEB: 10,
-					CHANNEL_DESCRIPTION_SET: 11,
-					CHANNEL_ADMIN_FLOW_CONFIRMATION_TAP: 12,
-					CHANNEL_ADMIN_FLOW_SUCCESS: 13,
-					CHANNEL_ADMIN_FLOW_FAILURE: 14,
-					SEARCH_FOLLOWER: 15,
-					REACTIONS_SET_TO_ANY_EMOJI: 16,
-					REACTIONS_SET_TO_DEFAULT_EMOJI: 17,
-					REACTIONS_SET_TO_NONE_EMOJI: 18,
-				},
-			],
-			channelAdminSessionId: [4, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChannelDyi',
-		id: 4726,
-		props: {
-			channelDyiEventType: [
-				1,
-				{
-					CHANNEL_REPORT_REQUEST: 1,
-					CHANNEL_REPORT_DOWNLOAD: 2,
-					CHANNEL_REPORT_EXPORT: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ChatFilterEvent',
-		id: 1616,
-		props: {
-			actionType: [
-				1,
-				{
-					OPEN: 1,
-					SELECT_FILTER: 2,
-					SEARCH_WITH_FILTER: 3,
-					SEARCH: 4,
-					SEARCH_ITEM_SELECTED: 5,
-					SEARCH_MSG_SENT: 6,
-					UNSELECT_FILTER: 7,
-					AUTO_CLEAR_FILTER: 8,
-					VIEW: 9,
-					GROUP_NAVIGATION: 10,
-					GROUP_DISCOVERY: 11,
-					GROUP_JOIN: 12,
-					SUBGROUP_SWITCHER_CLICK: 13,
-					SUBGROUP_MENTION_CLICK: 14,
-					COMMUNITY_RICH_SYSTEM_MESSAGE_CLICK: 15,
-					GROUP_SYSTEM_MESSAGE_CLICK: 16,
-					NESTING_VIEW_COMMUNITY_CLICK: 17,
-					SELECT_COMMUNITY_ADMINS_CAN_ADD_GROUPS: 18,
-					SELECT_EVERYONE_CAN_ADD_GROUPS: 19,
-					GROUP_JOIN_REQUEST: 20,
-					NOTIFICATION_RECEIVED: 21,
-					NOTIFICATION_RENDERED: 22,
-					TAP_TO_OPEN: 23,
-					TAP_TO_REPLY: 24,
-					VOIP_CALLBACK: 25,
-					VOIP_MESSAGE: 26,
-					VOIP_DECLINE: 27,
-					MARK_AS_READ: 28,
-					AI_NEW_CHAT_CLICK: 29,
-					AI_TAB_SELECTION_CLICK: 30,
-					AI_PERSONA_SELECTION_CLICK: 31,
-					AI_TOS_VIEW: 32,
-					AI_TOS_ACCEPT_CLICK: 33,
-					AI_TOS_DISMISS_CLICK: 34,
-					AI_NEW_UGC_CLICK: 35,
-					AI_UGC_CREATION_START_CLICK: 36,
-					AI_GENDER_AGE_SELECTION_CLICK: 37,
-					AI_PERSONALITY_SELECTION_CLICK: 38,
-					AI_INTEREST_SELECTION_CLICK: 39,
-					AI_AVATAR_SELECTION_CLICK: 40,
-					AI_NAME_SELECTION_CLICK: 41,
-					AI_UGC_CREATION_FINISH_CLICK: 42,
-					REQUEST_WAITLIST_DIALOG_APPEAR: 43,
-					REQUEST_WAITLIST_SELECT: 44,
-					FILTER_VIEWED: 45,
-					FILTER_EMPTY_STATE_VIEWED: 46,
-					BUSINESS_SERP_LOADED: 47,
-					BIZ_SEE_MORE_CLICKED: 48,
-					IMPRESSION: 49,
-					BIZ_SEARCH_SET_LOCATION_CLICKED: 50,
-					CLOSE_BTN_CLICKED: 51,
-					AI_CHAT_CLICK: 52,
-					NEW_CHAT_CLICK: 53,
-					SERP_LOADED: 54,
-				},
-			],
-			activitySessionId: [6, 'string'],
-			filterType: [
-				2,
-				{
-					NONE: 0,
-					OTHER_LABELS: 1,
-					UNREAD: 2,
-					GROUP: 3,
-					BROADCAST_LIST: 4,
-					NEW_CUSTOMER: 5,
-					NEW_ORDER: 6,
-					PENDING_PAYMENT: 7,
-					PAID: 8,
-					ORDER_COMPLETE: 9,
-					CONTACT: 10,
-					NON_CONTACT: 11,
-					PHOTOS: 12,
-					GIFS: 13,
-					LINKS: 14,
-					VIDEOS: 15,
-					DOCUMENTS: 16,
-					AUDIOS: 17,
-					ASSIGNED_TO_YOU: 18,
-					PERSONAL: 19,
-					BUSINESS: 20,
-					LABEL: 21,
-					FAVORITES: 22,
-				},
-			],
-			labelName: [11, 'string'],
-			metadata: [7, 'string'],
-			predefinedId: [10, 'integer'],
-			searchQueryId: [8, 'string'],
-			searchRequestId: [9, 'string'],
-			searchResultType: [
-				4,
-				{
-					CONTACT: 0,
-					CHAT: 1,
-					GROUP: 2,
-					BROADCAST_LIST: 3,
-					MESSAGE: 4,
-					BUSINESS: 5,
-				},
-			],
-			sessionId: [3, 'integer'],
-			targetScreen: [
-				5,
-				{
-					CHAT_LIST: 0,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'CommunityCreation',
-		id: 3492,
-		props: {
-			communityCreationActionCount: [1, 'integer'],
-			communityCreationActionTaken: [
-				2,
-				{
-					ENTER: 1,
-					GET_STARTED: 2,
-					DISMISS: 3,
-					NEXT: 4,
-					CREATE_GROUP: 5,
-					LINK_GROUP: 6,
-					CREATE_COMMUNITY: 7,
-					EXIT: 8,
-					UNLINK_GROUP: 9,
-					CREATE_COMMUNITY_SUCCESS: 10,
-					CREATE_COMMUNITY_FAIL: 11,
-					HELP_ICON_CLICK: 12,
-					LINK_GROUP_CONFIRMATION_OK: 13,
-					LINK_GROUP_CONFIRMATION_CANCEL: 14,
-				},
-			],
-			communityCreationCurrentScreen: [
-				3,
-				{
-					CHATS_TAB: 1,
-					COMMUNITIES_TAB: 2,
-					COMMUNITY_NUX: 3,
-					COMMUNITY_INFO: 4,
-					COMMUNITY_GROUPS_SUMMARY: 5,
-					DEEP_LINK: 6,
-					BANNER: 7,
-					GROUP_INFO: 8,
-					LINK_GROUP_CONFIRMATION: 9,
-				},
-			],
-			communityCreationEntrypoint: [
-				5,
-				{
-					CHATS_TAB: 1,
-					COMMUNITIES_TAB: 2,
-					GROUP_INFO: 3,
-					DEEP_LINK: 4,
-					DEEP_LINK_BANNER: 5,
-					DEEP_LINK_PSA: 6,
-					DEEP_LINK_CHAT: 7,
-					DEEP_LINK_CHANNEL: 8,
-				},
-			],
-			communityCreationSessionId: [4, 'string'],
-			communityId: [6, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ContactUsSession',
-		id: 470,
-		props: {
-			contactUsAutomaticEmail: [3, 'boolean'],
-			contactUsExitState: [
-				1,
-				{
-					PROBLEM_DESCRIPTION: 1,
-					SUGGESTED_FAQ: 2,
-					EMAIL_SEND: 3,
-					IN_APP_FAQ: 4,
-					CANCELLED: 5,
-					FAQ: 6,
-				},
-			],
-			contactUsFaq: [2, 'boolean'],
-			contactUsLogs: [4, 'boolean'],
-			contactUsMenuFaqT: [12, 'timer'],
-			contactUsOutage: [5, 'boolean'],
-			contactUsOutageEmail: [6, 'boolean'],
-			contactUsScreenshotC: [19, 'number'],
-			contactUsT: [11, 'timer'],
-			languageCode: [21, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'DeepLinkMsgSent',
-		id: 3198,
-		props: {
-			deepLinkAction: [
-				1,
-				{
-					MSG_SENT: 1,
-				},
-			],
-			deepLinkSessionId: [2, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'DeepLinkOpen',
-		id: 2136,
-		props: {
-			deepLinkOpenFrom: [
-				2,
-				{
-					DEEP_LINK_EXTERNAL: 1,
-					DEEP_LINK_WA_LINK_CLICK: 2,
-					QR_CODE_SHEET: 3,
-					DEEP_LINK_BANNER: 4,
-					DEEP_LINK_SMB_NOTIFICATION: 5,
-					DEEP_LINK_MESSENGER_APP: 6,
-				},
-			],
-			deepLinkSessionId: [6, 'string'],
-			deepLinkType: [
-				3,
-				{
-					DEEP_LINK_UNKNOWN: 1,
-					DEEP_LINK_CHAT: 2,
-					DEEP_LINK_CONTACT_QR_CODE: 3,
-					DEEP_LINK_PAYMENT: 4,
-					DEEP_LINK_PRODUCT: 5,
-					DEEP_LINK_CATALOG: 6,
-					DEEP_LINK_FUTURE_PROOF: 7,
-					DEEP_LINK_GROUP_INVITE: 8,
-					DEEP_LINK_MSG_FORWARD: 9,
-					DEEP_LINK_MESSAGE_QR_CODE: 10,
-					DEEP_LINK_OPT_IN_QR_CODE: 11,
-					DEEP_LINK_CTWA: 12,
-					DEEP_LINK_STICKERPACK: 13,
-					DEEP_LINK_NOVI_HUB: 14,
-					DEEP_LINK_NOVI_ADD_DEBIT_CARD: 15,
-					DEEP_LINK_NOVI_ADD_BANK_ACCOUNT: 16,
-					DEEP_LINK_NOVI_WITHDRAW: 17,
-					DEEP_LINK_NOVI_RESET_PASSWORD: 18,
-					DEEP_LINK_PAYMENT_SIGNUP: 19,
-					DEEP_LINK_BIZTOOLS_ACCOUNTS: 20,
-					DEEP_LINK_PAYMENT_VIRALITY: 21,
-					DEEP_LINK_SETTINGS_ACCOUNT_DELETE: 22,
-					DEEP_LINK_SETTINGS_ACCOUNT_REQUEST_INFO: 23,
-					DEEP_LINK_SETTINGS_CHATS_HISTORY: 24,
-					DEEP_LINK_DISAPPEARING_MODE: 25,
-					DEEP_LINK_ARCHIVE_SETTINGS: 26,
-					DEEP_LINK_TOS: 27,
-					DEEP_LINK_NOVI_CARE: 28,
-					DEEP_LINK_NOVI_TPP_ACCOUNT_LINKING: 29,
-					DEEP_LINK_CONTACT_SUPPORT: 30,
-					DEEP_LINK_BIZTOOLS_DIRECTORY: 31,
-					DEEP_LINK_DIRECTORY: 32,
-					DEEP_LINK_CALL: 33,
-					DEEP_LINK_DIRECTORY_DEEPER_CATEGORY_SELECTION: 34,
-					DEEP_LINK_PHOENIX: 35,
-					DEEP_LINK_HELP_CENTER_TO_SETTINGS_CHATS: 36,
-					DEEP_LINK_CREATE_COMMUNITY: 37,
-					DEEP_LINK_SMB_AD_CREATION: 38,
-					DEEP_LINK_SMB_MANAGE_ADS: 39,
-					DEEP_LINK_SMB_MANAGE_ADS_DETAIL: 40,
-					DEEP_LINK_STATUS_SHARE: 41,
-					DEEP_LINK_PREMIUM: 42,
-					DEEP_LINK_SETTINGS_LINKED_DEVICES: 43,
-					DEEP_LINK_SMB_AD_CREATION_FROM_CATALOG: 44,
-					DEEP_LINK_SMB_AD_CREATION_FROM_BIZTAB: 45,
-					DEEP_LINK_SMB_EDIT_PROFILE: 46,
-					DEEP_LINK_EDIT_PROFILE_PIC: 47,
-					DEEP_LINK_SMB_EDIT_CATALOG: 48,
-					DEEP_LINK_SMB_BIZ_HOURS: 49,
-					DEEP_LINK_SMB_LOCATION: 50,
-					DEEP_LINK_SMB_LINKED_ACCOUNTS: 51,
-					DEEP_LINK_PRIVACY_SETTINGS: 52,
-					DEEP_LINK_SMB_EDIT_DESCRIPTION: 53,
-					DEEP_LINK_SMB_AD_CREATION_RESUME: 54,
-					DEEP_LINK_PRIVACY_DISCLOSURE: 55,
-					DEEP_LINK_CHANNEL: 56,
-					DEEPLINK_SMB_BIZ_WEBSITE: 57,
-					DEEP_LINK_PRIVACY_CHECKUP: 58,
-					DEEP_LINK_SMB_SELF_CATALOG: 59,
-					DEEP_LINK_SCAN_MIGRATION_QR_CODE: 60,
-					DEEP_LINK_PROXY: 61,
-					DEEP_LINK_HELP: 62,
-					DEEP_LINK_PRICE_TIER: 63,
-					DEEP_LINK_CALLING_PRIVACY: 64,
-					DEEP_LINK_PAYMENTS_PUSH_PROVISIONING: 65,
-					DEEP_LINK_FB_EVENT_LINK: 66,
-					DEEP_LINK_SETTINGS_ACCOUNT_2FA: 67,
-					DEEP_LINK_SMB_ADVERTISE_PROFILE: 68,
-					DEEP_LINK_SMB_LABELS_WITH_BIZTAB: 69,
-					DEEP_LINK_SMB_GREETING_MESSAGE_WITH_BIZTAB: 70,
-					DEEP_LINK_SMB_AWAY_MESSAGE_WITH_BIZTAB: 71,
-					DEEP_LINK_SMB_ADVERTISE_LATEST_STATUS: 72,
-					DEEP_LINK_SMB_PROFILE_COMPLETENESS: 73,
-					DEEP_LINK_SMB_AD_DETAILS: 74,
-					DEEP_LINK_SETTINGS_ACCOUNT_SWITCHER: 75,
-					DEEP_LINK_CHAT_TRANSFER: 76,
-					DEEP_LINK_CODE_LINKING: 77,
-					DEEP_LINK_MARKETING_MESSAGE: 78,
-					DEEP_LINK_HOME_CHATS: 79,
-					DEEP_LINK_MESSAGE_YOURSELF: 80,
-					DEEP_LINK_SETTINGS_ACCOUNT_EMAIL: 81,
-					DEEP_LINK_EDIT_AD: 82,
-					DEEP_LINK_MESSAGING_GUIDE: 83,
-					DEEP_LINK_SMB_DRAFT_AD: 84,
-					DEEP_LINK_CALLING_AWARENESS_VOICE_CHAT: 85,
-					DEEP_LINK_CALLING_AWARENESS_SCHEDULED_CALL: 86,
-					DEEP_LINK_COEXISTENCE_ONBOARDING: 87,
-					DEEP_LINK_SETTINGS_STORAGE_MANAGEMENT: 88,
-					DEEP_LINK_PAYMENT_BRAZIL_MERCHANT: 89,
-					DEEP_LINK_PAYMENT_BRAZIL_BUYER: 90,
-					DEEP_LINK_PRIVACY_GROUPS: 91,
-					DEEP_LINK_PRIVACY_PROFILE: 92,
-					DEEP_LINK_AIS: 93,
-					DEEP_LINK_PENDING_AD_PAYMENT: 94,
-					DEEP_LINK_PENDING_AD_REVIEW: 95,
-					DEEP_LINK_SETTINGS_ACCOUNT_VERIFY_EMAIL: 96,
-					DEEP_LINK_CTWA_EXTERNAL: 97,
-					DEEP_LINK_SMB_BIZ_SEARCH_ONBOARDING_SHEET: 98,
-					DEEP_LINK_CALLING_AWARENESS_GROUP_CALL: 99,
-					DEEP_LINK_SMB_ORDERS_HOME: 100,
-					DEEP_LINK_ADS_DATA_SHARING: 101,
-					DEEP_LINK_VIDEO_PROMOTION: 102,
-					DEEP_LINK_CTWA_RECENTLY_SHARED_MEDIA: 103,
-					DEEP_LINK_MARKETING_MESSAGE_OPT_IN: 104,
-					DEEP_LINK_GROUPS_PRIVACY: 105,
-					DEEP_LINK_PROFILE_PRIVACY: 106,
-					DEEP_LINK_ORDERS_EDUCATION_VIDEO: 107,
-					DEEP_LINK_META_VERIFIED: 108,
-					DEEP_LINK_SMB_AGENT_ONBOARDING: 109,
-					DEEP_LINK_SETTINGS_CHATS_BACKUP: 110,
-					DEEP_LINK_COUPONS_PROMOTION_IMPRESSION: 111,
-					DEEP_LINK_INVITE_A_FRIEND: 112,
-					DEEP_LINK_UPDATES: 113,
-					DEEP_LINK_CONTACTS_PERMISSION: 114,
-					DEEP_LINK_NOTIFICATIONS_PERMISSION: 115,
-					DEEP_LINK_WABAI_ONBOARDING: 116,
-					DEEP_LINK_CHAT_LIST: 117,
-				},
-			],
-			isContact: [4, 'boolean'],
-			linkOwnerType: [
-				5,
-				{
-					CONSUMER: 1,
-					SMB: 2,
-					ENT: 3,
-				},
-			],
-			sourceSurface: [7, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'DisappearingMessageChatPicker',
-		id: 3398,
-		props: {
-			chatsSelected: [1, 'integer'],
-			dmChatPickerEntryPoint: [
-				2,
-				{
-					DEFAULT_MODE_SETTING: 0,
-					STORAGE_SETTING: 1,
-					PRIVACY_SETTING: 2,
-				},
-			],
-			dmChatPickerEventName: [
-				3,
-				{
-					CHAT_PICKER_LINK_IMPRESSION: 0,
-					CHAT_PICKER_TRAY_OPEN: 1,
-					CHAT_PICKER_TRAY_EXIT: 2,
-					CHAT_PICKER_CHATS_SELECTED: 3,
-				},
-			],
-			ephemeralityDuration: [4, 'integer'],
-			groupChatsSelected: [5, 'integer'],
-			groupSizeDistributionJson: [9, 'string'],
-			newlyEphemeralChats: [7, 'integer'],
-			totalChatsInChatPicker: [8, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'DisappearingModeSettingChange',
-		id: 3056,
-		props: {
-			disappearingModeEntryPoint: [
-				4,
-				{
-					ACCOUNT_SETTINGS: 1,
-					SYSTEM_MESSAGE: 2,
-					INDIVIDUAL_CHAT_DISAPPEARING_MESSAGES_SETTING: 3,
-					GROUP_CHAT_DISAPPEARING_MESSAGES_SETTING: 4,
-					DEEP_LINK: 5,
-					STORAGE_SETTINGS: 6,
-					PRIVACY_SETTINGS: 7,
-				},
-			],
-			lastToggleTimestamp: [3, 'integer'],
-			newEphemeralityDuration: [2, 'integer'],
-			previousEphemeralityDuration: [1, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'DisappearingModeSettingEvents',
-		id: 3446,
-		props: {
-			disappearingModeEntryPoint: [
-				5,
-				{
-					ACCOUNT_SETTINGS: 1,
-					SYSTEM_MESSAGE: 2,
-					INDIVIDUAL_CHAT_DISAPPEARING_MESSAGES_SETTING: 3,
-					GROUP_CHAT_DISAPPEARING_MESSAGES_SETTING: 4,
-					DEEP_LINK: 5,
-					STORAGE_SETTINGS: 6,
-					PRIVACY_SETTINGS: 7,
-				},
-			],
-			disappearingModeSettingEventName: [
-				1,
-				{
-					DEFAULT_MESSAGE_TIMER_OPEN: 1,
-					DEFAULT_MESSAGE_TIMER_SET: 2,
-					DEFAULT_MESSAGE_TIMER_EXIT: 3,
-					LEARN_MORE_CLICK: 4,
-				},
-			],
-			lastToggleTimestamp: [2, 'integer'],
-			newEphemeralityDuration: [3, 'integer'],
-			previousEphemeralityDuration: [4, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'EditBusinessProfile',
-		id: 1466,
-		props: {
-			businessProfileEntryPoint: [
-				10,
-				{
-					REGISTRATION: 1,
-					SETTINGS: 2,
-					COMPLIANCE: 3,
-					QUICK_REPLY_SMART_DEFAULT: 4,
-					WA_PAGES: 5,
-					PROFILE_COMPLETENESS: 6,
-					DIRECTORY_ONBOARDING: 7,
-				},
-			],
-			editBusinessProfileSessionId: [2, 'string'],
-			editProfileAction: [
-				1,
-				{
-					ACTION_OPEN: 1,
-					ACTION_SAVE: 2,
-					ACTION_DISCARD: 3,
-					ACTION_PROFILE_FIELD_OPEN: 4,
-					ACTION_PROFILE_FIELD_SAVE: 5,
-					ACTION_PROFILE_FIELD_DISCARD: 6,
-					ACTION_FACEBOOK_ENABLED: 7,
-					ACTION_FACEBOOK_DISABLED: 8,
-					ACTION_INSTAGRAM_ENABLED: 9,
-					ACTION_INSTAGRAM_DISABLED: 10,
-					ACTION_FB_IG_POP_SHOWN: 11,
-					ACTION_EDIT_COVER_PHOTO_CLICK: 12,
-					ACTION_REMOVE_COVER_PHOTO: 13,
-					UPGRADE_TO_CUSTOM_LINK_CLICK: 14,
-					DIALOG_BOX_GEOCODE_IMPRESSION: 15,
-					DIALOG_BOX_GEOCODE_ACCEPT: 16,
-					DIALOG_BOX_GEOCODE_REVOKE: 17,
-				},
-			],
-			editProfileActionField: [
-				9,
-				{
-					DESCRIPTION: 1,
-					HOURS: 2,
-					ADDRESS: 3,
-					EMAIL: 4,
-					WEBSITE: 5,
-					CATEGORY: 6,
-					PROFILE: 7,
-				},
-			],
-			hasAddress: [5, 'boolean'],
-			hasCategory: [4, 'boolean'],
-			hasDescription: [3, 'boolean'],
-			hasEmail: [7, 'boolean'],
-			hasHours: [6, 'boolean'],
-			hasWebsite: [8, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'EphemeralSettingChange',
-		id: 2370,
-		props: {
-			chatEphemeralityDuration: [1, 'integer'],
-			ephemeralSettingEntryPoint: [
-				3,
-				{
-					CHAT_INFO: 1,
-					SYSTEM_MESSAGE: 2,
-					CHAT_OVERFLOW: 3,
-					CHAT_PICKER: 4,
-					EPHEMERAL_NUX: 5,
-					CHAT_PICKER_DISAPPEARING_MODE_TIMER: 6,
-					CHAT_PICKER_STORAGE_SETTING: 7,
-				},
-			],
-			ephemeralSettingGroupSize: [
-				5,
-				{
-					LT4: 1,
-					LT8: 2,
-					LT16: 3,
-					LT32: 4,
-					LT64: 5,
-					LT128: 6,
-					LT256: 7,
-					LT512: 8,
-					LT1000: 9,
-					LT1500: 10,
-					LT2000: 11,
-					LT2500: 12,
-					LT3000: 13,
-					LT3500: 14,
-					LT4000: 15,
-					LT4500: 16,
-					LT5000: 17,
-					LARGEST_BUCKET: 18,
-				},
-			],
-			previousEphemeralityDuration: [2, 'integer'],
-			threadId: [6, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'GifFromProviderSent',
-		id: 1124,
-		props: {
-			gifSearchProvider: [
-				1,
-				{
-					GIPHY: 0,
-					TENOR: 1,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'GifSearchCancelled',
-		id: 1126,
-		props: {
-			gifSearchProvider: [
-				1,
-				{
-					GIPHY: 0,
-					TENOR: 1,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'GifSearchNoResults',
-		id: 1128,
-		props: {
-			gifSearchProvider: [
-				1,
-				{
-					GIPHY: 0,
-					TENOR: 1,
-				},
-			],
-			inputLanguageCode: [3, 'string'],
-			languageCode: [2, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'GifSearchResultTapped',
-		id: 1122,
-		props: {
-			gifSearchProvider: [
-				1,
-				{
-					GIPHY: 0,
-					TENOR: 1,
-				},
-			],
-			rank: [2, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'GifSearchSessionStarted',
-		id: 1134,
-		props: {
-			gifSearchProvider: [
-				1,
-				{
-					GIPHY: 0,
-					TENOR: 1,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'KeepInChatErrors',
-		id: 3698,
-		props: {
-			canEditDmSettings: [7, 'boolean'],
-			isAGroup: [2, 'boolean'],
-			isAdmin: [3, 'boolean'],
-			kicAction: [
-				4,
-				{
-					KEEP_MESSAGE: 1,
-					UNKEEP_MESSAGE: 2,
-				},
-			],
-			kicErrorCode: [
-				5,
-				{
-					NONE: 1,
-					MESSAGE_MISSING: 2,
-					MESSAGE_REVOKED: 3,
-					SENDER_UNKEPT: 4,
-					OLDER_REQUEST: 5,
-					ORPHAN_EXPIRED: 6,
-					TIE_BREAK_IGNORED: 7,
-					MESSAGE_EXPIRED: 8,
-					NO_PERMISSION_TO_EDIT: 9,
-					MESSAGE_FROM_EX_MEMBER: 10,
-					OFFLINE: 11,
-					SENDER_DISABLED: 12,
-					KEPT_BEYOND_EXPIRY: 13,
-					NOT_PART_OF_THE_GROUP: 14,
-					CONTACT_BLOCKED: 15,
-					UNKNOWN: 999,
-				},
-			],
-			kicMessageEphemeralityDuration: [6, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'KeepInChatPerf',
-		id: 3488,
-		props: {
-			chatEphemeralityDuration: [1, 'integer'],
-			kicErrorCode: [
-				2,
-				{
-					NONE: 1,
-					MESSAGE_MISSING: 2,
-					MESSAGE_REVOKED: 3,
-					SENDER_UNKEPT: 4,
-					OLDER_REQUEST: 5,
-					ORPHAN_EXPIRED: 6,
-					TIE_BREAK_IGNORED: 7,
-					MESSAGE_EXPIRED: 8,
-					NO_PERMISSION_TO_EDIT: 9,
-					MESSAGE_FROM_EX_MEMBER: 10,
-					OFFLINE: 11,
-					SENDER_DISABLED: 12,
-					KEPT_BEYOND_EXPIRY: 13,
-					NOT_PART_OF_THE_GROUP: 14,
-					CONTACT_BLOCKED: 15,
-					UNKNOWN: 999,
-				},
-			],
-			kicMessageEphemeralityDuration: [3, 'integer'],
-			kicRequestType: [
-				4,
-				{
-					KEEP: 1,
-					UNKEEP: 2,
-				},
-			],
-			requestSendTime: [5, 'integer'],
-			response: [
-				6,
-				{
-					SUCCESS: 1,
-					ERROR: 2,
-				},
-			],
-			threadId: [7, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MessagingUserJourney',
-		id: 5134,
-		props: {
-			appSessionId: [1, 'string'],
-			isSelfPin: [8, 'boolean'],
-			mediaType: [
-				9,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messagingActionType: [
-				2,
-				{
-					NOT_NOW: 0,
-					ALLOW: 1,
-					CONTINUE: 2,
-					RESTORE: 3,
-					SKIP: 4,
-					NEXT: 5,
-					TAPPED: 6,
-					NO_TAP: 7,
-					SET_PHOTO: 8,
-					DID_NOT_SET: 9,
-					SUCCESSFUL: 10,
-					FAILED: 11,
-					UNKNOWN: 12,
-					GOOGLE_MIGRATE_CONFIRM_SKIP_IMPORT: 13,
-					GOOGLE_MIGRATE_ATTEMPT_TO_SKIP_IMPORT: 14,
-					GOOGLE_MIGRATE_CONFIRM_CONTINUE_IMPORT: 15,
-					GOOGLE_MIGRATE_ACCEPTED_PERMISSION: 16,
-					GOOGLE_MIGRATE_IMPORT_COMPLETE_NEXT: 17,
-					GOOGLE_MIGRATE_REJECTED_CONTACT_AND_STORAGE_PERMISSION: 18,
-					GOOGLE_MIGRATE_REJECTED_CONTACT_PERMISSION: 19,
-					GOOGLE_MIGRATE_REJECTED_STORAGE_PERMISSION: 20,
-					AD_TIMEOUT: 21,
-					CONFIRM_WITH_SECOND_SMS: 22,
-					BACK: 23,
-					EULA_TOS_ACCEPTED: 24,
-					MIGRATE_PHONE_NUMBER_ACCEPT: 25,
-					MIGRATE_PHONE_NUMBER_SKIP_NEW: 26,
-					CLICK_VERIFICATION_COMPLETE_DIALOG_LEARN_MORE: 27,
-					CLICK_VERIFICATION_COMPLETE_DIALOG_CONTINUE: 28,
-					TRY_AGAIN: 29,
-					WRONG_NUMBER: 30,
-					VERIFY_WITH_SMS: 31,
-					CLICK_EMAIL_OTP_DEEP_LINK: 32,
-					VERIFY_ANOTHER_WAY: 33,
-					WFS_FB: 34,
-					WFS_IG: 35,
-					LOGIN_WFS: 36,
-					CLICK_PIN: 37,
-					DISPLAY: 38,
-					SELECT_OPTION: 39,
-					CLICK_UNPIN: 40,
-				},
-			],
-			pinInChatExpirySecs: [3, 'integer'],
-			threadType: [
-				4,
-				{
-					GROUP: 1,
-					BROADCAST: 2,
-					INDIVIDUAL: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					SUB_GROUP: 6,
-					DEFAULT_SUB_GROUP: 7,
-					PARENT_GROUP: 8,
-				},
-			],
-			uiSurface: [
-				5,
-				{
-					UNKNOWN: 1,
-					COMMUNITY_HOME: 2,
-					COMMUNITY_TAB: 3,
-					CHAT_THREAD: 4,
-					CHAT_INFO_PAGE: 5,
-					CHAT_LIST: 6,
-					COMMUNITY_NAVIGATION: 7,
-					BACKGROUND: 8,
-					RESIGN: 9,
-					SUBGROUP_SWITCHER: 10,
-					COMMUNITY_COMPOSER: 11,
-					MEDIA_VIEWER: 12,
-					ALL_MEDIA: 13,
-					STREAMING_MEDIA_VIEWER: 14,
-					CALLS_HOME_TAB: 15,
-					IN_CALL_UI: 16,
-					STATUS_HOME_TAB: 17,
-					STATUS_COMPOSER: 18,
-					STATUS_VIEW: 19,
-					CAMERA: 20,
-					PHOTO_VIDEO_LIBRARY: 21,
-					SETTINGS_HOME_TAB: 22,
-					TOOLS_TAB: 23,
-					COMMUNITY_SETTINGS: 24,
-					CHANNEL_UPDATES_HOME: 25,
-					CHANNEL_THREAD: 26,
-					CHANNEL_DIRECTORY: 27,
-					CHANNEL_PROFILE: 28,
-					CHANNEL_FORWARD: 29,
-					CHANNEL_PRODUCER_MEDIA_EDITOR: 30,
-					CHANNEL_CREATE: 31,
-					CHANNEL_EDIT: 32,
-					CHANNEL_DELETE: 33,
-					STATUS_COMPOSER_TEXT: 34,
-					LIGHTWEIGHT_CALL_UI: 35,
-					AI_HOME: 36,
-					LIGHTWEIGHT_CALL_BANNER: 37,
-					LIGHTWEIGHT_CALL_NUX: 38,
-					CALL_INFO_PAGE: 39,
-					SMB_CATALOG: 40,
-					SMB_CATALOG_SHARE_LINK: 41,
-					SMB_CATALOG_SHARE_PRODUCT_LINK: 42,
-					SMB_CATALOG_SETTINGS: 43,
-					SMB_CATALOG_PRODUCT: 44,
-					SMB_CATALOG_NEW_COLLECTION: 45,
-					SMB_CATALOG_EDIT_COLLECTION: 46,
-					SMB_CATALOG_CREATE_PRODUCT: 47,
-					SMB_CATALOG_EDIT_PRODUCT: 48,
-					SMB_CATALOG_NEW_COLLECTION_ADD_ITEMS: 49,
-					SMB_CATALOG_COLLECTION_UPDATE_ITEMS: 50,
-					SMB_CATALOG_COLLECTIONS: 51,
-					SMB_CATALOG_COLLECTION_REORDER: 52,
-					SMB_CATALOG_COLLECTION_PRODUCTS: 53,
-					SMB_CATALOG_COLLECTION_PRODUCTS_REORDER: 54,
-					CREATE_EVENT: 55,
-					EVENT_PAGE: 56,
-					EVENTS_IN_GROUP: 57,
-					CATALOG_HOME: 59,
-					CATALOG_COLLECTION: 60,
-					CATALOG_ITEM: 61,
-					CATALOG_CART: 62,
-					FLOWS_EXPERIENCE: 63,
-					BUSINESS_PROFILE_EDIT: 64,
-					BUSINESS_PROFILE_EDIT_NAME: 65,
-					BUSINESS_PROFILE_EDIT_CATEGORIES: 66,
-					BUSINESS_PROFILE_EDIT_DESCRIPTION: 67,
-					BUSINESS_PROFILE_EDIT_WEBSITE: 68,
-					BUSINESS_PROFILE_EDIT_EMAIL: 69,
-					BUSINESS_PROFILE_EDIT_ADDRESS: 70,
-					BUSINESS_PROFILE_EDIT_HOURS: 71,
-					BUSINESS_PROFILE_EDIT_COVER_PHOTO: 72,
-					BUSINESS_PROFILE_LINK_FB_IG: 73,
-					BUSINESS_PROFILE_HELP_PAGE_LINK_FB_IG: 74,
-					PAYMENTS_HOME: 75,
-					PAYMENTS_HOME_TRANSACTIONS: 76,
-					PAYMENTS_HOME_RECENT_MERCHANTS: 77,
-					PAYMENTS_HOME_INVITE_OTHERS: 78,
-					PAYMENTS_HOME_HELP: 79,
-					MESSAGE_MENU: 80,
-					PIN_MESSAGE_REPLACEMENT_DIALOG: 81,
-					PIN_MESSAGE_EXPIRATION_DIALOG: 82,
-					MY_STATUS_LIST: 83,
-					ALL_STATUS_LIST: 84,
-					PIN_BANNER: 85,
-					CALL_BANNER: 86,
-					LANDING_SCREEN: 87,
-					NEW_CHAT: 88,
-					GROUP_MEMBER_ADD_GROUP_CREATION: 89,
-					GROUP_MEMBER_ADD_EXISTING_GROUP: 90,
-					GROUP_CHAT: 91,
-					GROUP_CREATION: 92,
-				},
-			],
-			userJourneyFunnelId: [6, 'string'],
-			userRole: [
-				7,
-				{
-					MEMBER: 0,
-					ADMIN: 1,
-					CADMIN: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'MetaVerifiedInteraction',
-		id: 4870,
-		props: {
-			businessOwnerJid: [1, 'string'],
-			businessOwnerPlatform: [
-				2,
-				{
-					SMBA: 1,
-					SMBI: 2,
-					ENT: 3,
-				},
-			],
-			metaVerifiedInteractionAction: [
-				3,
-				{
-					MV_INTERACTION_ACTION_CLICK_MV_BADGE: 1,
-					MV_INTERACTION_ACTION_VIEW_MV_EDUCATION_BOTTOM_SHEET: 2,
-					MV_INTERACTION_ACTION_CLICK_MV_EDUCATION_LINK: 3,
-					MV_INTERACTION_ACTION_VIEW_CROSS_SELL_PROFILE_INTERSTITIAL: 4,
-					MV_INTERACTION_ACTION_CLICK_MV_MORE_LINK: 5,
-					MV_INTERACTION_ACTION_CLICK_GET_WA_BUSINESS: 6,
-					MV_INTERACTION_ACTION_CLICK_SUPPORT: 7,
-					MV_INTERACTION_ACTION_CLICK_CUSTOM_WEBPAGE_AND_LINK: 8,
-					MV_INTERACTION_ACTION_CLICK_MULTI_DEVICE: 9,
-					MV_INTERACTION_ACTION_CLICK_MV_LEARN_MORE: 10,
-					MV_INTERACTION_ACTION_CLICK_MV_HOME: 11,
-				},
-			],
-			metaVerifiedInteractionAssetType: [
-				4,
-				{
-					CHANNEL: 1,
-					SMB: 2,
-					ENT: 3,
-					PERSONAL: 4,
-				},
-			],
-			metaVerifiedInteractionReferral: [
-				5,
-				{
-					CHAT_PROFILE: 1,
-					CONTACT_CARD: 2,
-					SETTINGS: 3,
-					BUSINESS_TOOLS: 4,
-					NOTIFICATION: 5,
-				},
-			],
-			metaVerifiedInteractionSurface: [
-				6,
-				{
-					BUSINESS_PROFILE: 1,
-					MV_EDUCATION_BOTTOM_SHEET: 2,
-					CROSS_SELL_PROFILE_INTERSTITIAL: 3,
-					META_VERIFIED_HOME: 4,
-					SETTINGS: 5,
-					BUSINESS_TOOLS: 6,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 113760892,
-	},
-	{
-		name: 'PaidMessagingUserInteractionsLogger',
-		id: 4740,
-		props: {
-			pmxActionTarget: [
-				1,
-				{
-					NONE: 0,
-					HEADER: 1,
-					CTA_COPY_CODE: 2,
-					CTA_URL: 3,
-					QUICK_REPLY: 4,
-					CTA_CALL: 5,
-					CTA_REMINDER: 6,
-					SEE_ALL: 7,
-					THUMBNAIL: 8,
-				},
-			],
-			pmxActionType: [
-				2,
-				{
-					VIEW: 0,
-					CLICK: 1,
-					READ: 2,
-				},
-			],
-			pmxComponentType: [
-				3,
-				{
-					NONE: 0,
-					HEADER: 1,
-					BUTTON: 2,
-				},
-			],
-			pmxHashedMessageKey: [11, 'integer'],
-			pmxHeaderMediaType: [
-				4,
-				{
-					TEXT: 0,
-					IMAGE: 1,
-					VIDEO: 2,
-					LOCATION: 3,
-					DOCUMENT: 4,
-					GIF: 5,
-				},
-			],
-			pmxHostStorage: [
-				8,
-				{
-					NONE: 0,
-					ON_PREMISE: 1,
-					FACEBOOK: 2,
-				},
-			],
-			pmxMarketingFormat: [
-				5,
-				{
-					CAROUSEL: 0,
-					MPM: 1,
-					CUSTOM: 2,
-				},
-			],
-			pmxMessageDeliveredTs: [10, 'integer'],
-			pmxQueryParams: [6, 'string'],
-			pmxSenderCountryCode: [9, 'string'],
-			templateId: [7, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 113760892,
-	},
-	{
-		name: 'PinInChatInteraction',
-		id: 4436,
-		props: {
-			groupRole: [
-				1,
-				{
-					ADMIN: 1,
-					MEMBER: 2,
-				},
-			],
-			groupSize: [2, 'integer'],
-			groupTypeClient: [
-				3,
-				{
-					REGULAR_GROUP: 1,
-					SUB_GROUP: 2,
-					DEFAULT_SUB_GROUP: 3,
-					PARENT_GROUP: 4,
-				},
-			],
-			isAGroup: [4, 'boolean'],
-			isSelfPin: [8, 'boolean'],
-			mediaType: [
-				5,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			pinCount: [6, 'integer'],
-			pinInChatInteractionType: [
-				7,
-				{
-					TAP_ON_BANNER: 1,
-				},
-			],
-			pinIndex: [9, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PinInChatMessageSend',
-		id: 4438,
-		props: {
-			groupRole: [
-				1,
-				{
-					ADMIN: 1,
-					MEMBER: 2,
-				},
-			],
-			groupTypeClient: [
-				2,
-				{
-					REGULAR_GROUP: 1,
-					SUB_GROUP: 2,
-					DEFAULT_SUB_GROUP: 3,
-					PARENT_GROUP: 4,
-				},
-			],
-			isAGroup: [3, 'boolean'],
-			isSelfParentMessage: [7, 'boolean'],
-			isSelfPin: [8, 'boolean'],
-			mediaType: [
-				4,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			pinInChatExpirySecs: [5, 'integer'],
-			pinInChatType: [
-				6,
-				{
-					PIN_FOR_ALL: 1,
-					UNPIN_FOR_ALL: 2,
-				},
-			],
-			timeRemainingToExpirySecs: [9, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PnhRequestRevealAction',
-		id: 3808,
-		props: {
-			pnhAction: [
-				1,
-				{
-					SEE_MASKED_PN_AT_CHAT_CREATION: 1,
-					REQUEST_DIALOG_APPEAR: 2,
-					SEND_REQUEST: 3,
-					SHARE_PN_SHEET_APPEAR: 4,
-					DISMISS: 5,
-					SHARE_NUMBER: 6,
-				},
-			],
-			pnhChatParty: [
-				2,
-				{
-					BIZ: 1,
-					CONSUMER: 2,
-				},
-			],
-			pnhChatType: [
-				3,
-				{
-					CTWA: 1,
-				},
-			],
-			pnhEntryPoint: [
-				4,
-				{
-					CHAT_CREATION: 1,
-					CHAT_INFO_REQUEST: 2,
-					AUDIO: 3,
-					VIDEO: 4,
-					PN_REQUEST: 5,
-					SYSTEM_MESSAGE: 6,
-					CHAT_INFO_PN_VISIBILITY: 7,
-				},
-			],
-			threadId: [5, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PollsActions',
-		id: 3676,
-		props: {
-			chatType: [
-				8,
-				{
-					OTHER: 0,
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					STATUS: 3,
-					BROADCAST: 4,
-					CHANNEL: 5,
-				},
-			],
-			groupSizeBucket: [
-				1,
-				{
-					SMALL: 1,
-					MEDIUM: 2,
-					LARGE: 3,
-					EXTRA_LARGE: 4,
-					XX_LARGE: 5,
-					XXX_LARGE: 6,
-					LT1024: 16,
-					LT1500: 7,
-					LT2000: 8,
-					LT2500: 9,
-					LT3000: 10,
-					LT3500: 11,
-					LT4000: 12,
-					LT4500: 13,
-					LT5000: 14,
-					LARGEST_BUCKET: 15,
-				},
-			],
-			isAGroup: [6, 'boolean'],
-			isAdmin: [2, 'boolean'],
-			pollAction: [
-				3,
-				{
-					OPEN_CREATE_MODAL: 1,
-					CREATE_POLL: 2,
-					VIEW_RESULTS_MODAL: 4,
-					REMOVE_VOTE: 5,
-					VOTE: 6,
-					CHANGE_VOTE: 7,
-				},
-			],
-			pollCreationDs: [4, 'integer'],
-			pollOptionsCount: [5, 'integer'],
-			typeOfGroup: [
-				7,
-				{
-					GROUP: 1,
-					SUBGROUP: 2,
-					DEFAULT_SUBGROUP: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PrivacySettingsClick',
-		id: 3726,
-		props: {
-			privacyControlEntryPoint: [
-				1,
-				{
-					PRIVACY_SETTINGS: 0,
-					PROFILE_PHOTO_JIT: 1,
-					SETTINGS_SEARCH: 2,
-					DEEP_LINK: 3,
-					PRIVACY_CHECKUP_BANNER: 4,
-					PRIVACY_CHECKUP_DEEP_LINK: 5,
-					PRIVACY_CHECKUP_WA_CHAT: 6,
-					PRIVACY_CHECKUP_SETTINGS_SEARCH: 7,
-				},
-			],
-			privacyControlItem: [
-				2,
-				{
-					LAST_SEEN_AND_ONLINE: 0,
-					PROFILE_PHOTO: 1,
-					ABOUT: 2,
-					GROUPS: 3,
-					STATUS: 4,
-					READ_RECEIPT: 5,
-					BLOCKED: 6,
-					LIVE_LOCATION: 7,
-					SCREEN_LOCK: 8,
-					DDM_TIMER: 9,
-					CALLS: 10,
-					FINGERPRINT_LOCK: 11,
-					DISAPPEARING_MESSAGES: 12,
-					UNKNOWN: 13,
-					CHECKUP: 14,
-					SHOW_PREVIEW: 15,
-					E2EE_BACKUPS: 16,
-					TWO_STEP_VERIFICATION: 17,
-					FACE_AND_HAND_EFFECTS: 18,
-					ADVANCED: 19,
-					CHAT_LOCK: 20,
-					AVATAR: 21,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PttPlayback',
-		id: 2044,
-		props: {
-			pttDuration: [12, 'timer'],
-			pttMainThreadBlock: [7, 'boolean'],
-			pttMiniPlayerClick: [15, 'integer'],
-			pttMiniPlayerClose: [16, 'boolean'],
-			pttMiniPlayerPauseCnt: [17, 'integer'],
-			pttPlayRequestT: [1, 'timer'],
-			pttPlaybackFailed: [8, 'boolean'],
-			pttPlaybackOverallT: [4, 'timer'],
-			pttPlaybackSpeed: [
-				10,
-				{
-					SPEED_1: 0,
-					SPEED_1_5: 1,
-					SPEED_2: 2,
-				},
-			],
-			pttPlaybackSpeedCnt: [11, 'integer'],
-			pttPlayedOutOfChat: [18, 'boolean'],
-			pttPlayedPct: [14, 'number'],
-			pttPlayer: [
-				9,
-				{
-					AUDIO_QUEUE: 0,
-					AVPLAYER: 1,
-					AVAUDIOPLAYER: 2,
-					OPUSPLAYER: 3,
-					ANDROIDPLAYER: 4,
-					EXOPLAYER: 5,
-					UWPPLAYER: 6,
-					VOIPPLAYER: 7,
-				},
-			],
-			pttPlayerInitT: [2, 'timer'],
-			pttPlayerPlayT: [3, 'timer'],
-			pttSeekCnt: [13, 'integer'],
-			pttTrigger: [
-				5,
-				{
-					MANUAL: 0,
-					SEQUENTIAL: 1,
-				},
-			],
-			pttType: [
-				6,
-				{
-					UNKNOWN: 0,
-					AAC: 1,
-					MP3: 2,
-					AMR_NB: 3,
-					AMR_WB: 4,
-					OPUS: 5,
-					MULTIPLE_TRACKS: 6,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ReactionActions',
-		id: 3184,
-		props: {
-			mediaType: [
-				3,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			messageType: [
-				1,
-				{
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					BROADCAST: 3,
-					STATUS: 4,
-					CHANNEL: 5,
-					INTEROP: 6,
-				},
-			],
-			reactionAction: [
-				2,
-				{
-					OPEN_TRAY: 1,
-					DELETE: 2,
-					UPDATE: 3,
-				},
-			],
-		},
-		weight: 20,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'SettingsClick',
-		id: 2214,
-		props: {
-			settingsClickEntryPoint: [
-				2,
-				{
-					SETTINGS_SCREEN: 0,
-					SETTINGS_SEARCH: 1,
-					DEEP_LINK: 2,
-					PRIVACY_CHECKUP: 3,
-					METAB_SCREEN: 4,
-				},
-			],
-			settingsItem: [
-				1,
-				{
-					PROFILE: 0,
-					BUSINESS_TOOLS: 1,
-					ACCOUNT: 2,
-					CHATS: 3,
-					NOTIFICATIONS: 4,
-					DATA_STORAGE_USAGE: 5,
-					HELP: 6,
-					INVITE_FRIEND: 7,
-					STARRED_MESSAGES: 8,
-					WHATSAPP_WEB: 9,
-					PREMIUM_SUBSCRIPTION: 10,
-					PRIVACY: 11,
-					SECURITY: 12,
-					THEME: 13,
-					CHAT_WALLPAPER: 14,
-					MEDIA_AUTO_DOWNLOAD: 15,
-					REQUEST_ACCOUNT_INFO: 16,
-					KEYBOARD_SHORTCUTS: 17,
-					DEVELOPER: 18,
-					DATA_SHARING: 19,
-					DESKTOP_SETTINGS: 20,
-					LINKED_DEVICES: 21,
-					UNKNOWN: 22,
-					QR_CODE: 23,
-					DEVICES: 24,
-					PROFILE_CARD: 25,
-					PRIVACY_CARD: 26,
-					CONTACTS_CARD: 27,
-					AVATAR: 28,
-					PAYMENTS: 29,
-					LOGOUT: 30,
-					META_VERIFIED: 31,
-					TEXT_STATUS: 32,
-					THIRD_PARTY: 33,
-				},
-			],
-			settingsPageType: [
-				3,
-				{
-					SETTINGS: 0,
-					ME_TAB: 1,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'SettingsSearchInitiate',
-		id: 4014,
-		props: {
-			settingsPageType: [
-				1,
-				{
-					SETTINGS: 0,
-					ME_TAB: 1,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'SettingsSearchTap',
-		id: 4016,
-		props: {
-			tapItemName: [1, 'string'],
-			topLevelParentSetting: [
-				2,
-				{
-					PROFILE: 0,
-					BUSINESS_TOOLS: 1,
-					ACCOUNT: 2,
-					CHATS: 3,
-					NOTIFICATIONS: 4,
-					DATA_STORAGE_USAGE: 5,
-					HELP: 6,
-					INVITE_FRIEND: 7,
-					STARRED_MESSAGES: 8,
-					WHATSAPP_WEB: 9,
-					PREMIUM_SUBSCRIPTION: 10,
-					PRIVACY: 11,
-					SECURITY: 12,
-					THEME: 13,
-					CHAT_WALLPAPER: 14,
-					MEDIA_AUTO_DOWNLOAD: 15,
-					REQUEST_ACCOUNT_INFO: 16,
-					KEYBOARD_SHORTCUTS: 17,
-					DEVELOPER: 18,
-					DATA_SHARING: 19,
-					DESKTOP_SETTINGS: 20,
-					LINKED_DEVICES: 21,
-					UNKNOWN: 22,
-					QR_CODE: 23,
-					DEVICES: 24,
-					PROFILE_CARD: 25,
-					PRIVACY_CARD: 26,
-					CONTACTS_CARD: 27,
-					AVATAR: 28,
-					PAYMENTS: 29,
-					LOGOUT: 30,
-					META_VERIFIED: 31,
-					TEXT_STATUS: 32,
-					THIRD_PARTY: 33,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'SmbDataSharingConsentSetting',
-		id: 3974,
-		props: {
-			smbDataSharingConsentSettingEntryPoint: [
-				1,
-				{
-					ENTRY_POINT_ORDER_SCREEN: 0,
-					ENTRY_POINT_SETTINGS_SCREEN: 1,
-					ENTRY_POINT_LABELS_SCREEN: 2,
-				},
-			],
-			smbDataSharingConsentSettingType: [2, 'boolean'],
-			smbDataSharingConsentSettingVersion: [3, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'StatusItemView',
-		id: 1658,
-		props: {
-			isPosterBiz: [23, 'boolean'],
-			isPosterInAddressBook: [25, 'boolean'],
-			mediaType: [
-				4,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			psaCampaignId: [17, 'string'],
-			psaCampaignItemIndex: [18, 'integer'],
-			psaLinkAvailable: [19, 'boolean'],
-			psaLinkClick: [22, 'boolean'],
-			psaLinkLoadTime: [21, 'timer'],
-			psaLinkOpenResult: [
-				20,
-				{
-					SUCCESS: 1,
-					CANCEL: 2,
-					ERROR: 3,
-				},
-			],
-			statusItemImpressionCount: [14, 'integer'],
-			statusItemIndex: [16, 'integer'],
-			statusItemLength: [7, 'timer'],
-			statusItemLoadTime: [5, 'timer'],
-			statusItemReplied: [8, 'integer'],
-			statusItemUnread: [9, 'boolean'],
-			statusItemViewCount: [10, 'integer'],
-			statusItemViewResult: [
-				3,
-				{
-					OK: 1,
-					CANCELLED: 2,
-					ERROR_UNKNOWN: 3,
-					MEDIA_ERROR_UNKNOWN: 4,
-					MEDIA_ERROR_DNS: 5,
-					MEDIA_ERROR_TIMEOUT: 6,
-					MEDIA_ERROR_INSUFFICIENT_SPACE: 7,
-					MEDIA_ERROR_TOO_OLD: 8,
-					MEDIA_ERROR_CANNOT_RESUME: 9,
-					MEDIA_ERROR_HASH_MISMATCH: 10,
-					MEDIA_ERROR_INVALID_URL: 11,
-					MEDIA_ERROR_OUTPUT_STREAM: 12,
-					MEDIA_ERROR_MEDIA_CONN: 13,
-					MEDIA_ERROR_THROTTLE: 14,
-					MEDIA_DOWNLOAD_CANCEL: 15,
-					MEDIA_PREFETCH_END: 16,
-					MEDIA_ERROR_WATLS: 17,
-					MEDIA_ERROR_SERVER: 18,
-					MEDIA_ERROR_WAMSYS: 19,
-					MEDIA_ERROR_NETWORK: 20,
-					MEDIA_ERROR_CONNECT: 21,
-					MEDIE_HOST_SWTICH_REQUIRED: 22,
-					MEDIA_INVALID_CODE: 23,
-					MEDIA_SUSPICIOUS_CONTENT: 24,
-					MEDIA_ERROR_CRONET: 25,
-					PARTIAL_IMAGE_DOWNLOAD: 26,
-				},
-			],
-			statusItemViewTime: [6, 'timer'],
-			statusRowIndex: [2, 'integer'],
-			statusRowSection: [
-				11,
-				{
-					RECENT_STORIES: 1,
-					PREVIOUS_STORIES: 2,
-					MUTED_STORIES: 3,
-					MY_STATUS: 4,
-					CHAT_LIST: 5,
-					GROUP_PARTICIPANT: 6,
-					CONTACT_CARD: 7,
-					PROFILE_PAGE: 8,
-					CHAT_LIST_SEARCH: 9,
-					UPDATES_TAB_SEARCH: 10,
-					CHAT_TOP_BAR: 11,
-					SEE_ALL_RECENT: 12,
-					SEE_ALL_VIEWED: 13,
-					SEE_ALL_MUTED: 14,
-					SEE_ALL_SEARCH: 15,
-				},
-			],
-			statusViewerSessionId: [1, 'integer'],
-			urlStatusClicked: [
-				26,
-				{
-					ONE_CLICK: 1,
-					TWO_CLICKS: 2,
-					NO_CLICK: 3,
-				},
-			],
-			urlStatusType: [
-				27,
-				{
-					NO_PREVIEW: 1,
-					TRUNCATED: 2,
-					NON_TRUNCATED: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'StatusReply',
-		id: 1180,
-		props: {
-			isPosterBiz: [4, 'boolean'],
-			isPosterInAddressBook: [6, 'boolean'],
-			statusReplyMessageType: [
-				3,
-				{
-					UNKNOWN: 1,
-					TEXT: 2,
-					IMAGE: 3,
-					VOICE: 4,
-					DOCUMENT: 5,
-					AUDIO: 6,
-					STICKER: 7,
-					LOCATION: 8,
-					PRODUCT: 9,
-					CONTACT: 10,
-					CONTACT_ARRAY: 11,
-					CAMERA_CAPTURE_IMAGE: 12,
-					MEDIA_GALLERY: 13,
-					GIF_VIDEO: 14,
-					QUICK_REPLY: 15,
-					POLL: 16,
-					AVATAR_QUICK_REPLY: 17,
-				},
-			],
-			statusReplyResult: [
-				2,
-				{
-					OK: 1,
-					CANCELLED: 2,
-					ERROR_UNKNOWN: 3,
-				},
-			],
-			statusSessionId: [1, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'StatusRowView',
-		id: 1656,
-		props: {
-			psaCampaigns: [8, 'string'],
-			statusRowEntryMethod: [
-				5,
-				{
-					DIRECT_ROW_TAP: 1,
-					BACKWARDS_SWIPE: 2,
-					FOWARDS_SWIPE: 3,
-					BACKWARDS_TAP: 4,
-					FOWARDS_TAP: 5,
-					PREVIOUS_ROW_TIMEOUT: 6,
-				},
-			],
-			statusRowIndex: [4, 'integer'],
-			statusRowSection: [
-				3,
-				{
-					RECENT_STORIES: 1,
-					PREVIOUS_STORIES: 2,
-					MUTED_STORIES: 3,
-					MY_STATUS: 4,
-					CHAT_LIST: 5,
-					GROUP_PARTICIPANT: 6,
-					CONTACT_CARD: 7,
-					PROFILE_PAGE: 8,
-					CHAT_LIST_SEARCH: 9,
-					UPDATES_TAB_SEARCH: 10,
-					CHAT_TOP_BAR: 11,
-					SEE_ALL_RECENT: 12,
-					SEE_ALL_VIEWED: 13,
-					SEE_ALL_MUTED: 14,
-					SEE_ALL_SEARCH: 15,
-				},
-			],
-			statusRowUnreadItemCount: [7, 'integer'],
-			statusRowViewCount: [6, 'integer'],
-			statusSessionId: [1, 'integer'],
-			statusViewerSessionId: [2, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'UiRevokeAction',
-		id: 3298,
-		props: {
-			messageAction: [
-				1,
-				{
-					MESSAGE_SELECTED: 0,
-					TRASH_CAN_SELECTED: 1,
-					ADMIN_DELETE_FOR_EVERYONE: 2,
-					SENDER_DELETE_FOR_EVERYONE: 3,
-					ADMIN_AND_SENDER_DELETE_FOR_EVERYONE: 4,
-					DELETE_FOR_EVERYONE_SELECTED: 5,
-				},
-			],
-			uiRevokeActionDuration: [2, 'integer'],
-			uiRevokeActionSessionId: [3, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WaShopsManagement',
-		id: 2908,
-		props: {
-			isShopsProductPreviewVisible: [2, 'boolean'],
-			shopsManagementAction: [
-				1,
-				{
-					ACTION_CLICK_SHOPS_SETTING: 1,
-					ACTION_CLICK_CATALOG_SETTING: 2,
-					ACTION_CLICK_COMMERCE_MANAGER_IN_CATALOG_SETTING: 3,
-					ACTION_CLICK_CANCEL_IN_CATALOG_SETTING: 4,
-					ACTION_CLICK_VIEW_SHOPS_IN_SHOPS_SETTING: 5,
-					ACTION_CLICK_COMMERCE_MANAGER_IN_SHOPS_SETTING: 6,
-					ACTION_CLICK_CANCEL_IN_SHOPS_SETTING: 7,
-					ACTION_SHOPS_PRODUCT_PREVIEW_VISIBLE: 8,
-					ACTION_CLICK_SHOPS_PRODUCT_PREVIEW_TILE: 9,
-					ACTION_CLICK_MANAGE_SHOPS: 10,
-					ACTION_SHARE_SHOPS: 11,
-					ACTION_CLICK_VIEW_SHOPS_FROM_EDIT_BIZ_PROFILE: 12,
-					ACTION_CLICK_COMMERCE_MANAGER_FROM_EDIT_BIZ_PROFILE: 13,
-					ACTION_CLICK_CANCEL_FROM_EDIT_BIZ_PROFILE: 14,
-				},
-			],
-			shopsSellerJid: [3, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcButterbarEvent',
-		id: 3932,
-		props: {
-			webcButterbarAction: [
-				1,
-				{
-					IMPRESSION: 1,
-					CLICK_CTA: 2,
-					CLICK_DISMISS: 3,
-					AUTO_DISMISS: 4,
-				},
-			],
-			webcButterbarType: [
-				2,
-				{
-					OFFLINE: 1,
-					RESUME_CONNECTING: 2,
-					RESUME_LOADING_MSGS_PROGRESS: 3,
-					UPDATE_DUE_TO_SOFT_MIN: 4,
-					UWP_UPSELL: 5,
-					NOTIFICATION: 6,
-					OFFLINE_NOTIFICATION: 7,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcEmojiOpen',
-		id: 1166,
-		props: {
-			webcEmojiOpenTab: [1, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcLinkPreviewDisplay',
-		id: 3864,
-		props: {
-			didFallbackNonHq: [2, 'boolean'],
-			didRequestHq: [3, 'boolean'],
-			didRespondHqPreview: [4, 'boolean'],
-			webcDisplayStatus: [
-				1,
-				{
-					SHOWED_PREVIEW_TO_USER: 1,
-					PREVIEW_TIMEOUT: 2,
-					PREVIEW_MALFORMED: 3,
-					PREVIEW_NOT_FOUND: 4,
-					PREVIEW_GENERAL_ERROR: 5,
-					PREVIEW_DECRYPTION_ERROR: 6,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WhatsappQuickPromotionClientEligibilityWaterfall',
-		id: 4360,
-		props: {
-			eligibilityStatus: [1, 'boolean'],
-			instanceLogData: [5, 'string'],
-			promotionId: [2, 'string'],
-			qpFailureReason: [3, 'string'],
-			step: [4, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'GatedChatOpened',
-		id: 3150,
-		props: {
-			chatGatedReason: [
-				1,
-				{
-					TOS3: 1,
-					COUNTRY: 2,
-				},
-			],
-			selfInitiated: [2, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'HfmTextSearchComplete',
-		id: 2186,
-		props: {},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'SmbPaidMessagesButtonLogger',
-		id: 4508,
-		props: {
-			businessPhoneNumber: [1, 'integer'],
-			pmButtonCount: [2, 'integer'],
-			pmButtonEventType: [
-				3,
-				{
-					CLICK: 0,
-				},
-			],
-			pmButtonIndex: [4, 'integer'],
-			pmButtonType: [
-				5,
-				{
-					QUICK_REPLY: 0,
-					CTA_URL: 1,
-					CTA_CALL: 2,
-					CTA_CATALOG: 3,
-					CTA_CATALOG_ITEM: 4,
-				},
-			],
-			pmIsTrackableLink: [7, 'string'],
-			pmServerCampaignId: [6, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 113760892,
-	},
-	{
-		name: 'SystemMessageClick',
-		id: 5082,
-		props: {
-			isAGroup: [1, 'boolean'],
-			isANewThread: [2, 'boolean'],
-			systemMessageCategory: [
-				3,
-				{
-					PRIVACY: 1,
-					GROUPS: 2,
-				},
-			],
-			systemMessageType: [
-				4,
-				{
-					E2E_ENCRYPTED_MESSAGES_CALLS: 1,
-					E2E_ENCRYPTED_MESSAGES: 2,
-					E2E_ENCRYPTED_BROADCAST_LIST: 3,
-					E2E_ENCRYPTED_MESSAGE_YOURSELF: 4,
-					OFFICIAL_ACCOUNT_INFO: 8,
-					GROUP_ADD: 9,
-					GROUP_RESET_INVITE: 10,
-					COMMUNITY_DESCRIPTION_CHANGED: 11,
-					GROUP_DESCRIPTION_CHANGED: 12,
-					GROUP_PARTICIPANTS_CHANGED: 13,
-					COMMUNITY_MEMBERS_CHANGED: 14,
-					GROUP_INVITE_LINK_UNAVAILABLE: 15,
-					GROUP_INVITE_LINK_AVAILABLE: 16,
-					GROUP_JOIN_REQUEST: 17,
-					GROUP_SUGGEST: 18,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'ViewOnceScreenshotActions',
-		id: 3606,
-		props: {
-			isAGroup: [1, 'boolean'],
-			threadId: [2, 'string'],
-			voMessageType: [
-				3,
-				{
-					PHOTO: 1,
-					VIDEO: 2,
-					PTT: 3,
-				},
-			],
-			voSsAction: [
-				4,
-				{
-					SENDER_NUX_TYPE_C_IMPRESSION: 1,
-					SENDER_NUX_TYPE_D_IMPRESSION: 2,
-					SCREENSHOT_SENDER_NUX_TYPE_D_IMPRESSION: 3,
-					RECIPIENT_OPEN_NUX_TYPE_C_IMPRESSION: 4,
-					RECIPIENT_OPEN_NUX_TYPE_D_IMPRESSION: 5,
-					SENDER_NUX_TYPE_C_LEARN_MORE_TAP: 6,
-					SENDER_NUX_TYPE_D_LEARN_MORE_TAP: 7,
-					SCREENSHOT_SENDER_NUX_TYPE_D_LEARN_MORE_TAP: 8,
-					RECIPIENT_OPEN_NUX_TYPE_C_LEARN_MORE_TAP: 9,
-					RECIPIENT_OPEN_NUX_TYPE_D_LEARN_MORE_TAP: 10,
-					SCREENSHOT_BLOCKED: 11,
-					SCREENSHOT_TAKEN: 12,
-					SCREEN_RECORDING_BLOCKED: 13,
-					SCREEN_RECORDING_STARTED: 14,
-					PLACEHOLDER_MESSAGE_LEARN_MORE_TAP: 15,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'CtwaConsumerDisclosure',
-		id: 4406,
-		props: {
-			ctwaConsumerDisclosureVersion: [3, 'integer'],
-			disclosureAction: [
-				1,
-				{
-					SCREEN_VIEW: 0,
-					CLICK_ON_CONTINUE: 1,
-					CANCEL: 2,
-					BACK_BUTTON_TOOLBAR: 3,
-					BACK_BUTTON_SYSTEM: 4,
-					DISMISS: 5,
-					DISCLOSURE_INFO_VIEW: 6,
-				},
-			],
-			disclosureType: [
-				2,
-				{
-					NON_BLOCKING: 0,
-					BLOCKING: 1,
-					INFO: 2,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 0,
-	},
-	{
-		name: 'Ctwa3pdConversion',
-		id: 5138,
-		props: {
-			ctwa3pdConversionMetadata: [1, 'string'],
-			ctwa3pdConversionSubtype: [2, 'string'],
-			ctwa3pdConversionType: [3, 'string'],
-			ctwa3pdSchemaVersion: [4, 'integer'],
-			ctwa3pdSurfaceType: [5, 'string'],
-			ctwaTrackingPayload: [6, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'CtwaLabelSignal',
-		id: 4662,
-		props: {
-			ctwaLabelSignalVersion: [1, 'integer'],
-			ctwaLabelTarget: [
-				2,
-				{
-					CHAT: 0,
-					MESSAGE: 1,
-				},
-			],
-			ctwaLabelType: [
-				3,
-				{
-					NEW_ORDER: 0,
-					PENDING_PAYMENT: 1,
-					PAID: 2,
-					ORDER_COMPLETE: 3,
-				},
-			],
-			deepLinkConversionData: [4, 'string'],
-			deepLinkConversionSource: [5, 'string'],
-			eventSharingSettingEnabled: [6, 'boolean'],
-			globalSharingSettingEnabled: [7, 'boolean'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'CtwaOrderSignal',
-		id: 4264,
-		props: {
-			ctwaOrderSignalVersion: [1, 'integer'],
-			deepLinkConversionData: [2, 'string'],
-			deepLinkConversionSource: [3, 'string'],
-			eventSharingSettingEnabled: [4, 'boolean'],
-			globalSharingSettingEnabled: [5, 'boolean'],
-			orderPaid: [8, 'boolean'],
-			orderSignalType: [
-				6,
-				{
-					CREATED: 0,
-					UPDATED: 1,
-				},
-			],
-			orderStatus: [
-				7,
-				{
-					PROCESSING: 0,
-					SHIPPED: 1,
-					COMPLETED: 2,
-					CANCELLED: 3,
-					PENDING: 4,
-					PARTIALLY_SHIPPED: 5,
-					PAID_CHANGE: 6,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'PsChannelPostForward',
-		id: 4746,
-		props: {
-			channelForwardContentType: [
-				6,
-				{
-					UPDATE: 0,
-					UPDATE_CARD: 1,
-				},
-			],
-			channelForwardGroupType: [
-				1,
-				{
-					OTHER: 0,
-					INDIVIDUAL: 1,
-					GROUP: 2,
-					STATUS: 3,
-					BROADCAST: 4,
-					CHANNEL: 5,
-				},
-			],
-			cid: [2, 'string'],
-			mediaType: [
-				3,
-				{
-					NONE: 1,
-					PHOTO: 2,
-					VIDEO: 3,
-					AUDIO: 4,
-					PTT: 5,
-					LOCATION: 6,
-					CONTACT: 7,
-					DOCUMENT: 8,
-					URL: 9,
-					CALL: 10,
-					GIF: 11,
-					FUTURE: 12,
-					CONTACT_ARRAY: 13,
-					LIVE_LOCATION: 14,
-					PROFILE_PIC: 15,
-					STICKER: 16,
-					HSM: 17,
-					PRODUCT_IMAGE: 18,
-					TEMPLATE: 19,
-					MD_APP_STATE: 20,
-					MD_HISTORY_SYNC: 21,
-					CATALOG_LINK: 22,
-					PRODUCT_LINK: 23,
-					ORDER: 24,
-					LIST: 25,
-					LIST_REPLY: 26,
-					BUTTON_MESSAGE: 27,
-					BUTTON_RESPONSE_MESSAGE: 28,
-					PRODUCT_LIST: 29,
-					BUTTON_NFM: 30,
-					VIEW_ONCE_IMAGE: 31,
-					VIEW_ONCE_VIDEO: 32,
-					SHOP_STOREFRONT: 33,
-					REACTION: 34,
-					INTERACTIVE_NFM: 35,
-					INTERACTIVE_RESPONSE_NFM: 36,
-					POLL_CREATE: 37,
-					POLL_VOTE: 38,
-					TEXT: 39,
-					KEEP: 40,
-					UNKEEP: 41,
-					INVISIBLE_HELLO: 42,
-					MEDIA_EXPRESS_NOTIFY: 43,
-					UNDECRYPTED_MEDIA: 44,
-					UNDECRYPTED_TEXT: 45,
-					UNDECRYPTED_PAY: 46,
-					UNDECRYPTED_POLL: 47,
-					UNDECRYPTED_REACTION: 48,
-					UNDECRYPTED_MEDIA_NOTIFY: 49,
-					VIEW_ONCE_AUDIO: 50,
-					SCHEDULED_CALL_CREATE: 51,
-					SCHEDULED_CALL_CANCEL: 52,
-					PUSH_TO_VIDEO: 53,
-					PIN_IN_CHAT: 54,
-					INTERACTIVE_CAROUSEL: 55,
-					COMMENT: 56,
-					EPHEMERAL_SYNC_RESPONSE: 57,
-					EVENT_CREATE: 58,
-					EVENT_RESPOND: 59,
-					LOTTIE_STICKER: 60,
-					INTERACTIVE_PRODUCT_CAROUSEL: 61,
-					INTERACTIVE_PRODUCT: 62,
-				},
-			],
-			postId: [4, 'string'],
-		},
-		weight: 1,
-		wamChannel: 'private',
-		privateStatsIdInt: 0,
-	},
-	{
-		name: 'WebContactListStartNewChat',
-		id: 4560,
-		props: {
-			webContactListStartNewChatSearch: [1, 'boolean'],
-			webContactListStartNewChatType: [
-				2,
-				{
-					CONTACT: 1,
-					GROUP: 2,
-					CONTACTLESS: 3,
-				},
-			],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-	{
-		name: 'WebcMediaEditorSend',
-		id: 2890,
-		props: {
-			blurImageCount: [7, 'integer'],
-			editedImageCount: [2, 'integer'],
-			emojiLayerCount: [5, 'integer'],
-			imageCount: [1, 'integer'],
-			paintedImageCount: [3, 'integer'],
-			stickerLayerCount: [6, 'integer'],
-			textLayerCount: [4, 'integer'],
-		},
-		weight: 1,
-		wamChannel: 'regular',
-		privateStatsIdInt: -1,
-	},
-]
-
-export const WEB_GLOBALS: Global[] = [
-	{
-		'name': 'abKey2',
-		'id': 4473,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'appBuild',
-		'id': 1657,
-		'type': {
-			'DEBUG': 1,
-			'ALPHA': 2,
-			'BETA': 3,
-			'RELEASE': 4
-		},
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'appIsBetaRelease',
-		'id': 21,
-		'type': 'boolean',
-		'validator': 'boolean',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'appVersion',
-		'id': 17,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'browser',
-		'id': 779,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'browserVersion',
-		'id': 295,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'datacenter',
-		'id': 2795,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'deviceClassification',
-		'id': 14507,
-		'type': {
-			'MOBILE': 0,
-			'TABLET': 1,
-			'WEARABLES': 2,
-			'VR': 3,
-			'DESKTOP': 4,
-			'FOLDABLE': 5,
-			'AR_GLASS': 6,
-			'UNDEFINED': 100
-		},
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'deviceName',
-		'id': 13,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'deviceVersion',
-		'id': 4505,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'expoKey',
-		'id': 5029,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'mcc',
-		'id': 5,
-		'type': 'integer',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'memClass',
-		'id': 655,
-		'type': 'integer',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'mnc',
-		'id': 3,
-		'type': 'integer',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'networkIsWifi',
-		'id': 23,
-		'type': 'boolean',
-		'validator': 'boolean',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'ocVersion',
-		'id': 6251,
-		'type': 'integer',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'osVersion',
-		'id': 15,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'platform',
-		'id': 11,
-		'type': {
-			'IPHONE': 1,
-			'ANDROID': 2,
-			'BB': 3,
-			'BBX': 7,
-			'S40': 4,
-			'SYMBIAN': 5,
-			'WP': 6,
-			'WEBCLIENT': 8,
-			'OSMETA': 11,
-			'ENT': 12,
-			'SMBA': 13,
-			'KAIOS': 14,
-			'SMBI': 15,
-			'WINDOWS': 16,
-			'WEB': 17,
-			'PORTAL': 18,
-			'BLOKS': 19,
-			'BLUEA': 20,
-			'BLUEI': 21,
-			'FBLITEA': 22,
-			'GREENA': 23,
-			'GREENI': 24,
-			'IGDA': 25,
-			'IGDI': 26,
-			'IGLITEA': 27,
-			'MLITEA': 28,
-			'MSGRA': 29,
-			'MSGRI': 30,
-			'MSGRP': 31,
-			'MSGRW': 32,
-			'IGDW': 33,
-			'PAGE': 34,
-			'MSGRDM': 35,
-			'MSGRDW': 36,
-			'MSGROM': 37,
-			'MSGROC': 38,
-			'MSGRM': 43,
-			'IGDM': 44,
-			'WEARM': 45,
-			'CAPI': 46,
-			'XR': 47,
-			'MACOS': 48,
-			'WAMETA_REPL': 49,
-			'ARDEV': 50,
-			'WEAROS': 51,
-			'MSGRVR': 52,
-			'BLUEW': 53,
-			'IPHONEWAMETATEST': 54,
-			'MSGRAR': 57,
-			'IPAD': 58,
-			'WAVOIP_CLI': 59,
-			'MSGRT': 60,
-			'IGDT': 61,
-			'ANDROIDWAMETATEST': 62,
-			'MSGRSG': 63,
-			'IGDSG': 64,
-			'INTEROP': 65,
-			'INTEROP_MSGR': 66,
-			'TEST': 9,
-			'UNKNOWN': 10
-		},
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'psCountryCode',
-		'id': 6833,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'private'
-		]
-	},
-	{
-		'name': 'psId',
-		'id': 6005,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'private'
-		]
-	},
-	{
-		'name': 'serviceImprovementOptOut',
-		'id': 13293,
-		'type': 'boolean',
-		'validator': 'boolean',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'streamId',
-		'id': 3543,
-		'type': 'integer',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'wametaLoggerTestFilter',
-		'id': 15881,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'webcBucket',
-		'id': 875,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcEnv',
-		'id': 633,
-		'type': {
-			'PROD': 0,
-			'INTERN': 1,
-			'DEV': 2,
-			'E2E': 3
-		},
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcNativeAutolaunch',
-		'id': 1009,
-		'type': 'boolean',
-		'validator': 'boolean',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcNativeBetaUpdates',
-		'id': 1007,
-		'type': 'boolean',
-		'validator': 'boolean',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcPhoneAppVersion',
-		'id': 1005,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcPhoneCharging',
-		'id': 783,
-		'type': 'boolean',
-		'validator': 'boolean',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcPhoneDeviceManufacturer',
-		'id': 829,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcPhoneDeviceModel',
-		'id': 831,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcPhoneOsBuildNumber',
-		'id': 833,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcPhoneOsVersion',
-		'id': 835,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcPhonePlatform',
-		'id': 707,
-		'type': {
-			'IPHONE': 1,
-			'ANDROID': 2,
-			'BB': 3,
-			'BBX': 7,
-			'S40': 4,
-			'SYMBIAN': 5,
-			'WP': 6,
-			'WEBCLIENT': 8,
-			'OSMETA': 11,
-			'ENT': 12,
-			'SMBA': 13,
-			'KAIOS': 14,
-			'SMBI': 15,
-			'WINDOWS': 16,
-			'WEB': 17,
-			'PORTAL': 18,
-			'BLOKS': 19,
-			'BLUEA': 20,
-			'BLUEI': 21,
-			'FBLITEA': 22,
-			'GREENA': 23,
-			'GREENI': 24,
-			'IGDA': 25,
-			'IGDI': 26,
-			'IGLITEA': 27,
-			'MLITEA': 28,
-			'MSGRA': 29,
-			'MSGRI': 30,
-			'MSGRP': 31,
-			'MSGRW': 32,
-			'IGDW': 33,
-			'PAGE': 34,
-			'MSGRDM': 35,
-			'MSGRDW': 36,
-			'MSGROM': 37,
-			'MSGROC': 38,
-			'MSGRM': 43,
-			'IGDM': 44,
-			'WEARM': 45,
-			'CAPI': 46,
-			'XR': 47,
-			'MACOS': 48,
-			'WAMETA_REPL': 49,
-			'ARDEV': 50,
-			'WEAROS': 51,
-			'MSGRVR': 52,
-			'BLUEW': 53,
-			'IPHONEWAMETATEST': 54,
-			'MSGRAR': 57,
-			'IPAD': 58,
-			'WAVOIP_CLI': 59,
-			'MSGRT': 60,
-			'IGDT': 61,
-			'ANDROIDWAMETATEST': 62,
-			'MSGRSG': 63,
-			'IGDSG': 64,
-			'INTEROP': 65,
-			'INTEROP_MSGR': 66,
-			'TEST': 9,
-			'UNKNOWN': 10
-		},
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcTabId',
-		'id': 3727,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcWebArch',
-		'id': 6605,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcWebDeviceManufacturer',
-		'id': 6599,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcWebDeviceModel',
-		'id': 6601,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcWebOsReleaseNumber',
-		'id': 6603,
-		'type': 'string',
-		'validator': 'string',
-		'channels': [
-			'regular'
-		]
-	},
-	{
-		'name': 'webcWebPlatform',
-		'id': 899,
-		'type': {
-			'WEB': 1,
-			'WIN32': 2,
-			'DARWIN': 3,
-			'IOS_TABLET': 4,
-			'ANDROID_TABLET': 5,
-			'WINSTORE': 6,
-			'MACSTORE': 7,
-			'DARWIN_BETA': 8,
-			'WIN32_BETA': 9,
-			'PWA': 10
-		},
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'yearClass',
-		'id': 689,
-		'type': 'integer',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'yearClass2016',
-		'id': 2617,
-		'type': 'integer',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'commitTime',
-		'id': 47,
-		'type': 'integer',
-		'channels': [
-			'regular',
-			'private'
-		]
-	},
-	{
-		'name': 'sequenceNumber',
-		'id': 3433,
-		'type': 'integer',
-		'channels': [
-			'regular',
-			'private'
-		]
-	}
-]
-
-export const FLAG_BYTE = 8,
-	FLAG_GLOBAL = 0,
-	FLAG_EVENT = 1,
-	FLAG_FIELD = 2,
-	FLAG_EXTENDED = 4
-
-export type Event = {
-    name: string
-    id: number
-    props: {[key: string]: [number, string | {[key: string]: number}]}
-    weight: number
-    wamChannel: string
-    privateStatsIdInt: number
-}
-
-export type Global = {
-	name: string
-	id: number
-	type: string | {[key: string]: number}
-	validator?: string
-	channels: string[]
-}
-
-type EventByName<T extends Event['name']> = Extract<Event, { name: T }>
-
-export type EventInputType = {
-	[key in Event['name']]: {
-		props: {
-			// @ts-ignore
-			[k in keyof EventByName<key>['props']]: any
-		}
-		globals: { [x: string]: any }
-	}
-} & {}
diff --git a/node_modules/@whiskeysockets/baileys/src/WAM/encode.ts b/node_modules/@whiskeysockets/baileys/src/WAM/encode.ts
deleted file mode 100644
index adec7cb..0000000
--- a/node_modules/@whiskeysockets/baileys/src/WAM/encode.ts
+++ /dev/null
@@ -1,174 +0,0 @@
-import { BinaryInfo } from './BinaryInfo'
-import { FLAG_BYTE, FLAG_EVENT, FLAG_EXTENDED, FLAG_FIELD, FLAG_GLOBAL, WEB_EVENTS, WEB_GLOBALS } from './constants'
-
-const getHeaderBitLength = (key: number) => (key < 256 ? 2 : 3)
-type Value = number | null | string
-
-
-export const encodeWAM = (binaryInfo: BinaryInfo) => {
-	binaryInfo.buffer = []
-
-	encodeWAMHeader(binaryInfo)
-	encodeEvents(binaryInfo)
-
-	console.log(binaryInfo.buffer)
-	const totalSize = binaryInfo.buffer
-		.map((a) => a.length)
-		.reduce((a, b) => a + b)
-	const buffer = Buffer.alloc(totalSize)
-	let offset = 0
-	binaryInfo.buffer.forEach((buffer_) => {
-		buffer_.copy(buffer, offset)
-		offset += buffer_.length
-	})
-
-	return buffer
-}
-
-function encodeWAMHeader(binaryInfo: BinaryInfo) {
-	const headerBuffer = Buffer.alloc(8) // starting buffer
-	headerBuffer.write('WAM', 0, 'utf8')
-	headerBuffer.writeUInt8(binaryInfo.protocolVersion, 3)
-	headerBuffer.writeUInt8(1, 4) //random flag
-	headerBuffer.writeUInt16BE(binaryInfo.sequence, 5)
-	headerBuffer.writeUInt8(0, 7) // regular channel
-
-	binaryInfo.buffer.push(headerBuffer)
-}
-
-function encodeGlobalAttributes(binaryInfo: BinaryInfo, globals: {[key: string]: Value}) {
-	for(const [key, _value] of Object.entries(globals)) {
-		const id = WEB_GLOBALS.find(a => a?.name === key)!.id
-		let value = _value
-		if(typeof value === 'boolean') {
-			value = value ? 1 : 0
-		}
-
-		binaryInfo.buffer.push(serializeData(id, value, FLAG_GLOBAL))
-	}
-}
-
-function encodeEvents(binaryInfo: BinaryInfo) {
-	for(const [
-		name,
-		{ props, globals },
-	] of binaryInfo.events.map((a) => Object.entries(a)[0])) {
-		encodeGlobalAttributes(binaryInfo, globals)
-		const event = WEB_EVENTS.find((a) => a.name === name)!
-
-		const props_ = Object.entries(props)
-
-		let extended = false
-
-		for(const [, value] of props_) {
-			extended ||= value !== null
-		}
-
-		const eventFlag = extended ? FLAG_EVENT : FLAG_EVENT | FLAG_EXTENDED
-		binaryInfo.buffer.push(serializeData(event.id, -event.weight, eventFlag))
-
-		for(let i = 0; i < props_.length; i++) {
-			const [key, _value] = props_[i]
-			const id = (event.props)[key][0]
-			extended = i < (props_.length - 1)
-			let value = _value
-			if(typeof value === 'boolean') {
-				value = value ? 1 : 0
-			}
-
-			const fieldFlag = extended ? FLAG_EVENT : FLAG_FIELD | FLAG_EXTENDED
-			binaryInfo.buffer.push(serializeData(id, value as Value, fieldFlag))
-		}
-	}
-}
-
-
-function serializeData(key: number, value: Value, flag: number): Buffer {
-	const bufferLength = getHeaderBitLength(key)
-	let buffer: Buffer
-	let offset = 0
-	if(value === null) {
-		if(flag === FLAG_GLOBAL) {
-			buffer = Buffer.alloc(bufferLength)
-			offset = serializeHeader(buffer, offset, key, flag)
-			return buffer
-		}
-	} else if(typeof value === 'number' && Number.isInteger(value)) {
-		// is number
-		if(value === 0 || value === 1) {
-			buffer = Buffer.alloc(bufferLength)
-			offset = serializeHeader(buffer, offset, key, flag | ((value + 1) << 4))
-			return buffer
-		} else if(-128 <= value && value < 128) {
-			buffer = Buffer.alloc(bufferLength + 1)
-			offset = serializeHeader(buffer, offset, key, flag | (3 << 4))
-			buffer.writeInt8(value, offset)
-			return buffer
-		} else if(-32768 <= value && value < 32768) {
-			buffer = Buffer.alloc(bufferLength + 2)
-			offset = serializeHeader(buffer, offset, key, flag | (4 << 4))
-			buffer.writeInt16LE(value, offset)
-			return buffer
-		} else if(-2147483648 <= value && value < 2147483648) {
-			buffer = Buffer.alloc(bufferLength + 4)
-			offset = serializeHeader(buffer, offset, key, flag | (5 << 4))
-			buffer.writeInt32LE(value, offset)
-			return buffer
-		} else {
-			buffer = Buffer.alloc(bufferLength + 8)
-			offset = serializeHeader(buffer, offset, key, flag | (7 << 4))
-			buffer.writeDoubleLE(value, offset)
-			return buffer
-		}
-	} else if(typeof value === 'number') {
-		// is float
-		buffer = Buffer.alloc(bufferLength + 8)
-		offset = serializeHeader(buffer, offset, key, flag | (7 << 4))
-		buffer.writeDoubleLE(value, offset)
-		return buffer
-	} else if(typeof value === 'string') {
-		// is string
-		const utf8Bytes = Buffer.byteLength(value, 'utf8')
-		if(utf8Bytes < 256) {
-			buffer = Buffer.alloc(bufferLength + 1 + utf8Bytes)
-			offset = serializeHeader(buffer, offset, key, flag | (8 << 4))
-			buffer.writeUint8(utf8Bytes, offset++)
-		} else if(utf8Bytes < 65536) {
-			buffer = Buffer.alloc(bufferLength + 2 + utf8Bytes)
-			offset = serializeHeader(buffer, offset, key, flag | (9 << 4))
-			buffer.writeUInt16LE(utf8Bytes, offset)
-			offset += 2
-		} else {
-			buffer = Buffer.alloc(bufferLength + 4 + utf8Bytes)
-			offset = serializeHeader(buffer, offset, key, flag | (10 << 4))
-			buffer.writeUInt32LE(utf8Bytes, offset)
-			offset += 4
-		}
-
-		buffer.write(value, offset, 'utf8')
-		return buffer
-	}
-
-	throw 'missing'
-}
-
-function serializeHeader(
-	buffer: Buffer,
-	offset: number,
-	key: number,
-	flag: number
-) {
-	if(key < 256) {
-		buffer.writeUInt8(flag, offset)
-		offset += 1
-		buffer.writeUInt8(key, offset)
-		offset += 1
-	} else {
-		buffer.writeUInt8(flag | FLAG_BYTE, offset)
-		offset += 1
-		buffer.writeUInt16LE(key, offset)
-		offset += 2
-	}
-
-	return offset
-}
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/WAM/index.ts b/node_modules/@whiskeysockets/baileys/src/WAM/index.ts
deleted file mode 100644
index 5ad5c3a..0000000
--- a/node_modules/@whiskeysockets/baileys/src/WAM/index.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export * from './constants'
-export * from './encode'
-export * from './BinaryInfo'
\ No newline at end of file
diff --git a/node_modules/@whiskeysockets/baileys/src/index.ts b/node_modules/@whiskeysockets/baileys/src/index.ts
deleted file mode 100644
index 71f0419..0000000
--- a/node_modules/@whiskeysockets/baileys/src/index.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-import makeWASocket from './Socket'
-
-export * from '../WAProto'
-export * from './Utils'
-export * from './Types'
-export * from './Store'
-export * from './Defaults'
-export * from './WABinary'
-export * from './WAM'
-
-export type WASocket = ReturnType<typeof makeWASocket>
-export { makeWASocket }
-export default makeWASocket
diff --git a/node_modules/@whiskeysockets/baileys/tsconfig.json b/node_modules/@whiskeysockets/baileys/tsconfig.json
deleted file mode 100644
index 598e2f6..0000000
--- a/node_modules/@whiskeysockets/baileys/tsconfig.json
+++ /dev/null
@@ -1,22 +0,0 @@
-{
-  "compilerOptions": {
-    "target": "es2018",
-    "module": "CommonJS",
-    "moduleResolution": "NodeNext",
-    "experimentalDecorators": true,
-    "allowJs": false,
-    "checkJs": false,
-    "outDir": "lib",
-    "strict": false,
-    "strictNullChecks": true,
-    "skipLibCheck": true,
-    "noImplicitThis": true,
-    "esModuleInterop": true,
-    "resolveJsonModule": true,
-    "forceConsistentCasingInFileNames": true,
-    "declaration": true,
-    "lib": ["es2020", "esnext.array", "DOM"]
-  },
-  "include": ["./src/**/*.ts"],
-  "exclude": ["node_modules", "src/Tests/*", "src/Binary/GenerateStatics.ts"]
-}
diff --git a/node_modules/@whiskeysockets/baileys/typedoc.json b/node_modules/@whiskeysockets/baileys/typedoc.json
deleted file mode 100644
index c3ed521..0000000
--- a/node_modules/@whiskeysockets/baileys/typedoc.json
+++ /dev/null
@@ -1,9 +0,0 @@
-{
-    "entryPoints": ["./src/index.ts"],
-    "excludePrivate": true,
-    "excludeProtected": true,
-    "excludeExternals": true,
-    "includeVersion": false,
-    "out": "docs",
-    "gaID": "G-WBY63HR4VS"
-}
diff --git a/node_modules/@whiskeysockets/baileys/yarn.lock b/node_modules/@whiskeysockets/baileys/yarn.lock
deleted file mode 100644
index 613f45a..0000000
--- a/node_modules/@whiskeysockets/baileys/yarn.lock
+++ /dev/null
@@ -1,7819 +0,0 @@
-# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
-# yarn lockfile v1
-
-
-"@aashutoshrathi/word-wrap@^1.2.3":
-  version "1.2.6"
-  resolved "https://registry.yarnpkg.com/@aashutoshrathi/word-wrap/-/word-wrap-1.2.6.tgz#bd9154aec9983f77b3a034ecaa015c2e4201f6cf"
-  integrity sha512-1Yjs2SvM8TflER/OD3cOjhWWOZb58A2t7wpE2S9XfBYTiIl+XFhQG2bjy4Pu1I+EAlCNUzRDYDdFwFYUKvXcIA==
-
-"@adiwajshing/eslint-config@github:adiwajshing/eslint-config":
-  version "1.0.0"
-  resolved "https://codeload.github.com/adiwajshing/eslint-config/tar.gz/dd6fbbce8bee82f051cd802efc522e393e0b23d0"
-  dependencies:
-    "@typescript-eslint/eslint-plugin" "^5.33.1"
-    "@typescript-eslint/parser" "^5.59.0"
-    eslint-plugin-react "^7.32.2"
-    eslint-plugin-simple-import-sort "^10.0.0"
-
-"@adiwajshing/keyed-db@^0.2.4":
-  version "0.2.4"
-  resolved "https://registry.yarnpkg.com/@adiwajshing/keyed-db/-/keyed-db-0.2.4.tgz#2a09e88fce20b2672deb60a7750c5fe3ab0dfd99"
-  integrity sha512-yprSnAtj80/VKuDqRcFFLDYltoNV8tChNwFfIgcf6PGD4sjzWIBgs08pRuTqGH5mk5wgL6PBRSsMCZqtZwzFEw==
-
-"@ampproject/remapping@^2.2.0":
-  version "2.2.1"
-  resolved "https://registry.yarnpkg.com/@ampproject/remapping/-/remapping-2.2.1.tgz#99e8e11851128b8702cd57c33684f1d0f260b630"
-  integrity sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==
-  dependencies:
-    "@jridgewell/gen-mapping" "^0.3.0"
-    "@jridgewell/trace-mapping" "^0.3.9"
-
-"@babel/code-frame@^7.0.0", "@babel/code-frame@^7.12.13", "@babel/code-frame@^7.22.10", "@babel/code-frame@^7.22.5":
-  version "7.22.10"
-  resolved "https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.22.10.tgz#1c20e612b768fefa75f6e90d6ecb86329247f0a3"
-  integrity sha512-/KKIMG4UEL35WmI9OlvMhurwtytjvXoFcGNrOvyG9zIzA8YmPjVtIZUf7b05+TPO7G7/GEmLHDaoCgACHl9hhA==
-  dependencies:
-    "@babel/highlight" "^7.22.10"
-    chalk "^2.4.2"
-
-"@babel/compat-data@^7.22.9":
-  version "7.22.9"
-  resolved "https://registry.yarnpkg.com/@babel/compat-data/-/compat-data-7.22.9.tgz#71cdb00a1ce3a329ce4cbec3a44f9fef35669730"
-  integrity sha512-5UamI7xkUcJ3i9qVDS+KFDEK8/7oJ55/sJMB1Ge7IEapr7KfdfV/HErR+koZwOfd+SgtFKOKRhRakdg++DcJpQ==
-
-"@babel/core@^7.1.0", "@babel/core@^7.12.3", "@babel/core@^7.7.2", "@babel/core@^7.8.0":
-  version "7.22.11"
-  resolved "https://registry.yarnpkg.com/@babel/core/-/core-7.22.11.tgz#8033acaa2aa24c3f814edaaa057f3ce0ba559c24"
-  integrity sha512-lh7RJrtPdhibbxndr6/xx0w8+CVlY5FJZiaSz908Fpy+G0xkBFTvwLcKJFF4PJxVfGhVWNebikpWGnOoC71juQ==
-  dependencies:
-    "@ampproject/remapping" "^2.2.0"
-    "@babel/code-frame" "^7.22.10"
-    "@babel/generator" "^7.22.10"
-    "@babel/helper-compilation-targets" "^7.22.10"
-    "@babel/helper-module-transforms" "^7.22.9"
-    "@babel/helpers" "^7.22.11"
-    "@babel/parser" "^7.22.11"
-    "@babel/template" "^7.22.5"
-    "@babel/traverse" "^7.22.11"
-    "@babel/types" "^7.22.11"
-    convert-source-map "^1.7.0"
-    debug "^4.1.0"
-    gensync "^1.0.0-beta.2"
-    json5 "^2.2.3"
-    semver "^6.3.1"
-
-"@babel/generator@^7.22.10", "@babel/generator@^7.7.2":
-  version "7.22.10"
-  resolved "https://registry.yarnpkg.com/@babel/generator/-/generator-7.22.10.tgz#c92254361f398e160645ac58831069707382b722"
-  integrity sha512-79KIf7YiWjjdZ81JnLujDRApWtl7BxTqWD88+FFdQEIOG8LJ0etDOM7CXuIgGJa55sGOwZVwuEsaLEm0PJ5/+A==
-  dependencies:
-    "@babel/types" "^7.22.10"
-    "@jridgewell/gen-mapping" "^0.3.2"
-    "@jridgewell/trace-mapping" "^0.3.17"
-    jsesc "^2.5.1"
-
-"@babel/helper-compilation-targets@^7.22.10":
-  version "7.22.10"
-  resolved "https://registry.yarnpkg.com/@babel/helper-compilation-targets/-/helper-compilation-targets-7.22.10.tgz#01d648bbc25dd88f513d862ee0df27b7d4e67024"
-  integrity sha512-JMSwHD4J7SLod0idLq5PKgI+6g/hLD/iuWBq08ZX49xE14VpVEojJ5rHWptpirV2j020MvypRLAXAO50igCJ5Q==
-  dependencies:
-    "@babel/compat-data" "^7.22.9"
-    "@babel/helper-validator-option" "^7.22.5"
-    browserslist "^4.21.9"
-    lru-cache "^5.1.1"
-    semver "^6.3.1"
-
-"@babel/helper-environment-visitor@^7.22.5":
-  version "7.22.5"
-  resolved "https://registry.yarnpkg.com/@babel/helper-environment-visitor/-/helper-environment-visitor-7.22.5.tgz#f06dd41b7c1f44e1f8da6c4055b41ab3a09a7e98"
-  integrity sha512-XGmhECfVA/5sAt+H+xpSg0mfrHq6FzNr9Oxh7PSEBBRUb/mL7Kz3NICXb194rCqAEdxkhPT1a88teizAFyvk8Q==
-
-"@babel/helper-function-name@^7.22.5":
-  version "7.22.5"
-  resolved "https://registry.yarnpkg.com/@babel/helper-function-name/-/helper-function-name-7.22.5.tgz#ede300828905bb15e582c037162f99d5183af1be"
-  integrity sha512-wtHSq6jMRE3uF2otvfuD3DIvVhOsSNshQl0Qrd7qC9oQJzHvOL4qQXlQn2916+CXGywIjpGuIkoyZRRxHPiNQQ==
-  dependencies:
-    "@babel/template" "^7.22.5"
-    "@babel/types" "^7.22.5"
-
-"@babel/helper-hoist-variables@^7.22.5":
-  version "7.22.5"
-  resolved "https://registry.yarnpkg.com/@babel/helper-hoist-variables/-/helper-hoist-variables-7.22.5.tgz#c01a007dac05c085914e8fb652b339db50d823bb"
-  integrity sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==
-  dependencies:
-    "@babel/types" "^7.22.5"
-
-"@babel/helper-module-imports@^7.22.5":
-  version "7.22.5"
-  resolved "https://registry.yarnpkg.com/@babel/helper-module-imports/-/helper-module-imports-7.22.5.tgz#1a8f4c9f4027d23f520bd76b364d44434a72660c"
-  integrity sha512-8Dl6+HD/cKifutF5qGd/8ZJi84QeAKh+CEe1sBzz8UayBBGg1dAIJrdHOcOM5b2MpzWL2yuotJTtGjETq0qjXg==
-  dependencies:
-    "@babel/types" "^7.22.5"
-
-"@babel/helper-module-transforms@^7.22.9":
-  version "7.22.9"
-  resolved "https://registry.yarnpkg.com/@babel/helper-module-transforms/-/helper-module-transforms-7.22.9.tgz#92dfcb1fbbb2bc62529024f72d942a8c97142129"
-  integrity sha512-t+WA2Xn5K+rTeGtC8jCsdAH52bjggG5TKRuRrAGNM/mjIbO4GxvlLMFOEz9wXY5I2XQ60PMFsAG2WIcG82dQMQ==
-  dependencies:
-    "@babel/helper-environment-visitor" "^7.22.5"
-    "@babel/helper-module-imports" "^7.22.5"
-    "@babel/helper-simple-access" "^7.22.5"
-    "@babel/helper-split-export-declaration" "^7.22.6"
-    "@babel/helper-validator-identifier" "^7.22.5"
-
-"@babel/helper-plugin-utils@^7.0.0", "@babel/helper-plugin-utils@^7.10.4", "@babel/helper-plugin-utils@^7.12.13", "@babel/helper-plugin-utils@^7.14.5", "@babel/helper-plugin-utils@^7.22.5", "@babel/helper-plugin-utils@^7.8.0":
-  version "7.22.5"
-  resolved "https://registry.yarnpkg.com/@babel/helper-plugin-utils/-/helper-plugin-utils-7.22.5.tgz#dd7ee3735e8a313b9f7b05a773d892e88e6d7295"
-  integrity sha512-uLls06UVKgFG9QD4OeFYLEGteMIAa5kpTPcFL28yuCIIzsf6ZyKZMllKVOCZFhiZ5ptnwX4mtKdWCBE/uT4amg==
-
-"@babel/helper-simple-access@^7.22.5":
-  version "7.22.5"
-  resolved "https://registry.yarnpkg.com/@babel/helper-simple-access/-/helper-simple-access-7.22.5.tgz#4938357dc7d782b80ed6dbb03a0fba3d22b1d5de"
-  integrity sha512-n0H99E/K+Bika3++WNL17POvo4rKWZ7lZEp1Q+fStVbUi8nxPQEBOlTmCOxW/0JsS56SKKQ+ojAe2pHKJHN35w==
-  dependencies:
-    "@babel/types" "^7.22.5"
-
-"@babel/helper-split-export-declaration@^7.22.6":
-  version "7.22.6"
-  resolved "https://registry.yarnpkg.com/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.22.6.tgz#322c61b7310c0997fe4c323955667f18fcefb91c"
-  integrity sha512-AsUnxuLhRYsisFiaJwvp1QF+I3KjD5FOxut14q/GzovUe6orHLesW2C7d754kRm53h5gqrz6sFl6sxc4BVtE/g==
-  dependencies:
-    "@babel/types" "^7.22.5"
-
-"@babel/helper-string-parser@^7.22.5":
-  version "7.22.5"
-  resolved "https://registry.yarnpkg.com/@babel/helper-string-parser/-/helper-string-parser-7.22.5.tgz#533f36457a25814cf1df6488523ad547d784a99f"
-  integrity sha512-mM4COjgZox8U+JcXQwPijIZLElkgEpO5rsERVDJTc2qfCDfERyob6k5WegS14SX18IIjv+XD+GrqNumY5JRCDw==
-
-"@babel/helper-validator-identifier@^7.22.5":
-  version "7.22.5"
-  resolved "https://registry.yarnpkg.com/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.5.tgz#9544ef6a33999343c8740fa51350f30eeaaaf193"
-  integrity sha512-aJXu+6lErq8ltp+JhkJUfk1MTGyuA4v7f3pA+BJ5HLfNC6nAQ0Cpi9uOquUj8Hehg0aUiHzWQbOVJGao6ztBAQ==
-
-"@babel/helper-validator-option@^7.22.5":
-  version "7.22.5"
-  resolved "https://registry.yarnpkg.com/@babel/helper-validator-option/-/helper-validator-option-7.22.5.tgz#de52000a15a177413c8234fa3a8af4ee8102d0ac"
-  integrity sha512-R3oB6xlIVKUnxNUxbmgq7pKjxpru24zlimpE8WK47fACIlM0II/Hm1RS8IaOI7NgCr6LNS+jl5l75m20npAziw==
-
-"@babel/helpers@^7.22.11":
-  version "7.22.11"
-  resolved "https://registry.yarnpkg.com/@babel/helpers/-/helpers-7.22.11.tgz#b02f5d5f2d7abc21ab59eeed80de410ba70b056a"
-  integrity sha512-vyOXC8PBWaGc5h7GMsNx68OH33cypkEDJCHvYVVgVbbxJDROYVtexSk0gK5iCF1xNjRIN2s8ai7hwkWDq5szWg==
-  dependencies:
-    "@babel/template" "^7.22.5"
-    "@babel/traverse" "^7.22.11"
-    "@babel/types" "^7.22.11"
-
-"@babel/highlight@^7.22.10":
-  version "7.22.10"
-  resolved "https://registry.yarnpkg.com/@babel/highlight/-/highlight-7.22.10.tgz#02a3f6d8c1cb4521b2fd0ab0da8f4739936137d7"
-  integrity sha512-78aUtVcT7MUscr0K5mIEnkwxPE0MaxkR5RxRwuHaQ+JuU5AmTPhY+do2mdzVTnIJJpyBglql2pehuBIWHug+WQ==
-  dependencies:
-    "@babel/helper-validator-identifier" "^7.22.5"
-    chalk "^2.4.2"
-    js-tokens "^4.0.0"
-
-"@babel/parser@^7.1.0", "@babel/parser@^7.14.7", "@babel/parser@^7.20.7", "@babel/parser@^7.22.11", "@babel/parser@^7.22.5":
-  version "7.22.11"
-  resolved "https://registry.yarnpkg.com/@babel/parser/-/parser-7.22.11.tgz#becf8ee33aad2a35ed5607f521fe6e72a615f905"
-  integrity sha512-R5zb8eJIBPJriQtbH/htEQy4k7E2dHWlD2Y2VT07JCzwYZHBxV5ZYtM0UhXSNMT74LyxuM+b1jdL7pSesXbC/g==
-
-"@babel/plugin-syntax-async-generators@^7.8.4":
-  version "7.8.4"
-  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz#a983fb1aeb2ec3f6ed042a210f640e90e786fe0d"
-  integrity sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==
-  dependencies:
-    "@babel/helper-plugin-utils" "^7.8.0"
-
-"@babel/plugin-syntax-bigint@^7.8.3":
-  version "7.8.3"
-  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz#4c9a6f669f5d0cdf1b90a1671e9a146be5300cea"
-  integrity sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==
-  dependencies:
-    "@babel/helper-plugin-utils" "^7.8.0"
-
-"@babel/plugin-syntax-class-properties@^7.8.3":
-  version "7.12.13"
-  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz#b5c987274c4a3a82b89714796931a6b53544ae10"
-  integrity sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==
-  dependencies:
-    "@babel/helper-plugin-utils" "^7.12.13"
-
-"@babel/plugin-syntax-import-meta@^7.8.3":
-  version "7.10.4"
-  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz#ee601348c370fa334d2207be158777496521fd51"
-  integrity sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==
-  dependencies:
-    "@babel/helper-plugin-utils" "^7.10.4"
-
-"@babel/plugin-syntax-json-strings@^7.8.3":
-  version "7.8.3"
-  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz#01ca21b668cd8218c9e640cb6dd88c5412b2c96a"
-  integrity sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==
-  dependencies:
-    "@babel/helper-plugin-utils" "^7.8.0"
-
-"@babel/plugin-syntax-logical-assignment-operators@^7.8.3":
-  version "7.10.4"
-  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz#ca91ef46303530448b906652bac2e9fe9941f699"
-  integrity sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==
-  dependencies:
-    "@babel/helper-plugin-utils" "^7.10.4"
-
-"@babel/plugin-syntax-nullish-coalescing-operator@^7.8.3":
-  version "7.8.3"
-  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz#167ed70368886081f74b5c36c65a88c03b66d1a9"
-  integrity sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==
-  dependencies:
-    "@babel/helper-plugin-utils" "^7.8.0"
-
-"@babel/plugin-syntax-numeric-separator@^7.8.3":
-  version "7.10.4"
-  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz#b9b070b3e33570cd9fd07ba7fa91c0dd37b9af97"
-  integrity sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==
-  dependencies:
-    "@babel/helper-plugin-utils" "^7.10.4"
-
-"@babel/plugin-syntax-object-rest-spread@^7.8.3":
-  version "7.8.3"
-  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz#60e225edcbd98a640332a2e72dd3e66f1af55871"
-  integrity sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==
-  dependencies:
-    "@babel/helper-plugin-utils" "^7.8.0"
-
-"@babel/plugin-syntax-optional-catch-binding@^7.8.3":
-  version "7.8.3"
-  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz#6111a265bcfb020eb9efd0fdfd7d26402b9ed6c1"
-  integrity sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==
-  dependencies:
-    "@babel/helper-plugin-utils" "^7.8.0"
-
-"@babel/plugin-syntax-optional-chaining@^7.8.3":
-  version "7.8.3"
-  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz#4f69c2ab95167e0180cd5336613f8c5788f7d48a"
-  integrity sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==
-  dependencies:
-    "@babel/helper-plugin-utils" "^7.8.0"
-
-"@babel/plugin-syntax-top-level-await@^7.8.3":
-  version "7.14.5"
-  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz#c1cfdadc35a646240001f06138247b741c34d94c"
-  integrity sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==
-  dependencies:
-    "@babel/helper-plugin-utils" "^7.14.5"
-
-"@babel/plugin-syntax-typescript@^7.7.2":
-  version "7.22.5"
-  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.22.5.tgz#aac8d383b062c5072c647a31ef990c1d0af90272"
-  integrity sha512-1mS2o03i7t1c6VzH6fdQ3OA8tcEIxwG18zIPRp+UY1Ihv6W+XZzBCVxExF9upussPXJ0xE9XRHwMoNs1ep/nRQ==
-  dependencies:
-    "@babel/helper-plugin-utils" "^7.22.5"
-
-"@babel/runtime@^7.7.2":
-  version "7.22.11"
-  resolved "https://registry.yarnpkg.com/@babel/runtime/-/runtime-7.22.11.tgz#7a9ba3bbe406ad6f9e8dd4da2ece453eb23a77a4"
-  integrity sha512-ee7jVNlWN09+KftVOu9n7S8gQzD/Z6hN/I8VBRXW4P1+Xe7kJGXMwu8vds4aGIMHZnNbdpSWCfZZtinytpcAvA==
-  dependencies:
-    regenerator-runtime "^0.14.0"
-
-"@babel/template@^7.22.5", "@babel/template@^7.3.3":
-  version "7.22.5"
-  resolved "https://registry.yarnpkg.com/@babel/template/-/template-7.22.5.tgz#0c8c4d944509875849bd0344ff0050756eefc6ec"
-  integrity sha512-X7yV7eiwAxdj9k94NEylvbVHLiVG1nvzCV2EAowhxLTwODV1jl9UzZ48leOC0sH7OnuHrIkllaBgneUykIcZaw==
-  dependencies:
-    "@babel/code-frame" "^7.22.5"
-    "@babel/parser" "^7.22.5"
-    "@babel/types" "^7.22.5"
-
-"@babel/traverse@^7.22.11", "@babel/traverse@^7.7.2":
-  version "7.22.11"
-  resolved "https://registry.yarnpkg.com/@babel/traverse/-/traverse-7.22.11.tgz#71ebb3af7a05ff97280b83f05f8865ac94b2027c"
-  integrity sha512-mzAenteTfomcB7mfPtyi+4oe5BZ6MXxWcn4CX+h4IRJ+OOGXBrWU6jDQavkQI9Vuc5P+donFabBfFCcmWka9lQ==
-  dependencies:
-    "@babel/code-frame" "^7.22.10"
-    "@babel/generator" "^7.22.10"
-    "@babel/helper-environment-visitor" "^7.22.5"
-    "@babel/helper-function-name" "^7.22.5"
-    "@babel/helper-hoist-variables" "^7.22.5"
-    "@babel/helper-split-export-declaration" "^7.22.6"
-    "@babel/parser" "^7.22.11"
-    "@babel/types" "^7.22.11"
-    debug "^4.1.0"
-    globals "^11.1.0"
-
-"@babel/types@^7.0.0", "@babel/types@^7.20.7", "@babel/types@^7.22.10", "@babel/types@^7.22.11", "@babel/types@^7.22.5", "@babel/types@^7.3.3":
-  version "7.22.11"
-  resolved "https://registry.yarnpkg.com/@babel/types/-/types-7.22.11.tgz#0e65a6a1d4d9cbaa892b2213f6159485fe632ea2"
-  integrity sha512-siazHiGuZRz9aB9NpHy9GOs9xiQPKnMzgdr493iI1M67vRXpnEq8ZOOKzezC5q7zwuQ6sDhdSp4SD9ixKSqKZg==
-  dependencies:
-    "@babel/helper-string-parser" "^7.22.5"
-    "@babel/helper-validator-identifier" "^7.22.5"
-    to-fast-properties "^2.0.0"
-
-"@bcoe/v8-coverage@^0.2.3":
-  version "0.2.3"
-  resolved "https://registry.yarnpkg.com/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz#75a2e8b51cb758a7553d6804a5932d7aace75c39"
-  integrity sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==
-
-"@cspotcode/source-map-support@^0.8.0":
-  version "0.8.1"
-  resolved "https://registry.yarnpkg.com/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz#00629c35a688e05a88b1cda684fb9d5e73f000a1"
-  integrity sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==
-  dependencies:
-    "@jridgewell/trace-mapping" "0.3.9"
-
-"@eshaz/web-worker@1.2.1":
-  version "1.2.1"
-  resolved "https://registry.yarnpkg.com/@eshaz/web-worker/-/web-worker-1.2.1.tgz#834385830529582589e9790350beb24bf3ac8018"
-  integrity sha512-v5AKAVtM0toVD2rDCGjzhySWlXG/sG5HVialdzrxFKTAnFZNCjQelX0n2tPK0tE86jf4s3hpWlpRtOh8OObktg==
-
-"@eslint-community/eslint-utils@^4.2.0":
-  version "4.4.0"
-  resolved "https://registry.yarnpkg.com/@eslint-community/eslint-utils/-/eslint-utils-4.4.0.tgz#a23514e8fb9af1269d5f7788aa556798d61c6b59"
-  integrity sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==
-  dependencies:
-    eslint-visitor-keys "^3.3.0"
-
-"@eslint-community/regexpp@^4.4.0", "@eslint-community/regexpp@^4.6.1":
-  version "4.8.0"
-  resolved "https://registry.yarnpkg.com/@eslint-community/regexpp/-/regexpp-4.8.0.tgz#11195513186f68d42fbf449f9a7136b2c0c92005"
-  integrity sha512-JylOEEzDiOryeUnFbQz+oViCXS0KsvR1mvHkoMiu5+UiBvy+RYX7tzlIIIEstF/gVa2tj9AQXk3dgnxv6KxhFg==
-
-"@eslint/eslintrc@^2.1.2":
-  version "2.1.2"
-  resolved "https://registry.yarnpkg.com/@eslint/eslintrc/-/eslintrc-2.1.2.tgz#c6936b4b328c64496692f76944e755738be62396"
-  integrity sha512-+wvgpDsrB1YqAMdEUCcnTlpfVBH7Vqn6A/NT3D8WVXFIaKMlErPIZT3oCIAVCOtarRpMtelZLqJeU3t7WY6X6g==
-  dependencies:
-    ajv "^6.12.4"
-    debug "^4.3.2"
-    espree "^9.6.0"
-    globals "^13.19.0"
-    ignore "^5.2.0"
-    import-fresh "^3.2.1"
-    js-yaml "^4.1.0"
-    minimatch "^3.1.2"
-    strip-json-comments "^3.1.1"
-
-"@eslint/js@8.48.0":
-  version "8.48.0"
-  resolved "https://registry.yarnpkg.com/@eslint/js/-/js-8.48.0.tgz#642633964e217905436033a2bd08bf322849b7fb"
-  integrity sha512-ZSjtmelB7IJfWD2Fvb7+Z+ChTIKWq6kjda95fLcQKNS5aheVHn4IkfgRQE3sIIzTcSLwLcLZUD9UBt+V7+h+Pw==
-
-"@hapi/boom@^9.1.3":
-  version "9.1.4"
-  resolved "https://registry.yarnpkg.com/@hapi/boom/-/boom-9.1.4.tgz#1f9dad367c6a7da9f8def24b4a986fc5a7bd9db6"
-  integrity sha512-Ls1oH8jaN1vNsqcaHVYJrKmgMcKsC1wcp8bujvXrHaAqD2iDYq3HoOwsxwo09Cuda5R5nC0o0IxlrlTuvPuzSw==
-  dependencies:
-    "@hapi/hoek" "9.x.x"
-
-"@hapi/hoek@9.x.x":
-  version "9.3.0"
-  resolved "https://registry.yarnpkg.com/@hapi/hoek/-/hoek-9.3.0.tgz#8368869dcb735be2e7f5cb7647de78e167a251fb"
-  integrity sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ==
-
-"@humanwhocodes/config-array@^0.11.10":
-  version "0.11.10"
-  resolved "https://registry.yarnpkg.com/@humanwhocodes/config-array/-/config-array-0.11.10.tgz#5a3ffe32cc9306365fb3fd572596cd602d5e12d2"
-  integrity sha512-KVVjQmNUepDVGXNuoRRdmmEjruj0KfiGSbS8LVc12LMsWDQzRXJ0qdhN8L8uUigKpfEHRhlaQFY0ib1tnUbNeQ==
-  dependencies:
-    "@humanwhocodes/object-schema" "^1.2.1"
-    debug "^4.1.1"
-    minimatch "^3.0.5"
-
-"@humanwhocodes/module-importer@^1.0.1":
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz#af5b2691a22b44be847b0ca81641c5fb6ad0172c"
-  integrity sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==
-
-"@humanwhocodes/object-schema@^1.2.1":
-  version "1.2.1"
-  resolved "https://registry.yarnpkg.com/@humanwhocodes/object-schema/-/object-schema-1.2.1.tgz#b520529ec21d8e5945a1851dfd1c32e94e39ff45"
-  integrity sha512-ZnQMnLV4e7hDlUvw8H+U8ASL02SS2Gn6+9Ac3wGGLIe7+je2AeAOxPY+izIPJDfFDb7eDjev0Us8MO1iFRN8hA==
-
-"@hutson/parse-repository-url@^3.0.0":
-  version "3.0.2"
-  resolved "https://registry.yarnpkg.com/@hutson/parse-repository-url/-/parse-repository-url-3.0.2.tgz#98c23c950a3d9b6c8f0daed06da6c3af06981340"
-  integrity sha512-H9XAx3hc0BQHY6l+IFSWHDySypcXsvsuLhgYLUGywmJ5pswRVQJUHpOsobnLYp2ZUaUlKiKDrgWWhosOwAEM8Q==
-
-"@iarna/toml@2.2.5":
-  version "2.2.5"
-  resolved "https://registry.yarnpkg.com/@iarna/toml/-/toml-2.2.5.tgz#b32366c89b43c6f8cefbdefac778b9c828e3ba8c"
-  integrity sha512-trnsAYxU3xnS1gPHPyU961coFyLkh4gAD/0zQ5mymY4yOZ+CYvsPqUbOFSw0aDM4y0tV7tiFxL/1XfXPNC6IPg==
-
-"@istanbuljs/load-nyc-config@^1.0.0":
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz#fd3db1d59ecf7cf121e80650bb86712f9b55eced"
-  integrity sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==
-  dependencies:
-    camelcase "^5.3.1"
-    find-up "^4.1.0"
-    get-package-type "^0.1.0"
-    js-yaml "^3.13.1"
-    resolve-from "^5.0.0"
-
-"@istanbuljs/schema@^0.1.2":
-  version "0.1.3"
-  resolved "https://registry.yarnpkg.com/@istanbuljs/schema/-/schema-0.1.3.tgz#e45e384e4b8ec16bce2fd903af78450f6bf7ec98"
-  integrity sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==
-
-"@jest/console@^27.5.1":
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/@jest/console/-/console-27.5.1.tgz#260fe7239602fe5130a94f1aa386eff54b014bba"
-  integrity sha512-kZ/tNpS3NXn0mlXXXPNuDZnb4c0oZ20r4K5eemM2k30ZC3G0T02nXUvyhf5YdbXWHPEJLc9qGLxEZ216MdL+Zg==
-  dependencies:
-    "@jest/types" "^27.5.1"
-    "@types/node" "*"
-    chalk "^4.0.0"
-    jest-message-util "^27.5.1"
-    jest-util "^27.5.1"
-    slash "^3.0.0"
-
-"@jest/core@^27.5.1":
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/@jest/core/-/core-27.5.1.tgz#267ac5f704e09dc52de2922cbf3af9edcd64b626"
-  integrity sha512-AK6/UTrvQD0Cd24NSqmIA6rKsu0tKIxfiCducZvqxYdmMisOYAsdItspT+fQDQYARPf8XgjAFZi0ogW2agH5nQ==
-  dependencies:
-    "@jest/console" "^27.5.1"
-    "@jest/reporters" "^27.5.1"
-    "@jest/test-result" "^27.5.1"
-    "@jest/transform" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    "@types/node" "*"
-    ansi-escapes "^4.2.1"
-    chalk "^4.0.0"
-    emittery "^0.8.1"
-    exit "^0.1.2"
-    graceful-fs "^4.2.9"
-    jest-changed-files "^27.5.1"
-    jest-config "^27.5.1"
-    jest-haste-map "^27.5.1"
-    jest-message-util "^27.5.1"
-    jest-regex-util "^27.5.1"
-    jest-resolve "^27.5.1"
-    jest-resolve-dependencies "^27.5.1"
-    jest-runner "^27.5.1"
-    jest-runtime "^27.5.1"
-    jest-snapshot "^27.5.1"
-    jest-util "^27.5.1"
-    jest-validate "^27.5.1"
-    jest-watcher "^27.5.1"
-    micromatch "^4.0.4"
-    rimraf "^3.0.0"
-    slash "^3.0.0"
-    strip-ansi "^6.0.0"
-
-"@jest/environment@^27.5.1":
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/@jest/environment/-/environment-27.5.1.tgz#d7425820511fe7158abbecc010140c3fd3be9c74"
-  integrity sha512-/WQjhPJe3/ghaol/4Bq480JKXV/Rfw8nQdN7f41fM8VDHLcxKXou6QyXAh3EFr9/bVG3x74z1NWDkP87EiY8gA==
-  dependencies:
-    "@jest/fake-timers" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    "@types/node" "*"
-    jest-mock "^27.5.1"
-
-"@jest/fake-timers@^27.5.1":
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/@jest/fake-timers/-/fake-timers-27.5.1.tgz#76979745ce0579c8a94a4678af7a748eda8ada74"
-  integrity sha512-/aPowoolwa07k7/oM3aASneNeBGCmGQsc3ugN4u6s4C/+s5M64MFo/+djTdiwcbQlRfFElGuDXWzaWj6QgKObQ==
-  dependencies:
-    "@jest/types" "^27.5.1"
-    "@sinonjs/fake-timers" "^8.0.1"
-    "@types/node" "*"
-    jest-message-util "^27.5.1"
-    jest-mock "^27.5.1"
-    jest-util "^27.5.1"
-
-"@jest/globals@^27.5.1":
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/@jest/globals/-/globals-27.5.1.tgz#7ac06ce57ab966566c7963431cef458434601b2b"
-  integrity sha512-ZEJNB41OBQQgGzgyInAv0UUfDDj3upmHydjieSxFvTRuZElrx7tXg/uVQ5hYVEwiXs3+aMsAeEc9X7xiSKCm4Q==
-  dependencies:
-    "@jest/environment" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    expect "^27.5.1"
-
-"@jest/reporters@^27.5.1":
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/@jest/reporters/-/reporters-27.5.1.tgz#ceda7be96170b03c923c37987b64015812ffec04"
-  integrity sha512-cPXh9hWIlVJMQkVk84aIvXuBB4uQQmFqZiacloFuGiP3ah1sbCxCosidXFDfqG8+6fO1oR2dTJTlsOy4VFmUfw==
-  dependencies:
-    "@bcoe/v8-coverage" "^0.2.3"
-    "@jest/console" "^27.5.1"
-    "@jest/test-result" "^27.5.1"
-    "@jest/transform" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    "@types/node" "*"
-    chalk "^4.0.0"
-    collect-v8-coverage "^1.0.0"
-    exit "^0.1.2"
-    glob "^7.1.2"
-    graceful-fs "^4.2.9"
-    istanbul-lib-coverage "^3.0.0"
-    istanbul-lib-instrument "^5.1.0"
-    istanbul-lib-report "^3.0.0"
-    istanbul-lib-source-maps "^4.0.0"
-    istanbul-reports "^3.1.3"
-    jest-haste-map "^27.5.1"
-    jest-resolve "^27.5.1"
-    jest-util "^27.5.1"
-    jest-worker "^27.5.1"
-    slash "^3.0.0"
-    source-map "^0.6.0"
-    string-length "^4.0.1"
-    terminal-link "^2.0.0"
-    v8-to-istanbul "^8.1.0"
-
-"@jest/source-map@^27.5.1":
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/@jest/source-map/-/source-map-27.5.1.tgz#6608391e465add4205eae073b55e7f279e04e8cf"
-  integrity sha512-y9NIHUYF3PJRlHk98NdC/N1gl88BL08aQQgu4k4ZopQkCw9t9cV8mtl3TV8b/YCB8XaVTFrmUTAJvjsntDireg==
-  dependencies:
-    callsites "^3.0.0"
-    graceful-fs "^4.2.9"
-    source-map "^0.6.0"
-
-"@jest/test-result@^27.5.1":
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/@jest/test-result/-/test-result-27.5.1.tgz#56a6585fa80f7cdab72b8c5fc2e871d03832f5bb"
-  integrity sha512-EW35l2RYFUcUQxFJz5Cv5MTOxlJIQs4I7gxzi2zVU7PJhOwfYq1MdC5nhSmYjX1gmMmLPvB3sIaC+BkcHRBfag==
-  dependencies:
-    "@jest/console" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    "@types/istanbul-lib-coverage" "^2.0.0"
-    collect-v8-coverage "^1.0.0"
-
-"@jest/test-sequencer@^27.5.1":
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/@jest/test-sequencer/-/test-sequencer-27.5.1.tgz#4057e0e9cea4439e544c6353c6affe58d095745b"
-  integrity sha512-LCheJF7WB2+9JuCS7VB/EmGIdQuhtqjRNI9A43idHv3E4KltCTsPsLxvdaubFHSYwY/fNjMWjl6vNRhDiN7vpQ==
-  dependencies:
-    "@jest/test-result" "^27.5.1"
-    graceful-fs "^4.2.9"
-    jest-haste-map "^27.5.1"
-    jest-runtime "^27.5.1"
-
-"@jest/transform@^27.5.1":
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/@jest/transform/-/transform-27.5.1.tgz#6c3501dcc00c4c08915f292a600ece5ecfe1f409"
-  integrity sha512-ipON6WtYgl/1329g5AIJVbUuEh0wZVbdpGwC99Jw4LwuoBNS95MVphU6zOeD9pDkon+LLbFL7lOQRapbB8SCHw==
-  dependencies:
-    "@babel/core" "^7.1.0"
-    "@jest/types" "^27.5.1"
-    babel-plugin-istanbul "^6.1.1"
-    chalk "^4.0.0"
-    convert-source-map "^1.4.0"
-    fast-json-stable-stringify "^2.0.0"
-    graceful-fs "^4.2.9"
-    jest-haste-map "^27.5.1"
-    jest-regex-util "^27.5.1"
-    jest-util "^27.5.1"
-    micromatch "^4.0.4"
-    pirates "^4.0.4"
-    slash "^3.0.0"
-    source-map "^0.6.1"
-    write-file-atomic "^3.0.0"
-
-"@jest/types@^27.5.1":
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/@jest/types/-/types-27.5.1.tgz#3c79ec4a8ba61c170bf937bcf9e98a9df175ec80"
-  integrity sha512-Cx46iJ9QpwQTjIdq5VJu2QTMMs3QlEjI0x1QbBP5W1+nMzyc2XmimiRR/CbX9TO0cPTeUlxWMOu8mslYsJ8DEw==
-  dependencies:
-    "@types/istanbul-lib-coverage" "^2.0.0"
-    "@types/istanbul-reports" "^3.0.0"
-    "@types/node" "*"
-    "@types/yargs" "^16.0.0"
-    chalk "^4.0.0"
-
-"@jimp/bmp@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/bmp/-/bmp-0.16.13.tgz#57ffa5b17417b5a181f6f184bdabc8218e8448ef"
-  integrity sha512-9edAxu7N2FX7vzkdl5Jo1BbACfycUtBQX+XBMcHA2bk62P8R0otgkHg798frgAk/WxQIzwxqOH6wMiCwrlAzdQ==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-    bmp-js "^0.1.0"
-
-"@jimp/core@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/core/-/core-0.16.13.tgz#7171745a912b5b847f8bf53e70b0672c5ca92744"
-  integrity sha512-qXpA1tzTnlkTku9yqtuRtS/wVntvE6f3m3GNxdTdtmc+O+Wcg9Xo2ABPMh7Nc0AHbMKzwvwgB2JnjZmlmJEObg==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-    any-base "^1.1.0"
-    buffer "^5.2.0"
-    exif-parser "^0.1.12"
-    file-type "^16.5.4"
-    load-bmfont "^1.3.1"
-    mkdirp "^0.5.1"
-    phin "^2.9.1"
-    pixelmatch "^4.0.2"
-    tinycolor2 "^1.4.1"
-
-"@jimp/custom@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/custom/-/custom-0.16.13.tgz#2e4ed447b7410b81fe9103682b4166af904daf84"
-  integrity sha512-LTATglVUPGkPf15zX1wTMlZ0+AU7cGEGF6ekVF1crA8eHUWsGjrYTB+Ht4E3HTrCok8weQG+K01rJndCp/l4XA==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/core" "^0.16.13"
-
-"@jimp/gif@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/gif/-/gif-0.16.13.tgz#fa72f35d8ad67d6ce3a3d7ef6c8d04a462afaaf9"
-  integrity sha512-yFAMZGv3o+YcjXilMWWwS/bv1iSqykFahFMSO169uVMtfQVfa90kt4/kDwrXNR6Q9i6VHpFiGZMlF2UnHClBvg==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-    gifwrap "^0.9.2"
-    omggif "^1.0.9"
-
-"@jimp/jpeg@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/jpeg/-/jpeg-0.16.13.tgz#e1c128a591bd7f8a26c8731fd0bc65d32d4ba32a"
-  integrity sha512-BJHlDxzTlCqP2ThqP8J0eDrbBfod7npWCbJAcfkKqdQuFk0zBPaZ6KKaQKyKxmWJ87Z6ohANZoMKEbtvrwz1AA==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-    jpeg-js "^0.4.2"
-
-"@jimp/plugin-blit@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-blit/-/plugin-blit-0.16.13.tgz#370303edef02b75aa3e316726c5a3aac3e92f5d0"
-  integrity sha512-8Z1k96ZFxlhK2bgrY1JNWNwvaBeI/bciLM0yDOni2+aZwfIIiC7Y6PeWHTAvjHNjphz+XCt01WQmOYWCn0ML6g==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-blur@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-blur/-/plugin-blur-0.16.13.tgz#27b82295a3dee88d6e029d4d62f5de8118b845e6"
-  integrity sha512-PvLrfa8vkej3qinlebyhLpksJgCF5aiysDMSVhOZqwH5nQLLtDE9WYbnsofGw4r0VVpyw3H/ANCIzYTyCtP9Cg==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-circle@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-circle/-/plugin-circle-0.16.13.tgz#d7af61a95b17e67c7fd4361cd1d588e00b58b6b6"
-  integrity sha512-RNave7EFgZrb5V5EpdvJGAEHMnDAJuwv05hKscNfIYxf0kR3KhViBTDy+MoTnMlIvaKFULfwIgaZWzyhuINMzA==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-color@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-color/-/plugin-color-0.16.13.tgz#825227e7e6f32d227740ad1bd97c389083c1d0d1"
-  integrity sha512-xW+9BtEvoIkkH/Wde9ql4nAFbYLkVINhpgAE7VcBUsuuB34WUbcBl/taOuUYQrPEFQJ4jfXiAJZ2H/rvKjCVnQ==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-    tinycolor2 "^1.4.1"
-
-"@jimp/plugin-contain@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-contain/-/plugin-contain-0.16.13.tgz#7a42ed1ce580bf910f812ba2f35e0fa2cfe501ac"
-  integrity sha512-QayTXw4tXMwU6q6acNTQrTTFTXpNRBe+MgTGMDU0lk+23PjlFCO/9sacflelG8lsp7vNHhAxFeHptDMAksEYzg==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-cover@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-cover/-/plugin-cover-0.16.13.tgz#9c964be05b163e0f0e06866a9afcebe775dff246"
-  integrity sha512-BSsP71GTNaqWRcvkbWuIVH+zK7b3TSNebbhDkFK0fVaUTzHuKMS/mgY4hDZIEVt7Rf5FjadAYtsujHN9w0iSYA==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-crop@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-crop/-/plugin-crop-0.16.13.tgz#80c6ae4d401a8de6cc11b265f3cdecd80425b9a9"
-  integrity sha512-WEl2tPVYwzYL8OKme6Go2xqiWgKsgxlMwyHabdAU4tXaRwOCnOI7v4021gCcBb9zn/oWwguHuKHmK30Fw2Z/PA==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-displace@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-displace/-/plugin-displace-0.16.13.tgz#fd72aa93b3fe97a1c3da729e6b26399661ce8ce5"
-  integrity sha512-qt9WKq8vWrcjySa9DyQ0x/RBMHQeiVjdVSY1SJsMjssPUf0pS74qorcuAkGi89biN3YoGUgPkpqECnAWnYwgGA==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-dither@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-dither/-/plugin-dither-0.16.13.tgz#430750f73d528df7ebe21bb508fb80f9f515305d"
-  integrity sha512-5/N3yJggbWQTlGZHQYJPmQXEwR52qaXjEzkp1yRBbtdaekXE3BG/suo0fqeoV/csf8ooI78sJzYmIrxNoWVtgQ==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-fisheye@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-fisheye/-/plugin-fisheye-0.16.13.tgz#caf69851ab25c44d13c952880a8e43c928abd3f1"
-  integrity sha512-2rZmTdFbT/cF9lEZIkXCYO0TsT114Q27AX5IAo0Sju6jVQbvIk1dFUTnwLDadTo8wkJlFzGqMQ24Cs8cHWOliA==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-flip@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-flip/-/plugin-flip-0.16.13.tgz#3dd167e14d03d62410c519990728ac3c247c0692"
-  integrity sha512-EmcgAA74FTc5u7Z+hUO/sRjWwfPPLuOQP5O64x5g4j0T12Bd29IgsYZxoutZo/rb3579+JNa/3wsSEmyVv1EpA==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-gaussian@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-gaussian/-/plugin-gaussian-0.16.13.tgz#79879d9371aff3e1714c54be0771418573ac2954"
-  integrity sha512-A1XKfGQD0iDdIiKqFYi8nZMv4dDVYdxbrmgR7y/CzUHhSYdcmoljLIIsZZM3Iks/Wa353W3vtvkWLuDbQbch1w==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-invert@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-invert/-/plugin-invert-0.16.13.tgz#7449283d5b0f405ce2cd1b93a6d79169c970e431"
-  integrity sha512-xFMrIn7czEZbdbMzZWuaZFnlLGJDVJ82y5vlsKsXRTG2kcxRsMPXvZRWHV57nSs1YFsNqXSbrC8B98n0E32njQ==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-mask@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-mask/-/plugin-mask-0.16.13.tgz#70b4bef4a598e41571f9a3e0c33fcc730eeae24d"
-  integrity sha512-wLRYKVBXql2GAYgt6FkTnCfE+q5NomM7Dlh0oIPGAoMBWDyTx0eYutRK6PlUrRK2yMHuroAJCglICTbxqGzowQ==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-normalize@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-normalize/-/plugin-normalize-0.16.13.tgz#fd7c802c3f6be8d34abf0dbeadfe1d783e531d67"
-  integrity sha512-3tfad0n9soRna4IfW9NzQdQ2Z3ijkmo21DREHbE6CGcMIxOSvfRdSvf1qQPApxjTSo8LTU4MCi/fidx/NZ0GqQ==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-print@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-print/-/plugin-print-0.16.13.tgz#595fb6db6677ac3d2b6bfe7144658019791bf288"
-  integrity sha512-0m6i3p01PGRkGAK9r53hDYrkyMq+tlhLOIbsSTmZyh6HLshUKlTB7eXskF5OpVd5ZUHoltlNc6R+ggvKIzxRFw==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-    load-bmfont "^1.4.0"
-
-"@jimp/plugin-resize@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-resize/-/plugin-resize-0.16.13.tgz#6267087f724d47e7bb8824c5b842d9315f50b8e7"
-  integrity sha512-qoqtN8LDknm3fJm9nuPygJv30O3vGhSBD2TxrsCnhtOsxKAqVPJtFVdGd/qVuZ8nqQANQmTlfqTiK9mVWQ7MiQ==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-rotate@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-rotate/-/plugin-rotate-0.16.13.tgz#9981f24631b1a0ad486d2b75a0163918ff912491"
-  integrity sha512-Ev+Jjmj1nHYw897z9C3R9dYsPv7S2/nxdgfFb/h8hOwK0Ovd1k/+yYS46A0uj/JCKK0pQk8wOslYBkPwdnLorw==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-scale@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-scale/-/plugin-scale-0.16.13.tgz#36b1b7d70819591901339926a91dae4864cc1b92"
-  integrity sha512-05POQaEJVucjTiSGMoH68ZiELc7QqpIpuQlZ2JBbhCV+WCbPFUBcGSmE7w4Jd0E2GvCho/NoMODLwgcVGQA97A==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-shadow@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-shadow/-/plugin-shadow-0.16.13.tgz#f5b58122c0a6e1307efcddfc165ce1291415d553"
-  integrity sha512-nmu5VSZ9hsB1JchTKhnnCY+paRBnwzSyK5fhkhtQHHoFD5ArBQ/5wU8y6tCr7k/GQhhGq1OrixsECeMjPoc8Zw==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugin-threshold@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugin-threshold/-/plugin-threshold-0.16.13.tgz#8de7500b03342b251201bc0feb84955dd3e410f0"
-  integrity sha512-+3zArBH0OE3Rhjm4HyAokMsZlIq5gpQec33CncyoSwxtRBM2WAhUVmCUKuBo+Lr/2/4ISoY4BWpHKhMLDix6cA==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-
-"@jimp/plugins@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/plugins/-/plugins-0.16.13.tgz#cf441ee13204dd9474bc0e67e41c50afc910de4f"
-  integrity sha512-CJLdqODEhEVs4MgWCxpWL5l95sCBlkuSLz65cxEm56X5akIsn4LOlwnKoSEZioYcZUBvHhCheH67AyPTudfnQQ==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/plugin-blit" "^0.16.13"
-    "@jimp/plugin-blur" "^0.16.13"
-    "@jimp/plugin-circle" "^0.16.13"
-    "@jimp/plugin-color" "^0.16.13"
-    "@jimp/plugin-contain" "^0.16.13"
-    "@jimp/plugin-cover" "^0.16.13"
-    "@jimp/plugin-crop" "^0.16.13"
-    "@jimp/plugin-displace" "^0.16.13"
-    "@jimp/plugin-dither" "^0.16.13"
-    "@jimp/plugin-fisheye" "^0.16.13"
-    "@jimp/plugin-flip" "^0.16.13"
-    "@jimp/plugin-gaussian" "^0.16.13"
-    "@jimp/plugin-invert" "^0.16.13"
-    "@jimp/plugin-mask" "^0.16.13"
-    "@jimp/plugin-normalize" "^0.16.13"
-    "@jimp/plugin-print" "^0.16.13"
-    "@jimp/plugin-resize" "^0.16.13"
-    "@jimp/plugin-rotate" "^0.16.13"
-    "@jimp/plugin-scale" "^0.16.13"
-    "@jimp/plugin-shadow" "^0.16.13"
-    "@jimp/plugin-threshold" "^0.16.13"
-    timm "^1.6.1"
-
-"@jimp/png@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/png/-/png-0.16.13.tgz#8b130cc5e1e754c074c42fa3fe2609897cefdf7c"
-  integrity sha512-8cGqINvbWJf1G0Her9zbq9I80roEX0A+U45xFby3tDWfzn+Zz8XKDF1Nv9VUwVx0N3zpcG1RPs9hfheG4Cq2kg==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/utils" "^0.16.13"
-    pngjs "^3.3.3"
-
-"@jimp/tiff@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/tiff/-/tiff-0.16.13.tgz#9cf8d19f2b0b0c46758e81acfc7d656835ee6da1"
-  integrity sha512-oJY8d9u95SwW00VPHuCNxPap6Q1+E/xM5QThb9Hu+P6EGuu6lIeLaNBMmFZyblwFbwrH+WBOZlvIzDhi4Dm/6Q==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    utif "^2.0.1"
-
-"@jimp/types@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/types/-/types-0.16.13.tgz#39be1886cbfa4fb5e77e17441a046a1f961d3046"
-  integrity sha512-mC0yVNUobFDjoYLg4hoUwzMKgNlxynzwt3cDXzumGvRJ7Kb8qQGOWJQjQFo5OxmGExqzPphkirdbBF88RVLBCg==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/bmp" "^0.16.13"
-    "@jimp/gif" "^0.16.13"
-    "@jimp/jpeg" "^0.16.13"
-    "@jimp/png" "^0.16.13"
-    "@jimp/tiff" "^0.16.13"
-    timm "^1.6.1"
-
-"@jimp/utils@^0.16.13":
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/@jimp/utils/-/utils-0.16.13.tgz#afde41b9c6cdadfb45d83cb5e16deb65f369bf99"
-  integrity sha512-VyCpkZzFTHXtKgVO35iKN0sYR10psGpV6SkcSeV4oF7eSYlR8Bl6aQLCzVeFjvESF7mxTmIiI3/XrMobVrtxDA==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    regenerator-runtime "^0.13.3"
-
-"@jridgewell/gen-mapping@^0.3.0", "@jridgewell/gen-mapping@^0.3.2":
-  version "0.3.3"
-  resolved "https://registry.yarnpkg.com/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz#7e02e6eb5df901aaedb08514203b096614024098"
-  integrity sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==
-  dependencies:
-    "@jridgewell/set-array" "^1.0.1"
-    "@jridgewell/sourcemap-codec" "^1.4.10"
-    "@jridgewell/trace-mapping" "^0.3.9"
-
-"@jridgewell/resolve-uri@^3.0.3", "@jridgewell/resolve-uri@^3.1.0":
-  version "3.1.1"
-  resolved "https://registry.yarnpkg.com/@jridgewell/resolve-uri/-/resolve-uri-3.1.1.tgz#c08679063f279615a3326583ba3a90d1d82cc721"
-  integrity sha512-dSYZh7HhCDtCKm4QakX0xFpsRDqjjtZf/kjI/v3T3Nwt5r8/qz/M19F9ySyOqU94SXBmeG9ttTul+YnR4LOxFA==
-
-"@jridgewell/set-array@^1.0.1":
-  version "1.1.2"
-  resolved "https://registry.yarnpkg.com/@jridgewell/set-array/-/set-array-1.1.2.tgz#7c6cf998d6d20b914c0a55a91ae928ff25965e72"
-  integrity sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==
-
-"@jridgewell/sourcemap-codec@^1.4.10", "@jridgewell/sourcemap-codec@^1.4.14":
-  version "1.4.15"
-  resolved "https://registry.yarnpkg.com/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz#d7c6e6755c78567a951e04ab52ef0fd26de59f32"
-  integrity sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==
-
-"@jridgewell/trace-mapping@0.3.9":
-  version "0.3.9"
-  resolved "https://registry.yarnpkg.com/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz#6534fd5933a53ba7cbf3a17615e273a0d1273ff9"
-  integrity sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==
-  dependencies:
-    "@jridgewell/resolve-uri" "^3.0.3"
-    "@jridgewell/sourcemap-codec" "^1.4.10"
-
-"@jridgewell/trace-mapping@^0.3.17", "@jridgewell/trace-mapping@^0.3.9":
-  version "0.3.19"
-  resolved "https://registry.yarnpkg.com/@jridgewell/trace-mapping/-/trace-mapping-0.3.19.tgz#f8a3249862f91be48d3127c3cfe992f79b4b8811"
-  integrity sha512-kf37QtfW+Hwx/buWGMPcR60iF9ziHa6r/CZJIHbmcm4+0qrXiVdxegAH0F6yddEVQ7zdkjcGCgCzUu+BcbhQxw==
-  dependencies:
-    "@jridgewell/resolve-uri" "^3.1.0"
-    "@jridgewell/sourcemap-codec" "^1.4.14"
-
-"@nodelib/fs.scandir@2.1.5":
-  version "2.1.5"
-  resolved "https://registry.yarnpkg.com/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz#7619c2eb21b25483f6d167548b4cfd5a7488c3d5"
-  integrity sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==
-  dependencies:
-    "@nodelib/fs.stat" "2.0.5"
-    run-parallel "^1.1.9"
-
-"@nodelib/fs.stat@2.0.5", "@nodelib/fs.stat@^2.0.2":
-  version "2.0.5"
-  resolved "https://registry.yarnpkg.com/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz#5bd262af94e9d25bd1e71b05deed44876a222e8b"
-  integrity sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==
-
-"@nodelib/fs.walk@^1.2.3", "@nodelib/fs.walk@^1.2.8":
-  version "1.2.8"
-  resolved "https://registry.yarnpkg.com/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz#e95737e8bb6746ddedf69c556953494f196fe69a"
-  integrity sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==
-  dependencies:
-    "@nodelib/fs.scandir" "2.1.5"
-    fastq "^1.6.0"
-
-"@octokit/auth-token@^3.0.0":
-  version "3.0.4"
-  resolved "https://registry.yarnpkg.com/@octokit/auth-token/-/auth-token-3.0.4.tgz#70e941ba742bdd2b49bdb7393e821dea8520a3db"
-  integrity sha512-TWFX7cZF2LXoCvdmJWY7XVPi74aSY0+FfBZNSXEXFkMpjcqsQwDSYVv5FhRFaI0V1ECnwbz4j59T/G+rXNWaIQ==
-
-"@octokit/core@^4.2.1":
-  version "4.2.4"
-  resolved "https://registry.yarnpkg.com/@octokit/core/-/core-4.2.4.tgz#d8769ec2b43ff37cc3ea89ec4681a20ba58ef907"
-  integrity sha512-rYKilwgzQ7/imScn3M9/pFfUf4I1AZEH3KhyJmtPdE2zfaXAn2mFfUy4FbKewzc2We5y/LlKLj36fWJLKC2SIQ==
-  dependencies:
-    "@octokit/auth-token" "^3.0.0"
-    "@octokit/graphql" "^5.0.0"
-    "@octokit/request" "^6.0.0"
-    "@octokit/request-error" "^3.0.0"
-    "@octokit/types" "^9.0.0"
-    before-after-hook "^2.2.0"
-    universal-user-agent "^6.0.0"
-
-"@octokit/endpoint@^7.0.0":
-  version "7.0.6"
-  resolved "https://registry.yarnpkg.com/@octokit/endpoint/-/endpoint-7.0.6.tgz#791f65d3937555141fb6c08f91d618a7d645f1e2"
-  integrity sha512-5L4fseVRUsDFGR00tMWD/Trdeeihn999rTMGRMC1G/Ldi1uWlWJzI98H4Iak5DB/RVvQuyMYKqSK/R6mbSOQyg==
-  dependencies:
-    "@octokit/types" "^9.0.0"
-    is-plain-object "^5.0.0"
-    universal-user-agent "^6.0.0"
-
-"@octokit/graphql@^5.0.0":
-  version "5.0.6"
-  resolved "https://registry.yarnpkg.com/@octokit/graphql/-/graphql-5.0.6.tgz#9eac411ac4353ccc5d3fca7d76736e6888c5d248"
-  integrity sha512-Fxyxdy/JH0MnIB5h+UQ3yCoh1FG4kWXfFKkpWqjZHw/p+Kc8Y44Hu/kCgNBT6nU1shNumEchmW/sUO1JuQnPcw==
-  dependencies:
-    "@octokit/request" "^6.0.0"
-    "@octokit/types" "^9.0.0"
-    universal-user-agent "^6.0.0"
-
-"@octokit/openapi-types@^18.0.0":
-  version "18.0.0"
-  resolved "https://registry.yarnpkg.com/@octokit/openapi-types/-/openapi-types-18.0.0.tgz#f43d765b3c7533fd6fb88f3f25df079c24fccf69"
-  integrity sha512-V8GImKs3TeQRxRtXFpG2wl19V7444NIOTDF24AWuIbmNaNYOQMWRbjcGDXV5B+0n887fgDcuMNOmlul+k+oJtw==
-
-"@octokit/plugin-paginate-rest@^6.1.2":
-  version "6.1.2"
-  resolved "https://registry.yarnpkg.com/@octokit/plugin-paginate-rest/-/plugin-paginate-rest-6.1.2.tgz#f86456a7a1fe9e58fec6385a85cf1b34072341f8"
-  integrity sha512-qhrmtQeHU/IivxucOV1bbI/xZyC/iOBhclokv7Sut5vnejAIAEXVcGQeRpQlU39E0WwK9lNvJHphHri/DB6lbQ==
-  dependencies:
-    "@octokit/tsconfig" "^1.0.2"
-    "@octokit/types" "^9.2.3"
-
-"@octokit/plugin-request-log@^1.0.4":
-  version "1.0.4"
-  resolved "https://registry.yarnpkg.com/@octokit/plugin-request-log/-/plugin-request-log-1.0.4.tgz#5e50ed7083a613816b1e4a28aeec5fb7f1462e85"
-  integrity sha512-mLUsMkgP7K/cnFEw07kWqXGF5LKrOkD+lhCrKvPHXWDywAwuDUeDwWBpc69XK3pNX0uKiVt8g5z96PJ6z9xCFA==
-
-"@octokit/plugin-rest-endpoint-methods@^7.1.2":
-  version "7.2.3"
-  resolved "https://registry.yarnpkg.com/@octokit/plugin-rest-endpoint-methods/-/plugin-rest-endpoint-methods-7.2.3.tgz#37a84b171a6cb6658816c82c4082ac3512021797"
-  integrity sha512-I5Gml6kTAkzVlN7KCtjOM+Ruwe/rQppp0QU372K1GP7kNOYEKe8Xn5BW4sE62JAHdwpq95OQK/qGNyKQMUzVgA==
-  dependencies:
-    "@octokit/types" "^10.0.0"
-
-"@octokit/request-error@^3.0.0":
-  version "3.0.3"
-  resolved "https://registry.yarnpkg.com/@octokit/request-error/-/request-error-3.0.3.tgz#ef3dd08b8e964e53e55d471acfe00baa892b9c69"
-  integrity sha512-crqw3V5Iy2uOU5Np+8M/YexTlT8zxCfI+qu+LxUB7SZpje4Qmx3mub5DfEKSO8Ylyk0aogi6TYdf6kxzh2BguQ==
-  dependencies:
-    "@octokit/types" "^9.0.0"
-    deprecation "^2.0.0"
-    once "^1.4.0"
-
-"@octokit/request@^6.0.0":
-  version "6.2.8"
-  resolved "https://registry.yarnpkg.com/@octokit/request/-/request-6.2.8.tgz#aaf480b32ab2b210e9dadd8271d187c93171d8eb"
-  integrity sha512-ow4+pkVQ+6XVVsekSYBzJC0VTVvh/FCTUUgTsboGq+DTeWdyIFV8WSCdo0RIxk6wSkBTHqIK1mYuY7nOBXOchw==
-  dependencies:
-    "@octokit/endpoint" "^7.0.0"
-    "@octokit/request-error" "^3.0.0"
-    "@octokit/types" "^9.0.0"
-    is-plain-object "^5.0.0"
-    node-fetch "^2.6.7"
-    universal-user-agent "^6.0.0"
-
-"@octokit/rest@19.0.11":
-  version "19.0.11"
-  resolved "https://registry.yarnpkg.com/@octokit/rest/-/rest-19.0.11.tgz#2ae01634fed4bd1fca5b642767205ed3fd36177c"
-  integrity sha512-m2a9VhaP5/tUw8FwfnW2ICXlXpLPIqxtg3XcAiGMLj/Xhw3RSBfZ8le/466ktO1Gcjr8oXudGnHhxV1TXJgFxw==
-  dependencies:
-    "@octokit/core" "^4.2.1"
-    "@octokit/plugin-paginate-rest" "^6.1.2"
-    "@octokit/plugin-request-log" "^1.0.4"
-    "@octokit/plugin-rest-endpoint-methods" "^7.1.2"
-
-"@octokit/tsconfig@^1.0.2":
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/@octokit/tsconfig/-/tsconfig-1.0.2.tgz#59b024d6f3c0ed82f00d08ead5b3750469125af7"
-  integrity sha512-I0vDR0rdtP8p2lGMzvsJzbhdOWy405HcGovrspJ8RRibHnyRgggUSNO5AIox5LmqiwmatHKYsvj6VGFHkqS7lA==
-
-"@octokit/types@^10.0.0":
-  version "10.0.0"
-  resolved "https://registry.yarnpkg.com/@octokit/types/-/types-10.0.0.tgz#7ee19c464ea4ada306c43f1a45d444000f419a4a"
-  integrity sha512-Vm8IddVmhCgU1fxC1eyinpwqzXPEYu0NrYzD3YZjlGjyftdLBTeqNblRC0jmJmgxbJIsQlyogVeGnrNaaMVzIg==
-  dependencies:
-    "@octokit/openapi-types" "^18.0.0"
-
-"@octokit/types@^9.0.0", "@octokit/types@^9.2.3":
-  version "9.3.2"
-  resolved "https://registry.yarnpkg.com/@octokit/types/-/types-9.3.2.tgz#3f5f89903b69f6a2d196d78ec35f888c0013cac5"
-  integrity sha512-D4iHGTdAnEEVsB8fl95m1hiz7D5YiRdQ9b/OEb3BYRVwbLsGHcRVPz+u+BgRLNk0Q0/4iZCBqDN96j2XNxfXrA==
-  dependencies:
-    "@octokit/openapi-types" "^18.0.0"
-
-"@pnpm/config.env-replace@^1.1.0":
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/@pnpm/config.env-replace/-/config.env-replace-1.1.0.tgz#ab29da53df41e8948a00f2433f085f54de8b3a4c"
-  integrity sha512-htyl8TWnKL7K/ESFa1oW2UB5lVDxuF5DpM7tBi6Hu2LNL3mWkIzNLG6N4zoCUP1lCKNxWy/3iu8mS8MvToGd6w==
-
-"@pnpm/network.ca-file@^1.0.1":
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/@pnpm/network.ca-file/-/network.ca-file-1.0.2.tgz#2ab05e09c1af0cdf2fcf5035bea1484e222f7983"
-  integrity sha512-YcPQ8a0jwYU9bTdJDpXjMi7Brhkr1mXsXrUJvjqM2mQDgkRiz8jFaQGOdaLxgjtUfQgZhKy/O3cG/YwmgKaxLA==
-  dependencies:
-    graceful-fs "4.2.10"
-
-"@pnpm/npm-conf@^2.1.0":
-  version "2.2.2"
-  resolved "https://registry.yarnpkg.com/@pnpm/npm-conf/-/npm-conf-2.2.2.tgz#0058baf1c26cbb63a828f0193795401684ac86f0"
-  integrity sha512-UA91GwWPhFExt3IizW6bOeY/pQ0BkuNwKjk9iQW9KqxluGCrg4VenZ0/L+2Y0+ZOtme72EVvg6v0zo3AMQRCeA==
-  dependencies:
-    "@pnpm/config.env-replace" "^1.1.0"
-    "@pnpm/network.ca-file" "^1.0.1"
-    config-chain "^1.1.11"
-
-"@protobufjs/aspromise@^1.1.1", "@protobufjs/aspromise@^1.1.2":
-  version "1.1.2"
-  resolved "https://registry.yarnpkg.com/@protobufjs/aspromise/-/aspromise-1.1.2.tgz#9b8b0cc663d669a7d8f6f5d0893a14d348f30fbf"
-  integrity sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==
-
-"@protobufjs/base64@^1.1.2":
-  version "1.1.2"
-  resolved "https://registry.yarnpkg.com/@protobufjs/base64/-/base64-1.1.2.tgz#4c85730e59b9a1f1f349047dbf24296034bb2735"
-  integrity sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==
-
-"@protobufjs/codegen@^2.0.4":
-  version "2.0.4"
-  resolved "https://registry.yarnpkg.com/@protobufjs/codegen/-/codegen-2.0.4.tgz#7ef37f0d010fb028ad1ad59722e506d9262815cb"
-  integrity sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==
-
-"@protobufjs/eventemitter@^1.1.0":
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz#355cbc98bafad5978f9ed095f397621f1d066b70"
-  integrity sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==
-
-"@protobufjs/fetch@^1.1.0":
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/@protobufjs/fetch/-/fetch-1.1.0.tgz#ba99fb598614af65700c1619ff06d454b0d84c45"
-  integrity sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==
-  dependencies:
-    "@protobufjs/aspromise" "^1.1.1"
-    "@protobufjs/inquire" "^1.1.0"
-
-"@protobufjs/float@^1.0.2":
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/@protobufjs/float/-/float-1.0.2.tgz#5e9e1abdcb73fc0a7cb8b291df78c8cbd97b87d1"
-  integrity sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==
-
-"@protobufjs/inquire@^1.1.0":
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/@protobufjs/inquire/-/inquire-1.1.0.tgz#ff200e3e7cf2429e2dcafc1140828e8cc638f089"
-  integrity sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==
-
-"@protobufjs/path@^1.1.2":
-  version "1.1.2"
-  resolved "https://registry.yarnpkg.com/@protobufjs/path/-/path-1.1.2.tgz#6cc2b20c5c9ad6ad0dccfd21ca7673d8d7fbf68d"
-  integrity sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==
-
-"@protobufjs/pool@^1.1.0":
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/@protobufjs/pool/-/pool-1.1.0.tgz#09fd15f2d6d3abfa9b65bc366506d6ad7846ff54"
-  integrity sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==
-
-"@protobufjs/utf8@^1.1.0":
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/@protobufjs/utf8/-/utf8-1.1.0.tgz#a777360b5b39a1a2e5106f8e858f2fd2d060c570"
-  integrity sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==
-
-"@sindresorhus/is@^5.2.0":
-  version "5.6.0"
-  resolved "https://registry.yarnpkg.com/@sindresorhus/is/-/is-5.6.0.tgz#41dd6093d34652cddb5d5bdeee04eafc33826668"
-  integrity sha512-TV7t8GKYaJWsn00tFDqBw8+Uqmr8A0fRU1tvTQhyZzGv0sJCGRQL3JGMI3ucuKo3XIZdUP+Lx7/gh2t3lewy7g==
-
-"@sinonjs/commons@^1.7.0":
-  version "1.8.6"
-  resolved "https://registry.yarnpkg.com/@sinonjs/commons/-/commons-1.8.6.tgz#80c516a4dc264c2a69115e7578d62581ff455ed9"
-  integrity sha512-Ky+XkAkqPZSm3NLBeUng77EBQl3cmeJhITaGHdYH8kjVB+aun3S4XBRti2zt17mtt0mIUDiNxYeoJm6drVvBJQ==
-  dependencies:
-    type-detect "4.0.8"
-
-"@sinonjs/fake-timers@^8.0.1":
-  version "8.1.0"
-  resolved "https://registry.yarnpkg.com/@sinonjs/fake-timers/-/fake-timers-8.1.0.tgz#3fdc2b6cb58935b21bfb8d1625eb1300484316e7"
-  integrity sha512-OAPJUAtgeINhh/TAlUID4QTs53Njm7xzddaVlEs/SXwgtiD1tW22zAB/W1wdqfrpmikgaWQ9Fw6Ws+hsiRm5Vg==
-  dependencies:
-    "@sinonjs/commons" "^1.7.0"
-
-"@szmarczak/http-timer@^5.0.1":
-  version "5.0.1"
-  resolved "https://registry.yarnpkg.com/@szmarczak/http-timer/-/http-timer-5.0.1.tgz#c7c1bf1141cdd4751b0399c8fc7b8b664cd5be3a"
-  integrity sha512-+PmQX0PiAYPMeVYe237LJAYvOMYW1j2rH5YROyS3b4CTVJum34HfRvKvAzozHAQG0TnHNdUfY9nCeUyRAs//cw==
-  dependencies:
-    defer-to-connect "^2.0.1"
-
-"@thi.ng/bitstream@^2.2.12":
-  version "2.2.28"
-  resolved "https://registry.yarnpkg.com/@thi.ng/bitstream/-/bitstream-2.2.28.tgz#e1fbc4347ef5d216ede73192268d50a226ea89d2"
-  integrity sha512-aW7cSEaf680nfCIW42C/Hur12Toy8ST3XLRM8OxHXHZySq9cPrJ5stm+uilHlp+L00yBvgAoKk6ZWkDQ8mtYbA==
-  dependencies:
-    "@thi.ng/errors" "^2.3.5"
-
-"@thi.ng/errors@^2.3.5":
-  version "2.3.5"
-  resolved "https://registry.yarnpkg.com/@thi.ng/errors/-/errors-2.3.5.tgz#a81155940150b4660e646ec9accb54c9e5768392"
-  integrity sha512-WH2p02goxTCF11p8H/4VIl8RmPZ7rJ00ogFOrQX7mO3zxi1/vTqygR7sVuJszlx5a5eOrMglNivyqNZwr912cg==
-
-"@tokenizer/token@^0.3.0":
-  version "0.3.0"
-  resolved "https://registry.yarnpkg.com/@tokenizer/token/-/token-0.3.0.tgz#fe98a93fe789247e998c75e74e9c7c63217aa276"
-  integrity sha512-OvjF+z51L3ov0OyAU0duzsYuvO01PH7x4t6DJx+guahgTnBHkhJdG7soQeTSFLWN3efnHyibZ4Z8l2EuWwJN3A==
-
-"@tootallnate/once@1":
-  version "1.1.2"
-  resolved "https://registry.yarnpkg.com/@tootallnate/once/-/once-1.1.2.tgz#ccb91445360179a04e7fe6aff78c00ffc1eeaf82"
-  integrity sha512-RbzJvlNzmRq5c3O09UipeuXno4tA1FE6ikOjxZK0tuxVv3412l64l5t1W5pj4+rJq9vpkm/kwiR07aZXnsKPxw==
-
-"@tsconfig/node10@^1.0.7":
-  version "1.0.9"
-  resolved "https://registry.yarnpkg.com/@tsconfig/node10/-/node10-1.0.9.tgz#df4907fc07a886922637b15e02d4cebc4c0021b2"
-  integrity sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA==
-
-"@tsconfig/node12@^1.0.7":
-  version "1.0.11"
-  resolved "https://registry.yarnpkg.com/@tsconfig/node12/-/node12-1.0.11.tgz#ee3def1f27d9ed66dac6e46a295cffb0152e058d"
-  integrity sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==
-
-"@tsconfig/node14@^1.0.0":
-  version "1.0.3"
-  resolved "https://registry.yarnpkg.com/@tsconfig/node14/-/node14-1.0.3.tgz#e4386316284f00b98435bf40f72f75a09dabf6c1"
-  integrity sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==
-
-"@tsconfig/node16@^1.0.2":
-  version "1.0.4"
-  resolved "https://registry.yarnpkg.com/@tsconfig/node16/-/node16-1.0.4.tgz#0b92dcc0cc1c81f6f306a381f28e31b1a56536e9"
-  integrity sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==
-
-"@types/babel__core@^7.0.0", "@types/babel__core@^7.1.14":
-  version "7.20.1"
-  resolved "https://registry.yarnpkg.com/@types/babel__core/-/babel__core-7.20.1.tgz#916ecea274b0c776fec721e333e55762d3a9614b"
-  integrity sha512-aACu/U/omhdk15O4Nfb+fHgH/z3QsfQzpnvRZhYhThms83ZnAOZz7zZAWO7mn2yyNQaA4xTO8GLK3uqFU4bYYw==
-  dependencies:
-    "@babel/parser" "^7.20.7"
-    "@babel/types" "^7.20.7"
-    "@types/babel__generator" "*"
-    "@types/babel__template" "*"
-    "@types/babel__traverse" "*"
-
-"@types/babel__generator@*":
-  version "7.6.4"
-  resolved "https://registry.yarnpkg.com/@types/babel__generator/-/babel__generator-7.6.4.tgz#1f20ce4c5b1990b37900b63f050182d28c2439b7"
-  integrity sha512-tFkciB9j2K755yrTALxD44McOrk+gfpIpvC3sxHjRawj6PfnQxrse4Clq5y/Rq+G3mrBurMax/lG8Qn2t9mSsg==
-  dependencies:
-    "@babel/types" "^7.0.0"
-
-"@types/babel__template@*":
-  version "7.4.1"
-  resolved "https://registry.yarnpkg.com/@types/babel__template/-/babel__template-7.4.1.tgz#3d1a48fd9d6c0edfd56f2ff578daed48f36c8969"
-  integrity sha512-azBFKemX6kMg5Io+/rdGT0dkGreboUVR0Cdm3fz9QJWpaQGJRQXl7C+6hOTCZcMll7KFyEQpgbYI2lHdsS4U7g==
-  dependencies:
-    "@babel/parser" "^7.1.0"
-    "@babel/types" "^7.0.0"
-
-"@types/babel__traverse@*", "@types/babel__traverse@^7.0.4", "@types/babel__traverse@^7.0.6":
-  version "7.20.1"
-  resolved "https://registry.yarnpkg.com/@types/babel__traverse/-/babel__traverse-7.20.1.tgz#dd6f1d2411ae677dcb2db008c962598be31d6acf"
-  integrity sha512-MitHFXnhtgwsGZWtT68URpOvLN4EREih1u3QtQiN4VdAxWKRVvGCSvw/Qth0M0Qq3pJpnGOu5JaM/ydK7OGbqg==
-  dependencies:
-    "@babel/types" "^7.20.7"
-
-"@types/got@^9.6.11":
-  version "9.6.12"
-  resolved "https://registry.yarnpkg.com/@types/got/-/got-9.6.12.tgz#fd42a6e1f5f64cd6bb422279b08c30bb5a15a56f"
-  integrity sha512-X4pj/HGHbXVLqTpKjA2ahI4rV/nNBc9mGO2I/0CgAra+F2dKgMXnENv2SRpemScBzBAI4vMelIVYViQxlSE6xA==
-  dependencies:
-    "@types/node" "*"
-    "@types/tough-cookie" "*"
-    form-data "^2.5.0"
-
-"@types/graceful-fs@^4.1.2":
-  version "4.1.6"
-  resolved "https://registry.yarnpkg.com/@types/graceful-fs/-/graceful-fs-4.1.6.tgz#e14b2576a1c25026b7f02ede1de3b84c3a1efeae"
-  integrity sha512-Sig0SNORX9fdW+bQuTEovKj3uHcUL6LQKbCrrqb1X7J6/ReAbhCXRAhc+SMejhLELFj2QcyuxmUooZ4bt5ReSw==
-  dependencies:
-    "@types/node" "*"
-
-"@types/http-cache-semantics@^4.0.1":
-  version "4.0.1"
-  resolved "https://registry.yarnpkg.com/@types/http-cache-semantics/-/http-cache-semantics-4.0.1.tgz#0ea7b61496902b95890dc4c3a116b60cb8dae812"
-  integrity sha512-SZs7ekbP8CN0txVG2xVRH6EgKmEm31BOxA07vkFaETzZz1xh+cbt8BcI0slpymvwhx5dlFnQG2rTlPVQn+iRPQ==
-
-"@types/istanbul-lib-coverage@*", "@types/istanbul-lib-coverage@^2.0.0", "@types/istanbul-lib-coverage@^2.0.1":
-  version "2.0.4"
-  resolved "https://registry.yarnpkg.com/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.4.tgz#8467d4b3c087805d63580480890791277ce35c44"
-  integrity sha512-z/QT1XN4K4KYuslS23k62yDIDLwLFkzxOuMplDtObz0+y7VqJCaO2o+SPwHCvLFZh7xazvvoor2tA/hPz9ee7g==
-
-"@types/istanbul-lib-report@*":
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.0.tgz#c14c24f18ea8190c118ee7562b7ff99a36552686"
-  integrity sha512-plGgXAPfVKFoYfa9NpYDAkseG+g6Jr294RqeqcqDixSbU34MZVJRi/P+7Y8GDpzkEwLaGZZOpKIEmeVZNtKsrg==
-  dependencies:
-    "@types/istanbul-lib-coverage" "*"
-
-"@types/istanbul-reports@^3.0.0":
-  version "3.0.1"
-  resolved "https://registry.yarnpkg.com/@types/istanbul-reports/-/istanbul-reports-3.0.1.tgz#9153fe98bba2bd565a63add9436d6f0d7f8468ff"
-  integrity sha512-c3mAZEuK0lvBp8tmuL74XRKn1+y2dcwOUpH7x4WrF6gk1GIgiluDRgMYQtw2OFcBvAJWlt6ASU3tSqxp0Uu0Aw==
-  dependencies:
-    "@types/istanbul-lib-report" "*"
-
-"@types/jest@^27.5.1":
-  version "27.5.2"
-  resolved "https://registry.yarnpkg.com/@types/jest/-/jest-27.5.2.tgz#ec49d29d926500ffb9fd22b84262e862049c026c"
-  integrity sha512-mpT8LJJ4CMeeahobofYWIjFo0xonRS/HfxnVEPMPFSQdGUt1uHCnoPT7Zhb+sjDU2wz0oKV0OLUR0WzrHNgfeA==
-  dependencies:
-    jest-matcher-utils "^27.0.0"
-    pretty-format "^27.0.0"
-
-"@types/json-schema@^7.0.9":
-  version "7.0.12"
-  resolved "https://registry.yarnpkg.com/@types/json-schema/-/json-schema-7.0.12.tgz#d70faba7039d5fca54c83c7dbab41051d2b6f6cb"
-  integrity sha512-Hr5Jfhc9eYOQNPYO5WLDq/n4jqijdHNlDXjuAQkkt+mWdQR+XJToOHrsD4cPaMXpn6KO7y2+wM8AZEs8VpBLVA==
-
-"@types/long@^4.0.0":
-  version "4.0.2"
-  resolved "https://registry.yarnpkg.com/@types/long/-/long-4.0.2.tgz#b74129719fc8d11c01868010082d483b7545591a"
-  integrity sha512-MqTGEo5bj5t157U6fA/BiDynNkn0YknVdh48CMPkTSpFTVmvao5UQmm7uEF6xBEo7qIMAlY/JSleYaE6VOdpaA==
-
-"@types/minimist@^1.2.0":
-  version "1.2.2"
-  resolved "https://registry.yarnpkg.com/@types/minimist/-/minimist-1.2.2.tgz#ee771e2ba4b3dc5b372935d549fd9617bf345b8c"
-  integrity sha512-jhuKLIRrhvCPLqwPcx6INqmKeiA5EWrsCOPhrlFSrbrmU4ZMPjj5Ul/oLCMDO98XRUIwVm78xICz4EPCektzeQ==
-
-"@types/node@*", "@types/node@>=13.7.0":
-  version "20.5.6"
-  resolved "https://registry.yarnpkg.com/@types/node/-/node-20.5.6.tgz#5e9aaa86be03a09decafd61b128d6cec64a5fe40"
-  integrity sha512-Gi5wRGPbbyOTX+4Y2iULQ27oUPrefaB0PxGQJnfyWN3kvEDGM3mIB5M/gQLmitZf7A9FmLeaqxD3L1CXpm3VKQ==
-
-"@types/node@16.9.1":
-  version "16.9.1"
-  resolved "https://registry.yarnpkg.com/@types/node/-/node-16.9.1.tgz#0611b37db4246c937feef529ddcc018cf8e35708"
-  integrity sha512-QpLcX9ZSsq3YYUUnD3nFDY8H7wctAhQj/TFKL8Ya8v5fMm3CFXxo8zStsLAl780ltoYoo1WvKUVGBQK+1ifr7g==
-
-"@types/node@^10.1.0":
-  version "10.17.60"
-  resolved "https://registry.yarnpkg.com/@types/node/-/node-10.17.60.tgz#35f3d6213daed95da7f0f73e75bcc6980e90597b"
-  integrity sha512-F0KIgDJfy2nA3zMLmWGKxcH2ZVEtCZXHHdOQs2gSaQ27+lNeEfGxzkIw90aXswATX7AZ33tahPbzy6KAfUreVw==
-
-"@types/node@^16.0.0":
-  version "16.18.46"
-  resolved "https://registry.yarnpkg.com/@types/node/-/node-16.18.46.tgz#9f2102d0ba74a318fcbe170cbff5463f119eab59"
-  integrity sha512-Mnq3O9Xz52exs3mlxMcQuA7/9VFe/dXcrgAyfjLkABIqxXKOgBRjyazTxUbjsxDa4BP7hhPliyjVTP9RDP14xg==
-
-"@types/normalize-package-data@^2.4.0":
-  version "2.4.1"
-  resolved "https://registry.yarnpkg.com/@types/normalize-package-data/-/normalize-package-data-2.4.1.tgz#d3357479a0fdfdd5907fe67e17e0a85c906e1301"
-  integrity sha512-Gj7cI7z+98M282Tqmp2K5EIsoouUEzbBJhQQzDE3jSIRk6r9gsz0oUokqIUR4u1R3dMHo0pDHM7sNOHyhulypw==
-
-"@types/prettier@^2.1.5":
-  version "2.7.3"
-  resolved "https://registry.yarnpkg.com/@types/prettier/-/prettier-2.7.3.tgz#3e51a17e291d01d17d3fc61422015a933af7a08f"
-  integrity sha512-+68kP9yzs4LMp7VNh8gdzMSPZFL44MLGqiHWvttYJe+6qnuVr4Ek9wSBQoveqY/r+LwjCcU29kNVkidwim+kYA==
-
-"@types/semver@^7.3.12":
-  version "7.5.0"
-  resolved "https://registry.yarnpkg.com/@types/semver/-/semver-7.5.0.tgz#591c1ce3a702c45ee15f47a42ade72c2fd78978a"
-  integrity sha512-G8hZ6XJiHnuhQKR7ZmysCeJWE08o8T0AXtk5darsCaTVsYZhhgUrq53jizaR2FvsoeCwJhlmwTjkXBY5Pn/ZHw==
-
-"@types/sharp@^0.29.4":
-  version "0.29.5"
-  resolved "https://registry.yarnpkg.com/@types/sharp/-/sharp-0.29.5.tgz#9c7032d30d138ad16dde6326beaff2af757b91b3"
-  integrity sha512-3TC+S3H5RwnJmLYMHrcdfNjz/CaApKmujjY9b6PU/pE6n0qfooi99YqXGWoW8frU9EWYj/XTI35Pzxa+ThAZ5Q==
-  dependencies:
-    "@types/node" "*"
-
-"@types/stack-utils@^2.0.0":
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/@types/stack-utils/-/stack-utils-2.0.1.tgz#20f18294f797f2209b5f65c8e3b5c8e8261d127c"
-  integrity sha512-Hl219/BT5fLAaz6NDkSuhzasy49dwQS/DSdu4MdggFB8zcXv7vflBI3xp7FEmkmdDkBUI2bPUNeMttp2knYdxw==
-
-"@types/tough-cookie@*":
-  version "4.0.2"
-  resolved "https://registry.yarnpkg.com/@types/tough-cookie/-/tough-cookie-4.0.2.tgz#6286b4c7228d58ab7866d19716f3696e03a09397"
-  integrity sha512-Q5vtl1W5ue16D+nIaW8JWebSSraJVlK+EthKn7e7UcD4KWsaSJ8BqGPXNaPghgtcn/fhvrN17Tv8ksUsQpiplw==
-
-"@types/ws@^8.0.0":
-  version "8.5.5"
-  resolved "https://registry.yarnpkg.com/@types/ws/-/ws-8.5.5.tgz#af587964aa06682702ee6dcbc7be41a80e4b28eb"
-  integrity sha512-lwhs8hktwxSjf9UaZ9tG5M03PGogvFaH8gUgLNbN9HKIg0dvv6q+gkSuJ8HN4/VbyxkuLzCjlN7GquQ0gUJfIg==
-  dependencies:
-    "@types/node" "*"
-
-"@types/yargs-parser@*":
-  version "21.0.0"
-  resolved "https://registry.yarnpkg.com/@types/yargs-parser/-/yargs-parser-21.0.0.tgz#0c60e537fa790f5f9472ed2776c2b71ec117351b"
-  integrity sha512-iO9ZQHkZxHn4mSakYV0vFHAVDyEOIJQrV2uZ06HxEPcx+mt8swXoZHIbaaJ2crJYFfErySgktuTZ3BeLz+XmFA==
-
-"@types/yargs@^16.0.0":
-  version "16.0.5"
-  resolved "https://registry.yarnpkg.com/@types/yargs/-/yargs-16.0.5.tgz#12cc86393985735a283e387936398c2f9e5f88e3"
-  integrity sha512-AxO/ADJOBFJScHbWhq2xAhlWP24rY4aCEG/NFaMvbT3X2MgRsLjhjQwsn0Zi5zn0LG9jUhCCZMeX9Dkuw6k+vQ==
-  dependencies:
-    "@types/yargs-parser" "*"
-
-"@typescript-eslint/eslint-plugin@^5.33.1":
-  version "5.62.0"
-  resolved "https://registry.yarnpkg.com/@typescript-eslint/eslint-plugin/-/eslint-plugin-5.62.0.tgz#aeef0328d172b9e37d9bab6dbc13b87ed88977db"
-  integrity sha512-TiZzBSJja/LbhNPvk6yc0JrX9XqhQ0hdh6M2svYfsHGejaKFIAGd9MQ+ERIMzLGlN/kZoYIgdxFV0PuljTKXag==
-  dependencies:
-    "@eslint-community/regexpp" "^4.4.0"
-    "@typescript-eslint/scope-manager" "5.62.0"
-    "@typescript-eslint/type-utils" "5.62.0"
-    "@typescript-eslint/utils" "5.62.0"
-    debug "^4.3.4"
-    graphemer "^1.4.0"
-    ignore "^5.2.0"
-    natural-compare-lite "^1.4.0"
-    semver "^7.3.7"
-    tsutils "^3.21.0"
-
-"@typescript-eslint/parser@^5.59.0":
-  version "5.62.0"
-  resolved "https://registry.yarnpkg.com/@typescript-eslint/parser/-/parser-5.62.0.tgz#1b63d082d849a2fcae8a569248fbe2ee1b8a56c7"
-  integrity sha512-VlJEV0fOQ7BExOsHYAGrgbEiZoi8D+Bl2+f6V2RrXerRSylnp+ZBHmPvaIa8cz0Ajx7WO7Z5RqfgYg7ED1nRhA==
-  dependencies:
-    "@typescript-eslint/scope-manager" "5.62.0"
-    "@typescript-eslint/types" "5.62.0"
-    "@typescript-eslint/typescript-estree" "5.62.0"
-    debug "^4.3.4"
-
-"@typescript-eslint/scope-manager@5.62.0":
-  version "5.62.0"
-  resolved "https://registry.yarnpkg.com/@typescript-eslint/scope-manager/-/scope-manager-5.62.0.tgz#d9457ccc6a0b8d6b37d0eb252a23022478c5460c"
-  integrity sha512-VXuvVvZeQCQb5Zgf4HAxc04q5j+WrNAtNh9OwCsCgpKqESMTu3tF/jhZ3xG6T4NZwWl65Bg8KuS2uEvhSfLl0w==
-  dependencies:
-    "@typescript-eslint/types" "5.62.0"
-    "@typescript-eslint/visitor-keys" "5.62.0"
-
-"@typescript-eslint/type-utils@5.62.0":
-  version "5.62.0"
-  resolved "https://registry.yarnpkg.com/@typescript-eslint/type-utils/-/type-utils-5.62.0.tgz#286f0389c41681376cdad96b309cedd17d70346a"
-  integrity sha512-xsSQreu+VnfbqQpW5vnCJdq1Z3Q0U31qiWmRhr98ONQmcp/yhiPJFPq8MXiJVLiksmOKSjIldZzkebzHuCGzew==
-  dependencies:
-    "@typescript-eslint/typescript-estree" "5.62.0"
-    "@typescript-eslint/utils" "5.62.0"
-    debug "^4.3.4"
-    tsutils "^3.21.0"
-
-"@typescript-eslint/types@5.62.0":
-  version "5.62.0"
-  resolved "https://registry.yarnpkg.com/@typescript-eslint/types/-/types-5.62.0.tgz#258607e60effa309f067608931c3df6fed41fd2f"
-  integrity sha512-87NVngcbVXUahrRTqIK27gD2t5Cu1yuCXxbLcFtCzZGlfyVWWh8mLHkoxzjsB6DDNnvdL+fW8MiwPEJyGJQDgQ==
-
-"@typescript-eslint/typescript-estree@5.62.0":
-  version "5.62.0"
-  resolved "https://registry.yarnpkg.com/@typescript-eslint/typescript-estree/-/typescript-estree-5.62.0.tgz#7d17794b77fabcac615d6a48fb143330d962eb9b"
-  integrity sha512-CmcQ6uY7b9y694lKdRB8FEel7JbU/40iSAPomu++SjLMntB+2Leay2LO6i8VnJk58MtE9/nQSFIH6jpyRWyYzA==
-  dependencies:
-    "@typescript-eslint/types" "5.62.0"
-    "@typescript-eslint/visitor-keys" "5.62.0"
-    debug "^4.3.4"
-    globby "^11.1.0"
-    is-glob "^4.0.3"
-    semver "^7.3.7"
-    tsutils "^3.21.0"
-
-"@typescript-eslint/utils@5.62.0":
-  version "5.62.0"
-  resolved "https://registry.yarnpkg.com/@typescript-eslint/utils/-/utils-5.62.0.tgz#141e809c71636e4a75daa39faed2fb5f4b10df86"
-  integrity sha512-n8oxjeb5aIbPFEtmQxQYOLI0i9n5ySBEY/ZEHHZqKQSFnxio1rv6dthascc9dLuwrL0RC5mPCxB7vnAVGAYWAQ==
-  dependencies:
-    "@eslint-community/eslint-utils" "^4.2.0"
-    "@types/json-schema" "^7.0.9"
-    "@types/semver" "^7.3.12"
-    "@typescript-eslint/scope-manager" "5.62.0"
-    "@typescript-eslint/types" "5.62.0"
-    "@typescript-eslint/typescript-estree" "5.62.0"
-    eslint-scope "^5.1.1"
-    semver "^7.3.7"
-
-"@typescript-eslint/visitor-keys@5.62.0":
-  version "5.62.0"
-  resolved "https://registry.yarnpkg.com/@typescript-eslint/visitor-keys/-/visitor-keys-5.62.0.tgz#2174011917ce582875954ffe2f6912d5931e353e"
-  integrity sha512-07ny+LHRzQXepkGg6w0mFY41fVUNBrL2Roj/++7V1txKugfjm/Ci/qSND03r2RhlJhJYMcTn9AhhSSqQp0Ysyw==
-  dependencies:
-    "@typescript-eslint/types" "5.62.0"
-    eslint-visitor-keys "^3.3.0"
-
-"@wasm-audio-decoders/common@9.0.1":
-  version "9.0.1"
-  resolved "https://registry.yarnpkg.com/@wasm-audio-decoders/common/-/common-9.0.1.tgz#985f35d7f216da1b0f691132c3875793cc516022"
-  integrity sha512-s4KxPsxhD6e+EtjmHPzTmKJSJTEXHGYlBzUGGLN/plV01x3RecybW73nIMtdLLXL8k/zQ8HYFcA6d9lqCJcDjQ==
-  dependencies:
-    "@eshaz/web-worker" "1.2.1"
-
-"@wasm-audio-decoders/flac@^0.1.12":
-  version "0.1.13"
-  resolved "https://registry.yarnpkg.com/@wasm-audio-decoders/flac/-/flac-0.1.13.tgz#7fffe674ffccba6adf0bd6ce29ab0c7e58c034d4"
-  integrity sha512-Ah0hurb+qO3kBjuBrmOSIDqe8DWkd/g5feoyd8jjoM46l//OmVrsG9lW0rnDJAKMhyMeRuWwCy/kv/SswzrW8Q==
-  dependencies:
-    "@wasm-audio-decoders/common" "9.0.1"
-    codec-parser "2.4.3"
-
-"@wasm-audio-decoders/ogg-vorbis@^0.1.7":
-  version "0.1.8"
-  resolved "https://registry.yarnpkg.com/@wasm-audio-decoders/ogg-vorbis/-/ogg-vorbis-0.1.8.tgz#031adbb47afba13eec3828512b365b901f4063e0"
-  integrity sha512-YwPSxN1xqGrVpON0OvUHwBnboKMA0P7n08j2K2SgZr5MI6ODWp2viW66XLL+gpNZBqRJhw+RdnyTUkZiZ70JOA==
-  dependencies:
-    "@wasm-audio-decoders/common" "9.0.1"
-    codec-parser "2.4.3"
-
-JSONStream@^1.0.4:
-  version "1.3.5"
-  resolved "https://registry.yarnpkg.com/JSONStream/-/JSONStream-1.3.5.tgz#3208c1f08d3a4d99261ab64f92302bc15e111ca0"
-  integrity sha512-E+iruNOY8VV9s4JEbe1aNEm6MiszPRr/UfcHMz0TQh1BXSxHK+ASV1R6W4HpjBhSeS+54PIsAMCBmwD06LLsqQ==
-  dependencies:
-    jsonparse "^1.2.0"
-    through ">=2.2.7 <3"
-
-abab@^2.0.3, abab@^2.0.5:
-  version "2.0.6"
-  resolved "https://registry.yarnpkg.com/abab/-/abab-2.0.6.tgz#41b80f2c871d19686216b82309231cfd3cb3d291"
-  integrity sha512-j2afSsaIENvHZN2B8GOpF566vZ5WVk5opAiMTvWgaQT8DkbOqsTfvNAvHoRGU2zzP8cPoqys+xHTRDWW8L+/BA==
-
-abort-controller@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/abort-controller/-/abort-controller-3.0.0.tgz#eaf54d53b62bae4138e809ca225c8439a6efb392"
-  integrity sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==
-  dependencies:
-    event-target-shim "^5.0.0"
-
-acorn-globals@^6.0.0:
-  version "6.0.0"
-  resolved "https://registry.yarnpkg.com/acorn-globals/-/acorn-globals-6.0.0.tgz#46cdd39f0f8ff08a876619b55f5ac8a6dc770b45"
-  integrity sha512-ZQl7LOWaF5ePqqcX4hLuv/bLXYQNfNWw2c0/yX/TsPRKamzHcTGQnlCjHT3TsmkOUVEPS3crCxiPfdzE/Trlhg==
-  dependencies:
-    acorn "^7.1.1"
-    acorn-walk "^7.1.1"
-
-acorn-jsx@^5.3.2:
-  version "5.3.2"
-  resolved "https://registry.yarnpkg.com/acorn-jsx/-/acorn-jsx-5.3.2.tgz#7ed5bb55908b3b2f1bc55c6af1653bada7f07937"
-  integrity sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==
-
-acorn-walk@^7.1.1:
-  version "7.2.0"
-  resolved "https://registry.yarnpkg.com/acorn-walk/-/acorn-walk-7.2.0.tgz#0de889a601203909b0fbe07b8938dc21d2e967bc"
-  integrity sha512-OPdCF6GsMIP+Az+aWfAAOEt2/+iVDKE7oy6lJ098aoe59oAmK76qV6Gw60SbZ8jHuG2wH058GF4pLFbYamYrVA==
-
-acorn-walk@^8.1.1, acorn-walk@^8.2.0:
-  version "8.2.0"
-  resolved "https://registry.yarnpkg.com/acorn-walk/-/acorn-walk-8.2.0.tgz#741210f2e2426454508853a2f44d0ab83b7f69c1"
-  integrity sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==
-
-acorn@^7.1.1:
-  version "7.4.1"
-  resolved "https://registry.yarnpkg.com/acorn/-/acorn-7.4.1.tgz#feaed255973d2e77555b83dbc08851a6c63520fa"
-  integrity sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==
-
-acorn@^8.2.4, acorn@^8.4.1, acorn@^8.7.0, acorn@^8.9.0:
-  version "8.10.0"
-  resolved "https://registry.yarnpkg.com/acorn/-/acorn-8.10.0.tgz#8be5b3907a67221a81ab23c7889c4c5526b62ec5"
-  integrity sha512-F0SAmZ8iUtS//m8DmCTA0jlh6TDKkHQyK6xc6V4KDTyZKA9dnvX9/3sRTVQrWm79glUAZbnmmNcdYwUIHWVybw==
-
-add-stream@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/add-stream/-/add-stream-1.0.0.tgz#6a7990437ca736d5e1288db92bd3266d5f5cb2aa"
-  integrity sha512-qQLMr+8o0WC4FZGQTcJiKBVC59JylcPSrTtk6usvmIDFUOCKegapy1VHQwRbFMOFyb/inzUVqHs+eMYKDM1YeQ==
-
-agent-base@6:
-  version "6.0.2"
-  resolved "https://registry.yarnpkg.com/agent-base/-/agent-base-6.0.2.tgz#49fff58577cfee3f37176feab4c22e00f86d7f77"
-  integrity sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==
-  dependencies:
-    debug "4"
-
-agent-base@^7.0.1, agent-base@^7.0.2, agent-base@^7.1.0:
-  version "7.1.0"
-  resolved "https://registry.yarnpkg.com/agent-base/-/agent-base-7.1.0.tgz#536802b76bc0b34aa50195eb2442276d613e3434"
-  integrity sha512-o/zjMZRhJxny7OyEF+Op8X+efiELC7k7yOjMzgfzVqOzXqkBkWI79YoTdOtsuWd5BWhAGAuOY/Xa6xpiaWXiNg==
-  dependencies:
-    debug "^4.3.4"
-
-ajv@^6.12.4:
-  version "6.12.6"
-  resolved "https://registry.yarnpkg.com/ajv/-/ajv-6.12.6.tgz#baf5a62e802b07d977034586f8c3baf5adf26df4"
-  integrity sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==
-  dependencies:
-    fast-deep-equal "^3.1.1"
-    fast-json-stable-stringify "^2.0.0"
-    json-schema-traverse "^0.4.1"
-    uri-js "^4.2.2"
-
-ansi-align@^3.0.1:
-  version "3.0.1"
-  resolved "https://registry.yarnpkg.com/ansi-align/-/ansi-align-3.0.1.tgz#0cdf12e111ace773a86e9a1fad1225c43cb19a59"
-  integrity sha512-IOfwwBF5iczOjp/WeY4YxyjqAFMQoZufdQWDd19SEExbVLNXqvpzSJ/M7Za4/sCPmQ0+GRquoA7bGcINcxew6w==
-  dependencies:
-    string-width "^4.1.0"
-
-ansi-escapes@^4.2.1, ansi-escapes@^4.3.2:
-  version "4.3.2"
-  resolved "https://registry.yarnpkg.com/ansi-escapes/-/ansi-escapes-4.3.2.tgz#6b2291d1db7d98b6521d5f1efa42d0f3a9feb65e"
-  integrity sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==
-  dependencies:
-    type-fest "^0.21.3"
-
-ansi-regex@^5.0.1:
-  version "5.0.1"
-  resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-5.0.1.tgz#082cb2c89c9fe8659a311a53bd6a4dc5301db304"
-  integrity sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==
-
-ansi-regex@^6.0.1:
-  version "6.0.1"
-  resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-6.0.1.tgz#3183e38fae9a65d7cb5e53945cd5897d0260a06a"
-  integrity sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==
-
-ansi-sequence-parser@^1.1.0:
-  version "1.1.1"
-  resolved "https://registry.yarnpkg.com/ansi-sequence-parser/-/ansi-sequence-parser-1.1.1.tgz#e0aa1cdcbc8f8bb0b5bca625aac41f5f056973cf"
-  integrity sha512-vJXt3yiaUL4UU546s3rPXlsry/RnM730G1+HkpKE012AN0sx1eOrxSu95oKDIonskeLTijMgqWZ3uDEe3NFvyg==
-
-ansi-styles@^3.2.1:
-  version "3.2.1"
-  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-3.2.1.tgz#41fbb20243e50b12be0f04b8dedbf07520ce841d"
-  integrity sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==
-  dependencies:
-    color-convert "^1.9.0"
-
-ansi-styles@^4.0.0, ansi-styles@^4.1.0:
-  version "4.3.0"
-  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-4.3.0.tgz#edd803628ae71c04c85ae7a0906edad34b648937"
-  integrity sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==
-  dependencies:
-    color-convert "^2.0.1"
-
-ansi-styles@^5.0.0:
-  version "5.2.0"
-  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-5.2.0.tgz#07449690ad45777d1924ac2abb2fc8895dba836b"
-  integrity sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==
-
-ansi-styles@^6.1.0:
-  version "6.2.1"
-  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-6.2.1.tgz#0e62320cf99c21afff3b3012192546aacbfb05c5"
-  integrity sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==
-
-any-base@^1.1.0:
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/any-base/-/any-base-1.1.0.tgz#ae101a62bc08a597b4c9ab5b7089d456630549fe"
-  integrity sha512-uMgjozySS8adZZYePpaWs8cxB9/kdzmpX6SgJZ+wbz1K5eYk5QMYDVJaZKhxyIHUdnnJkfR7SVgStgH7LkGUyg==
-
-anymatch@^3.0.3:
-  version "3.1.3"
-  resolved "https://registry.yarnpkg.com/anymatch/-/anymatch-3.1.3.tgz#790c58b19ba1720a84205b57c618d5ad8524973e"
-  integrity sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==
-  dependencies:
-    normalize-path "^3.0.0"
-    picomatch "^2.0.4"
-
-arg@^4.1.0:
-  version "4.1.3"
-  resolved "https://registry.yarnpkg.com/arg/-/arg-4.1.3.tgz#269fc7ad5b8e42cb63c896d5666017261c144089"
-  integrity sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==
-
-argparse@^1.0.7:
-  version "1.0.10"
-  resolved "https://registry.yarnpkg.com/argparse/-/argparse-1.0.10.tgz#bcd6791ea5ae09725e17e5ad988134cd40b3d911"
-  integrity sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==
-  dependencies:
-    sprintf-js "~1.0.2"
-
-argparse@^2.0.1:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/argparse/-/argparse-2.0.1.tgz#246f50f3ca78a3240f6c997e8a9bd1eac49e4b38"
-  integrity sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==
-
-array-buffer-byte-length@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/array-buffer-byte-length/-/array-buffer-byte-length-1.0.0.tgz#fabe8bc193fea865f317fe7807085ee0dee5aead"
-  integrity sha512-LPuwb2P+NrQw3XhxGc36+XSvuBPopovXYTR9Ew++Du9Yb/bx5AzBfrIsBoj0EZUifjQU+sHL21sseZ3jerWO/A==
-  dependencies:
-    call-bind "^1.0.2"
-    is-array-buffer "^3.0.1"
-
-array-ify@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/array-ify/-/array-ify-1.0.0.tgz#9e528762b4a9066ad163a6962a364418e9626ece"
-  integrity sha512-c5AMf34bKdvPhQ7tBGhqkgKNUzMr4WUs+WDtC2ZUGOUncbxKMTvqxYctiseW3+L4bA8ec+GcZ6/A/FW4m8ukng==
-
-array-includes@^3.1.6:
-  version "3.1.6"
-  resolved "https://registry.yarnpkg.com/array-includes/-/array-includes-3.1.6.tgz#9e9e720e194f198266ba9e18c29e6a9b0e4b225f"
-  integrity sha512-sgTbLvL6cNnw24FnbaDyjmvddQ2ML8arZsgaJhoABMoplz/4QRhtrYS+alr1BUM1Bwp6dhx8vVCBSLG+StwOFw==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-    get-intrinsic "^1.1.3"
-    is-string "^1.0.7"
-
-array-union@^2.1.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/array-union/-/array-union-2.1.0.tgz#b798420adbeb1de828d84acd8a2e23d3efe85e8d"
-  integrity sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==
-
-array.prototype.flat@^1.3.1:
-  version "1.3.1"
-  resolved "https://registry.yarnpkg.com/array.prototype.flat/-/array.prototype.flat-1.3.1.tgz#ffc6576a7ca3efc2f46a143b9d1dda9b4b3cf5e2"
-  integrity sha512-roTU0KWIOmJ4DRLmwKd19Otg0/mT3qPNt0Qb3GWW8iObuZXxrjB/pzn0R3hqpRSWg4HCwqx+0vwOnWnvlOyeIA==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-    es-shim-unscopables "^1.0.0"
-
-array.prototype.flatmap@^1.3.1:
-  version "1.3.1"
-  resolved "https://registry.yarnpkg.com/array.prototype.flatmap/-/array.prototype.flatmap-1.3.1.tgz#1aae7903c2100433cb8261cd4ed310aab5c4a183"
-  integrity sha512-8UGn9O1FDVvMNB0UlLv4voxRMze7+FpHyF5mSMRjWHUMlpoDViniy05870VlxhfgTnLbpuwTzvD76MTtWxB/mQ==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-    es-shim-unscopables "^1.0.0"
-
-array.prototype.map@^1.0.5:
-  version "1.0.5"
-  resolved "https://registry.yarnpkg.com/array.prototype.map/-/array.prototype.map-1.0.5.tgz#6e43c2fee6c0fb5e4806da2dc92eb00970809e55"
-  integrity sha512-gfaKntvwqYIuC7mLLyv2wzZIJqrRhn5PZ9EfFejSx6a78sV7iDsGpG9P+3oUPtm1Rerqm6nrKS4FYuTIvWfo3g==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-    es-array-method-boxes-properly "^1.0.0"
-    is-string "^1.0.7"
-
-array.prototype.tosorted@^1.1.1:
-  version "1.1.1"
-  resolved "https://registry.yarnpkg.com/array.prototype.tosorted/-/array.prototype.tosorted-1.1.1.tgz#ccf44738aa2b5ac56578ffda97c03fd3e23dd532"
-  integrity sha512-pZYPXPRl2PqWcsUs6LOMn+1f1532nEoPTYowBtqLwAW+W8vSVhkIGnmOX1t/UQjD6YGI0vcD2B1U7ZFGQH9jnQ==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-    es-shim-unscopables "^1.0.0"
-    get-intrinsic "^1.1.3"
-
-arraybuffer.prototype.slice@^1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.1.tgz#9b5ea3868a6eebc30273da577eb888381c0044bb"
-  integrity sha512-09x0ZWFEjj4WD8PDbykUwo3t9arLn8NIzmmYEJFpYekOAQjpkGSyrQhNoRTcwwcFRu+ycWF78QZ63oWTqSjBcw==
-  dependencies:
-    array-buffer-byte-length "^1.0.0"
-    call-bind "^1.0.2"
-    define-properties "^1.2.0"
-    get-intrinsic "^1.2.1"
-    is-array-buffer "^3.0.2"
-    is-shared-array-buffer "^1.0.2"
-
-arrify@^1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/arrify/-/arrify-1.0.1.tgz#898508da2226f380df904728456849c1501a4b0d"
-  integrity sha512-3CYzex9M9FGQjCGMGyi6/31c8GJbgb0qGyrx5HWxPd0aCwh4cB2YjMb2Xf9UuoogrMrlO9cTqnB5rI5GHZTcUA==
-
-ast-types@^0.13.4:
-  version "0.13.4"
-  resolved "https://registry.yarnpkg.com/ast-types/-/ast-types-0.13.4.tgz#ee0d77b343263965ecc3fb62da16e7222b2b6782"
-  integrity sha512-x1FCFnFifvYDDzTaLII71vG5uvDwgtmDTEVWAxrgeiR8VjMONcCXJx7E+USjDtHlwFmt9MysbqgF9b9Vjr6w+w==
-  dependencies:
-    tslib "^2.0.1"
-
-async-retry@1.3.3:
-  version "1.3.3"
-  resolved "https://registry.yarnpkg.com/async-retry/-/async-retry-1.3.3.tgz#0e7f36c04d8478e7a58bdbed80cedf977785f280"
-  integrity sha512-wfr/jstw9xNi/0teMHrRW7dsz3Lt5ARhYNZ2ewpadnhaIp5mbALhOAP+EAdsC7t4Z6wqsDVv9+W6gm1Dk9mEyw==
-  dependencies:
-    retry "0.13.1"
-
-async@3.2.3:
-  version "3.2.3"
-  resolved "https://registry.yarnpkg.com/async/-/async-3.2.3.tgz#ac53dafd3f4720ee9e8a160628f18ea91df196c9"
-  integrity sha512-spZRyzKL5l5BZQrr/6m/SqFdBN0q3OCI0f9rjfBzCMBIP4p75P620rR3gTmaksNOhmzgdxcaxdNfMy6anrbM0g==
-
-asynciterator.prototype@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/asynciterator.prototype/-/asynciterator.prototype-1.0.0.tgz#8c5df0514936cdd133604dfcc9d3fb93f09b2b62"
-  integrity sha512-wwHYEIS0Q80f5mosx3L/dfG5t5rjEa9Ft51GTaNt862EnpyGHpgz2RkZvLPp1oF5TnAiTohkEKVEu8pQPJI7Vg==
-  dependencies:
-    has-symbols "^1.0.3"
-
-asynckit@^0.4.0:
-  version "0.4.0"
-  resolved "https://registry.yarnpkg.com/asynckit/-/asynckit-0.4.0.tgz#c79ed97f7f34cb8f2ba1bc9790bcc366474b4b79"
-  integrity sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==
-
-atomic-sleep@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/atomic-sleep/-/atomic-sleep-1.0.0.tgz#eb85b77a601fc932cfe432c5acd364a9e2c9075b"
-  integrity sha512-kNOjDqAh7px0XWNI+4QbzoiR/nTkHAWNud2uvnJquD1/x5a7EQZMJT0AczqK0Qn67oY/TTQ1LbUKajZpp3I9tQ==
-
-audio-buffer@^5.0.0:
-  version "5.0.0"
-  resolved "https://registry.yarnpkg.com/audio-buffer/-/audio-buffer-5.0.0.tgz#92129984ebdbb8ad1c4ec6fd81525a0e0a29e99e"
-  integrity sha512-gsDyj1wwUp8u7NBB+eW6yhLb9ICf+0eBmDX8NGaAS00w8/fLqFdxUlL5Ge/U8kB64DlQhdonxYC59dXy1J7H/w==
-
-audio-decode@^2.1.3:
-  version "2.1.4"
-  resolved "https://registry.yarnpkg.com/audio-decode/-/audio-decode-2.1.4.tgz#86e7eb2ce62661037949ce19989e5464ac1e7a7d"
-  integrity sha512-i1KTHqBXcU3vVCPXfp4zZCaXsLYyO4CNbt6JhvV1so/PpOpBnIXNFgHEq0bWNsroUV/J6i2/Yck0QhoaCzGh+A==
-  dependencies:
-    "@wasm-audio-decoders/flac" "^0.1.12"
-    "@wasm-audio-decoders/ogg-vorbis" "^0.1.7"
-    audio-buffer "^5.0.0"
-    audio-type "^2.2.0"
-    mpg123-decoder "^0.4.8"
-    node-wav "^0.0.2"
-    ogg-opus-decoder "^1.6.4"
-    qoa-format "^1.0.0"
-
-audio-type@^2.2.0:
-  version "2.2.1"
-  resolved "https://registry.yarnpkg.com/audio-type/-/audio-type-2.2.1.tgz#5ceae0b0b3cf3b1e117edabb9e5332eaf3bd4f25"
-  integrity sha512-En9AY6EG1qYqEy5L/quryzbA4akBpJrnBZNxeKTqGHC2xT9Qc4aZ8b7CcbOMFTTc/MGdoNyp+SN4zInZNKxMYA==
-
-available-typed-arrays@^1.0.5:
-  version "1.0.5"
-  resolved "https://registry.yarnpkg.com/available-typed-arrays/-/available-typed-arrays-1.0.5.tgz#92f95616501069d07d10edb2fc37d3e1c65123b7"
-  integrity sha512-DMD0KiN46eipeziST1LPP/STfDU0sufISXmjSgvVsoU2tqxctQeASejWcfNtxYKqETM1UxQ8sp2OrSBWpHY6sw==
-
-axios@^1.3.3:
-  version "1.5.0"
-  resolved "https://registry.yarnpkg.com/axios/-/axios-1.5.0.tgz#f02e4af823e2e46a9768cfc74691fdd0517ea267"
-  integrity sha512-D4DdjDo5CY50Qms0qGQTTw6Q44jl7zRwY7bthds06pUGfChBCTcQs+N743eFWGEd6pRTMd6A+I87aWyFV5wiZQ==
-  dependencies:
-    follow-redirects "^1.15.0"
-    form-data "^4.0.0"
-    proxy-from-env "^1.1.0"
-
-babel-jest@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/babel-jest/-/babel-jest-27.5.1.tgz#a1bf8d61928edfefd21da27eb86a695bfd691444"
-  integrity sha512-cdQ5dXjGRd0IBRATiQ4mZGlGlRE8kJpjPOixdNRdT+m3UcNqmYWN6rK6nvtXYfY3D76cb8s/O1Ss8ea24PIwcg==
-  dependencies:
-    "@jest/transform" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    "@types/babel__core" "^7.1.14"
-    babel-plugin-istanbul "^6.1.1"
-    babel-preset-jest "^27.5.1"
-    chalk "^4.0.0"
-    graceful-fs "^4.2.9"
-    slash "^3.0.0"
-
-babel-plugin-istanbul@^6.1.1:
-  version "6.1.1"
-  resolved "https://registry.yarnpkg.com/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz#fa88ec59232fd9b4e36dbbc540a8ec9a9b47da73"
-  integrity sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==
-  dependencies:
-    "@babel/helper-plugin-utils" "^7.0.0"
-    "@istanbuljs/load-nyc-config" "^1.0.0"
-    "@istanbuljs/schema" "^0.1.2"
-    istanbul-lib-instrument "^5.0.4"
-    test-exclude "^6.0.0"
-
-babel-plugin-jest-hoist@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-27.5.1.tgz#9be98ecf28c331eb9f5df9c72d6f89deb8181c2e"
-  integrity sha512-50wCwD5EMNW4aRpOwtqzyZHIewTYNxLA4nhB+09d8BIssfNfzBRhkBIHiaPv1Si226TQSvp8gxAJm2iY2qs2hQ==
-  dependencies:
-    "@babel/template" "^7.3.3"
-    "@babel/types" "^7.3.3"
-    "@types/babel__core" "^7.0.0"
-    "@types/babel__traverse" "^7.0.6"
-
-babel-preset-current-node-syntax@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.0.1.tgz#b4399239b89b2a011f9ddbe3e4f401fc40cff73b"
-  integrity sha512-M7LQ0bxarkxQoN+vz5aJPsLBn77n8QgTFmo8WK0/44auK2xlCXrYcUxHFxgU7qW5Yzw/CjmLRK2uJzaCd7LvqQ==
-  dependencies:
-    "@babel/plugin-syntax-async-generators" "^7.8.4"
-    "@babel/plugin-syntax-bigint" "^7.8.3"
-    "@babel/plugin-syntax-class-properties" "^7.8.3"
-    "@babel/plugin-syntax-import-meta" "^7.8.3"
-    "@babel/plugin-syntax-json-strings" "^7.8.3"
-    "@babel/plugin-syntax-logical-assignment-operators" "^7.8.3"
-    "@babel/plugin-syntax-nullish-coalescing-operator" "^7.8.3"
-    "@babel/plugin-syntax-numeric-separator" "^7.8.3"
-    "@babel/plugin-syntax-object-rest-spread" "^7.8.3"
-    "@babel/plugin-syntax-optional-catch-binding" "^7.8.3"
-    "@babel/plugin-syntax-optional-chaining" "^7.8.3"
-    "@babel/plugin-syntax-top-level-await" "^7.8.3"
-
-babel-preset-jest@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/babel-preset-jest/-/babel-preset-jest-27.5.1.tgz#91f10f58034cb7989cb4f962b69fa6eef6a6bc81"
-  integrity sha512-Nptf2FzlPCWYuJg41HBqXVT8ym6bXOevuCTbhxlUpjwtysGaIWFvDEjp4y+G7fl13FgOdjs7P/DmErqH7da0Ag==
-  dependencies:
-    babel-plugin-jest-hoist "^27.5.1"
-    babel-preset-current-node-syntax "^1.0.0"
-
-balanced-match@^1.0.0:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/balanced-match/-/balanced-match-1.0.2.tgz#e83e3a7e3f300b34cb9d87f615fa0cbf357690ee"
-  integrity sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==
-
-base64-js@^1.3.1:
-  version "1.5.1"
-  resolved "https://registry.yarnpkg.com/base64-js/-/base64-js-1.5.1.tgz#1b1b440160a5bf7ad40b650f095963481903930a"
-  integrity sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==
-
-basic-ftp@^5.0.2:
-  version "5.0.3"
-  resolved "https://registry.yarnpkg.com/basic-ftp/-/basic-ftp-5.0.3.tgz#b14c0fe8111ce001ec913686434fe0c2fb461228"
-  integrity sha512-QHX8HLlncOLpy54mh+k/sWIFd0ThmRqwe9ZjELybGZK+tZ8rUb9VO0saKJUROTbE+KhzDUT7xziGpGrW8Kmd+g==
-
-before-after-hook@^2.2.0:
-  version "2.2.3"
-  resolved "https://registry.yarnpkg.com/before-after-hook/-/before-after-hook-2.2.3.tgz#c51e809c81a4e354084422b9b26bad88249c517c"
-  integrity sha512-NzUnlZexiaH/46WDhANlyR2bXRopNg4F/zuSA3OpZnllCUgRaOF2znDioDWrmbNVsuZk6l9pMquQB38cfBZwkQ==
-
-big-integer@^1.6.44:
-  version "1.6.51"
-  resolved "https://registry.yarnpkg.com/big-integer/-/big-integer-1.6.51.tgz#0df92a5d9880560d3ff2d5fd20245c889d130686"
-  integrity sha512-GPEid2Y9QU1Exl1rpO9B2IPJGHPSupF5GnVIP0blYvNOMer2bTvSWs1jGOUg04hTmu67nmLsQ9TBo1puaotBHg==
-
-bl@^4.0.3, bl@^4.1.0:
-  version "4.1.0"
-  resolved "https://registry.yarnpkg.com/bl/-/bl-4.1.0.tgz#451535264182bec2fbbc83a62ab98cf11d9f7b3a"
-  integrity sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==
-  dependencies:
-    buffer "^5.5.0"
-    inherits "^2.0.4"
-    readable-stream "^3.4.0"
-
-bl@^5.0.0:
-  version "5.1.0"
-  resolved "https://registry.yarnpkg.com/bl/-/bl-5.1.0.tgz#183715f678c7188ecef9fe475d90209400624273"
-  integrity sha512-tv1ZJHLfTDnXE6tMHv73YgSJaWR2AFuPwMntBe7XL/GBFHnT0CLnsHMogfk5+GzCDC5ZWarSCYaIGATZt9dNsQ==
-  dependencies:
-    buffer "^6.0.3"
-    inherits "^2.0.4"
-    readable-stream "^3.4.0"
-
-bmp-js@^0.1.0:
-  version "0.1.0"
-  resolved "https://registry.yarnpkg.com/bmp-js/-/bmp-js-0.1.0.tgz#e05a63f796a6c1ff25f4771ec7adadc148c07233"
-  integrity sha512-vHdS19CnY3hwiNdkaqk93DvjVLfbEcI8mys4UjuWrlX1haDmroo8o4xCzh4wD6DGV6HxRCyauwhHRqMTfERtjw==
-
-boolbase@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/boolbase/-/boolbase-1.0.0.tgz#68dff5fbe60c51eb37725ea9e3ed310dcc1e776e"
-  integrity sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==
-
-boxen@^7.0.0:
-  version "7.1.1"
-  resolved "https://registry.yarnpkg.com/boxen/-/boxen-7.1.1.tgz#f9ba525413c2fec9cdb88987d835c4f7cad9c8f4"
-  integrity sha512-2hCgjEmP8YLWQ130n2FerGv7rYpfBmnmp9Uy2Le1vge6X3gZIfSmEzP5QTDElFxcvVcXlEn8Aq6MU/PZygIOog==
-  dependencies:
-    ansi-align "^3.0.1"
-    camelcase "^7.0.1"
-    chalk "^5.2.0"
-    cli-boxes "^3.0.0"
-    string-width "^5.1.2"
-    type-fest "^2.13.0"
-    widest-line "^4.0.1"
-    wrap-ansi "^8.1.0"
-
-bplist-parser@^0.2.0:
-  version "0.2.0"
-  resolved "https://registry.yarnpkg.com/bplist-parser/-/bplist-parser-0.2.0.tgz#43a9d183e5bf9d545200ceac3e712f79ebbe8d0e"
-  integrity sha512-z0M+byMThzQmD9NILRniCUXYsYpjwnlO8N5uCFaCqIOpqRsJCrQL9NK3JsD67CN5a08nF5oIL2bD6loTdHOuKw==
-  dependencies:
-    big-integer "^1.6.44"
-
-brace-expansion@^1.1.7:
-  version "1.1.11"
-  resolved "https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-1.1.11.tgz#3c7fcbf529d87226f3d2f52b966ff5271eb441dd"
-  integrity sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==
-  dependencies:
-    balanced-match "^1.0.0"
-    concat-map "0.0.1"
-
-brace-expansion@^2.0.1:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-2.0.1.tgz#1edc459e0f0c548486ecf9fc99f2221364b9a0ae"
-  integrity sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==
-  dependencies:
-    balanced-match "^1.0.0"
-
-braces@^3.0.2:
-  version "3.0.2"
-  resolved "https://registry.yarnpkg.com/braces/-/braces-3.0.2.tgz#3454e1a462ee8d599e236df336cd9ea4f8afe107"
-  integrity sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==
-  dependencies:
-    fill-range "^7.0.1"
-
-browser-process-hrtime@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/browser-process-hrtime/-/browser-process-hrtime-1.0.0.tgz#3c9b4b7d782c8121e56f10106d84c0d0ffc94626"
-  integrity sha512-9o5UecI3GhkpM6DrXr69PblIuWxPKk9Y0jHBRhdocZ2y7YECBFCsHm79Pr3OyR2AvjhDkabFJaDJMYRazHgsow==
-
-browserslist@^4.21.9:
-  version "4.21.10"
-  resolved "https://registry.yarnpkg.com/browserslist/-/browserslist-4.21.10.tgz#dbbac576628c13d3b2231332cb2ec5a46e015bb0"
-  integrity sha512-bipEBdZfVH5/pwrvqc+Ub0kUPVfGUhlKxbvfD+z1BDnPEO/X98ruXGA1WP5ASpAFKan7Qr6j736IacbZQuAlKQ==
-  dependencies:
-    caniuse-lite "^1.0.30001517"
-    electron-to-chromium "^1.4.477"
-    node-releases "^2.0.13"
-    update-browserslist-db "^1.0.11"
-
-bs-logger@0.x:
-  version "0.2.6"
-  resolved "https://registry.yarnpkg.com/bs-logger/-/bs-logger-0.2.6.tgz#eb7d365307a72cf974cc6cda76b68354ad336bd8"
-  integrity sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==
-  dependencies:
-    fast-json-stable-stringify "2.x"
-
-bser@2.1.1:
-  version "2.1.1"
-  resolved "https://registry.yarnpkg.com/bser/-/bser-2.1.1.tgz#e6787da20ece9d07998533cfd9de6f5c38f4bc05"
-  integrity sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==
-  dependencies:
-    node-int64 "^0.4.0"
-
-buffer-equal@0.0.1:
-  version "0.0.1"
-  resolved "https://registry.yarnpkg.com/buffer-equal/-/buffer-equal-0.0.1.tgz#91bc74b11ea405bc916bc6aa908faafa5b4aac4b"
-  integrity sha512-RgSV6InVQ9ODPdLWJ5UAqBqJBOg370Nz6ZQtRzpt6nUjc8v0St97uJ4PYC6NztqIScrAXafKM3mZPMygSe1ggA==
-
-buffer-from@^1.0.0:
-  version "1.1.2"
-  resolved "https://registry.yarnpkg.com/buffer-from/-/buffer-from-1.1.2.tgz#2b146a6fd72e80b4f55d255f35ed59a3a9a41bd5"
-  integrity sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==
-
-buffer@^5.2.0, buffer@^5.5.0:
-  version "5.7.1"
-  resolved "https://registry.yarnpkg.com/buffer/-/buffer-5.7.1.tgz#ba62e7c13133053582197160851a8f648e99eed0"
-  integrity sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==
-  dependencies:
-    base64-js "^1.3.1"
-    ieee754 "^1.1.13"
-
-buffer@^6.0.3:
-  version "6.0.3"
-  resolved "https://registry.yarnpkg.com/buffer/-/buffer-6.0.3.tgz#2ace578459cc8fbe2a70aaa8f52ee63b6a74c6c6"
-  integrity sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==
-  dependencies:
-    base64-js "^1.3.1"
-    ieee754 "^1.2.1"
-
-bundle-name@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/bundle-name/-/bundle-name-3.0.0.tgz#ba59bcc9ac785fb67ccdbf104a2bf60c099f0e1a"
-  integrity sha512-PKA4BeSvBpQKQ8iPOGCSiell+N8P+Tf1DlwqmYhpe2gAhKPHn8EYOxVT+ShuGmhg8lN8XiSlS80yiExKXrURlw==
-  dependencies:
-    run-applescript "^5.0.0"
-
-cache-manager@4.0.1:
-  version "4.0.1"
-  resolved "https://registry.yarnpkg.com/cache-manager/-/cache-manager-4.0.1.tgz#185b1d1aa1385fbb4fb0ec88fda7676f566a15b8"
-  integrity sha512-JWdtjdX8e0e6eMehAZsdJvBMvHn/pVQGYUjgzc1ILFH0vtcffb9R7XIEAqfYgEeaVJVCOSP4+dxCius+ciW0RA==
-  dependencies:
-    async "3.2.3"
-    lodash.clonedeep "^4.5.0"
-    lru-cache "^7.10.1"
-
-cacheable-lookup@^7.0.0:
-  version "7.0.0"
-  resolved "https://registry.yarnpkg.com/cacheable-lookup/-/cacheable-lookup-7.0.0.tgz#3476a8215d046e5a3202a9209dd13fec1f933a27"
-  integrity sha512-+qJyx4xiKra8mZrcwhjMRMUhD5NR1R8esPkzIYxX96JiecFoxAXFuz/GpR3+ev4PE1WamHip78wV0vcmPQtp8w==
-
-cacheable-request@^10.2.8:
-  version "10.2.13"
-  resolved "https://registry.yarnpkg.com/cacheable-request/-/cacheable-request-10.2.13.tgz#b7012bb4a2acdb18cb54d2dff751d766b3500842"
-  integrity sha512-3SD4rrMu1msNGEtNSt8Od6enwdo//U9s4ykmXfA2TD58kcLkCobtCDiby7kNyj7a/Q7lz/mAesAFI54rTdnvBA==
-  dependencies:
-    "@types/http-cache-semantics" "^4.0.1"
-    get-stream "^6.0.1"
-    http-cache-semantics "^4.1.1"
-    keyv "^4.5.3"
-    mimic-response "^4.0.0"
-    normalize-url "^8.0.0"
-    responselike "^3.0.0"
-
-call-bind@^1.0.0, call-bind@^1.0.2:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/call-bind/-/call-bind-1.0.2.tgz#b1d4e89e688119c3c9a903ad30abb2f6a919be3c"
-  integrity sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==
-  dependencies:
-    function-bind "^1.1.1"
-    get-intrinsic "^1.0.2"
-
-callsites@^3.0.0:
-  version "3.1.0"
-  resolved "https://registry.yarnpkg.com/callsites/-/callsites-3.1.0.tgz#b3630abd8943432f54b3f0519238e33cd7df2f73"
-  integrity sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==
-
-camelcase-keys@^6.2.2:
-  version "6.2.2"
-  resolved "https://registry.yarnpkg.com/camelcase-keys/-/camelcase-keys-6.2.2.tgz#5e755d6ba51aa223ec7d3d52f25778210f9dc3c0"
-  integrity sha512-YrwaA0vEKazPBkn0ipTiMpSajYDSe+KjQfrjhcBMxJt/znbvlHd8Pw/Vamaz5EB4Wfhs3SUR3Z9mwRu/P3s3Yg==
-  dependencies:
-    camelcase "^5.3.1"
-    map-obj "^4.0.0"
-    quick-lru "^4.0.1"
-
-camelcase@^5.3.1:
-  version "5.3.1"
-  resolved "https://registry.yarnpkg.com/camelcase/-/camelcase-5.3.1.tgz#e3c9b31569e106811df242f715725a1f4c494320"
-  integrity sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==
-
-camelcase@^6.2.0:
-  version "6.3.0"
-  resolved "https://registry.yarnpkg.com/camelcase/-/camelcase-6.3.0.tgz#5685b95eb209ac9c0c177467778c9c84df58ba9a"
-  integrity sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==
-
-camelcase@^7.0.1:
-  version "7.0.1"
-  resolved "https://registry.yarnpkg.com/camelcase/-/camelcase-7.0.1.tgz#f02e50af9fd7782bc8b88a3558c32fd3a388f048"
-  integrity sha512-xlx1yCK2Oc1APsPXDL2LdlNP6+uu8OCDdhOBSVT279M/S+y75O30C2VuD8T2ogdePBBl7PfPF4504tnLgX3zfw==
-
-caniuse-lite@^1.0.30001517:
-  version "1.0.30001524"
-  resolved "https://registry.yarnpkg.com/caniuse-lite/-/caniuse-lite-1.0.30001524.tgz#1e14bce4f43c41a7deaeb5ebfe86664fe8dadb80"
-  integrity sha512-Jj917pJtYg9HSJBF95HVX3Cdr89JUyLT4IZ8SvM5aDRni95swKgYi3TgYLH5hnGfPE/U1dg6IfZ50UsIlLkwSA==
-
-chalk@5.2.0:
-  version "5.2.0"
-  resolved "https://registry.yarnpkg.com/chalk/-/chalk-5.2.0.tgz#249623b7d66869c673699fb66d65723e54dfcfb3"
-  integrity sha512-ree3Gqw/nazQAPuJJEy+avdl7QfZMcUvmHIKgEZkGL+xOBzRvup5Hxo6LHuMceSxOabuJLJm5Yp/92R9eMmMvA==
-
-chalk@^2.4.2:
-  version "2.4.2"
-  resolved "https://registry.yarnpkg.com/chalk/-/chalk-2.4.2.tgz#cd42541677a54333cf541a49108c1432b44c9424"
-  integrity sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==
-  dependencies:
-    ansi-styles "^3.2.1"
-    escape-string-regexp "^1.0.5"
-    supports-color "^5.3.0"
-
-chalk@^4.0.0, chalk@^4.1.0:
-  version "4.1.2"
-  resolved "https://registry.yarnpkg.com/chalk/-/chalk-4.1.2.tgz#aac4e2b7734a740867aeb16bf02aad556a1e7a01"
-  integrity sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==
-  dependencies:
-    ansi-styles "^4.1.0"
-    supports-color "^7.1.0"
-
-chalk@^5.0.0, chalk@^5.0.1, chalk@^5.2.0:
-  version "5.3.0"
-  resolved "https://registry.yarnpkg.com/chalk/-/chalk-5.3.0.tgz#67c20a7ebef70e7f3970a01f90fa210cb6860385"
-  integrity sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==
-
-char-regex@^1.0.2:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/char-regex/-/char-regex-1.0.2.tgz#d744358226217f981ed58f479b1d6bcc29545dcf"
-  integrity sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==
-
-chardet@^0.7.0:
-  version "0.7.0"
-  resolved "https://registry.yarnpkg.com/chardet/-/chardet-0.7.0.tgz#90094849f0937f2eedc2425d0d28a9e5f0cbad9e"
-  integrity sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==
-
-cheerio-select@^2.1.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/cheerio-select/-/cheerio-select-2.1.0.tgz#4d8673286b8126ca2a8e42740d5e3c4884ae21b4"
-  integrity sha512-9v9kG0LvzrlcungtnJtpGNxY+fzECQKhK4EGJX2vByejiMX84MFNQw4UxPJl3bFbTMw+Dfs37XaIkCwTZfLh4g==
-  dependencies:
-    boolbase "^1.0.0"
-    css-select "^5.1.0"
-    css-what "^6.1.0"
-    domelementtype "^2.3.0"
-    domhandler "^5.0.3"
-    domutils "^3.0.1"
-
-cheerio@1.0.0-rc.11:
-  version "1.0.0-rc.11"
-  resolved "https://registry.yarnpkg.com/cheerio/-/cheerio-1.0.0-rc.11.tgz#1be84be1a126958366bcc57a11648cd9b30a60c2"
-  integrity sha512-bQwNaDIBKID5ts/DsdhxrjqFXYfLw4ste+wMKqWA8DyKcS4qwsPP4Bk8ZNaTJjvpiX/qW3BT4sU7d6Bh5i+dag==
-  dependencies:
-    cheerio-select "^2.1.0"
-    dom-serializer "^2.0.0"
-    domhandler "^5.0.3"
-    domutils "^3.0.1"
-    htmlparser2 "^8.0.1"
-    parse5 "^7.0.0"
-    parse5-htmlparser2-tree-adapter "^7.0.0"
-    tslib "^2.4.0"
-
-chownr@^1.1.1:
-  version "1.1.4"
-  resolved "https://registry.yarnpkg.com/chownr/-/chownr-1.1.4.tgz#6fc9d7b42d32a583596337666e7d08084da2cc6b"
-  integrity sha512-jJ0bqzaylmJtVnNgzTeSOs8DPavpbYgEr/b0YL8/2GO3xJEhInFmhKMUnEJQjZumK7KXGFhUy89PrsJWlakBVg==
-
-ci-info@^3.2.0:
-  version "3.8.0"
-  resolved "https://registry.yarnpkg.com/ci-info/-/ci-info-3.8.0.tgz#81408265a5380c929f0bc665d62256628ce9ef91"
-  integrity sha512-eXTggHWSooYhq49F2opQhuHWgzucfF2YgODK4e1566GQs5BIfP30B0oenwBJHfWxAs2fyPB1s7Mg949zLf61Yw==
-
-cjs-module-lexer@^1.0.0:
-  version "1.2.3"
-  resolved "https://registry.yarnpkg.com/cjs-module-lexer/-/cjs-module-lexer-1.2.3.tgz#6c370ab19f8a3394e318fe682686ec0ac684d107"
-  integrity sha512-0TNiGstbQmCFwt4akjjBg5pLRTSyj/PkWQ1ZoO2zntmg9yLqSRxwEa4iCfQLGjqhiqBfOJa7W/E8wfGrTDmlZQ==
-
-cli-boxes@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/cli-boxes/-/cli-boxes-3.0.0.tgz#71a10c716feeba005e4504f36329ef0b17cf3145"
-  integrity sha512-/lzGpEWL/8PfI0BmBOPRwp0c/wFNX1RdUML3jK/RcSBA9T8mZDdQpqYBKtCFTOfQbwPqWEOpjqW+Fnayc0969g==
-
-cli-cursor@^3.1.0:
-  version "3.1.0"
-  resolved "https://registry.yarnpkg.com/cli-cursor/-/cli-cursor-3.1.0.tgz#264305a7ae490d1d03bf0c9ba7c925d1753af307"
-  integrity sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==
-  dependencies:
-    restore-cursor "^3.1.0"
-
-cli-cursor@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/cli-cursor/-/cli-cursor-4.0.0.tgz#3cecfe3734bf4fe02a8361cbdc0f6fe28c6a57ea"
-  integrity sha512-VGtlMu3x/4DOtIUwEkRezxUZ2lBacNJCHash0N0WeZDBS+7Ux1dm3XWAgWYxLJFMMdOeXMHXorshEFhbMSGelg==
-  dependencies:
-    restore-cursor "^4.0.0"
-
-cli-spinners@^2.5.0, cli-spinners@^2.6.1:
-  version "2.9.0"
-  resolved "https://registry.yarnpkg.com/cli-spinners/-/cli-spinners-2.9.0.tgz#5881d0ad96381e117bbe07ad91f2008fe6ffd8db"
-  integrity sha512-4/aL9X3Wh0yiMQlE+eeRhWP6vclO3QRtw1JHKIT0FFUs5FjpFmESqtMvYZ0+lbzBw900b95mS0hohy+qn2VK/g==
-
-cli-width@^4.0.0:
-  version "4.1.0"
-  resolved "https://registry.yarnpkg.com/cli-width/-/cli-width-4.1.0.tgz#42daac41d3c254ef38ad8ac037672130173691c5"
-  integrity sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==
-
-cliui@^7.0.2:
-  version "7.0.4"
-  resolved "https://registry.yarnpkg.com/cliui/-/cliui-7.0.4.tgz#a0265ee655476fc807aea9df3df8df7783808b4f"
-  integrity sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==
-  dependencies:
-    string-width "^4.2.0"
-    strip-ansi "^6.0.0"
-    wrap-ansi "^7.0.0"
-
-clone@2.x:
-  version "2.1.2"
-  resolved "https://registry.yarnpkg.com/clone/-/clone-2.1.2.tgz#1b7f4b9f591f1e8f83670401600345a02887435f"
-  integrity sha512-3Pe/CF1Nn94hyhIYpjtiLhdCoEoz0DqQ+988E9gmeEdQZlojxnOb74wctFyuwWQHzqyf9X7C7MG8juUpqBJT8w==
-
-clone@^1.0.2:
-  version "1.0.4"
-  resolved "https://registry.yarnpkg.com/clone/-/clone-1.0.4.tgz#da309cc263df15994c688ca902179ca3c7cd7c7e"
-  integrity sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg==
-
-co@^4.6.0:
-  version "4.6.0"
-  resolved "https://registry.yarnpkg.com/co/-/co-4.6.0.tgz#6ea6bdf3d853ae54ccb8e47bfa0bf3f9031fb184"
-  integrity sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==
-
-codec-parser@2.4.3:
-  version "2.4.3"
-  resolved "https://registry.yarnpkg.com/codec-parser/-/codec-parser-2.4.3.tgz#759b16b0db60125efcb394e7d5dc3617cc32bf27"
-  integrity sha512-3dAvFtdpxn4YLstqsB2ZiJXXNg7n1j7R5ONeDuk+2kBkb39PwrCRytOFHlSWA8q5jCjW3PumeMv9q37bFHsijg==
-
-collect-v8-coverage@^1.0.0:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz#c0b29bcd33bcd0779a1344c2136051e6afd3d9e9"
-  integrity sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==
-
-color-convert@^1.9.0:
-  version "1.9.3"
-  resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-1.9.3.tgz#bb71850690e1f136567de629d2d5471deda4c1e8"
-  integrity sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==
-  dependencies:
-    color-name "1.1.3"
-
-color-convert@^2.0.1:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-2.0.1.tgz#72d3a68d598c9bdb3af2ad1e84f21d896abd4de3"
-  integrity sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==
-  dependencies:
-    color-name "~1.1.4"
-
-color-name@1.1.3:
-  version "1.1.3"
-  resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.3.tgz#a7d0558bd89c42f795dd42328f740831ca53bc25"
-  integrity sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==
-
-color-name@^1.0.0, color-name@~1.1.4:
-  version "1.1.4"
-  resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.4.tgz#c2a09a87acbde69543de6f63fa3995c826c536a2"
-  integrity sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==
-
-color-string@^1.9.0:
-  version "1.9.1"
-  resolved "https://registry.yarnpkg.com/color-string/-/color-string-1.9.1.tgz#4467f9146f036f855b764dfb5bf8582bf342c7a4"
-  integrity sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==
-  dependencies:
-    color-name "^1.0.0"
-    simple-swizzle "^0.2.2"
-
-color@^4.2.3:
-  version "4.2.3"
-  resolved "https://registry.yarnpkg.com/color/-/color-4.2.3.tgz#d781ecb5e57224ee43ea9627560107c0e0c6463a"
-  integrity sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==
-  dependencies:
-    color-convert "^2.0.1"
-    color-string "^1.9.0"
-
-combined-stream@^1.0.6, combined-stream@^1.0.8:
-  version "1.0.8"
-  resolved "https://registry.yarnpkg.com/combined-stream/-/combined-stream-1.0.8.tgz#c3d45a8b34fd730631a110a8a2520682b31d5a7f"
-  integrity sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==
-  dependencies:
-    delayed-stream "~1.0.0"
-
-compare-func@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/compare-func/-/compare-func-2.0.0.tgz#fb65e75edbddfd2e568554e8b5b05fff7a51fcb3"
-  integrity sha512-zHig5N+tPWARooBnb0Zx1MFcdfpyJrfTJ3Y5L+IFvUm8rM74hHz66z0gw0x4tijh5CorKkKUCnW82R2vmpeCRA==
-  dependencies:
-    array-ify "^1.0.0"
-    dot-prop "^5.1.0"
-
-concat-map@0.0.1:
-  version "0.0.1"
-  resolved "https://registry.yarnpkg.com/concat-map/-/concat-map-0.0.1.tgz#d8a96bd77fd68df7793a73036a3ba0d5405d477b"
-  integrity sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==
-
-config-chain@^1.1.11:
-  version "1.1.13"
-  resolved "https://registry.yarnpkg.com/config-chain/-/config-chain-1.1.13.tgz#fad0795aa6a6cdaff9ed1b68e9dff94372c232f4"
-  integrity sha512-qj+f8APARXHrM0hraqXYb2/bOVSV4PvJQlNZ/DVj0QrmNM2q2euizkeuVckQ57J+W0mRH6Hvi+k50M4Jul2VRQ==
-  dependencies:
-    ini "^1.3.4"
-    proto-list "~1.2.1"
-
-configstore@^6.0.0:
-  version "6.0.0"
-  resolved "https://registry.yarnpkg.com/configstore/-/configstore-6.0.0.tgz#49eca2ebc80983f77e09394a1a56e0aca8235566"
-  integrity sha512-cD31W1v3GqUlQvbBCGcXmd2Nj9SvLDOP1oQ0YFuLETufzSPaKp11rYBsSOm7rCsW3OnIRAFM3OxRhceaXNYHkA==
-  dependencies:
-    dot-prop "^6.0.1"
-    graceful-fs "^4.2.6"
-    unique-string "^3.0.0"
-    write-file-atomic "^3.0.3"
-    xdg-basedir "^5.0.1"
-
-content-type@^1.0.5:
-  version "1.0.5"
-  resolved "https://registry.yarnpkg.com/content-type/-/content-type-1.0.5.tgz#8b773162656d1d1086784c8f23a54ce6d73d7918"
-  integrity sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==
-
-conventional-changelog-angular@^5.0.12:
-  version "5.0.13"
-  resolved "https://registry.yarnpkg.com/conventional-changelog-angular/-/conventional-changelog-angular-5.0.13.tgz#896885d63b914a70d4934b59d2fe7bde1832b28c"
-  integrity sha512-i/gipMxs7s8L/QeuavPF2hLnJgH6pEZAttySB6aiQLWcX3puWDL3ACVmvBhJGxnAy52Qc15ua26BufY6KpmrVA==
-  dependencies:
-    compare-func "^2.0.0"
-    q "^1.5.1"
-
-conventional-changelog-atom@^2.0.8:
-  version "2.0.8"
-  resolved "https://registry.yarnpkg.com/conventional-changelog-atom/-/conventional-changelog-atom-2.0.8.tgz#a759ec61c22d1c1196925fca88fe3ae89fd7d8de"
-  integrity sha512-xo6v46icsFTK3bb7dY/8m2qvc8sZemRgdqLb/bjpBsH2UyOS8rKNTgcb5025Hri6IpANPApbXMg15QLb1LJpBw==
-  dependencies:
-    q "^1.5.1"
-
-conventional-changelog-cli@^2.2.2:
-  version "2.2.2"
-  resolved "https://registry.yarnpkg.com/conventional-changelog-cli/-/conventional-changelog-cli-2.2.2.tgz#9a7746cede92c6a8f27dc46692efaadfbed60daa"
-  integrity sha512-8grMV5Jo8S0kP3yoMeJxV2P5R6VJOqK72IiSV9t/4H5r/HiRqEBQ83bYGuz4Yzfdj4bjaAEhZN/FFbsFXr5bOA==
-  dependencies:
-    add-stream "^1.0.0"
-    conventional-changelog "^3.1.24"
-    lodash "^4.17.15"
-    meow "^8.0.0"
-    tempfile "^3.0.0"
-
-conventional-changelog-codemirror@^2.0.8:
-  version "2.0.8"
-  resolved "https://registry.yarnpkg.com/conventional-changelog-codemirror/-/conventional-changelog-codemirror-2.0.8.tgz#398e9530f08ce34ec4640af98eeaf3022eb1f7dc"
-  integrity sha512-z5DAsn3uj1Vfp7po3gpt2Boc+Bdwmw2++ZHa5Ak9k0UKsYAO5mH1UBTN0qSCuJZREIhX6WU4E1p3IW2oRCNzQw==
-  dependencies:
-    q "^1.5.1"
-
-conventional-changelog-conventionalcommits@^4.5.0:
-  version "4.6.3"
-  resolved "https://registry.yarnpkg.com/conventional-changelog-conventionalcommits/-/conventional-changelog-conventionalcommits-4.6.3.tgz#0765490f56424b46f6cb4db9135902d6e5a36dc2"
-  integrity sha512-LTTQV4fwOM4oLPad317V/QNQ1FY4Hju5qeBIM1uTHbrnCE+Eg4CdRZ3gO2pUeR+tzWdp80M2j3qFFEDWVqOV4g==
-  dependencies:
-    compare-func "^2.0.0"
-    lodash "^4.17.15"
-    q "^1.5.1"
-
-conventional-changelog-core@^4.2.1:
-  version "4.2.4"
-  resolved "https://registry.yarnpkg.com/conventional-changelog-core/-/conventional-changelog-core-4.2.4.tgz#e50d047e8ebacf63fac3dc67bf918177001e1e9f"
-  integrity sha512-gDVS+zVJHE2v4SLc6B0sLsPiloR0ygU7HaDW14aNJE1v4SlqJPILPl/aJC7YdtRE4CybBf8gDwObBvKha8Xlyg==
-  dependencies:
-    add-stream "^1.0.0"
-    conventional-changelog-writer "^5.0.0"
-    conventional-commits-parser "^3.2.0"
-    dateformat "^3.0.0"
-    get-pkg-repo "^4.0.0"
-    git-raw-commits "^2.0.8"
-    git-remote-origin-url "^2.0.0"
-    git-semver-tags "^4.1.1"
-    lodash "^4.17.15"
-    normalize-package-data "^3.0.0"
-    q "^1.5.1"
-    read-pkg "^3.0.0"
-    read-pkg-up "^3.0.0"
-    through2 "^4.0.0"
-
-conventional-changelog-ember@^2.0.9:
-  version "2.0.9"
-  resolved "https://registry.yarnpkg.com/conventional-changelog-ember/-/conventional-changelog-ember-2.0.9.tgz#619b37ec708be9e74a220f4dcf79212ae1c92962"
-  integrity sha512-ulzIReoZEvZCBDhcNYfDIsLTHzYHc7awh+eI44ZtV5cx6LVxLlVtEmcO+2/kGIHGtw+qVabJYjdI5cJOQgXh1A==
-  dependencies:
-    q "^1.5.1"
-
-conventional-changelog-eslint@^3.0.9:
-  version "3.0.9"
-  resolved "https://registry.yarnpkg.com/conventional-changelog-eslint/-/conventional-changelog-eslint-3.0.9.tgz#689bd0a470e02f7baafe21a495880deea18b7cdb"
-  integrity sha512-6NpUCMgU8qmWmyAMSZO5NrRd7rTgErjrm4VASam2u5jrZS0n38V7Y9CzTtLT2qwz5xEChDR4BduoWIr8TfwvXA==
-  dependencies:
-    q "^1.5.1"
-
-conventional-changelog-express@^2.0.6:
-  version "2.0.6"
-  resolved "https://registry.yarnpkg.com/conventional-changelog-express/-/conventional-changelog-express-2.0.6.tgz#420c9d92a347b72a91544750bffa9387665a6ee8"
-  integrity sha512-SDez2f3iVJw6V563O3pRtNwXtQaSmEfTCaTBPCqn0oG0mfkq0rX4hHBq5P7De2MncoRixrALj3u3oQsNK+Q0pQ==
-  dependencies:
-    q "^1.5.1"
-
-conventional-changelog-jquery@^3.0.11:
-  version "3.0.11"
-  resolved "https://registry.yarnpkg.com/conventional-changelog-jquery/-/conventional-changelog-jquery-3.0.11.tgz#d142207400f51c9e5bb588596598e24bba8994bf"
-  integrity sha512-x8AWz5/Td55F7+o/9LQ6cQIPwrCjfJQ5Zmfqi8thwUEKHstEn4kTIofXub7plf1xvFA2TqhZlq7fy5OmV6BOMw==
-  dependencies:
-    q "^1.5.1"
-
-conventional-changelog-jshint@^2.0.9:
-  version "2.0.9"
-  resolved "https://registry.yarnpkg.com/conventional-changelog-jshint/-/conventional-changelog-jshint-2.0.9.tgz#f2d7f23e6acd4927a238555d92c09b50fe3852ff"
-  integrity sha512-wMLdaIzq6TNnMHMy31hql02OEQ8nCQfExw1SE0hYL5KvU+JCTuPaDO+7JiogGT2gJAxiUGATdtYYfh+nT+6riA==
-  dependencies:
-    compare-func "^2.0.0"
-    q "^1.5.1"
-
-conventional-changelog-preset-loader@^2.3.4:
-  version "2.3.4"
-  resolved "https://registry.yarnpkg.com/conventional-changelog-preset-loader/-/conventional-changelog-preset-loader-2.3.4.tgz#14a855abbffd59027fd602581f1f34d9862ea44c"
-  integrity sha512-GEKRWkrSAZeTq5+YjUZOYxdHq+ci4dNwHvpaBC3+ENalzFWuCWa9EZXSuZBpkr72sMdKB+1fyDV4takK1Lf58g==
-
-conventional-changelog-writer@^5.0.0:
-  version "5.0.1"
-  resolved "https://registry.yarnpkg.com/conventional-changelog-writer/-/conventional-changelog-writer-5.0.1.tgz#e0757072f045fe03d91da6343c843029e702f359"
-  integrity sha512-5WsuKUfxW7suLblAbFnxAcrvf6r+0b7GvNaWUwUIk0bXMnENP/PEieGKVUQrjPqwPT4o3EPAASBXiY6iHooLOQ==
-  dependencies:
-    conventional-commits-filter "^2.0.7"
-    dateformat "^3.0.0"
-    handlebars "^4.7.7"
-    json-stringify-safe "^5.0.1"
-    lodash "^4.17.15"
-    meow "^8.0.0"
-    semver "^6.0.0"
-    split "^1.0.0"
-    through2 "^4.0.0"
-
-conventional-changelog@^3.1.24:
-  version "3.1.25"
-  resolved "https://registry.yarnpkg.com/conventional-changelog/-/conventional-changelog-3.1.25.tgz#3e227a37d15684f5aa1fb52222a6e9e2536ccaff"
-  integrity sha512-ryhi3fd1mKf3fSjbLXOfK2D06YwKNic1nC9mWqybBHdObPd8KJ2vjaXZfYj1U23t+V8T8n0d7gwnc9XbIdFbyQ==
-  dependencies:
-    conventional-changelog-angular "^5.0.12"
-    conventional-changelog-atom "^2.0.8"
-    conventional-changelog-codemirror "^2.0.8"
-    conventional-changelog-conventionalcommits "^4.5.0"
-    conventional-changelog-core "^4.2.1"
-    conventional-changelog-ember "^2.0.9"
-    conventional-changelog-eslint "^3.0.9"
-    conventional-changelog-express "^2.0.6"
-    conventional-changelog-jquery "^3.0.11"
-    conventional-changelog-jshint "^2.0.9"
-    conventional-changelog-preset-loader "^2.3.4"
-
-conventional-commits-filter@^2.0.7:
-  version "2.0.7"
-  resolved "https://registry.yarnpkg.com/conventional-commits-filter/-/conventional-commits-filter-2.0.7.tgz#f8d9b4f182fce00c9af7139da49365b136c8a0b3"
-  integrity sha512-ASS9SamOP4TbCClsRHxIHXRfcGCnIoQqkvAzCSbZzTFLfcTqJVugB0agRgsEELsqaeWgsXv513eS116wnlSSPA==
-  dependencies:
-    lodash.ismatch "^4.4.0"
-    modify-values "^1.0.0"
-
-conventional-commits-parser@^3.2.0:
-  version "3.2.4"
-  resolved "https://registry.yarnpkg.com/conventional-commits-parser/-/conventional-commits-parser-3.2.4.tgz#a7d3b77758a202a9b2293d2112a8d8052c740972"
-  integrity sha512-nK7sAtfi+QXbxHCYfhpZsfRtaitZLIA6889kFIouLvz6repszQDgxBu7wf2WbU+Dco7sAnNCJYERCwt54WPC2Q==
-  dependencies:
-    JSONStream "^1.0.4"
-    is-text-path "^1.0.1"
-    lodash "^4.17.15"
-    meow "^8.0.0"
-    split2 "^3.0.0"
-    through2 "^4.0.0"
-
-convert-source-map@^1.4.0, convert-source-map@^1.6.0, convert-source-map@^1.7.0:
-  version "1.9.0"
-  resolved "https://registry.yarnpkg.com/convert-source-map/-/convert-source-map-1.9.0.tgz#7faae62353fb4213366d0ca98358d22e8368b05f"
-  integrity sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==
-
-core-util-is@~1.0.0:
-  version "1.0.3"
-  resolved "https://registry.yarnpkg.com/core-util-is/-/core-util-is-1.0.3.tgz#a6042d3634c2b27e9328f837b965fac83808db85"
-  integrity sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==
-
-cosmiconfig@8.1.3:
-  version "8.1.3"
-  resolved "https://registry.yarnpkg.com/cosmiconfig/-/cosmiconfig-8.1.3.tgz#0e614a118fcc2d9e5afc2f87d53cd09931015689"
-  integrity sha512-/UkO2JKI18b5jVMJUp0lvKFMpa/Gye+ZgZjKD+DGEN9y7NRcf/nK1A0sp67ONmKtnDCNMS44E6jrk0Yc3bDuUw==
-  dependencies:
-    import-fresh "^3.2.1"
-    js-yaml "^4.1.0"
-    parse-json "^5.0.0"
-    path-type "^4.0.0"
-
-create-require@^1.1.0:
-  version "1.1.1"
-  resolved "https://registry.yarnpkg.com/create-require/-/create-require-1.1.1.tgz#c1d7e8f1e5f6cfc9ff65f9cd352d37348756c333"
-  integrity sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==
-
-cross-fetch@3.1.5:
-  version "3.1.5"
-  resolved "https://registry.yarnpkg.com/cross-fetch/-/cross-fetch-3.1.5.tgz#e1389f44d9e7ba767907f7af8454787952ab534f"
-  integrity sha512-lvb1SBsI0Z7GDwmuid+mU3kWVBwTVUbe7S0H52yaaAdQOXq2YktTCZdlAcNKFzE6QtRz0snpw9bNiPeOIkkQvw==
-  dependencies:
-    node-fetch "2.6.7"
-
-cross-spawn@^7.0.2, cross-spawn@^7.0.3:
-  version "7.0.3"
-  resolved "https://registry.yarnpkg.com/cross-spawn/-/cross-spawn-7.0.3.tgz#f73a85b9d5d41d045551c177e2882d4ac85728a6"
-  integrity sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==
-  dependencies:
-    path-key "^3.1.0"
-    shebang-command "^2.0.0"
-    which "^2.0.1"
-
-crypto-random-string@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/crypto-random-string/-/crypto-random-string-4.0.0.tgz#5a3cc53d7dd86183df5da0312816ceeeb5bb1fc2"
-  integrity sha512-x8dy3RnvYdlUcPOjkEHqozhiwzKNSq7GcPuXFbnyMOCHxX8V3OgIg/pYuabl2sbUPfIJaeAQB7PMOK8DFIdoRA==
-  dependencies:
-    type-fest "^1.0.1"
-
-css-select@^5.1.0:
-  version "5.1.0"
-  resolved "https://registry.yarnpkg.com/css-select/-/css-select-5.1.0.tgz#b8ebd6554c3637ccc76688804ad3f6a6fdaea8a6"
-  integrity sha512-nwoRF1rvRRnnCqqY7updORDsuqKzqYJ28+oSMaJMMgOauh3fvwHqMS7EZpIPqK8GL+g9mKxF1vP/ZjSeNjEVHg==
-  dependencies:
-    boolbase "^1.0.0"
-    css-what "^6.1.0"
-    domhandler "^5.0.2"
-    domutils "^3.0.1"
-    nth-check "^2.0.1"
-
-css-what@^6.1.0:
-  version "6.1.0"
-  resolved "https://registry.yarnpkg.com/css-what/-/css-what-6.1.0.tgz#fb5effcf76f1ddea2c81bdfaa4de44e79bac70f4"
-  integrity sha512-HTUrgRJ7r4dsZKU6GjmpfRK1O76h97Z8MfS1G0FozR+oF2kG6Vfe8JE6zwrkbxigziPHinCJ+gCPjA9EaBDtRw==
-
-cssom@^0.4.4:
-  version "0.4.4"
-  resolved "https://registry.yarnpkg.com/cssom/-/cssom-0.4.4.tgz#5a66cf93d2d0b661d80bf6a44fb65f5c2e4e0a10"
-  integrity sha512-p3pvU7r1MyyqbTk+WbNJIgJjG2VmTIaB10rI93LzVPrmDJKkzKYMtxxyAvQXR/NS6otuzveI7+7BBq3SjBS2mw==
-
-cssom@~0.3.6:
-  version "0.3.8"
-  resolved "https://registry.yarnpkg.com/cssom/-/cssom-0.3.8.tgz#9f1276f5b2b463f2114d3f2c75250af8c1a36f4a"
-  integrity sha512-b0tGHbfegbhPJpxpiBPU2sCkigAqtM9O121le6bbOlgyV+NyGyCmVfJ6QW9eRjz8CpNfWEOYBIMIGRYkLwsIYg==
-
-cssstyle@^2.3.0:
-  version "2.3.0"
-  resolved "https://registry.yarnpkg.com/cssstyle/-/cssstyle-2.3.0.tgz#ff665a0ddbdc31864b09647f34163443d90b0852"
-  integrity sha512-AZL67abkUzIuvcHqk7c09cezpGNcxUxU4Ioi/05xHk4DQeTkWmGYftIE6ctU6AEt+Gn4n1lDStOtj7FKycP71A==
-  dependencies:
-    cssom "~0.3.6"
-
-curve25519-js@^0.0.4:
-  version "0.0.4"
-  resolved "https://registry.yarnpkg.com/curve25519-js/-/curve25519-js-0.0.4.tgz#e6ad967e8cd284590d657bbfc90d8b50e49ba060"
-  integrity sha512-axn2UMEnkhyDUPWOwVKBMVIzSQy2ejH2xRGy1wq81dqRwApXfIzfbE3hIX0ZRFBIihf/KDqK158DLwESu4AK1w==
-
-dargs@^7.0.0:
-  version "7.0.0"
-  resolved "https://registry.yarnpkg.com/dargs/-/dargs-7.0.0.tgz#04015c41de0bcb69ec84050f3d9be0caf8d6d5cc"
-  integrity sha512-2iy1EkLdlBzQGvbweYRFxmFath8+K7+AKB0TlhHWkNuH+TmovaMH/Wp7V7R4u7f4SnX3OgLsU9t1NI9ioDnUpg==
-
-data-uri-to-buffer@^4.0.0:
-  version "4.0.1"
-  resolved "https://registry.yarnpkg.com/data-uri-to-buffer/-/data-uri-to-buffer-4.0.1.tgz#d8feb2b2881e6a4f58c2e08acfd0e2834e26222e"
-  integrity sha512-0R9ikRb668HB7QDxT1vkpuUBtqc53YyAwMwGeUFKRojY/NWKvdZ+9UYtRfGmhqNbRkTSVpMbmyhXipFFv2cb/A==
-
-data-uri-to-buffer@^5.0.1:
-  version "5.0.1"
-  resolved "https://registry.yarnpkg.com/data-uri-to-buffer/-/data-uri-to-buffer-5.0.1.tgz#db89a9e279c2ffe74f50637a59a32fb23b3e4d7c"
-  integrity sha512-a9l6T1qqDogvvnw0nKlfZzqsyikEBZBClF39V3TFoKhDtGBqHu2HkuomJc02j5zft8zrUaXEuoicLeW54RkzPg==
-
-data-urls@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/data-urls/-/data-urls-2.0.0.tgz#156485a72963a970f5d5821aaf642bef2bf2db9b"
-  integrity sha512-X5eWTSXO/BJmpdIKCRuKUgSCgAN0OwliVK3yPKbwIWU1Tdw5BRajxlzMidvh+gwko9AfQ9zIj52pzF91Q3YAvQ==
-  dependencies:
-    abab "^2.0.3"
-    whatwg-mimetype "^2.3.0"
-    whatwg-url "^8.0.0"
-
-dateformat@^3.0.0:
-  version "3.0.3"
-  resolved "https://registry.yarnpkg.com/dateformat/-/dateformat-3.0.3.tgz#a6e37499a4d9a9cf85ef5872044d62901c9889ae"
-  integrity sha512-jyCETtSl3VMZMWeRo7iY1FL19ges1t55hMo5yaam4Jrsm5EPL89UQkoQRyiI+Yf4k8r2ZpdngkV8hr1lIdjb3Q==
-
-debug@4, debug@^4.1.0, debug@^4.1.1, debug@^4.3.2, debug@^4.3.4:
-  version "4.3.4"
-  resolved "https://registry.yarnpkg.com/debug/-/debug-4.3.4.tgz#1319f6579357f2338d3337d2cdd4914bb5dcc865"
-  integrity sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==
-  dependencies:
-    ms "2.1.2"
-
-decamelize-keys@^1.1.0:
-  version "1.1.1"
-  resolved "https://registry.yarnpkg.com/decamelize-keys/-/decamelize-keys-1.1.1.tgz#04a2d523b2f18d80d0158a43b895d56dff8d19d8"
-  integrity sha512-WiPxgEirIV0/eIOMcnFBA3/IJZAZqKnwAwWyvvdi4lsr1WCN22nhdf/3db3DoZcUjTV2SqfzIwNyp6y2xs3nmg==
-  dependencies:
-    decamelize "^1.1.0"
-    map-obj "^1.0.0"
-
-decamelize@^1.1.0:
-  version "1.2.0"
-  resolved "https://registry.yarnpkg.com/decamelize/-/decamelize-1.2.0.tgz#f6534d15148269b20352e7bee26f501f9a191290"
-  integrity sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==
-
-decimal.js@^10.2.1:
-  version "10.4.3"
-  resolved "https://registry.yarnpkg.com/decimal.js/-/decimal.js-10.4.3.tgz#1044092884d245d1b7f65725fa4ad4c6f781cc23"
-  integrity sha512-VBBaLc1MgL5XpzgIP7ny5Z6Nx3UrRkIViUkPUdtl9aya5amy3De1gsUUSB1g3+3sExYNjCAsAznmukyxCb1GRA==
-
-decompress-response@^6.0.0:
-  version "6.0.0"
-  resolved "https://registry.yarnpkg.com/decompress-response/-/decompress-response-6.0.0.tgz#ca387612ddb7e104bd16d85aab00d5ecf09c66fc"
-  integrity sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==
-  dependencies:
-    mimic-response "^3.1.0"
-
-dedent@^0.7.0:
-  version "0.7.0"
-  resolved "https://registry.yarnpkg.com/dedent/-/dedent-0.7.0.tgz#2495ddbaf6eb874abb0e1be9df22d2e5a544326c"
-  integrity sha512-Q6fKUPqnAHAyhiUgFU7BUzLiv0kd8saH9al7tnu5Q/okj6dnupxyTgFIBjVzJATdfIAm9NAsvXNzjaKa+bxVyA==
-
-deep-extend@^0.6.0:
-  version "0.6.0"
-  resolved "https://registry.yarnpkg.com/deep-extend/-/deep-extend-0.6.0.tgz#c4fa7c95404a17a9c3e8ca7e1537312b736330ac"
-  integrity sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==
-
-deep-is@^0.1.3, deep-is@~0.1.3:
-  version "0.1.4"
-  resolved "https://registry.yarnpkg.com/deep-is/-/deep-is-0.1.4.tgz#a6f2dce612fadd2ef1f519b73551f17e85199831"
-  integrity sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==
-
-deepmerge@^4.2.2:
-  version "4.3.1"
-  resolved "https://registry.yarnpkg.com/deepmerge/-/deepmerge-4.3.1.tgz#44b5f2147cd3b00d4b56137685966f26fd25dd4a"
-  integrity sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==
-
-default-browser-id@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/default-browser-id/-/default-browser-id-3.0.0.tgz#bee7bbbef1f4e75d31f98f4d3f1556a14cea790c"
-  integrity sha512-OZ1y3y0SqSICtE8DE4S8YOE9UZOJ8wO16fKWVP5J1Qz42kV9jcnMVFrEE/noXb/ss3Q4pZIH79kxofzyNNtUNA==
-  dependencies:
-    bplist-parser "^0.2.0"
-    untildify "^4.0.0"
-
-default-browser@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/default-browser/-/default-browser-4.0.0.tgz#53c9894f8810bf86696de117a6ce9085a3cbc7da"
-  integrity sha512-wX5pXO1+BrhMkSbROFsyxUm0i/cJEScyNhA4PPxc41ICuv05ZZB/MX28s8aZx6xjmatvebIapF6hLEKEcpneUA==
-  dependencies:
-    bundle-name "^3.0.0"
-    default-browser-id "^3.0.0"
-    execa "^7.1.1"
-    titleize "^3.0.0"
-
-defaults@^1.0.3:
-  version "1.0.4"
-  resolved "https://registry.yarnpkg.com/defaults/-/defaults-1.0.4.tgz#b0b02062c1e2aa62ff5d9528f0f98baa90978d7a"
-  integrity sha512-eFuaLoy/Rxalv2kr+lqMlUnrDWV+3j4pljOIJgLIhI058IQfWJ7vXhyEIHu+HtC738klGALYxOKDO0bQP3tg8A==
-  dependencies:
-    clone "^1.0.2"
-
-defer-to-connect@^2.0.1:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/defer-to-connect/-/defer-to-connect-2.0.1.tgz#8016bdb4143e4632b77a3449c6236277de520587"
-  integrity sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==
-
-define-lazy-prop@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/define-lazy-prop/-/define-lazy-prop-2.0.0.tgz#3f7ae421129bcaaac9bc74905c98a0009ec9ee7f"
-  integrity sha512-Ds09qNh8yw3khSjiJjiUInaGX9xlqZDY7JVryGxdxV7NPeuqQfplOpQ66yJFZut3jLa5zOwkXw1g9EI2uKh4Og==
-
-define-lazy-prop@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/define-lazy-prop/-/define-lazy-prop-3.0.0.tgz#dbb19adfb746d7fc6d734a06b72f4a00d021255f"
-  integrity sha512-N+MeXYoqr3pOgn8xfyRPREN7gHakLYjhsHhWGT3fWAiL4IkAt0iDw14QiiEm2bE30c5XX5q0FtAA3CK5f9/BUg==
-
-define-properties@^1.1.3, define-properties@^1.1.4, define-properties@^1.2.0:
-  version "1.2.0"
-  resolved "https://registry.yarnpkg.com/define-properties/-/define-properties-1.2.0.tgz#52988570670c9eacedd8064f4a990f2405849bd5"
-  integrity sha512-xvqAVKGfT1+UAvPwKTVw/njhdQ8ZhXK4lI0bCIuCMrp2up9nPnaDftrLtmpTazqd1o+UY4zgzU+avtMbDP+ldA==
-  dependencies:
-    has-property-descriptors "^1.0.0"
-    object-keys "^1.1.1"
-
-degenerator@^4.0.4:
-  version "4.0.4"
-  resolved "https://registry.yarnpkg.com/degenerator/-/degenerator-4.0.4.tgz#dbeeb602c64ce543c1f17e2c681d1d0cc9d4a0ac"
-  integrity sha512-MTZdZsuNxSBL92rsjx3VFWe57OpRlikyLbcx2B5Dmdv6oScqpMrvpY7zHLMymrUxo3U5+suPUMsNgW/+SZB1lg==
-  dependencies:
-    ast-types "^0.13.4"
-    escodegen "^1.14.3"
-    esprima "^4.0.1"
-    vm2 "^3.9.19"
-
-delayed-stream@~1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/delayed-stream/-/delayed-stream-1.0.0.tgz#df3ae199acadfb7d440aaae0b29e2272b24ec619"
-  integrity sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==
-
-deprecation@^2.0.0:
-  version "2.3.1"
-  resolved "https://registry.yarnpkg.com/deprecation/-/deprecation-2.3.1.tgz#6368cbdb40abf3373b525ac87e4a260c3a700919"
-  integrity sha512-xmHIy4F3scKVwMsQ4WnVaS8bHOx0DmVwRywosKhaILI0ywMDWPtBSku2HNxRvF7jtwDRsoEwYQSfbxj8b7RlJQ==
-
-detect-libc@^2.0.0, detect-libc@^2.0.1:
-  version "2.0.2"
-  resolved "https://registry.yarnpkg.com/detect-libc/-/detect-libc-2.0.2.tgz#8ccf2ba9315350e1241b88d0ac3b0e1fbd99605d"
-  integrity sha512-UX6sGumvvqSaXgdKGUsgZWqcUyIXZ/vZTrlRT/iobiKhGL0zL4d3osHj3uqllWJK+i+sixDS/3COVEOFbupFyw==
-
-detect-newline@^3.0.0:
-  version "3.1.0"
-  resolved "https://registry.yarnpkg.com/detect-newline/-/detect-newline-3.1.0.tgz#576f5dfc63ae1a192ff192d8ad3af6308991b651"
-  integrity sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==
-
-diff-sequences@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/diff-sequences/-/diff-sequences-27.5.1.tgz#eaecc0d327fd68c8d9672a1e64ab8dccb2ef5327"
-  integrity sha512-k1gCAXAsNgLwEL+Y8Wvl+M6oEFj5bgazfZULpS5CneoPPXRaCCW7dm+q21Ky2VEE5X+VeRDBVg1Pcvvsr4TtNQ==
-
-diff@^4.0.1:
-  version "4.0.2"
-  resolved "https://registry.yarnpkg.com/diff/-/diff-4.0.2.tgz#60f3aecb89d5fae520c11aa19efc2bb982aade7d"
-  integrity sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==
-
-dir-glob@^3.0.1:
-  version "3.0.1"
-  resolved "https://registry.yarnpkg.com/dir-glob/-/dir-glob-3.0.1.tgz#56dbf73d992a4a93ba1584f4534063fd2e41717f"
-  integrity sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==
-  dependencies:
-    path-type "^4.0.0"
-
-doctrine@^2.1.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/doctrine/-/doctrine-2.1.0.tgz#5cd01fc101621b42c4cd7f5d1a66243716d3f39d"
-  integrity sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==
-  dependencies:
-    esutils "^2.0.2"
-
-doctrine@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/doctrine/-/doctrine-3.0.0.tgz#addebead72a6574db783639dc87a121773973961"
-  integrity sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==
-  dependencies:
-    esutils "^2.0.2"
-
-dom-serializer@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/dom-serializer/-/dom-serializer-2.0.0.tgz#e41b802e1eedf9f6cae183ce5e622d789d7d8e53"
-  integrity sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==
-  dependencies:
-    domelementtype "^2.3.0"
-    domhandler "^5.0.2"
-    entities "^4.2.0"
-
-dom-walk@^0.1.0:
-  version "0.1.2"
-  resolved "https://registry.yarnpkg.com/dom-walk/-/dom-walk-0.1.2.tgz#0c548bef048f4d1f2a97249002236060daa3fd84"
-  integrity sha512-6QvTW9mrGeIegrFXdtQi9pk7O/nSK6lSdXW2eqUspN5LWD7UTji2Fqw5V2YLjBpHEoU9Xl/eUWNpDeZvoyOv2w==
-
-domelementtype@^2.3.0:
-  version "2.3.0"
-  resolved "https://registry.yarnpkg.com/domelementtype/-/domelementtype-2.3.0.tgz#5c45e8e869952626331d7aab326d01daf65d589d"
-  integrity sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==
-
-domexception@^2.0.1:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/domexception/-/domexception-2.0.1.tgz#fb44aefba793e1574b0af6aed2801d057529f304"
-  integrity sha512-yxJ2mFy/sibVQlu5qHjOkf9J3K6zgmCxgJ94u2EdvDOV09H+32LtRswEcUsmUWN72pVLOEnTSRaIVVzVQgS0dg==
-  dependencies:
-    webidl-conversions "^5.0.0"
-
-domhandler@^5.0.2, domhandler@^5.0.3:
-  version "5.0.3"
-  resolved "https://registry.yarnpkg.com/domhandler/-/domhandler-5.0.3.tgz#cc385f7f751f1d1fc650c21374804254538c7d31"
-  integrity sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==
-  dependencies:
-    domelementtype "^2.3.0"
-
-domutils@^3.0.1:
-  version "3.1.0"
-  resolved "https://registry.yarnpkg.com/domutils/-/domutils-3.1.0.tgz#c47f551278d3dc4b0b1ab8cbb42d751a6f0d824e"
-  integrity sha512-H78uMmQtI2AhgDJjWeQmHwJJ2bLPD3GMmO7Zja/ZZh84wkm+4ut+IUnUdRa8uCGX88DiVx1j6FRe1XfxEgjEZA==
-  dependencies:
-    dom-serializer "^2.0.0"
-    domelementtype "^2.3.0"
-    domhandler "^5.0.3"
-
-dot-prop@^5.1.0:
-  version "5.3.0"
-  resolved "https://registry.yarnpkg.com/dot-prop/-/dot-prop-5.3.0.tgz#90ccce708cd9cd82cc4dc8c3ddd9abdd55b20e88"
-  integrity sha512-QM8q3zDe58hqUqjraQOmzZ1LIH9SWQJTlEKCH4kJ2oQvLZk7RbQXvtDM2XEq3fwkV9CCvvH4LA0AV+ogFsBM2Q==
-  dependencies:
-    is-obj "^2.0.0"
-
-dot-prop@^6.0.1:
-  version "6.0.1"
-  resolved "https://registry.yarnpkg.com/dot-prop/-/dot-prop-6.0.1.tgz#fc26b3cf142b9e59b74dbd39ed66ce620c681083"
-  integrity sha512-tE7ztYzXHIeyvc7N+hR3oi7FIbf/NIjVP9hmAt3yMXzrQ072/fpjGLx2GxNxGxUl5V73MEqYzioOMoVhGMJ5cA==
-  dependencies:
-    is-obj "^2.0.0"
-
-duplexify@^4.1.2:
-  version "4.1.2"
-  resolved "https://registry.yarnpkg.com/duplexify/-/duplexify-4.1.2.tgz#18b4f8d28289132fa0b9573c898d9f903f81c7b0"
-  integrity sha512-fz3OjcNCHmRP12MJoZMPglx8m4rrFP8rovnk4vT8Fs+aonZoCwGg10dSsQsfP/E62eZcPTMSMP6686fu9Qlqtw==
-  dependencies:
-    end-of-stream "^1.4.1"
-    inherits "^2.0.3"
-    readable-stream "^3.1.1"
-    stream-shift "^1.0.0"
-
-eastasianwidth@^0.2.0:
-  version "0.2.0"
-  resolved "https://registry.yarnpkg.com/eastasianwidth/-/eastasianwidth-0.2.0.tgz#696ce2ec0aa0e6ea93a397ffcf24aa7840c827cb"
-  integrity sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==
-
-electron-to-chromium@^1.4.477:
-  version "1.4.503"
-  resolved "https://registry.yarnpkg.com/electron-to-chromium/-/electron-to-chromium-1.4.503.tgz#7bd43927ea9b4198697672d28d8fbd0da016a7a1"
-  integrity sha512-LF2IQit4B0VrUHFeQkWhZm97KuJSGF2WJqq1InpY+ECpFRkXd8yTIaTtJxsO0OKDmiBYwWqcrNaXOurn2T2wiA==
-
-emittery@^0.8.1:
-  version "0.8.1"
-  resolved "https://registry.yarnpkg.com/emittery/-/emittery-0.8.1.tgz#bb23cc86d03b30aa75a7f734819dee2e1ba70860"
-  integrity sha512-uDfvUjVrfGJJhymx/kz6prltenw1u7WrCg1oa94zYY8xxVpLLUu045LAT0dhDZdXG58/EpPL/5kA180fQ/qudg==
-
-emoji-regex@^8.0.0:
-  version "8.0.0"
-  resolved "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-8.0.0.tgz#e818fd69ce5ccfcb404594f842963bf53164cc37"
-  integrity sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==
-
-emoji-regex@^9.2.2:
-  version "9.2.2"
-  resolved "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-9.2.2.tgz#840c8803b0d8047f4ff0cf963176b32d4ef3ed72"
-  integrity sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==
-
-end-of-stream@^1.1.0, end-of-stream@^1.4.1:
-  version "1.4.4"
-  resolved "https://registry.yarnpkg.com/end-of-stream/-/end-of-stream-1.4.4.tgz#5ae64a5f45057baf3626ec14da0ca5e4b2431eb0"
-  integrity sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==
-  dependencies:
-    once "^1.4.0"
-
-entities@^4.2.0, entities@^4.4.0:
-  version "4.5.0"
-  resolved "https://registry.yarnpkg.com/entities/-/entities-4.5.0.tgz#5d268ea5e7113ec74c4d033b79ea5a35a488fb48"
-  integrity sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==
-
-error-ex@^1.3.1:
-  version "1.3.2"
-  resolved "https://registry.yarnpkg.com/error-ex/-/error-ex-1.3.2.tgz#b4ac40648107fdcdcfae242f428bea8a14d4f1bf"
-  integrity sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==
-  dependencies:
-    is-arrayish "^0.2.1"
-
-es-abstract@^1.19.0, es-abstract@^1.20.4, es-abstract@^1.22.1:
-  version "1.22.1"
-  resolved "https://registry.yarnpkg.com/es-abstract/-/es-abstract-1.22.1.tgz#8b4e5fc5cefd7f1660f0f8e1a52900dfbc9d9ccc"
-  integrity sha512-ioRRcXMO6OFyRpyzV3kE1IIBd4WG5/kltnzdxSCqoP8CMGs/Li+M1uF5o7lOkZVFjDs+NLesthnF66Pg/0q0Lw==
-  dependencies:
-    array-buffer-byte-length "^1.0.0"
-    arraybuffer.prototype.slice "^1.0.1"
-    available-typed-arrays "^1.0.5"
-    call-bind "^1.0.2"
-    es-set-tostringtag "^2.0.1"
-    es-to-primitive "^1.2.1"
-    function.prototype.name "^1.1.5"
-    get-intrinsic "^1.2.1"
-    get-symbol-description "^1.0.0"
-    globalthis "^1.0.3"
-    gopd "^1.0.1"
-    has "^1.0.3"
-    has-property-descriptors "^1.0.0"
-    has-proto "^1.0.1"
-    has-symbols "^1.0.3"
-    internal-slot "^1.0.5"
-    is-array-buffer "^3.0.2"
-    is-callable "^1.2.7"
-    is-negative-zero "^2.0.2"
-    is-regex "^1.1.4"
-    is-shared-array-buffer "^1.0.2"
-    is-string "^1.0.7"
-    is-typed-array "^1.1.10"
-    is-weakref "^1.0.2"
-    object-inspect "^1.12.3"
-    object-keys "^1.1.1"
-    object.assign "^4.1.4"
-    regexp.prototype.flags "^1.5.0"
-    safe-array-concat "^1.0.0"
-    safe-regex-test "^1.0.0"
-    string.prototype.trim "^1.2.7"
-    string.prototype.trimend "^1.0.6"
-    string.prototype.trimstart "^1.0.6"
-    typed-array-buffer "^1.0.0"
-    typed-array-byte-length "^1.0.0"
-    typed-array-byte-offset "^1.0.0"
-    typed-array-length "^1.0.4"
-    unbox-primitive "^1.0.2"
-    which-typed-array "^1.1.10"
-
-es-array-method-boxes-properly@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/es-array-method-boxes-properly/-/es-array-method-boxes-properly-1.0.0.tgz#873f3e84418de4ee19c5be752990b2e44718d09e"
-  integrity sha512-wd6JXUmyHmt8T5a2xreUwKcGPq6f1f+WwIJkijUqiGcJz1qqnZgP6XIK+QyIWU5lT7imeNxUll48bziG+TSYcA==
-
-es-get-iterator@^1.0.2:
-  version "1.1.3"
-  resolved "https://registry.yarnpkg.com/es-get-iterator/-/es-get-iterator-1.1.3.tgz#3ef87523c5d464d41084b2c3c9c214f1199763d6"
-  integrity sha512-sPZmqHBe6JIiTfN5q2pEi//TwxmAFHwj/XEuYjTuse78i8KxaqMTTzxPoFKuzRpDpTJ+0NAbpfenkmH2rePtuw==
-  dependencies:
-    call-bind "^1.0.2"
-    get-intrinsic "^1.1.3"
-    has-symbols "^1.0.3"
-    is-arguments "^1.1.1"
-    is-map "^2.0.2"
-    is-set "^2.0.2"
-    is-string "^1.0.7"
-    isarray "^2.0.5"
-    stop-iteration-iterator "^1.0.0"
-
-es-iterator-helpers@^1.0.12:
-  version "1.0.14"
-  resolved "https://registry.yarnpkg.com/es-iterator-helpers/-/es-iterator-helpers-1.0.14.tgz#19cd7903697d97e21198f3293b55e8985791c365"
-  integrity sha512-JgtVnwiuoRuzLvqelrvN3Xu7H9bu2ap/kQ2CrM62iidP8SKuD99rWU3CJy++s7IVL2qb/AjXPGR/E7i9ngd/Cw==
-  dependencies:
-    asynciterator.prototype "^1.0.0"
-    call-bind "^1.0.2"
-    define-properties "^1.2.0"
-    es-abstract "^1.22.1"
-    es-set-tostringtag "^2.0.1"
-    function-bind "^1.1.1"
-    get-intrinsic "^1.2.1"
-    globalthis "^1.0.3"
-    has-property-descriptors "^1.0.0"
-    has-proto "^1.0.1"
-    has-symbols "^1.0.3"
-    internal-slot "^1.0.5"
-    iterator.prototype "^1.1.0"
-    safe-array-concat "^1.0.0"
-
-es-set-tostringtag@^2.0.1:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/es-set-tostringtag/-/es-set-tostringtag-2.0.1.tgz#338d502f6f674301d710b80c8592de8a15f09cd8"
-  integrity sha512-g3OMbtlwY3QewlqAiMLI47KywjWZoEytKr8pf6iTC8uJq5bIAH52Z9pnQ8pVL6whrCto53JZDuUIsifGeLorTg==
-  dependencies:
-    get-intrinsic "^1.1.3"
-    has "^1.0.3"
-    has-tostringtag "^1.0.0"
-
-es-shim-unscopables@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/es-shim-unscopables/-/es-shim-unscopables-1.0.0.tgz#702e632193201e3edf8713635d083d378e510241"
-  integrity sha512-Jm6GPcCdC30eMLbZ2x8z2WuRwAws3zTBBKuusffYVUrNj/GVSUAZ+xKMaUpfNDR5IbyNA5LJbaecoUVbmUcB1w==
-  dependencies:
-    has "^1.0.3"
-
-es-to-primitive@^1.2.1:
-  version "1.2.1"
-  resolved "https://registry.yarnpkg.com/es-to-primitive/-/es-to-primitive-1.2.1.tgz#e55cd4c9cdc188bcefb03b366c736323fc5c898a"
-  integrity sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==
-  dependencies:
-    is-callable "^1.1.4"
-    is-date-object "^1.0.1"
-    is-symbol "^1.0.2"
-
-escalade@^3.1.1:
-  version "3.1.1"
-  resolved "https://registry.yarnpkg.com/escalade/-/escalade-3.1.1.tgz#d8cfdc7000965c5a0174b4a82eaa5c0552742e40"
-  integrity sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==
-
-escape-goat@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/escape-goat/-/escape-goat-4.0.0.tgz#9424820331b510b0666b98f7873fe11ac4aa8081"
-  integrity sha512-2Sd4ShcWxbx6OY1IHyla/CVNwvg7XwZVoXZHcSu9w9SReNP1EzzD5T8NWKIR38fIqEns9kDWKUQTXXAmlDrdPg==
-
-escape-string-regexp@^1.0.5:
-  version "1.0.5"
-  resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz#1b61c0562190a8dff6ae3bb2cf0200ca130b86d4"
-  integrity sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==
-
-escape-string-regexp@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz#a30304e99daa32e23b2fd20f51babd07cffca344"
-  integrity sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==
-
-escape-string-regexp@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz#14ba83a5d373e3d311e5afca29cf5bfad965bf34"
-  integrity sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==
-
-escape-string-regexp@^5.0.0:
-  version "5.0.0"
-  resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz#4683126b500b61762f2dbebace1806e8be31b1c8"
-  integrity sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==
-
-escodegen@^1.14.3:
-  version "1.14.3"
-  resolved "https://registry.yarnpkg.com/escodegen/-/escodegen-1.14.3.tgz#4e7b81fba61581dc97582ed78cab7f0e8d63f503"
-  integrity sha512-qFcX0XJkdg+PB3xjZZG/wKSuT1PnQWx57+TVSjIMmILd2yC/6ByYElPwJnslDsuWuSAp4AwJGumarAAmJch5Kw==
-  dependencies:
-    esprima "^4.0.1"
-    estraverse "^4.2.0"
-    esutils "^2.0.2"
-    optionator "^0.8.1"
-  optionalDependencies:
-    source-map "~0.6.1"
-
-escodegen@^2.0.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/escodegen/-/escodegen-2.1.0.tgz#ba93bbb7a43986d29d6041f99f5262da773e2e17"
-  integrity sha512-2NlIDTwUWJN0mRPQOdtQBzbUHvdGY2P1VXSyU83Q3xKxM7WHX2Ql8dKq782Q9TgQUNOLEzEYu9bzLNj1q88I5w==
-  dependencies:
-    esprima "^4.0.1"
-    estraverse "^5.2.0"
-    esutils "^2.0.2"
-  optionalDependencies:
-    source-map "~0.6.1"
-
-eslint-plugin-react@^7.32.2:
-  version "7.33.2"
-  resolved "https://registry.yarnpkg.com/eslint-plugin-react/-/eslint-plugin-react-7.33.2.tgz#69ee09443ffc583927eafe86ffebb470ee737608"
-  integrity sha512-73QQMKALArI8/7xGLNI/3LylrEYrlKZSb5C9+q3OtOewTnMQi5cT+aE9E41sLCmli3I9PGGmD1yiZydyo4FEPw==
-  dependencies:
-    array-includes "^3.1.6"
-    array.prototype.flatmap "^1.3.1"
-    array.prototype.tosorted "^1.1.1"
-    doctrine "^2.1.0"
-    es-iterator-helpers "^1.0.12"
-    estraverse "^5.3.0"
-    jsx-ast-utils "^2.4.1 || ^3.0.0"
-    minimatch "^3.1.2"
-    object.entries "^1.1.6"
-    object.fromentries "^2.0.6"
-    object.hasown "^1.1.2"
-    object.values "^1.1.6"
-    prop-types "^15.8.1"
-    resolve "^2.0.0-next.4"
-    semver "^6.3.1"
-    string.prototype.matchall "^4.0.8"
-
-eslint-plugin-simple-import-sort@^10.0.0:
-  version "10.0.0"
-  resolved "https://registry.yarnpkg.com/eslint-plugin-simple-import-sort/-/eslint-plugin-simple-import-sort-10.0.0.tgz#cc4ceaa81ba73252427062705b64321946f61351"
-  integrity sha512-AeTvO9UCMSNzIHRkg8S6c3RPy5YEwKWSQPx3DYghLedo2ZQxowPFLGDN1AZ2evfg6r6mjBSZSLxLFsWSu3acsw==
-
-eslint-scope@^5.1.1:
-  version "5.1.1"
-  resolved "https://registry.yarnpkg.com/eslint-scope/-/eslint-scope-5.1.1.tgz#e786e59a66cb92b3f6c1fb0d508aab174848f48c"
-  integrity sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==
-  dependencies:
-    esrecurse "^4.3.0"
-    estraverse "^4.1.1"
-
-eslint-scope@^7.2.2:
-  version "7.2.2"
-  resolved "https://registry.yarnpkg.com/eslint-scope/-/eslint-scope-7.2.2.tgz#deb4f92563390f32006894af62a22dba1c46423f"
-  integrity sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==
-  dependencies:
-    esrecurse "^4.3.0"
-    estraverse "^5.2.0"
-
-eslint-visitor-keys@^3.3.0, eslint-visitor-keys@^3.4.1, eslint-visitor-keys@^3.4.3:
-  version "3.4.3"
-  resolved "https://registry.yarnpkg.com/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz#0cd72fe8550e3c2eae156a96a4dddcd1c8ac5800"
-  integrity sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==
-
-eslint@^8.0.0:
-  version "8.48.0"
-  resolved "https://registry.yarnpkg.com/eslint/-/eslint-8.48.0.tgz#bf9998ba520063907ba7bfe4c480dc8be03c2155"
-  integrity sha512-sb6DLeIuRXxeM1YljSe1KEx9/YYeZFQWcV8Rq9HfigmdDEugjLEVEa1ozDjL6YDjBpQHPJxJzze+alxi4T3OLg==
-  dependencies:
-    "@eslint-community/eslint-utils" "^4.2.0"
-    "@eslint-community/regexpp" "^4.6.1"
-    "@eslint/eslintrc" "^2.1.2"
-    "@eslint/js" "8.48.0"
-    "@humanwhocodes/config-array" "^0.11.10"
-    "@humanwhocodes/module-importer" "^1.0.1"
-    "@nodelib/fs.walk" "^1.2.8"
-    ajv "^6.12.4"
-    chalk "^4.0.0"
-    cross-spawn "^7.0.2"
-    debug "^4.3.2"
-    doctrine "^3.0.0"
-    escape-string-regexp "^4.0.0"
-    eslint-scope "^7.2.2"
-    eslint-visitor-keys "^3.4.3"
-    espree "^9.6.1"
-    esquery "^1.4.2"
-    esutils "^2.0.2"
-    fast-deep-equal "^3.1.3"
-    file-entry-cache "^6.0.1"
-    find-up "^5.0.0"
-    glob-parent "^6.0.2"
-    globals "^13.19.0"
-    graphemer "^1.4.0"
-    ignore "^5.2.0"
-    imurmurhash "^0.1.4"
-    is-glob "^4.0.0"
-    is-path-inside "^3.0.3"
-    js-yaml "^4.1.0"
-    json-stable-stringify-without-jsonify "^1.0.1"
-    levn "^0.4.1"
-    lodash.merge "^4.6.2"
-    minimatch "^3.1.2"
-    natural-compare "^1.4.0"
-    optionator "^0.9.3"
-    strip-ansi "^6.0.1"
-    text-table "^0.2.0"
-
-espree@^9.6.0, espree@^9.6.1:
-  version "9.6.1"
-  resolved "https://registry.yarnpkg.com/espree/-/espree-9.6.1.tgz#a2a17b8e434690a5432f2f8018ce71d331a48c6f"
-  integrity sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==
-  dependencies:
-    acorn "^8.9.0"
-    acorn-jsx "^5.3.2"
-    eslint-visitor-keys "^3.4.1"
-
-esprima@^4.0.0, esprima@^4.0.1:
-  version "4.0.1"
-  resolved "https://registry.yarnpkg.com/esprima/-/esprima-4.0.1.tgz#13b04cdb3e6c5d19df91ab6987a8695619b0aa71"
-  integrity sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==
-
-esquery@^1.4.2:
-  version "1.5.0"
-  resolved "https://registry.yarnpkg.com/esquery/-/esquery-1.5.0.tgz#6ce17738de8577694edd7361c57182ac8cb0db0b"
-  integrity sha512-YQLXUplAwJgCydQ78IMJywZCceoqk1oH01OERdSAJc/7U2AylwjhSCLDEtqwg811idIS/9fIU5GjG73IgjKMVg==
-  dependencies:
-    estraverse "^5.1.0"
-
-esrecurse@^4.3.0:
-  version "4.3.0"
-  resolved "https://registry.yarnpkg.com/esrecurse/-/esrecurse-4.3.0.tgz#7ad7964d679abb28bee72cec63758b1c5d2c9921"
-  integrity sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==
-  dependencies:
-    estraverse "^5.2.0"
-
-estraverse@^4.1.1, estraverse@^4.2.0:
-  version "4.3.0"
-  resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-4.3.0.tgz#398ad3f3c5a24948be7725e83d11a7de28cdbd1d"
-  integrity sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==
-
-estraverse@^5.1.0, estraverse@^5.2.0, estraverse@^5.3.0:
-  version "5.3.0"
-  resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-5.3.0.tgz#2eea5290702f26ab8fe5370370ff86c965d21123"
-  integrity sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==
-
-esutils@^2.0.2:
-  version "2.0.3"
-  resolved "https://registry.yarnpkg.com/esutils/-/esutils-2.0.3.tgz#74d2eb4de0b8da1293711910d50775b9b710ef64"
-  integrity sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==
-
-event-target-shim@^5.0.0:
-  version "5.0.1"
-  resolved "https://registry.yarnpkg.com/event-target-shim/-/event-target-shim-5.0.1.tgz#5d4d3ebdf9583d63a5333ce2deb7480ab2b05789"
-  integrity sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==
-
-execa@7.1.1:
-  version "7.1.1"
-  resolved "https://registry.yarnpkg.com/execa/-/execa-7.1.1.tgz#3eb3c83d239488e7b409d48e8813b76bb55c9c43"
-  integrity sha512-wH0eMf/UXckdUYnO21+HDztteVv05rq2GXksxT4fCGeHkBhw1DROXh40wcjMcRqDOWE7iPJ4n3M7e2+YFP+76Q==
-  dependencies:
-    cross-spawn "^7.0.3"
-    get-stream "^6.0.1"
-    human-signals "^4.3.0"
-    is-stream "^3.0.0"
-    merge-stream "^2.0.0"
-    npm-run-path "^5.1.0"
-    onetime "^6.0.0"
-    signal-exit "^3.0.7"
-    strip-final-newline "^3.0.0"
-
-execa@^5.0.0, execa@^5.1.1:
-  version "5.1.1"
-  resolved "https://registry.yarnpkg.com/execa/-/execa-5.1.1.tgz#f80ad9cbf4298f7bd1d4c9555c21e93741c411dd"
-  integrity sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==
-  dependencies:
-    cross-spawn "^7.0.3"
-    get-stream "^6.0.0"
-    human-signals "^2.1.0"
-    is-stream "^2.0.0"
-    merge-stream "^2.0.0"
-    npm-run-path "^4.0.1"
-    onetime "^5.1.2"
-    signal-exit "^3.0.3"
-    strip-final-newline "^2.0.0"
-
-execa@^7.1.1:
-  version "7.2.0"
-  resolved "https://registry.yarnpkg.com/execa/-/execa-7.2.0.tgz#657e75ba984f42a70f38928cedc87d6f2d4fe4e9"
-  integrity sha512-UduyVP7TLB5IcAQl+OzLyLcS/l32W/GLg+AhHJ+ow40FOk2U3SAllPwR44v4vmdFwIWqpdwxxpQbF1n5ta9seA==
-  dependencies:
-    cross-spawn "^7.0.3"
-    get-stream "^6.0.1"
-    human-signals "^4.3.0"
-    is-stream "^3.0.0"
-    merge-stream "^2.0.0"
-    npm-run-path "^5.1.0"
-    onetime "^6.0.0"
-    signal-exit "^3.0.7"
-    strip-final-newline "^3.0.0"
-
-exif-parser@^0.1.12:
-  version "0.1.12"
-  resolved "https://registry.yarnpkg.com/exif-parser/-/exif-parser-0.1.12.tgz#58a9d2d72c02c1f6f02a0ef4a9166272b7760922"
-  integrity sha512-c2bQfLNbMzLPmzQuOr8fy0csy84WmwnER81W88DzTp9CYNPJ6yzOj2EZAh9pywYpqHnshVLHQJ8WzldAyfY+Iw==
-
-exit@^0.1.2:
-  version "0.1.2"
-  resolved "https://registry.yarnpkg.com/exit/-/exit-0.1.2.tgz#0632638f8d877cc82107d30a0fff1a17cba1cd0c"
-  integrity sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==
-
-expand-template@^2.0.3:
-  version "2.0.3"
-  resolved "https://registry.yarnpkg.com/expand-template/-/expand-template-2.0.3.tgz#6e14b3fcee0f3a6340ecb57d2e8918692052a47c"
-  integrity sha512-XYfuKMvj4O35f/pOXLObndIRvyQ+/+6AhODh+OKWj9S9498pHHn/IMszH+gt0fBCRWMNfk1ZSp5x3AifmnI2vg==
-
-expect@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/expect/-/expect-27.5.1.tgz#83ce59f1e5bdf5f9d2b94b61d2050db48f3fef74"
-  integrity sha512-E1q5hSUG2AmYQwQJ041nvgpkODHQvB+RKlB4IYdru6uJsyFTRyZAP463M+1lINorwbqAmUggi6+WwkD8lCS/Dw==
-  dependencies:
-    "@jest/types" "^27.5.1"
-    jest-get-type "^27.5.1"
-    jest-matcher-utils "^27.5.1"
-    jest-message-util "^27.5.1"
-
-external-editor@^3.0.3:
-  version "3.1.0"
-  resolved "https://registry.yarnpkg.com/external-editor/-/external-editor-3.1.0.tgz#cb03f740befae03ea4d283caed2741a83f335495"
-  integrity sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==
-  dependencies:
-    chardet "^0.7.0"
-    iconv-lite "^0.4.24"
-    tmp "^0.0.33"
-
-fast-deep-equal@^3.1.1, fast-deep-equal@^3.1.3:
-  version "3.1.3"
-  resolved "https://registry.yarnpkg.com/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz#3a7d56b559d6cbc3eb512325244e619a65c6c525"
-  integrity sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==
-
-fast-glob@^3.2.11, fast-glob@^3.2.9:
-  version "3.3.1"
-  resolved "https://registry.yarnpkg.com/fast-glob/-/fast-glob-3.3.1.tgz#784b4e897340f3dbbef17413b3f11acf03c874c4"
-  integrity sha512-kNFPyjhh5cKjrUltxs+wFx+ZkbRaxxmZ+X0ZU31SOsxCEtP9VPgtq2teZw1DebupL5GmDaNQ6yKMMVcM41iqDg==
-  dependencies:
-    "@nodelib/fs.stat" "^2.0.2"
-    "@nodelib/fs.walk" "^1.2.3"
-    glob-parent "^5.1.2"
-    merge2 "^1.3.0"
-    micromatch "^4.0.4"
-
-fast-json-stable-stringify@2.x, fast-json-stable-stringify@^2.0.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz#874bf69c6f404c2b5d99c481341399fd55892633"
-  integrity sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==
-
-fast-levenshtein@^2.0.6, fast-levenshtein@~2.0.6:
-  version "2.0.6"
-  resolved "https://registry.yarnpkg.com/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz#3d8a5c66883a16a30ca8643e851f19baa7797917"
-  integrity sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==
-
-fast-redact@^3.0.0:
-  version "3.3.0"
-  resolved "https://registry.yarnpkg.com/fast-redact/-/fast-redact-3.3.0.tgz#7c83ce3a7be4898241a46560d51de10f653f7634"
-  integrity sha512-6T5V1QK1u4oF+ATxs1lWUmlEk6P2T9HqJG3e2DnHOdVgZy2rFJBoEnrIedcTXlkAHU/zKC+7KETJ+KGGKwxgMQ==
-
-fastq@^1.6.0:
-  version "1.15.0"
-  resolved "https://registry.yarnpkg.com/fastq/-/fastq-1.15.0.tgz#d04d07c6a2a68fe4599fea8d2e103a937fae6b3a"
-  integrity sha512-wBrocU2LCXXa+lWBt8RoIRD89Fi8OdABODa/kEnyeyjS5aZO5/GNvI5sEINADqP/h8M29UHTHUb53sUu5Ihqdw==
-  dependencies:
-    reusify "^1.0.4"
-
-fb-watchman@^2.0.0:
-  version "2.0.2"
-  resolved "https://registry.yarnpkg.com/fb-watchman/-/fb-watchman-2.0.2.tgz#e9524ee6b5c77e9e5001af0f85f3adbb8623255c"
-  integrity sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==
-  dependencies:
-    bser "2.1.1"
-
-fetch-blob@^3.1.2, fetch-blob@^3.1.4:
-  version "3.2.0"
-  resolved "https://registry.yarnpkg.com/fetch-blob/-/fetch-blob-3.2.0.tgz#f09b8d4bbd45adc6f0c20b7e787e793e309dcce9"
-  integrity sha512-7yAQpD2UMJzLi1Dqv7qFYnPbaPx7ZfFK6PiIxQ4PfkGPyNyl2Ugx+a/umUonmKqjhM4DnfbMvdX6otXq83soQQ==
-  dependencies:
-    node-domexception "^1.0.0"
-    web-streams-polyfill "^3.0.3"
-
-figures@^5.0.0:
-  version "5.0.0"
-  resolved "https://registry.yarnpkg.com/figures/-/figures-5.0.0.tgz#126cd055052dea699f8a54e8c9450e6ecfc44d5f"
-  integrity sha512-ej8ksPF4x6e5wvK9yevct0UCXh8TTFlWGVLlgjZuoBH1HwjIfKE/IdL5mq89sFA7zELi1VhKpmtDnrs7zWyeyg==
-  dependencies:
-    escape-string-regexp "^5.0.0"
-    is-unicode-supported "^1.2.0"
-
-file-entry-cache@^6.0.1:
-  version "6.0.1"
-  resolved "https://registry.yarnpkg.com/file-entry-cache/-/file-entry-cache-6.0.1.tgz#211b2dd9659cb0394b073e7323ac3c933d522027"
-  integrity sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==
-  dependencies:
-    flat-cache "^3.0.4"
-
-file-type@^16.5.4:
-  version "16.5.4"
-  resolved "https://registry.yarnpkg.com/file-type/-/file-type-16.5.4.tgz#474fb4f704bee427681f98dd390058a172a6c2fd"
-  integrity sha512-/yFHK0aGjFEgDJjEKP0pWCplsPFPhwyfwevf/pVxiN0tmE4L9LmwWxWukdJSHdoCli4VgQLehjJtwQBnqmsKcw==
-  dependencies:
-    readable-web-to-node-stream "^3.0.0"
-    strtok3 "^6.2.4"
-    token-types "^4.1.1"
-
-fill-range@^7.0.1:
-  version "7.0.1"
-  resolved "https://registry.yarnpkg.com/fill-range/-/fill-range-7.0.1.tgz#1919a6a7c75fe38b2c7c77e5198535da9acdda40"
-  integrity sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==
-  dependencies:
-    to-regex-range "^5.0.1"
-
-find-up@^2.0.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/find-up/-/find-up-2.1.0.tgz#45d1b7e506c717ddd482775a2b77920a3c0c57a7"
-  integrity sha512-NWzkk0jSJtTt08+FBFMvXoeZnOJD+jTtsRmBYbAIzJdX6l7dLgR7CTubCM5/eDdPUBvLCeVasP1brfVR/9/EZQ==
-  dependencies:
-    locate-path "^2.0.0"
-
-find-up@^4.0.0, find-up@^4.1.0:
-  version "4.1.0"
-  resolved "https://registry.yarnpkg.com/find-up/-/find-up-4.1.0.tgz#97afe7d6cdc0bc5928584b7c8d7b16e8a9aa5d19"
-  integrity sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==
-  dependencies:
-    locate-path "^5.0.0"
-    path-exists "^4.0.0"
-
-find-up@^5.0.0:
-  version "5.0.0"
-  resolved "https://registry.yarnpkg.com/find-up/-/find-up-5.0.0.tgz#4c92819ecb7083561e4f4a240a86be5198f536fc"
-  integrity sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==
-  dependencies:
-    locate-path "^6.0.0"
-    path-exists "^4.0.0"
-
-flat-cache@^3.0.4:
-  version "3.1.0"
-  resolved "https://registry.yarnpkg.com/flat-cache/-/flat-cache-3.1.0.tgz#0e54ab4a1a60fe87e2946b6b00657f1c99e1af3f"
-  integrity sha512-OHx4Qwrrt0E4jEIcI5/Xb+f+QmJYNj2rrK8wiIdQOIrB9WrrJL8cjZvXdXuBTkkEwEqLycb5BeZDV1o2i9bTew==
-  dependencies:
-    flatted "^3.2.7"
-    keyv "^4.5.3"
-    rimraf "^3.0.2"
-
-flatted@^3.2.7:
-  version "3.2.7"
-  resolved "https://registry.yarnpkg.com/flatted/-/flatted-3.2.7.tgz#609f39207cb614b89d0765b477cb2d437fbf9787"
-  integrity sha512-5nqDSxl8nn5BSNxyR3n4I6eDmbolI6WT+QqR547RwxQapgjQBmtktdP+HTBb/a/zLsbzERTONyUB5pefh5TtjQ==
-
-follow-redirects@^1.15.0:
-  version "1.15.2"
-  resolved "https://registry.yarnpkg.com/follow-redirects/-/follow-redirects-1.15.2.tgz#b460864144ba63f2681096f274c4e57026da2c13"
-  integrity sha512-VQLG33o04KaQ8uYi2tVNbdrWp1QWxNNea+nmIB4EVM28v0hmP17z7aG1+wAkNzVq4KeXTq3221ye5qTJP91JwA==
-
-for-each@^0.3.3:
-  version "0.3.3"
-  resolved "https://registry.yarnpkg.com/for-each/-/for-each-0.3.3.tgz#69b447e88a0a5d32c3e7084f3f1710034b21376e"
-  integrity sha512-jqYfLp7mo9vIyQf8ykW2v7A+2N4QjeCeI5+Dz9XraiO1ign81wjiH7Fb9vSOWvQfNtmSa4H2RoQTrrXivdUZmw==
-  dependencies:
-    is-callable "^1.1.3"
-
-form-data-encoder@^2.1.2:
-  version "2.1.4"
-  resolved "https://registry.yarnpkg.com/form-data-encoder/-/form-data-encoder-2.1.4.tgz#261ea35d2a70d48d30ec7a9603130fa5515e9cd5"
-  integrity sha512-yDYSgNMraqvnxiEXO4hi88+YZxaHC6QKzb5N84iRCTDeRO7ZALpir/lVmf/uXUhnwUr2O4HU8s/n6x+yNjQkHw==
-
-form-data@^2.5.0:
-  version "2.5.1"
-  resolved "https://registry.yarnpkg.com/form-data/-/form-data-2.5.1.tgz#f2cbec57b5e59e23716e128fe44d4e5dd23895f4"
-  integrity sha512-m21N3WOmEEURgk6B9GLOE4RuWOFf28Lhh9qGYeNlGq4VDXUlJy2th2slBNU8Gp8EzloYZOibZJ7t5ecIrFSjVA==
-  dependencies:
-    asynckit "^0.4.0"
-    combined-stream "^1.0.6"
-    mime-types "^2.1.12"
-
-form-data@^3.0.0:
-  version "3.0.1"
-  resolved "https://registry.yarnpkg.com/form-data/-/form-data-3.0.1.tgz#ebd53791b78356a99af9a300d4282c4d5eb9755f"
-  integrity sha512-RHkBKtLWUVwd7SqRIvCZMEvAMoGUp0XU+seQiZejj0COz3RI3hWP4sCv3gZWWLjJTd7rGwcsF5eKZGii0r/hbg==
-  dependencies:
-    asynckit "^0.4.0"
-    combined-stream "^1.0.8"
-    mime-types "^2.1.12"
-
-form-data@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/form-data/-/form-data-4.0.0.tgz#93919daeaf361ee529584b9b31664dc12c9fa452"
-  integrity sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==
-  dependencies:
-    asynckit "^0.4.0"
-    combined-stream "^1.0.8"
-    mime-types "^2.1.12"
-
-formdata-polyfill@^4.0.10:
-  version "4.0.10"
-  resolved "https://registry.yarnpkg.com/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz#24807c31c9d402e002ab3d8c720144ceb8848423"
-  integrity sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==
-  dependencies:
-    fetch-blob "^3.1.2"
-
-fs-constants@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/fs-constants/-/fs-constants-1.0.0.tgz#6be0de9be998ce16af8afc24497b9ee9b7ccd9ad"
-  integrity sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow==
-
-fs-extra@^8.1.0:
-  version "8.1.0"
-  resolved "https://registry.yarnpkg.com/fs-extra/-/fs-extra-8.1.0.tgz#49d43c45a88cd9677668cb7be1b46efdb8d2e1c0"
-  integrity sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==
-  dependencies:
-    graceful-fs "^4.2.0"
-    jsonfile "^4.0.0"
-    universalify "^0.1.0"
-
-fs.realpath@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/fs.realpath/-/fs.realpath-1.0.0.tgz#1504ad2523158caa40db4a2787cb01411994ea4f"
-  integrity sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==
-
-fsevents@^2.3.2:
-  version "2.3.3"
-  resolved "https://registry.yarnpkg.com/fsevents/-/fsevents-2.3.3.tgz#cac6407785d03675a2a5e1a5305c697b347d90d6"
-  integrity sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==
-
-function-bind@^1.1.1:
-  version "1.1.1"
-  resolved "https://registry.yarnpkg.com/function-bind/-/function-bind-1.1.1.tgz#a56899d3ea3c9bab874bb9773b7c5ede92f4895d"
-  integrity sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==
-
-function.prototype.name@^1.1.5:
-  version "1.1.5"
-  resolved "https://registry.yarnpkg.com/function.prototype.name/-/function.prototype.name-1.1.5.tgz#cce0505fe1ffb80503e6f9e46cc64e46a12a9621"
-  integrity sha512-uN7m/BzVKQnCUF/iW8jYea67v++2u7m5UgENbHRtdDVclOUP+FMPlCNdmk0h/ysGyo2tavMJEDqJAkJdRa1vMA==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.3"
-    es-abstract "^1.19.0"
-    functions-have-names "^1.2.2"
-
-functions-have-names@^1.2.2, functions-have-names@^1.2.3:
-  version "1.2.3"
-  resolved "https://registry.yarnpkg.com/functions-have-names/-/functions-have-names-1.2.3.tgz#0404fe4ee2ba2f607f0e0ec3c80bae994133b834"
-  integrity sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==
-
-futoin-hkdf@^1.5.1:
-  version "1.5.3"
-  resolved "https://registry.yarnpkg.com/futoin-hkdf/-/futoin-hkdf-1.5.3.tgz#6c8024f2e1429da086d4e18289ef2239ad33ee35"
-  integrity sha512-SewY5KdMpaoCeh7jachEWFsh1nNlaDjNHZXWqL5IGwtpEYHTgkr2+AMCgNwKWkcc0wpSYrZfR7he4WdmHFtDxQ==
-
-gensync@^1.0.0-beta.2:
-  version "1.0.0-beta.2"
-  resolved "https://registry.yarnpkg.com/gensync/-/gensync-1.0.0-beta.2.tgz#32a6ee76c3d7f52d46b2b1ae5d93fea8580a25e0"
-  integrity sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==
-
-get-caller-file@^2.0.5:
-  version "2.0.5"
-  resolved "https://registry.yarnpkg.com/get-caller-file/-/get-caller-file-2.0.5.tgz#4f94412a82db32f36e3b0b9741f8a97feb031f7e"
-  integrity sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==
-
-get-intrinsic@^1.0.2, get-intrinsic@^1.1.1, get-intrinsic@^1.1.3, get-intrinsic@^1.2.0, get-intrinsic@^1.2.1:
-  version "1.2.1"
-  resolved "https://registry.yarnpkg.com/get-intrinsic/-/get-intrinsic-1.2.1.tgz#d295644fed4505fc9cde952c37ee12b477a83d82"
-  integrity sha512-2DcsyfABl+gVHEfCOaTrWgyt+tb6MSEGmKq+kI5HwLbIYgjgmMcV8KQ41uaKz1xxUcn9tJtgFbQUEVcEbd0FYw==
-  dependencies:
-    function-bind "^1.1.1"
-    has "^1.0.3"
-    has-proto "^1.0.1"
-    has-symbols "^1.0.3"
-
-get-package-type@^0.1.0:
-  version "0.1.0"
-  resolved "https://registry.yarnpkg.com/get-package-type/-/get-package-type-0.1.0.tgz#8de2d803cff44df3bc6c456e6668b36c3926e11a"
-  integrity sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==
-
-get-pkg-repo@^4.0.0:
-  version "4.2.1"
-  resolved "https://registry.yarnpkg.com/get-pkg-repo/-/get-pkg-repo-4.2.1.tgz#75973e1c8050c73f48190c52047c4cee3acbf385"
-  integrity sha512-2+QbHjFRfGB74v/pYWjd5OhU3TDIC2Gv/YKUTk/tCvAz0pkn/Mz6P3uByuBimLOcPvN2jYdScl3xGFSrx0jEcA==
-  dependencies:
-    "@hutson/parse-repository-url" "^3.0.0"
-    hosted-git-info "^4.0.0"
-    through2 "^2.0.0"
-    yargs "^16.2.0"
-
-get-stream@^6.0.0, get-stream@^6.0.1:
-  version "6.0.1"
-  resolved "https://registry.yarnpkg.com/get-stream/-/get-stream-6.0.1.tgz#a262d8eef67aced57c2852ad6167526a43cbf7b7"
-  integrity sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==
-
-get-symbol-description@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/get-symbol-description/-/get-symbol-description-1.0.0.tgz#7fdb81c900101fbd564dd5f1a30af5aadc1e58d6"
-  integrity sha512-2EmdH1YvIQiZpltCNgkuiUnyukzxM/R6NDJX31Ke3BG1Nq5b0S2PhX59UKi9vZpPDQVdqn+1IcaAwnzTT5vCjw==
-  dependencies:
-    call-bind "^1.0.2"
-    get-intrinsic "^1.1.1"
-
-get-uri@^6.0.1:
-  version "6.0.1"
-  resolved "https://registry.yarnpkg.com/get-uri/-/get-uri-6.0.1.tgz#cff2ba8d456c3513a04b70c45de4dbcca5b1527c"
-  integrity sha512-7ZqONUVqaabogsYNWlYj0t3YZaL6dhuEueZXGF+/YVmf6dHmaFg8/6psJKqhx9QykIDKzpGcy2cn4oV4YC7V/Q==
-  dependencies:
-    basic-ftp "^5.0.2"
-    data-uri-to-buffer "^5.0.1"
-    debug "^4.3.4"
-    fs-extra "^8.1.0"
-
-gifwrap@^0.9.2:
-  version "0.9.4"
-  resolved "https://registry.yarnpkg.com/gifwrap/-/gifwrap-0.9.4.tgz#f4eb6169ba027d61df64aafbdcb1f8ae58ccc0c5"
-  integrity sha512-MDMwbhASQuVeD4JKd1fKgNgCRL3fGqMM4WaqpNhWO0JiMOAjbQdumbs4BbBZEy9/M00EHEjKN3HieVhCUlwjeQ==
-  dependencies:
-    image-q "^4.0.0"
-    omggif "^1.0.10"
-
-git-raw-commits@^2.0.8:
-  version "2.0.11"
-  resolved "https://registry.yarnpkg.com/git-raw-commits/-/git-raw-commits-2.0.11.tgz#bc3576638071d18655e1cc60d7f524920008d723"
-  integrity sha512-VnctFhw+xfj8Va1xtfEqCUD2XDrbAPSJx+hSrE5K7fGdjZruW7XV+QOrN7LF/RJyvspRiD2I0asWsxFp0ya26A==
-  dependencies:
-    dargs "^7.0.0"
-    lodash "^4.17.15"
-    meow "^8.0.0"
-    split2 "^3.0.0"
-    through2 "^4.0.0"
-
-git-remote-origin-url@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/git-remote-origin-url/-/git-remote-origin-url-2.0.0.tgz#5282659dae2107145a11126112ad3216ec5fa65f"
-  integrity sha512-eU+GGrZgccNJcsDH5LkXR3PB9M958hxc7sbA8DFJjrv9j4L2P/eZfKhM+QD6wyzpiv+b1BpK0XrYCxkovtjSLw==
-  dependencies:
-    gitconfiglocal "^1.0.0"
-    pify "^2.3.0"
-
-git-semver-tags@^4.1.1:
-  version "4.1.1"
-  resolved "https://registry.yarnpkg.com/git-semver-tags/-/git-semver-tags-4.1.1.tgz#63191bcd809b0ec3e151ba4751c16c444e5b5780"
-  integrity sha512-OWyMt5zBe7xFs8vglMmhM9lRQzCWL3WjHtxNNfJTMngGym7pC1kh8sP6jevfydJ6LP3ZvGxfb6ABYgPUM0mtsA==
-  dependencies:
-    meow "^8.0.0"
-    semver "^6.0.0"
-
-git-up@^7.0.0:
-  version "7.0.0"
-  resolved "https://registry.yarnpkg.com/git-up/-/git-up-7.0.0.tgz#bace30786e36f56ea341b6f69adfd83286337467"
-  integrity sha512-ONdIrbBCFusq1Oy0sC71F5azx8bVkvtZtMJAsv+a6lz5YAmbNnLD6HAB4gptHZVLPR8S2/kVN6Gab7lryq5+lQ==
-  dependencies:
-    is-ssh "^1.4.0"
-    parse-url "^8.1.0"
-
-git-url-parse@13.1.0:
-  version "13.1.0"
-  resolved "https://registry.yarnpkg.com/git-url-parse/-/git-url-parse-13.1.0.tgz#07e136b5baa08d59fabdf0e33170de425adf07b4"
-  integrity sha512-5FvPJP/70WkIprlUZ33bm4UAaFdjcLkJLpWft1BeZKqwR0uhhNGoKwlUaPtVb4LxCSQ++erHapRak9kWGj+FCA==
-  dependencies:
-    git-up "^7.0.0"
-
-gitconfiglocal@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/gitconfiglocal/-/gitconfiglocal-1.0.0.tgz#41d045f3851a5ea88f03f24ca1c6178114464b9b"
-  integrity sha512-spLUXeTAVHxDtKsJc8FkFVgFtMdEN9qPGpL23VfSHx4fP4+Ds097IXLvymbnDH8FnmxX5Nr9bPw3A+AQ6mWEaQ==
-  dependencies:
-    ini "^1.3.2"
-
-github-from-package@0.0.0:
-  version "0.0.0"
-  resolved "https://registry.yarnpkg.com/github-from-package/-/github-from-package-0.0.0.tgz#97fb5d96bfde8973313f20e8288ef9a167fa64ce"
-  integrity sha512-SyHy3T1v2NUXn29OsWdxmK6RwHD+vkj3v8en8AOBZ1wBQ/hCAQ5bAQTD02kW4W9tUp/3Qh6J8r9EvntiyCmOOw==
-
-glob-parent@^5.1.2:
-  version "5.1.2"
-  resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-5.1.2.tgz#869832c58034fe68a4093c17dc15e8340d8401c4"
-  integrity sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==
-  dependencies:
-    is-glob "^4.0.1"
-
-glob-parent@^6.0.2:
-  version "6.0.2"
-  resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-6.0.2.tgz#6d237d99083950c79290f24c7642a3de9a28f9e3"
-  integrity sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==
-  dependencies:
-    is-glob "^4.0.3"
-
-glob@^7.0.0, glob@^7.1.1, glob@^7.1.2, glob@^7.1.3, glob@^7.1.4:
-  version "7.2.3"
-  resolved "https://registry.yarnpkg.com/glob/-/glob-7.2.3.tgz#b8df0fb802bbfa8e89bd1d938b4e16578ed44f2b"
-  integrity sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==
-  dependencies:
-    fs.realpath "^1.0.0"
-    inflight "^1.0.4"
-    inherits "2"
-    minimatch "^3.1.1"
-    once "^1.3.0"
-    path-is-absolute "^1.0.0"
-
-global-dirs@^3.0.0:
-  version "3.0.1"
-  resolved "https://registry.yarnpkg.com/global-dirs/-/global-dirs-3.0.1.tgz#0c488971f066baceda21447aecb1a8b911d22485"
-  integrity sha512-NBcGGFbBA9s1VzD41QXDG+3++t9Mn5t1FpLdhESY6oKY4gYTFpX4wO3sqGUa0Srjtbfj3szX0RnemmrVRUdULA==
-  dependencies:
-    ini "2.0.0"
-
-global@~4.4.0:
-  version "4.4.0"
-  resolved "https://registry.yarnpkg.com/global/-/global-4.4.0.tgz#3e7b105179006a323ed71aafca3e9c57a5cc6406"
-  integrity sha512-wv/LAoHdRE3BeTGz53FAamhGlPLhlssK45usmGFThIi4XqnBmjKQ16u+RNbP7WvigRZDxUsM0J3gcQ5yicaL0w==
-  dependencies:
-    min-document "^2.19.0"
-    process "^0.11.10"
-
-globals@^11.1.0:
-  version "11.12.0"
-  resolved "https://registry.yarnpkg.com/globals/-/globals-11.12.0.tgz#ab8795338868a0babd8525758018c2a7eb95c42e"
-  integrity sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==
-
-globals@^13.19.0:
-  version "13.21.0"
-  resolved "https://registry.yarnpkg.com/globals/-/globals-13.21.0.tgz#163aae12f34ef502f5153cfbdd3600f36c63c571"
-  integrity sha512-ybyme3s4yy/t/3s35bewwXKOf7cvzfreG2lH0lZl0JB7I4GxRP2ghxOK/Nb9EkRXdbBXZLfq/p/0W2JUONB/Gg==
-  dependencies:
-    type-fest "^0.20.2"
-
-globalthis@^1.0.3:
-  version "1.0.3"
-  resolved "https://registry.yarnpkg.com/globalthis/-/globalthis-1.0.3.tgz#5852882a52b80dc301b0660273e1ed082f0b6ccf"
-  integrity sha512-sFdI5LyBiNTHjRd7cGPWapiHWMOXKyuBNX/cWJ3NfzrZQVa8GI/8cofCl74AOVqq9W5kNmguTIzJ/1s2gyI9wA==
-  dependencies:
-    define-properties "^1.1.3"
-
-globby@13.1.4:
-  version "13.1.4"
-  resolved "https://registry.yarnpkg.com/globby/-/globby-13.1.4.tgz#2f91c116066bcec152465ba36e5caa4a13c01317"
-  integrity sha512-iui/IiiW+QrJ1X1hKH5qwlMQyv34wJAYwH1vrf8b9kBA4sNiif3gKsMHa+BrdnOpEudWjpotfa7LrTzB1ERS/g==
-  dependencies:
-    dir-glob "^3.0.1"
-    fast-glob "^3.2.11"
-    ignore "^5.2.0"
-    merge2 "^1.4.1"
-    slash "^4.0.0"
-
-globby@^11.1.0:
-  version "11.1.0"
-  resolved "https://registry.yarnpkg.com/globby/-/globby-11.1.0.tgz#bd4be98bb042f83d796f7e3811991fbe82a0d34b"
-  integrity sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==
-  dependencies:
-    array-union "^2.1.0"
-    dir-glob "^3.0.1"
-    fast-glob "^3.2.9"
-    ignore "^5.2.0"
-    merge2 "^1.4.1"
-    slash "^3.0.0"
-
-gopd@^1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/gopd/-/gopd-1.0.1.tgz#29ff76de69dac7489b7c0918a5788e56477c332c"
-  integrity sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==
-  dependencies:
-    get-intrinsic "^1.1.3"
-
-got@12.6.1, got@^12.1.0:
-  version "12.6.1"
-  resolved "https://registry.yarnpkg.com/got/-/got-12.6.1.tgz#8869560d1383353204b5a9435f782df9c091f549"
-  integrity sha512-mThBblvlAF1d4O5oqyvN+ZxLAYwIJK7bpMxgYqPD9okW0C3qm5FFn7k811QrcuEBwaogR3ngOFoCfs6mRv7teQ==
-  dependencies:
-    "@sindresorhus/is" "^5.2.0"
-    "@szmarczak/http-timer" "^5.0.1"
-    cacheable-lookup "^7.0.0"
-    cacheable-request "^10.2.8"
-    decompress-response "^6.0.0"
-    form-data-encoder "^2.1.2"
-    get-stream "^6.0.1"
-    http2-wrapper "^2.1.10"
-    lowercase-keys "^3.0.0"
-    p-cancelable "^3.0.0"
-    responselike "^3.0.0"
-
-graceful-fs@4.2.10:
-  version "4.2.10"
-  resolved "https://registry.yarnpkg.com/graceful-fs/-/graceful-fs-4.2.10.tgz#147d3a006da4ca3ce14728c7aefc287c367d7a6c"
-  integrity sha512-9ByhssR2fPVsNZj478qUUbKfmL0+t5BDVyjShtyZZLiK7ZDAArFFfopyOTj0M05wE2tJPisA4iTnnXl2YoPvOA==
-
-graceful-fs@^4.1.2, graceful-fs@^4.1.6, graceful-fs@^4.2.0, graceful-fs@^4.2.6, graceful-fs@^4.2.9:
-  version "4.2.11"
-  resolved "https://registry.yarnpkg.com/graceful-fs/-/graceful-fs-4.2.11.tgz#4183e4e8bf08bb6e05bbb2f7d2e0c8f712ca40e3"
-  integrity sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==
-
-graphemer@^1.4.0:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/graphemer/-/graphemer-1.4.0.tgz#fb2f1d55e0e3a1849aeffc90c4fa0dd53a0e66c6"
-  integrity sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==
-
-handlebars@^4.7.7:
-  version "4.7.8"
-  resolved "https://registry.yarnpkg.com/handlebars/-/handlebars-4.7.8.tgz#41c42c18b1be2365439188c77c6afae71c0cd9e9"
-  integrity sha512-vafaFqs8MZkRrSX7sFVUdo3ap/eNiLnb4IakshzvP56X5Nr1iGKAIqdX6tMlm6HcNRIkr6AxO5jFEoJzzpT8aQ==
-  dependencies:
-    minimist "^1.2.5"
-    neo-async "^2.6.2"
-    source-map "^0.6.1"
-    wordwrap "^1.0.0"
-  optionalDependencies:
-    uglify-js "^3.1.4"
-
-hard-rejection@^2.1.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/hard-rejection/-/hard-rejection-2.1.0.tgz#1c6eda5c1685c63942766d79bb40ae773cecd883"
-  integrity sha512-VIZB+ibDhx7ObhAe7OVtoEbuP4h/MuOTHJ+J8h/eBXotJYl0fBgR72xDFCKgIh22OJZIOVNxBMWuhAr10r8HdA==
-
-has-bigints@^1.0.1, has-bigints@^1.0.2:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/has-bigints/-/has-bigints-1.0.2.tgz#0871bd3e3d51626f6ca0966668ba35d5602d6eaa"
-  integrity sha512-tSvCKtBr9lkF0Ex0aQiP9N+OpV4zi2r/Nee5VkRDbaqv35RLYMzbwQfFSZZH0kR+Rd6302UJZ2p/bJCEoR3VoQ==
-
-has-flag@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-3.0.0.tgz#b5d454dc2199ae225699f3467e5a07f3b955bafd"
-  integrity sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==
-
-has-flag@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-4.0.0.tgz#944771fd9c81c81265c4d6941860da06bb59479b"
-  integrity sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==
-
-has-property-descriptors@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/has-property-descriptors/-/has-property-descriptors-1.0.0.tgz#610708600606d36961ed04c196193b6a607fa861"
-  integrity sha512-62DVLZGoiEBDHQyqG4w9xCuZ7eJEwNmJRWw2VY84Oedb7WFcA27fiEVe8oUQx9hAUJ4ekurquucTGwsyO1XGdQ==
-  dependencies:
-    get-intrinsic "^1.1.1"
-
-has-proto@^1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/has-proto/-/has-proto-1.0.1.tgz#1885c1305538958aff469fef37937c22795408e0"
-  integrity sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg==
-
-has-symbols@^1.0.2, has-symbols@^1.0.3:
-  version "1.0.3"
-  resolved "https://registry.yarnpkg.com/has-symbols/-/has-symbols-1.0.3.tgz#bb7b2c4349251dce87b125f7bdf874aa7c8b39f8"
-  integrity sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==
-
-has-tostringtag@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/has-tostringtag/-/has-tostringtag-1.0.0.tgz#7e133818a7d394734f941e73c3d3f9291e658b25"
-  integrity sha512-kFjcSNhnlGV1kyoGk7OXKSawH5JOb/LzUc5w9B02hOTO0dfFRjbHQKvg1d6cf3HbeUmtU9VbbV3qzZ2Teh97WQ==
-  dependencies:
-    has-symbols "^1.0.2"
-
-has-yarn@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/has-yarn/-/has-yarn-3.0.0.tgz#c3c21e559730d1d3b57e28af1f30d06fac38147d"
-  integrity sha512-IrsVwUHhEULx3R8f/aA8AHuEzAorplsab/v8HBzEiIukwq5i/EC+xmOW+HfP1OaDP+2JkgT1yILHN2O3UFIbcA==
-
-has@^1.0.3:
-  version "1.0.3"
-  resolved "https://registry.yarnpkg.com/has/-/has-1.0.3.tgz#722d7cbfc1f6aa8241f16dd814e011e1f41e8796"
-  integrity sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==
-  dependencies:
-    function-bind "^1.1.1"
-
-hosted-git-info@^2.1.4:
-  version "2.8.9"
-  resolved "https://registry.yarnpkg.com/hosted-git-info/-/hosted-git-info-2.8.9.tgz#dffc0bf9a21c02209090f2aa69429e1414daf3f9"
-  integrity sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==
-
-hosted-git-info@^4.0.0, hosted-git-info@^4.0.1:
-  version "4.1.0"
-  resolved "https://registry.yarnpkg.com/hosted-git-info/-/hosted-git-info-4.1.0.tgz#827b82867e9ff1c8d0c4d9d53880397d2c86d224"
-  integrity sha512-kyCuEOWjJqZuDbRHzL8V93NzQhwIB71oFWSyzVo+KPZI+pnQPPxucdkrOZvkLRnrf5URsQM+IJ09Dw29cRALIA==
-  dependencies:
-    lru-cache "^6.0.0"
-
-html-encoding-sniffer@^2.0.1:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/html-encoding-sniffer/-/html-encoding-sniffer-2.0.1.tgz#42a6dc4fd33f00281176e8b23759ca4e4fa185f3"
-  integrity sha512-D5JbOMBIR/TVZkubHT+OyT2705QvogUW4IBn6nHd756OwieSF9aDYFj4dv6HHEVGYbHaLETa3WggZYWWMyy3ZQ==
-  dependencies:
-    whatwg-encoding "^1.0.5"
-
-html-escaper@^2.0.0:
-  version "2.0.2"
-  resolved "https://registry.yarnpkg.com/html-escaper/-/html-escaper-2.0.2.tgz#dfd60027da36a36dfcbe236262c00a5822681453"
-  integrity sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==
-
-htmlparser2@^8.0.1:
-  version "8.0.2"
-  resolved "https://registry.yarnpkg.com/htmlparser2/-/htmlparser2-8.0.2.tgz#f002151705b383e62433b5cf466f5b716edaec21"
-  integrity sha512-GYdjWKDkbRLkZ5geuHs5NY1puJ+PXwP7+fHPRz06Eirsb9ugf6d8kkXav6ADhcODhFFPMIXyxkxSuMf3D6NCFA==
-  dependencies:
-    domelementtype "^2.3.0"
-    domhandler "^5.0.3"
-    domutils "^3.0.1"
-    entities "^4.4.0"
-
-http-cache-semantics@^4.1.1:
-  version "4.1.1"
-  resolved "https://registry.yarnpkg.com/http-cache-semantics/-/http-cache-semantics-4.1.1.tgz#abe02fcb2985460bf0323be664436ec3476a6d5a"
-  integrity sha512-er295DKPVsV82j5kw1Gjt+ADA/XYHsajl82cGNQG2eyoPkvgUhX+nDIyelzhIWbbsXP39EHcI6l5tYs2FYqYXQ==
-
-http-proxy-agent@^4.0.1:
-  version "4.0.1"
-  resolved "https://registry.yarnpkg.com/http-proxy-agent/-/http-proxy-agent-4.0.1.tgz#8a8c8ef7f5932ccf953c296ca8291b95aa74aa3a"
-  integrity sha512-k0zdNgqWTGA6aeIRVpvfVob4fL52dTfaehylg0Y4UvSySvOq/Y+BOyPrgpUrA7HylqvU8vIZGsRuXmspskV0Tg==
-  dependencies:
-    "@tootallnate/once" "1"
-    agent-base "6"
-    debug "4"
-
-http-proxy-agent@^7.0.0:
-  version "7.0.0"
-  resolved "https://registry.yarnpkg.com/http-proxy-agent/-/http-proxy-agent-7.0.0.tgz#e9096c5afd071a3fce56e6252bb321583c124673"
-  integrity sha512-+ZT+iBxVUQ1asugqnD6oWoRiS25AkjNfG085dKJGtGxkdwLQrMKU5wJr2bOOFAXzKcTuqq+7fZlTMgG3SRfIYQ==
-  dependencies:
-    agent-base "^7.1.0"
-    debug "^4.3.4"
-
-http2-wrapper@^2.1.10:
-  version "2.2.0"
-  resolved "https://registry.yarnpkg.com/http2-wrapper/-/http2-wrapper-2.2.0.tgz#b80ad199d216b7d3680195077bd7b9060fa9d7f3"
-  integrity sha512-kZB0wxMo0sh1PehyjJUWRFEd99KC5TLjZ2cULC4f9iqJBAmKQQXEICjxl5iPJRwP40dpeHFqqhm7tYCvODpqpQ==
-  dependencies:
-    quick-lru "^5.1.1"
-    resolve-alpn "^1.2.0"
-
-https-proxy-agent@^5.0.0:
-  version "5.0.1"
-  resolved "https://registry.yarnpkg.com/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz#c59ef224a04fe8b754f3db0063a25ea30d0005d6"
-  integrity sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==
-  dependencies:
-    agent-base "6"
-    debug "4"
-
-https-proxy-agent@^7.0.0:
-  version "7.0.1"
-  resolved "https://registry.yarnpkg.com/https-proxy-agent/-/https-proxy-agent-7.0.1.tgz#0277e28f13a07d45c663633841e20a40aaafe0ab"
-  integrity sha512-Eun8zV0kcYS1g19r78osiQLEFIRspRUDd9tIfBCTBPBeMieF/EsJNL8VI3xOIdYRDEkjQnqOYPsZ2DsWsVsFwQ==
-  dependencies:
-    agent-base "^7.0.2"
-    debug "4"
-
-human-signals@^2.1.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/human-signals/-/human-signals-2.1.0.tgz#dc91fcba42e4d06e4abaed33b3e7a3c02f514ea0"
-  integrity sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==
-
-human-signals@^4.3.0:
-  version "4.3.1"
-  resolved "https://registry.yarnpkg.com/human-signals/-/human-signals-4.3.1.tgz#ab7f811e851fca97ffbd2c1fe9a958964de321b2"
-  integrity sha512-nZXjEF2nbo7lIw3mgYjItAfgQXog3OjJogSbKa2CQIIvSGWcKgeJnQlNXip6NglNzYH45nSRiEVimMvYL8DDqQ==
-
-iconv-lite@0.4.24, iconv-lite@^0.4.24:
-  version "0.4.24"
-  resolved "https://registry.yarnpkg.com/iconv-lite/-/iconv-lite-0.4.24.tgz#2022b4b25fbddc21d2f524974a474aafe733908b"
-  integrity sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==
-  dependencies:
-    safer-buffer ">= 2.1.2 < 3"
-
-ieee754@^1.1.13, ieee754@^1.2.1:
-  version "1.2.1"
-  resolved "https://registry.yarnpkg.com/ieee754/-/ieee754-1.2.1.tgz#8eb7a10a63fff25d15a57b001586d177d1b0d352"
-  integrity sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==
-
-ignore@^5.2.0:
-  version "5.2.4"
-  resolved "https://registry.yarnpkg.com/ignore/-/ignore-5.2.4.tgz#a291c0c6178ff1b960befe47fcdec301674a6324"
-  integrity sha512-MAb38BcSbH0eHNBxn7ql2NH/kX33OkB3lZ1BNdh7ENeRChHTYsTvWrMubiIAMNS2llXEEgZ1MUOBtXChP3kaFQ==
-
-image-q@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/image-q/-/image-q-4.0.0.tgz#31e075be7bae3c1f42a85c469b4732c358981776"
-  integrity sha512-PfJGVgIfKQJuq3s0tTDOKtztksibuUEbJQIYT3by6wctQo+Rdlh7ef4evJ5NCdxY4CfMbvFkocEwbl4BF8RlJw==
-  dependencies:
-    "@types/node" "16.9.1"
-
-import-fresh@^3.2.1:
-  version "3.3.0"
-  resolved "https://registry.yarnpkg.com/import-fresh/-/import-fresh-3.3.0.tgz#37162c25fcb9ebaa2e6e53d5b4d88ce17d9e0c2b"
-  integrity sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==
-  dependencies:
-    parent-module "^1.0.0"
-    resolve-from "^4.0.0"
-
-import-lazy@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/import-lazy/-/import-lazy-4.0.0.tgz#e8eb627483a0a43da3c03f3e35548be5cb0cc153"
-  integrity sha512-rKtvo6a868b5Hu3heneU+L4yEQ4jYKLtjpnPeUdK7h0yzXGmyBTypknlkCvHFBqfX9YlorEiMM6Dnq/5atfHkw==
-
-import-local@^3.0.2:
-  version "3.1.0"
-  resolved "https://registry.yarnpkg.com/import-local/-/import-local-3.1.0.tgz#b4479df8a5fd44f6cdce24070675676063c95cb4"
-  integrity sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==
-  dependencies:
-    pkg-dir "^4.2.0"
-    resolve-cwd "^3.0.0"
-
-imurmurhash@^0.1.4:
-  version "0.1.4"
-  resolved "https://registry.yarnpkg.com/imurmurhash/-/imurmurhash-0.1.4.tgz#9218b9b2b928a238b13dc4fb6b6d576f231453ea"
-  integrity sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==
-
-indent-string@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/indent-string/-/indent-string-4.0.0.tgz#624f8f4497d619b2d9768531d58f4122854d7251"
-  integrity sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==
-
-inflight@^1.0.4:
-  version "1.0.6"
-  resolved "https://registry.yarnpkg.com/inflight/-/inflight-1.0.6.tgz#49bd6331d7d02d0c09bc910a1075ba8165b56df9"
-  integrity sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==
-  dependencies:
-    once "^1.3.0"
-    wrappy "1"
-
-inherits@2, inherits@^2.0.3, inherits@^2.0.4, inherits@~2.0.3:
-  version "2.0.4"
-  resolved "https://registry.yarnpkg.com/inherits/-/inherits-2.0.4.tgz#0fa2c64f932917c3433a0ded55363aae37416b7c"
-  integrity sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==
-
-ini@2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/ini/-/ini-2.0.0.tgz#e5fd556ecdd5726be978fa1001862eacb0a94bc5"
-  integrity sha512-7PnF4oN3CvZF23ADhA5wRaYEQpJ8qygSkbtTXWBeXWXmEVRXK+1ITciHWwHhsjv1TmW0MgacIv6hEi5pX5NQdA==
-
-ini@^1.3.2, ini@^1.3.4, ini@~1.3.0:
-  version "1.3.8"
-  resolved "https://registry.yarnpkg.com/ini/-/ini-1.3.8.tgz#a29da425b48806f34767a4efce397269af28432c"
-  integrity sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==
-
-inquirer@9.2.6:
-  version "9.2.6"
-  resolved "https://registry.yarnpkg.com/inquirer/-/inquirer-9.2.6.tgz#802a61ee3eefbf1cb82a7fb6c2ae95a106050e01"
-  integrity sha512-y71l237eJJKS4rl7sQcEUiMhrR0pB/ZnRMMTxLpjJhWL4hdWCT03a6jJnC1w6qIPSRZWEozuieGt3v7XaEJYFw==
-  dependencies:
-    ansi-escapes "^4.3.2"
-    chalk "^5.2.0"
-    cli-cursor "^3.1.0"
-    cli-width "^4.0.0"
-    external-editor "^3.0.3"
-    figures "^5.0.0"
-    lodash "^4.17.21"
-    mute-stream "1.0.0"
-    ora "^5.4.1"
-    run-async "^3.0.0"
-    rxjs "^7.8.1"
-    string-width "^4.2.3"
-    strip-ansi "^6.0.1"
-    through "^2.3.6"
-    wrap-ansi "^6.0.1"
-
-internal-slot@^1.0.3, internal-slot@^1.0.4, internal-slot@^1.0.5:
-  version "1.0.5"
-  resolved "https://registry.yarnpkg.com/internal-slot/-/internal-slot-1.0.5.tgz#f2a2ee21f668f8627a4667f309dc0f4fb6674986"
-  integrity sha512-Y+R5hJrzs52QCG2laLn4udYVnxsfny9CpOhNhUvk/SSSVyF6T27FzRbF0sroPidSu3X8oEAkOn2K804mjpt6UQ==
-  dependencies:
-    get-intrinsic "^1.2.0"
-    has "^1.0.3"
-    side-channel "^1.0.4"
-
-interpret@^1.0.0:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/interpret/-/interpret-1.4.0.tgz#665ab8bc4da27a774a40584e812e3e0fa45b1a1e"
-  integrity sha512-agE4QfB2Lkp9uICn7BAqoscw4SZP9kTE2hxiFI3jBPmXJfdqiahTbUuKGsMoN2GtqL9AxhYioAcVvgsb1HvRbA==
-
-ip@^1.1.8:
-  version "1.1.8"
-  resolved "https://registry.yarnpkg.com/ip/-/ip-1.1.8.tgz#ae05948f6b075435ed3307acce04629da8cdbf48"
-  integrity sha512-PuExPYUiu6qMBQb4l06ecm6T6ujzhmh+MeJcW9wa89PoAz5pvd4zPgN5WJV104mb6S2T1AwNIAaB70JNrLQWhg==
-
-ip@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/ip/-/ip-2.0.0.tgz#4cf4ab182fee2314c75ede1276f8c80b479936da"
-  integrity sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ==
-
-is-arguments@^1.1.1:
-  version "1.1.1"
-  resolved "https://registry.yarnpkg.com/is-arguments/-/is-arguments-1.1.1.tgz#15b3f88fda01f2a97fec84ca761a560f123efa9b"
-  integrity sha512-8Q7EARjzEnKpt/PCD7e1cgUS0a6X8u5tdSiMqXhojOdoV9TsMsiO+9VLC5vAmO8N7/GmXn7yjR8qnA6bVAEzfA==
-  dependencies:
-    call-bind "^1.0.2"
-    has-tostringtag "^1.0.0"
-
-is-array-buffer@^3.0.1, is-array-buffer@^3.0.2:
-  version "3.0.2"
-  resolved "https://registry.yarnpkg.com/is-array-buffer/-/is-array-buffer-3.0.2.tgz#f2653ced8412081638ecb0ebbd0c41c6e0aecbbe"
-  integrity sha512-y+FyyR/w8vfIRq4eQcM1EYgSTnmHXPqaF+IgzgraytCFq5Xh8lllDVmAZolPJiZttZLeFSINPYMaEJ7/vWUa1w==
-  dependencies:
-    call-bind "^1.0.2"
-    get-intrinsic "^1.2.0"
-    is-typed-array "^1.1.10"
-
-is-arrayish@^0.2.1:
-  version "0.2.1"
-  resolved "https://registry.yarnpkg.com/is-arrayish/-/is-arrayish-0.2.1.tgz#77c99840527aa8ecb1a8ba697b80645a7a926a9d"
-  integrity sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==
-
-is-arrayish@^0.3.1:
-  version "0.3.2"
-  resolved "https://registry.yarnpkg.com/is-arrayish/-/is-arrayish-0.3.2.tgz#4574a2ae56f7ab206896fb431eaeed066fdf8f03"
-  integrity sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==
-
-is-async-function@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/is-async-function/-/is-async-function-2.0.0.tgz#8e4418efd3e5d3a6ebb0164c05ef5afb69aa9646"
-  integrity sha512-Y1JXKrfykRJGdlDwdKlLpLyMIiWqWvuSd17TvZk68PLAOGOoF4Xyav1z0Xhoi+gCYjZVeC5SI+hYFOfvXmGRCA==
-  dependencies:
-    has-tostringtag "^1.0.0"
-
-is-bigint@^1.0.1:
-  version "1.0.4"
-  resolved "https://registry.yarnpkg.com/is-bigint/-/is-bigint-1.0.4.tgz#08147a1875bc2b32005d41ccd8291dffc6691df3"
-  integrity sha512-zB9CruMamjym81i2JZ3UMn54PKGsQzsJeo6xvN3HJJ4CAsQNB6iRutp2To77OfCNuoxspsIhzaPoO1zyCEhFOg==
-  dependencies:
-    has-bigints "^1.0.1"
-
-is-boolean-object@^1.1.0:
-  version "1.1.2"
-  resolved "https://registry.yarnpkg.com/is-boolean-object/-/is-boolean-object-1.1.2.tgz#5c6dc200246dd9321ae4b885a114bb1f75f63719"
-  integrity sha512-gDYaKHJmnj4aWxyj6YHyXVpdQawtVLHU5cb+eztPGczf6cjuTdwve5ZIEfgXqH4e57An1D1AKf8CZ3kYrQRqYA==
-  dependencies:
-    call-bind "^1.0.2"
-    has-tostringtag "^1.0.0"
-
-is-callable@^1.1.3, is-callable@^1.1.4, is-callable@^1.2.7:
-  version "1.2.7"
-  resolved "https://registry.yarnpkg.com/is-callable/-/is-callable-1.2.7.tgz#3bc2a85ea742d9e36205dcacdd72ca1fdc51b055"
-  integrity sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==
-
-is-ci@3.0.1, is-ci@^3.0.1:
-  version "3.0.1"
-  resolved "https://registry.yarnpkg.com/is-ci/-/is-ci-3.0.1.tgz#db6ecbed1bd659c43dac0f45661e7674103d1867"
-  integrity sha512-ZYvCgrefwqoQ6yTyYUbQu64HsITZ3NfKX1lzaEYdkTDcfKzzCI/wthRRYKkdjHKFVgNiXKAKm65Zo1pk2as/QQ==
-  dependencies:
-    ci-info "^3.2.0"
-
-is-core-module@^2.13.0, is-core-module@^2.5.0, is-core-module@^2.9.0:
-  version "2.13.0"
-  resolved "https://registry.yarnpkg.com/is-core-module/-/is-core-module-2.13.0.tgz#bb52aa6e2cbd49a30c2ba68c42bf3435ba6072db"
-  integrity sha512-Z7dk6Qo8pOCp3l4tsX2C5ZVas4V+UxwQodwZhLopL91TX8UyyHEXafPcyoeeWuLrwzHcr3igO78wNLwHJHsMCQ==
-  dependencies:
-    has "^1.0.3"
-
-is-date-object@^1.0.1, is-date-object@^1.0.5:
-  version "1.0.5"
-  resolved "https://registry.yarnpkg.com/is-date-object/-/is-date-object-1.0.5.tgz#0841d5536e724c25597bf6ea62e1bd38298df31f"
-  integrity sha512-9YQaSxsAiSwcvS33MBk3wTCVnWK+HhF8VZR2jRxehM16QcVOdHqPn4VPHmRK4lSr38n9JriurInLcP90xsYNfQ==
-  dependencies:
-    has-tostringtag "^1.0.0"
-
-is-docker@^2.0.0, is-docker@^2.1.1:
-  version "2.2.1"
-  resolved "https://registry.yarnpkg.com/is-docker/-/is-docker-2.2.1.tgz#33eeabe23cfe86f14bde4408a02c0cfb853acdaa"
-  integrity sha512-F+i2BKsFrH66iaUFc0woD8sLy8getkwTwtOBjvs56Cx4CgJDeKQeqfz8wAYiSb8JOprWhHH5p77PbmYCvvUuXQ==
-
-is-docker@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/is-docker/-/is-docker-3.0.0.tgz#90093aa3106277d8a77a5910dbae71747e15a200"
-  integrity sha512-eljcgEDlEns/7AXFosB5K/2nCM4P7FQPkGc/DWLy5rmFEWvZayGrik1d9/QIY5nJ4f9YsVvBkA6kJpHn9rISdQ==
-
-is-extglob@^2.1.1:
-  version "2.1.1"
-  resolved "https://registry.yarnpkg.com/is-extglob/-/is-extglob-2.1.1.tgz#a88c02535791f02ed37c76a1b9ea9773c833f8c2"
-  integrity sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==
-
-is-finalizationregistry@^1.0.2:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/is-finalizationregistry/-/is-finalizationregistry-1.0.2.tgz#c8749b65f17c133313e661b1289b95ad3dbd62e6"
-  integrity sha512-0by5vtUJs8iFQb5TYUHHPudOR+qXYIMKtiUzvLIZITZUjknFmziyBJuLhVRc+Ds0dREFlskDNJKYIdIzu/9pfw==
-  dependencies:
-    call-bind "^1.0.2"
-
-is-fullwidth-code-point@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz#f116f8064fe90b3f7844a38997c0b75051269f1d"
-  integrity sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==
-
-is-function@^1.0.1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/is-function/-/is-function-1.0.2.tgz#4f097f30abf6efadac9833b17ca5dc03f8144e08"
-  integrity sha512-lw7DUp0aWXYg+CBCN+JKkcE0Q2RayZnSvnZBlwgxHBQhqt5pZNVy4Ri7H9GmmXkdu7LUthszM+Tor1u/2iBcpQ==
-
-is-generator-fn@^2.0.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/is-generator-fn/-/is-generator-fn-2.1.0.tgz#7d140adc389aaf3011a8f2a2a4cfa6faadffb118"
-  integrity sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==
-
-is-generator-function@^1.0.10:
-  version "1.0.10"
-  resolved "https://registry.yarnpkg.com/is-generator-function/-/is-generator-function-1.0.10.tgz#f1558baf1ac17e0deea7c0415c438351ff2b3c72"
-  integrity sha512-jsEjy9l3yiXEQ+PsXdmBwEPcOxaXWLspKdplFUVI9vq1iZgIekeC0L167qeu86czQaxed3q/Uzuw0swL0irL8A==
-  dependencies:
-    has-tostringtag "^1.0.0"
-
-is-glob@^4.0.0, is-glob@^4.0.1, is-glob@^4.0.3:
-  version "4.0.3"
-  resolved "https://registry.yarnpkg.com/is-glob/-/is-glob-4.0.3.tgz#64f61e42cbbb2eec2071a9dac0b28ba1e65d5084"
-  integrity sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==
-  dependencies:
-    is-extglob "^2.1.1"
-
-is-inside-container@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/is-inside-container/-/is-inside-container-1.0.0.tgz#e81fba699662eb31dbdaf26766a61d4814717ea4"
-  integrity sha512-KIYLCCJghfHZxqjYBE7rEy0OBuTd5xCHS7tHVgvCLkx7StIoaxwNW3hCALgEUjFfeRk+MG/Qxmp/vtETEF3tRA==
-  dependencies:
-    is-docker "^3.0.0"
-
-is-installed-globally@^0.4.0:
-  version "0.4.0"
-  resolved "https://registry.yarnpkg.com/is-installed-globally/-/is-installed-globally-0.4.0.tgz#9a0fd407949c30f86eb6959ef1b7994ed0b7b520"
-  integrity sha512-iwGqO3J21aaSkC7jWnHP/difazwS7SFeIqxv6wEtLU8Y5KlzFTjyqcSIT0d8s4+dDhKytsk9PJZ2BkS5eZwQRQ==
-  dependencies:
-    global-dirs "^3.0.0"
-    is-path-inside "^3.0.2"
-
-is-interactive@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/is-interactive/-/is-interactive-1.0.0.tgz#cea6e6ae5c870a7b0a0004070b7b587e0252912e"
-  integrity sha512-2HvIEKRoqS62guEC+qBjpvRubdX910WCMuJTZ+I9yvqKU2/12eSL549HMwtabb4oupdj2sMP50k+XJfB/8JE6w==
-
-is-interactive@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/is-interactive/-/is-interactive-2.0.0.tgz#40c57614593826da1100ade6059778d597f16e90"
-  integrity sha512-qP1vozQRI+BMOPcjFzrjXuQvdak2pHNUMZoeG2eRbiSqyvbEf/wQtEOTOX1guk6E3t36RkaqiSt8A/6YElNxLQ==
-
-is-map@^2.0.1, is-map@^2.0.2:
-  version "2.0.2"
-  resolved "https://registry.yarnpkg.com/is-map/-/is-map-2.0.2.tgz#00922db8c9bf73e81b7a335827bc2a43f2b91127"
-  integrity sha512-cOZFQQozTha1f4MxLFzlgKYPTyj26picdZTx82hbc/Xf4K/tZOOXSCkMvU4pKioRXGDLJRn0GM7Upe7kR721yg==
-
-is-negative-zero@^2.0.2:
-  version "2.0.2"
-  resolved "https://registry.yarnpkg.com/is-negative-zero/-/is-negative-zero-2.0.2.tgz#7bf6f03a28003b8b3965de3ac26f664d765f3150"
-  integrity sha512-dqJvarLawXsFbNDeJW7zAz8ItJ9cd28YufuuFzh0G8pNHjJMnY08Dv7sYX2uF5UpQOwieAeOExEYAWWfu7ZZUA==
-
-is-npm@^6.0.0:
-  version "6.0.0"
-  resolved "https://registry.yarnpkg.com/is-npm/-/is-npm-6.0.0.tgz#b59e75e8915543ca5d881ecff864077cba095261"
-  integrity sha512-JEjxbSmtPSt1c8XTkVrlujcXdKV1/tvuQ7GwKcAlyiVLeYFQ2VHat8xfrDJsIkhCdF/tZ7CiIR3sy141c6+gPQ==
-
-is-number-object@^1.0.4:
-  version "1.0.7"
-  resolved "https://registry.yarnpkg.com/is-number-object/-/is-number-object-1.0.7.tgz#59d50ada4c45251784e9904f5246c742f07a42fc"
-  integrity sha512-k1U0IRzLMo7ZlYIfzRu23Oh6MiIFasgpb9X76eqfFZAqwH44UI4KTBvBYIZ1dSL9ZzChTB9ShHfLkR4pdW5krQ==
-  dependencies:
-    has-tostringtag "^1.0.0"
-
-is-number@^7.0.0:
-  version "7.0.0"
-  resolved "https://registry.yarnpkg.com/is-number/-/is-number-7.0.0.tgz#7535345b896734d5f80c4d06c50955527a14f12b"
-  integrity sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==
-
-is-obj@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/is-obj/-/is-obj-2.0.0.tgz#473fb05d973705e3fd9620545018ca8e22ef4982"
-  integrity sha512-drqDG3cbczxxEJRoOXcOjtdp1J/lyp1mNn0xaznRs8+muBhgQcrnbspox5X5fOw0HnMnbfDzvnEMEtqDEJEo8w==
-
-is-path-inside@^3.0.2, is-path-inside@^3.0.3:
-  version "3.0.3"
-  resolved "https://registry.yarnpkg.com/is-path-inside/-/is-path-inside-3.0.3.tgz#d231362e53a07ff2b0e0ea7fed049161ffd16283"
-  integrity sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==
-
-is-plain-obj@^1.1.0:
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/is-plain-obj/-/is-plain-obj-1.1.0.tgz#71a50c8429dfca773c92a390a4a03b39fcd51d3e"
-  integrity sha512-yvkRyxmFKEOQ4pNXCmJG5AEQNlXJS5LaONXo5/cLdTZdWvsZ1ioJEonLGAosKlMWE8lwUy/bJzMjcw8az73+Fg==
-
-is-plain-object@^5.0.0:
-  version "5.0.0"
-  resolved "https://registry.yarnpkg.com/is-plain-object/-/is-plain-object-5.0.0.tgz#4427f50ab3429e9025ea7d52e9043a9ef4159344"
-  integrity sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==
-
-is-potential-custom-element-name@^1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/is-potential-custom-element-name/-/is-potential-custom-element-name-1.0.1.tgz#171ed6f19e3ac554394edf78caa05784a45bebb5"
-  integrity sha512-bCYeRA2rVibKZd+s2625gGnGF/t7DSqDs4dP7CrLA1m7jKWz6pps0LpYLJN8Q64HtmPKJ1hrN3nzPNKFEKOUiQ==
-
-is-regex@^1.1.4:
-  version "1.1.4"
-  resolved "https://registry.yarnpkg.com/is-regex/-/is-regex-1.1.4.tgz#eef5663cd59fa4c0ae339505323df6854bb15958"
-  integrity sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==
-  dependencies:
-    call-bind "^1.0.2"
-    has-tostringtag "^1.0.0"
-
-is-set@^2.0.1, is-set@^2.0.2:
-  version "2.0.2"
-  resolved "https://registry.yarnpkg.com/is-set/-/is-set-2.0.2.tgz#90755fa4c2562dc1c5d4024760d6119b94ca18ec"
-  integrity sha512-+2cnTEZeY5z/iXGbLhPrOAaK/Mau5k5eXq9j14CpRTftq0pAJu2MwVRSZhyZWBzx3o6X795Lz6Bpb6R0GKf37g==
-
-is-shared-array-buffer@^1.0.2:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/is-shared-array-buffer/-/is-shared-array-buffer-1.0.2.tgz#8f259c573b60b6a32d4058a1a07430c0a7344c79"
-  integrity sha512-sqN2UDu1/0y6uvXyStCOzyhAjCSlHceFoMKJW8W9EU9cvic/QdsZ0kEU93HEy3IUEFZIiH/3w+AH/UQbPHNdhA==
-  dependencies:
-    call-bind "^1.0.2"
-
-is-ssh@^1.4.0:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/is-ssh/-/is-ssh-1.4.0.tgz#4f8220601d2839d8fa624b3106f8e8884f01b8b2"
-  integrity sha512-x7+VxdxOdlV3CYpjvRLBv5Lo9OJerlYanjwFrPR9fuGPjCiNiCzFgAWpiLAohSbsnH4ZAys3SBh+hq5rJosxUQ==
-  dependencies:
-    protocols "^2.0.1"
-
-is-stream@^2.0.0:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/is-stream/-/is-stream-2.0.1.tgz#fac1e3d53b97ad5a9d0ae9cef2389f5810a5c077"
-  integrity sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==
-
-is-stream@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/is-stream/-/is-stream-3.0.0.tgz#e6bfd7aa6bef69f4f472ce9bb681e3e57b4319ac"
-  integrity sha512-LnQR4bZ9IADDRSkvpqMGvt/tEJWclzklNgSw48V5EAaAeDd6qGvN8ei6k5p0tvxSR171VmGyHuTiAOfxAbr8kA==
-
-is-string@^1.0.5, is-string@^1.0.7:
-  version "1.0.7"
-  resolved "https://registry.yarnpkg.com/is-string/-/is-string-1.0.7.tgz#0dd12bf2006f255bb58f695110eff7491eebc0fd"
-  integrity sha512-tE2UXzivje6ofPW7l23cjDOMa09gb7xlAqG6jG5ej6uPV32TlWP3NKPigtaGeHNu9fohccRYvIiZMfOOnOYUtg==
-  dependencies:
-    has-tostringtag "^1.0.0"
-
-is-symbol@^1.0.2, is-symbol@^1.0.3:
-  version "1.0.4"
-  resolved "https://registry.yarnpkg.com/is-symbol/-/is-symbol-1.0.4.tgz#a6dac93b635b063ca6872236de88910a57af139c"
-  integrity sha512-C/CPBqKWnvdcxqIARxyOh4v1UUEOCHpgDa0WYgpKDFMszcrPcffg5uhwSgPCLD2WWxmq6isisz87tzT01tuGhg==
-  dependencies:
-    has-symbols "^1.0.2"
-
-is-text-path@^1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/is-text-path/-/is-text-path-1.0.1.tgz#4e1aa0fb51bfbcb3e92688001397202c1775b66e"
-  integrity sha512-xFuJpne9oFz5qDaodwmmG08e3CawH/2ZV8Qqza1Ko7Sk8POWbkRdwIoAWVhqvq0XeUzANEhKo2n0IXUGBm7A/w==
-  dependencies:
-    text-extensions "^1.0.0"
-
-is-typed-array@^1.1.10, is-typed-array@^1.1.9:
-  version "1.1.12"
-  resolved "https://registry.yarnpkg.com/is-typed-array/-/is-typed-array-1.1.12.tgz#d0bab5686ef4a76f7a73097b95470ab199c57d4a"
-  integrity sha512-Z14TF2JNG8Lss5/HMqt0//T9JeHXttXy5pH/DBU4vi98ozO2btxzq9MwYDZYnKwU8nRsz/+GVFVRDq3DkVuSPg==
-  dependencies:
-    which-typed-array "^1.1.11"
-
-is-typedarray@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/is-typedarray/-/is-typedarray-1.0.0.tgz#e479c80858df0c1b11ddda6940f96011fcda4a9a"
-  integrity sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==
-
-is-unicode-supported@^0.1.0:
-  version "0.1.0"
-  resolved "https://registry.yarnpkg.com/is-unicode-supported/-/is-unicode-supported-0.1.0.tgz#3f26c76a809593b52bfa2ecb5710ed2779b522a7"
-  integrity sha512-knxG2q4UC3u8stRGyAVJCOdxFmv5DZiRcdlIaAQXAbSfJya+OhopNotLQrstBhququ4ZpuKbDc/8S6mgXgPFPw==
-
-is-unicode-supported@^1.1.0, is-unicode-supported@^1.2.0:
-  version "1.3.0"
-  resolved "https://registry.yarnpkg.com/is-unicode-supported/-/is-unicode-supported-1.3.0.tgz#d824984b616c292a2e198207d4a609983842f714"
-  integrity sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ==
-
-is-weakmap@^2.0.1:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/is-weakmap/-/is-weakmap-2.0.1.tgz#5008b59bdc43b698201d18f62b37b2ca243e8cf2"
-  integrity sha512-NSBR4kH5oVj1Uwvv970ruUkCV7O1mzgVFO4/rev2cLRda9Tm9HrL70ZPut4rOHgY0FNrUu9BCbXA2sdQ+x0chA==
-
-is-weakref@^1.0.2:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/is-weakref/-/is-weakref-1.0.2.tgz#9529f383a9338205e89765e0392efc2f100f06f2"
-  integrity sha512-qctsuLZmIQ0+vSSMfoVvyFe2+GSEvnmZ2ezTup1SBse9+twCCeial6EEi3Nc2KFcf6+qz2FBPnjXsk8xhKSaPQ==
-  dependencies:
-    call-bind "^1.0.2"
-
-is-weakset@^2.0.1:
-  version "2.0.2"
-  resolved "https://registry.yarnpkg.com/is-weakset/-/is-weakset-2.0.2.tgz#4569d67a747a1ce5a994dfd4ef6dcea76e7c0a1d"
-  integrity sha512-t2yVvttHkQktwnNNmBQ98AhENLdPUTDTE21uPqAQ0ARwQfGeQKRVS0NNurH7bTf7RrvcVn1OOge45CnBeHCSmg==
-  dependencies:
-    call-bind "^1.0.2"
-    get-intrinsic "^1.1.1"
-
-is-wsl@^2.2.0:
-  version "2.2.0"
-  resolved "https://registry.yarnpkg.com/is-wsl/-/is-wsl-2.2.0.tgz#74a4c76e77ca9fd3f932f290c17ea326cd157271"
-  integrity sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==
-  dependencies:
-    is-docker "^2.0.0"
-
-is-yarn-global@^0.4.0:
-  version "0.4.1"
-  resolved "https://registry.yarnpkg.com/is-yarn-global/-/is-yarn-global-0.4.1.tgz#b312d902b313f81e4eaf98b6361ba2b45cd694bb"
-  integrity sha512-/kppl+R+LO5VmhYSEWARUFjodS25D68gvj8W7z0I7OWhUla5xWu8KL6CtB2V0R6yqhnRgbcaREMr4EEM6htLPQ==
-
-isarray@^2.0.5:
-  version "2.0.5"
-  resolved "https://registry.yarnpkg.com/isarray/-/isarray-2.0.5.tgz#8af1e4c1221244cc62459faf38940d4e644a5723"
-  integrity sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==
-
-isarray@~1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/isarray/-/isarray-1.0.0.tgz#bb935d48582cba168c06834957a54a3e07124f11"
-  integrity sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==
-
-isexe@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/isexe/-/isexe-2.0.0.tgz#e8fbf374dc556ff8947a10dcb0572d633f2cfa10"
-  integrity sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==
-
-issue-parser@6.0.0:
-  version "6.0.0"
-  resolved "https://registry.yarnpkg.com/issue-parser/-/issue-parser-6.0.0.tgz#b1edd06315d4f2044a9755daf85fdafde9b4014a"
-  integrity sha512-zKa/Dxq2lGsBIXQ7CUZWTHfvxPC2ej0KfO7fIPqLlHB9J2hJ7rGhZ5rilhuufylr4RXYPzJUeFjKxz305OsNlA==
-  dependencies:
-    lodash.capitalize "^4.2.1"
-    lodash.escaperegexp "^4.1.2"
-    lodash.isplainobject "^4.0.6"
-    lodash.isstring "^4.0.1"
-    lodash.uniqby "^4.7.0"
-
-istanbul-lib-coverage@^3.0.0, istanbul-lib-coverage@^3.2.0:
-  version "3.2.0"
-  resolved "https://registry.yarnpkg.com/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.0.tgz#189e7909d0a39fa5a3dfad5b03f71947770191d3"
-  integrity sha512-eOeJ5BHCmHYvQK7xt9GkdHuzuCGS1Y6g9Gvnx3Ym33fz/HpLRYxiS0wHNr+m/MBC8B647Xt608vCDEvhl9c6Mw==
-
-istanbul-lib-instrument@^5.0.4, istanbul-lib-instrument@^5.1.0:
-  version "5.2.1"
-  resolved "https://registry.yarnpkg.com/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz#d10c8885c2125574e1c231cacadf955675e1ce3d"
-  integrity sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==
-  dependencies:
-    "@babel/core" "^7.12.3"
-    "@babel/parser" "^7.14.7"
-    "@istanbuljs/schema" "^0.1.2"
-    istanbul-lib-coverage "^3.2.0"
-    semver "^6.3.0"
-
-istanbul-lib-report@^3.0.0:
-  version "3.0.1"
-  resolved "https://registry.yarnpkg.com/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz#908305bac9a5bd175ac6a74489eafd0fc2445a7d"
-  integrity sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==
-  dependencies:
-    istanbul-lib-coverage "^3.0.0"
-    make-dir "^4.0.0"
-    supports-color "^7.1.0"
-
-istanbul-lib-source-maps@^4.0.0:
-  version "4.0.1"
-  resolved "https://registry.yarnpkg.com/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz#895f3a709fcfba34c6de5a42939022f3e4358551"
-  integrity sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==
-  dependencies:
-    debug "^4.1.1"
-    istanbul-lib-coverage "^3.0.0"
-    source-map "^0.6.1"
-
-istanbul-reports@^3.1.3:
-  version "3.1.6"
-  resolved "https://registry.yarnpkg.com/istanbul-reports/-/istanbul-reports-3.1.6.tgz#2544bcab4768154281a2f0870471902704ccaa1a"
-  integrity sha512-TLgnMkKg3iTDsQ9PbPTdpfAK2DzjF9mqUG7RMgcQl8oFjad8ob4laGxv5XV5U9MAfx8D6tSJiUyuAwzLicaxlg==
-  dependencies:
-    html-escaper "^2.0.0"
-    istanbul-lib-report "^3.0.0"
-
-iterate-iterator@^1.0.1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/iterate-iterator/-/iterate-iterator-1.0.2.tgz#551b804c9eaa15b847ea6a7cdc2f5bf1ec150f91"
-  integrity sha512-t91HubM4ZDQ70M9wqp+pcNpu8OyJ9UAtXntT/Bcsvp5tZMnz9vRa+IunKXeI8AnfZMTv0jNuVEmGeLSMjVvfPw==
-
-iterate-value@^1.0.2:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/iterate-value/-/iterate-value-1.0.2.tgz#935115bd37d006a52046535ebc8d07e9c9337f57"
-  integrity sha512-A6fMAio4D2ot2r/TYzr4yUWrmwNdsN5xL7+HUiyACE4DXm+q8HtPcnFTp+NnW3k4N05tZ7FVYFFb2CR13NxyHQ==
-  dependencies:
-    es-get-iterator "^1.0.2"
-    iterate-iterator "^1.0.1"
-
-iterator.prototype@^1.1.0:
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/iterator.prototype/-/iterator.prototype-1.1.0.tgz#690c88b043d821f783843aaf725d7ac3b62e3b46"
-  integrity sha512-rjuhAk1AJ1fssphHD0IFV6TWL40CwRZ53FrztKx43yk2v6rguBYsY4Bj1VU4HmoMmKwZUlx7mfnhDf9cOp4YTw==
-  dependencies:
-    define-properties "^1.1.4"
-    get-intrinsic "^1.1.3"
-    has-symbols "^1.0.3"
-    has-tostringtag "^1.0.0"
-    reflect.getprototypeof "^1.0.3"
-
-jest-changed-files@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-changed-files/-/jest-changed-files-27.5.1.tgz#a348aed00ec9bf671cc58a66fcbe7c3dfd6a68f5"
-  integrity sha512-buBLMiByfWGCoMsLLzGUUSpAmIAGnbR2KJoMN10ziLhOLvP4e0SlypHnAel8iqQXTrcbmfEY9sSqae5sgUsTvw==
-  dependencies:
-    "@jest/types" "^27.5.1"
-    execa "^5.0.0"
-    throat "^6.0.1"
-
-jest-circus@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-circus/-/jest-circus-27.5.1.tgz#37a5a4459b7bf4406e53d637b49d22c65d125ecc"
-  integrity sha512-D95R7x5UtlMA5iBYsOHFFbMD/GVA4R/Kdq15f7xYWUfWHBto9NYRsOvnSauTgdF+ogCpJ4tyKOXhUifxS65gdw==
-  dependencies:
-    "@jest/environment" "^27.5.1"
-    "@jest/test-result" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    "@types/node" "*"
-    chalk "^4.0.0"
-    co "^4.6.0"
-    dedent "^0.7.0"
-    expect "^27.5.1"
-    is-generator-fn "^2.0.0"
-    jest-each "^27.5.1"
-    jest-matcher-utils "^27.5.1"
-    jest-message-util "^27.5.1"
-    jest-runtime "^27.5.1"
-    jest-snapshot "^27.5.1"
-    jest-util "^27.5.1"
-    pretty-format "^27.5.1"
-    slash "^3.0.0"
-    stack-utils "^2.0.3"
-    throat "^6.0.1"
-
-jest-cli@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-cli/-/jest-cli-27.5.1.tgz#278794a6e6458ea8029547e6c6cbf673bd30b145"
-  integrity sha512-Hc6HOOwYq4/74/c62dEE3r5elx8wjYqxY0r0G/nFrLDPMFRu6RA/u8qINOIkvhxG7mMQ5EJsOGfRpI8L6eFUVw==
-  dependencies:
-    "@jest/core" "^27.5.1"
-    "@jest/test-result" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    chalk "^4.0.0"
-    exit "^0.1.2"
-    graceful-fs "^4.2.9"
-    import-local "^3.0.2"
-    jest-config "^27.5.1"
-    jest-util "^27.5.1"
-    jest-validate "^27.5.1"
-    prompts "^2.0.1"
-    yargs "^16.2.0"
-
-jest-config@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-config/-/jest-config-27.5.1.tgz#5c387de33dca3f99ad6357ddeccd91bf3a0e4a41"
-  integrity sha512-5sAsjm6tGdsVbW9ahcChPAFCk4IlkQUknH5AvKjuLTSlcO/wCZKyFdn7Rg0EkC+OGgWODEy2hDpWB1PgzH0JNA==
-  dependencies:
-    "@babel/core" "^7.8.0"
-    "@jest/test-sequencer" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    babel-jest "^27.5.1"
-    chalk "^4.0.0"
-    ci-info "^3.2.0"
-    deepmerge "^4.2.2"
-    glob "^7.1.1"
-    graceful-fs "^4.2.9"
-    jest-circus "^27.5.1"
-    jest-environment-jsdom "^27.5.1"
-    jest-environment-node "^27.5.1"
-    jest-get-type "^27.5.1"
-    jest-jasmine2 "^27.5.1"
-    jest-regex-util "^27.5.1"
-    jest-resolve "^27.5.1"
-    jest-runner "^27.5.1"
-    jest-util "^27.5.1"
-    jest-validate "^27.5.1"
-    micromatch "^4.0.4"
-    parse-json "^5.2.0"
-    pretty-format "^27.5.1"
-    slash "^3.0.0"
-    strip-json-comments "^3.1.1"
-
-jest-diff@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-diff/-/jest-diff-27.5.1.tgz#a07f5011ac9e6643cf8a95a462b7b1ecf6680def"
-  integrity sha512-m0NvkX55LDt9T4mctTEgnZk3fmEg3NRYutvMPWM/0iPnkFj2wIeF45O1718cMSOFO1vINkqmxqD8vE37uTEbqw==
-  dependencies:
-    chalk "^4.0.0"
-    diff-sequences "^27.5.1"
-    jest-get-type "^27.5.1"
-    pretty-format "^27.5.1"
-
-jest-docblock@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-docblock/-/jest-docblock-27.5.1.tgz#14092f364a42c6108d42c33c8cf30e058e25f6c0"
-  integrity sha512-rl7hlABeTsRYxKiUfpHrQrG4e2obOiTQWfMEH3PxPjOtdsfLQO4ReWSZaQ7DETm4xu07rl4q/h4zcKXyU0/OzQ==
-  dependencies:
-    detect-newline "^3.0.0"
-
-jest-each@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-each/-/jest-each-27.5.1.tgz#5bc87016f45ed9507fed6e4702a5b468a5b2c44e"
-  integrity sha512-1Ff6p+FbhT/bXQnEouYy00bkNSY7OUpfIcmdl8vZ31A1UUaurOLPA8a8BbJOF2RDUElwJhmeaV7LnagI+5UwNQ==
-  dependencies:
-    "@jest/types" "^27.5.1"
-    chalk "^4.0.0"
-    jest-get-type "^27.5.1"
-    jest-util "^27.5.1"
-    pretty-format "^27.5.1"
-
-jest-environment-jsdom@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-environment-jsdom/-/jest-environment-jsdom-27.5.1.tgz#ea9ccd1fc610209655a77898f86b2b559516a546"
-  integrity sha512-TFBvkTC1Hnnnrka/fUb56atfDtJ9VMZ94JkjTbggl1PEpwrYtUBKMezB3inLmWqQsXYLcMwNoDQwoBTAvFfsfw==
-  dependencies:
-    "@jest/environment" "^27.5.1"
-    "@jest/fake-timers" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    "@types/node" "*"
-    jest-mock "^27.5.1"
-    jest-util "^27.5.1"
-    jsdom "^16.6.0"
-
-jest-environment-node@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-environment-node/-/jest-environment-node-27.5.1.tgz#dedc2cfe52fab6b8f5714b4808aefa85357a365e"
-  integrity sha512-Jt4ZUnxdOsTGwSRAfKEnE6BcwsSPNOijjwifq5sDFSA2kesnXTvNqKHYgM0hDq3549Uf/KzdXNYn4wMZJPlFLw==
-  dependencies:
-    "@jest/environment" "^27.5.1"
-    "@jest/fake-timers" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    "@types/node" "*"
-    jest-mock "^27.5.1"
-    jest-util "^27.5.1"
-
-jest-get-type@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-get-type/-/jest-get-type-27.5.1.tgz#3cd613c507b0f7ace013df407a1c1cd578bcb4f1"
-  integrity sha512-2KY95ksYSaK7DMBWQn6dQz3kqAf3BB64y2udeG+hv4KfSOb9qwcYQstTJc1KCbsix+wLZWZYN8t7nwX3GOBLRw==
-
-jest-haste-map@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-haste-map/-/jest-haste-map-27.5.1.tgz#9fd8bd7e7b4fa502d9c6164c5640512b4e811e7f"
-  integrity sha512-7GgkZ4Fw4NFbMSDSpZwXeBiIbx+t/46nJ2QitkOjvwPYyZmqttu2TDSimMHP1EkPOi4xUZAN1doE5Vd25H4Jng==
-  dependencies:
-    "@jest/types" "^27.5.1"
-    "@types/graceful-fs" "^4.1.2"
-    "@types/node" "*"
-    anymatch "^3.0.3"
-    fb-watchman "^2.0.0"
-    graceful-fs "^4.2.9"
-    jest-regex-util "^27.5.1"
-    jest-serializer "^27.5.1"
-    jest-util "^27.5.1"
-    jest-worker "^27.5.1"
-    micromatch "^4.0.4"
-    walker "^1.0.7"
-  optionalDependencies:
-    fsevents "^2.3.2"
-
-jest-jasmine2@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-jasmine2/-/jest-jasmine2-27.5.1.tgz#a037b0034ef49a9f3d71c4375a796f3b230d1ac4"
-  integrity sha512-jtq7VVyG8SqAorDpApwiJJImd0V2wv1xzdheGHRGyuT7gZm6gG47QEskOlzsN1PG/6WNaCo5pmwMHDf3AkG2pQ==
-  dependencies:
-    "@jest/environment" "^27.5.1"
-    "@jest/source-map" "^27.5.1"
-    "@jest/test-result" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    "@types/node" "*"
-    chalk "^4.0.0"
-    co "^4.6.0"
-    expect "^27.5.1"
-    is-generator-fn "^2.0.0"
-    jest-each "^27.5.1"
-    jest-matcher-utils "^27.5.1"
-    jest-message-util "^27.5.1"
-    jest-runtime "^27.5.1"
-    jest-snapshot "^27.5.1"
-    jest-util "^27.5.1"
-    pretty-format "^27.5.1"
-    throat "^6.0.1"
-
-jest-leak-detector@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-leak-detector/-/jest-leak-detector-27.5.1.tgz#6ec9d54c3579dd6e3e66d70e3498adf80fde3fb8"
-  integrity sha512-POXfWAMvfU6WMUXftV4HolnJfnPOGEu10fscNCA76KBpRRhcMN2c8d3iT2pxQS3HLbA+5X4sOUPzYO2NUyIlHQ==
-  dependencies:
-    jest-get-type "^27.5.1"
-    pretty-format "^27.5.1"
-
-jest-matcher-utils@^27.0.0, jest-matcher-utils@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-matcher-utils/-/jest-matcher-utils-27.5.1.tgz#9c0cdbda8245bc22d2331729d1091308b40cf8ab"
-  integrity sha512-z2uTx/T6LBaCoNWNFWwChLBKYxTMcGBRjAt+2SbP929/Fflb9aa5LGma654Rz8z9HLxsrUaYzxE9T/EFIL/PAw==
-  dependencies:
-    chalk "^4.0.0"
-    jest-diff "^27.5.1"
-    jest-get-type "^27.5.1"
-    pretty-format "^27.5.1"
-
-jest-message-util@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-message-util/-/jest-message-util-27.5.1.tgz#bdda72806da10d9ed6425e12afff38cd1458b6cf"
-  integrity sha512-rMyFe1+jnyAAf+NHwTclDz0eAaLkVDdKVHHBFWsBWHnnh5YeJMNWWsv7AbFYXfK3oTqvL7VTWkhNLu1jX24D+g==
-  dependencies:
-    "@babel/code-frame" "^7.12.13"
-    "@jest/types" "^27.5.1"
-    "@types/stack-utils" "^2.0.0"
-    chalk "^4.0.0"
-    graceful-fs "^4.2.9"
-    micromatch "^4.0.4"
-    pretty-format "^27.5.1"
-    slash "^3.0.0"
-    stack-utils "^2.0.3"
-
-jest-mock@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-mock/-/jest-mock-27.5.1.tgz#19948336d49ef4d9c52021d34ac7b5f36ff967d6"
-  integrity sha512-K4jKbY1d4ENhbrG2zuPWaQBvDly+iZ2yAW+T1fATN78hc0sInwn7wZB8XtlNnvHug5RMwV897Xm4LqmPM4e2Og==
-  dependencies:
-    "@jest/types" "^27.5.1"
-    "@types/node" "*"
-
-jest-pnp-resolver@^1.2.2:
-  version "1.2.3"
-  resolved "https://registry.yarnpkg.com/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz#930b1546164d4ad5937d5540e711d4d38d4cad2e"
-  integrity sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==
-
-jest-regex-util@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-regex-util/-/jest-regex-util-27.5.1.tgz#4da143f7e9fd1e542d4aa69617b38e4a78365b95"
-  integrity sha512-4bfKq2zie+x16okqDXjXn9ql2B0dScQu+vcwe4TvFVhkVyuWLqpZrZtXxLLWoXYgn0E87I6r6GRYHF7wFZBUvg==
-
-jest-resolve-dependencies@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-resolve-dependencies/-/jest-resolve-dependencies-27.5.1.tgz#d811ecc8305e731cc86dd79741ee98fed06f1da8"
-  integrity sha512-QQOOdY4PE39iawDn5rzbIePNigfe5B9Z91GDD1ae/xNDlu9kaat8QQ5EKnNmVWPV54hUdxCVwwj6YMgR2O7IOg==
-  dependencies:
-    "@jest/types" "^27.5.1"
-    jest-regex-util "^27.5.1"
-    jest-snapshot "^27.5.1"
-
-jest-resolve@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-resolve/-/jest-resolve-27.5.1.tgz#a2f1c5a0796ec18fe9eb1536ac3814c23617b384"
-  integrity sha512-FFDy8/9E6CV83IMbDpcjOhumAQPDyETnU2KZ1O98DwTnz8AOBsW/Xv3GySr1mOZdItLR+zDZ7I/UdTFbgSOVCw==
-  dependencies:
-    "@jest/types" "^27.5.1"
-    chalk "^4.0.0"
-    graceful-fs "^4.2.9"
-    jest-haste-map "^27.5.1"
-    jest-pnp-resolver "^1.2.2"
-    jest-util "^27.5.1"
-    jest-validate "^27.5.1"
-    resolve "^1.20.0"
-    resolve.exports "^1.1.0"
-    slash "^3.0.0"
-
-jest-runner@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-runner/-/jest-runner-27.5.1.tgz#071b27c1fa30d90540805c5645a0ec167c7b62e5"
-  integrity sha512-g4NPsM4mFCOwFKXO4p/H/kWGdJp9V8kURY2lX8Me2drgXqG7rrZAx5kv+5H7wtt/cdFIjhqYx1HrlqWHaOvDaQ==
-  dependencies:
-    "@jest/console" "^27.5.1"
-    "@jest/environment" "^27.5.1"
-    "@jest/test-result" "^27.5.1"
-    "@jest/transform" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    "@types/node" "*"
-    chalk "^4.0.0"
-    emittery "^0.8.1"
-    graceful-fs "^4.2.9"
-    jest-docblock "^27.5.1"
-    jest-environment-jsdom "^27.5.1"
-    jest-environment-node "^27.5.1"
-    jest-haste-map "^27.5.1"
-    jest-leak-detector "^27.5.1"
-    jest-message-util "^27.5.1"
-    jest-resolve "^27.5.1"
-    jest-runtime "^27.5.1"
-    jest-util "^27.5.1"
-    jest-worker "^27.5.1"
-    source-map-support "^0.5.6"
-    throat "^6.0.1"
-
-jest-runtime@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-runtime/-/jest-runtime-27.5.1.tgz#4896003d7a334f7e8e4a53ba93fb9bcd3db0a1af"
-  integrity sha512-o7gxw3Gf+H2IGt8fv0RiyE1+r83FJBRruoA+FXrlHw6xEyBsU8ugA6IPfTdVyA0w8HClpbK+DGJxH59UrNMx8A==
-  dependencies:
-    "@jest/environment" "^27.5.1"
-    "@jest/fake-timers" "^27.5.1"
-    "@jest/globals" "^27.5.1"
-    "@jest/source-map" "^27.5.1"
-    "@jest/test-result" "^27.5.1"
-    "@jest/transform" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    chalk "^4.0.0"
-    cjs-module-lexer "^1.0.0"
-    collect-v8-coverage "^1.0.0"
-    execa "^5.0.0"
-    glob "^7.1.3"
-    graceful-fs "^4.2.9"
-    jest-haste-map "^27.5.1"
-    jest-message-util "^27.5.1"
-    jest-mock "^27.5.1"
-    jest-regex-util "^27.5.1"
-    jest-resolve "^27.5.1"
-    jest-snapshot "^27.5.1"
-    jest-util "^27.5.1"
-    slash "^3.0.0"
-    strip-bom "^4.0.0"
-
-jest-serializer@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-serializer/-/jest-serializer-27.5.1.tgz#81438410a30ea66fd57ff730835123dea1fb1f64"
-  integrity sha512-jZCyo6iIxO1aqUxpuBlwTDMkzOAJS4a3eYz3YzgxxVQFwLeSA7Jfq5cbqCY+JLvTDrWirgusI/0KwxKMgrdf7w==
-  dependencies:
-    "@types/node" "*"
-    graceful-fs "^4.2.9"
-
-jest-snapshot@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-snapshot/-/jest-snapshot-27.5.1.tgz#b668d50d23d38054a51b42c4039cab59ae6eb6a1"
-  integrity sha512-yYykXI5a0I31xX67mgeLw1DZ0bJB+gpq5IpSuCAoyDi0+BhgU/RIrL+RTzDmkNTchvDFWKP8lp+w/42Z3us5sA==
-  dependencies:
-    "@babel/core" "^7.7.2"
-    "@babel/generator" "^7.7.2"
-    "@babel/plugin-syntax-typescript" "^7.7.2"
-    "@babel/traverse" "^7.7.2"
-    "@babel/types" "^7.0.0"
-    "@jest/transform" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    "@types/babel__traverse" "^7.0.4"
-    "@types/prettier" "^2.1.5"
-    babel-preset-current-node-syntax "^1.0.0"
-    chalk "^4.0.0"
-    expect "^27.5.1"
-    graceful-fs "^4.2.9"
-    jest-diff "^27.5.1"
-    jest-get-type "^27.5.1"
-    jest-haste-map "^27.5.1"
-    jest-matcher-utils "^27.5.1"
-    jest-message-util "^27.5.1"
-    jest-util "^27.5.1"
-    natural-compare "^1.4.0"
-    pretty-format "^27.5.1"
-    semver "^7.3.2"
-
-jest-util@^27.0.0, jest-util@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-util/-/jest-util-27.5.1.tgz#3ba9771e8e31a0b85da48fe0b0891fb86c01c2f9"
-  integrity sha512-Kv2o/8jNvX1MQ0KGtw480E/w4fBCDOnH6+6DmeKi6LZUIlKA5kwY0YNdlzaWTiVgxqAqik11QyxDOKk543aKXw==
-  dependencies:
-    "@jest/types" "^27.5.1"
-    "@types/node" "*"
-    chalk "^4.0.0"
-    ci-info "^3.2.0"
-    graceful-fs "^4.2.9"
-    picomatch "^2.2.3"
-
-jest-validate@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-validate/-/jest-validate-27.5.1.tgz#9197d54dc0bdb52260b8db40b46ae668e04df067"
-  integrity sha512-thkNli0LYTmOI1tDB3FI1S1RTp/Bqyd9pTarJwL87OIBFuqEb5Apv5EaApEudYg4g86e3CT6kM0RowkhtEnCBQ==
-  dependencies:
-    "@jest/types" "^27.5.1"
-    camelcase "^6.2.0"
-    chalk "^4.0.0"
-    jest-get-type "^27.5.1"
-    leven "^3.1.0"
-    pretty-format "^27.5.1"
-
-jest-watcher@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-watcher/-/jest-watcher-27.5.1.tgz#71bd85fb9bde3a2c2ec4dc353437971c43c642a2"
-  integrity sha512-z676SuD6Z8o8qbmEGhoEUFOM1+jfEiL3DXHK/xgEiG2EyNYfFG60jluWcupY6dATjfEsKQuibReS1djInQnoVw==
-  dependencies:
-    "@jest/test-result" "^27.5.1"
-    "@jest/types" "^27.5.1"
-    "@types/node" "*"
-    ansi-escapes "^4.2.1"
-    chalk "^4.0.0"
-    jest-util "^27.5.1"
-    string-length "^4.0.1"
-
-jest-worker@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest-worker/-/jest-worker-27.5.1.tgz#8d146f0900e8973b106b6f73cc1e9a8cb86f8db0"
-  integrity sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==
-  dependencies:
-    "@types/node" "*"
-    merge-stream "^2.0.0"
-    supports-color "^8.0.0"
-
-jest@^27.0.6:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/jest/-/jest-27.5.1.tgz#dadf33ba70a779be7a6fc33015843b51494f63fc"
-  integrity sha512-Yn0mADZB89zTtjkPJEXwrac3LHudkQMR+Paqa8uxJHCBr9agxztUifWCyiYrjhMPBoUVBjyny0I7XH6ozDr7QQ==
-  dependencies:
-    "@jest/core" "^27.5.1"
-    import-local "^3.0.2"
-    jest-cli "^27.5.1"
-
-jimp@^0.16.1:
-  version "0.16.13"
-  resolved "https://registry.yarnpkg.com/jimp/-/jimp-0.16.13.tgz#944b6368183235afc5d077429e2a7f34834acb18"
-  integrity sha512-Bxz8q7V4rnCky9A0ktTNGA9SkNFVWRHodddI/DaAWZJzF7sVUlFYKQ60y9JGqrKpi48ECA/TnfMzzc5C70VByA==
-  dependencies:
-    "@babel/runtime" "^7.7.2"
-    "@jimp/custom" "^0.16.13"
-    "@jimp/plugins" "^0.16.13"
-    "@jimp/types" "^0.16.13"
-    regenerator-runtime "^0.13.3"
-
-jpeg-js@^0.4.2:
-  version "0.4.4"
-  resolved "https://registry.yarnpkg.com/jpeg-js/-/jpeg-js-0.4.4.tgz#a9f1c6f1f9f0fa80cdb3484ed9635054d28936aa"
-  integrity sha512-WZzeDOEtTOBK4Mdsar0IqEU5sMr3vSV2RqkAIzUEV2BHnUfKGyswWFPFwK5EeDo93K3FohSHbLAjj0s1Wzd+dg==
-
-"js-tokens@^3.0.0 || ^4.0.0", js-tokens@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-4.0.0.tgz#19203fb59991df98e3a287050d4647cdeaf32499"
-  integrity sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==
-
-js-yaml@^3.13.1:
-  version "3.14.1"
-  resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-3.14.1.tgz#dae812fdb3825fa306609a8717383c50c36a0537"
-  integrity sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==
-  dependencies:
-    argparse "^1.0.7"
-    esprima "^4.0.0"
-
-js-yaml@^4.1.0:
-  version "4.1.0"
-  resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-4.1.0.tgz#c1fb65f8f5017901cdd2c951864ba18458a10602"
-  integrity sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==
-  dependencies:
-    argparse "^2.0.1"
-
-jsdom@^16.6.0:
-  version "16.7.0"
-  resolved "https://registry.yarnpkg.com/jsdom/-/jsdom-16.7.0.tgz#918ae71965424b197c819f8183a754e18977b710"
-  integrity sha512-u9Smc2G1USStM+s/x1ru5Sxrl6mPYCbByG1U/hUmqaVsm4tbNyS7CicOSRyuGQYZhTu0h84qkZZQ/I+dzizSVw==
-  dependencies:
-    abab "^2.0.5"
-    acorn "^8.2.4"
-    acorn-globals "^6.0.0"
-    cssom "^0.4.4"
-    cssstyle "^2.3.0"
-    data-urls "^2.0.0"
-    decimal.js "^10.2.1"
-    domexception "^2.0.1"
-    escodegen "^2.0.0"
-    form-data "^3.0.0"
-    html-encoding-sniffer "^2.0.1"
-    http-proxy-agent "^4.0.1"
-    https-proxy-agent "^5.0.0"
-    is-potential-custom-element-name "^1.0.1"
-    nwsapi "^2.2.0"
-    parse5 "6.0.1"
-    saxes "^5.0.1"
-    symbol-tree "^3.2.4"
-    tough-cookie "^4.0.0"
-    w3c-hr-time "^1.0.2"
-    w3c-xmlserializer "^2.0.0"
-    webidl-conversions "^6.1.0"
-    whatwg-encoding "^1.0.5"
-    whatwg-mimetype "^2.3.0"
-    whatwg-url "^8.5.0"
-    ws "^7.4.6"
-    xml-name-validator "^3.0.0"
-
-jsesc@^2.5.1:
-  version "2.5.2"
-  resolved "https://registry.yarnpkg.com/jsesc/-/jsesc-2.5.2.tgz#80564d2e483dacf6e8ef209650a67df3f0c283a4"
-  integrity sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==
-
-json-buffer@3.0.1:
-  version "3.0.1"
-  resolved "https://registry.yarnpkg.com/json-buffer/-/json-buffer-3.0.1.tgz#9338802a30d3b6605fbe0613e094008ca8c05a13"
-  integrity sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==
-
-json-parse-better-errors@^1.0.1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/json-parse-better-errors/-/json-parse-better-errors-1.0.2.tgz#bb867cfb3450e69107c131d1c514bab3dc8bcaa9"
-  integrity sha512-mrqyZKfX5EhL7hvqcV6WG1yYjnjeuYDzDhhcAAUrq8Po85NBQBJP+ZDUT75qZQ98IkUoBqdkExkukOU7Ts2wrw==
-
-json-parse-even-better-errors@^2.3.0:
-  version "2.3.1"
-  resolved "https://registry.yarnpkg.com/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz#7c47805a94319928e05777405dc12e1f7a4ee02d"
-  integrity sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==
-
-json-schema-traverse@^0.4.1:
-  version "0.4.1"
-  resolved "https://registry.yarnpkg.com/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz#69f6a87d9513ab8bb8fe63bdb0979c448e684660"
-  integrity sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==
-
-json-stable-stringify-without-jsonify@^1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz#9db7b59496ad3f3cfef30a75142d2d930ad72651"
-  integrity sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==
-
-json-stringify-safe@^5.0.1:
-  version "5.0.1"
-  resolved "https://registry.yarnpkg.com/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz#1296a2d58fd45f19a0f6ce01d65701e2c735b6eb"
-  integrity sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==
-
-json5@2.x, json5@^2.2.3:
-  version "2.2.3"
-  resolved "https://registry.yarnpkg.com/json5/-/json5-2.2.3.tgz#78cd6f1a19bdc12b73db5ad0c61efd66c1e29283"
-  integrity sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==
-
-json@^11.0.0:
-  version "11.0.0"
-  resolved "https://registry.yarnpkg.com/json/-/json-11.0.0.tgz#2e84493134e2f42c131165aa22a124df38b3a3ee"
-  integrity sha512-N/ITv3Yw9Za8cGxuQqSqrq6RHnlaHWZkAFavcfpH/R52522c26EbihMxnY7A1chxfXJ4d+cEFIsyTgfi9GihrA==
-
-jsonc-parser@^3.2.0:
-  version "3.2.0"
-  resolved "https://registry.yarnpkg.com/jsonc-parser/-/jsonc-parser-3.2.0.tgz#31ff3f4c2b9793f89c67212627c51c6394f88e76"
-  integrity sha512-gfFQZrcTc8CnKXp6Y4/CBT3fTc0OVuDofpre4aEeEpSBPV5X5v4+Vmx+8snU7RLPrNHPKSgLxGo9YuQzz20o+w==
-
-jsonfile@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/jsonfile/-/jsonfile-4.0.0.tgz#8771aae0799b64076b76640fca058f9c10e33ecb"
-  integrity sha512-m6F1R3z8jjlf2imQHS2Qez5sjKWQzbuuhuJ/FKYFRZvPE3PuHcSMVZzfsLhGVOkfd20obL5SWEBew5ShlquNxg==
-  optionalDependencies:
-    graceful-fs "^4.1.6"
-
-jsonparse@^1.2.0:
-  version "1.3.1"
-  resolved "https://registry.yarnpkg.com/jsonparse/-/jsonparse-1.3.1.tgz#3f4dae4a91fac315f71062f8521cc239f1366280"
-  integrity sha512-POQXvpdL69+CluYsillJ7SUhKvytYjW9vG/GKpnf+xP8UWgYEM/RaMzHHofbALDiKbbP1W8UEYmgGl39WkPZsg==
-
-"jsx-ast-utils@^2.4.1 || ^3.0.0":
-  version "3.3.5"
-  resolved "https://registry.yarnpkg.com/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz#4766bd05a8e2a11af222becd19e15575e52a853a"
-  integrity sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==
-  dependencies:
-    array-includes "^3.1.6"
-    array.prototype.flat "^1.3.1"
-    object.assign "^4.1.4"
-    object.values "^1.1.6"
-
-keyv@^4.5.3:
-  version "4.5.3"
-  resolved "https://registry.yarnpkg.com/keyv/-/keyv-4.5.3.tgz#00873d2b046df737963157bd04f294ca818c9c25"
-  integrity sha512-QCiSav9WaX1PgETJ+SpNnx2PRRapJ/oRSXM4VO5OGYGSjrxbKPVFVhB3l2OCbLCk329N8qyAtsJjSjvVBWzEug==
-  dependencies:
-    json-buffer "3.0.1"
-
-kind-of@^6.0.3:
-  version "6.0.3"
-  resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-6.0.3.tgz#07c05034a6c349fa06e24fa35aa76db4580ce4dd"
-  integrity sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==
-
-kleur@^3.0.3:
-  version "3.0.3"
-  resolved "https://registry.yarnpkg.com/kleur/-/kleur-3.0.3.tgz#a79c9ecc86ee1ce3fa6206d1216c501f147fc07e"
-  integrity sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==
-
-latest-version@^7.0.0:
-  version "7.0.0"
-  resolved "https://registry.yarnpkg.com/latest-version/-/latest-version-7.0.0.tgz#843201591ea81a4d404932eeb61240fe04e9e5da"
-  integrity sha512-KvNT4XqAMzdcL6ka6Tl3i2lYeFDgXNCuIX+xNx6ZMVR1dFq+idXd9FLKNMOIx0t9mJ9/HudyX4oZWXZQ0UJHeg==
-  dependencies:
-    package-json "^8.1.0"
-
-leven@^3.1.0:
-  version "3.1.0"
-  resolved "https://registry.yarnpkg.com/leven/-/leven-3.1.0.tgz#77891de834064cccba82ae7842bb6b14a13ed7f2"
-  integrity sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==
-
-levn@^0.4.1:
-  version "0.4.1"
-  resolved "https://registry.yarnpkg.com/levn/-/levn-0.4.1.tgz#ae4562c007473b932a6200d403268dd2fffc6ade"
-  integrity sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==
-  dependencies:
-    prelude-ls "^1.2.1"
-    type-check "~0.4.0"
-
-levn@~0.3.0:
-  version "0.3.0"
-  resolved "https://registry.yarnpkg.com/levn/-/levn-0.3.0.tgz#3b09924edf9f083c0490fdd4c0bc4421e04764ee"
-  integrity sha512-0OO4y2iOHix2W6ujICbKIaEQXvFQHue65vUG3pb5EUomzPI90z9hsA1VsO/dbIIpC53J8gxM9Q4Oho0jrCM/yA==
-  dependencies:
-    prelude-ls "~1.1.2"
-    type-check "~0.3.2"
-
-libphonenumber-js@^1.10.20:
-  version "1.10.42"
-  resolved "https://registry.yarnpkg.com/libphonenumber-js/-/libphonenumber-js-1.10.42.tgz#38112294b2ee3f2ac3813c79390b7a77fc7e833d"
-  integrity sha512-/as6xI3D4Utfd28CCUPvMqX4oVXGMzk4ytzR52ju+sI/sN68LZpr9ED3Kh2kRfBbOALsLeeOSWdtyUPIbNWPrw==
-
-"libsignal@github:adiwajshing/libsignal-node":
-  version "2.0.1"
-  resolved "https://codeload.github.com/adiwajshing/libsignal-node/tar.gz/11dbd962ea108187c79a7c46fe4d6f790e23da97"
-  dependencies:
-    curve25519-js "^0.0.4"
-    protobufjs "6.8.8"
-
-lines-and-columns@^1.1.6:
-  version "1.2.4"
-  resolved "https://registry.yarnpkg.com/lines-and-columns/-/lines-and-columns-1.2.4.tgz#eca284f75d2965079309dc0ad9255abb2ebc1632"
-  integrity sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==
-
-link-preview-js@^3.0.0:
-  version "3.0.5"
-  resolved "https://registry.yarnpkg.com/link-preview-js/-/link-preview-js-3.0.5.tgz#e0289085300614f841717595fe6a032a7a54b409"
-  integrity sha512-tOPdmphcZPxhZJFpkXj1D9ANDmK+yC6VzHwfl/ypfi1ASJUvkWNVkf3ikGk6p8CWA5wg8XVWNl2G++BL1UlCPg==
-  dependencies:
-    abort-controller "^3.0.0"
-    cheerio "1.0.0-rc.11"
-    cross-fetch "3.1.5"
-    url "0.11.0"
-
-load-bmfont@^1.3.1, load-bmfont@^1.4.0:
-  version "1.4.1"
-  resolved "https://registry.yarnpkg.com/load-bmfont/-/load-bmfont-1.4.1.tgz#c0f5f4711a1e2ccff725a7b6078087ccfcddd3e9"
-  integrity sha512-8UyQoYmdRDy81Brz6aLAUhfZLwr5zV0L3taTQ4hju7m6biuwiWiJXjPhBJxbUQJA8PrkvJ/7Enqmwk2sM14soA==
-  dependencies:
-    buffer-equal "0.0.1"
-    mime "^1.3.4"
-    parse-bmfont-ascii "^1.0.3"
-    parse-bmfont-binary "^1.0.5"
-    parse-bmfont-xml "^1.1.4"
-    phin "^2.9.1"
-    xhr "^2.0.1"
-    xtend "^4.0.0"
-
-load-json-file@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/load-json-file/-/load-json-file-4.0.0.tgz#2f5f45ab91e33216234fd53adab668eb4ec0993b"
-  integrity sha512-Kx8hMakjX03tiGTLAIdJ+lL0htKnXjEZN6hk/tozf/WOuYGdZBJrZ+rCJRbVCugsjB3jMLn9746NsQIf5VjBMw==
-  dependencies:
-    graceful-fs "^4.1.2"
-    parse-json "^4.0.0"
-    pify "^3.0.0"
-    strip-bom "^3.0.0"
-
-locate-path@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/locate-path/-/locate-path-2.0.0.tgz#2b568b265eec944c6d9c0de9c3dbbbca0354cd8e"
-  integrity sha512-NCI2kiDkyR7VeEKm27Kda/iQHyKJe1Bu0FlTbYp3CqJu+9IFe9bLyAjMxf5ZDDbEg+iMPzB5zYyUTSm8wVTKmA==
-  dependencies:
-    p-locate "^2.0.0"
-    path-exists "^3.0.0"
-
-locate-path@^5.0.0:
-  version "5.0.0"
-  resolved "https://registry.yarnpkg.com/locate-path/-/locate-path-5.0.0.tgz#1afba396afd676a6d42504d0a67a3a7eb9f62aa0"
-  integrity sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==
-  dependencies:
-    p-locate "^4.1.0"
-
-locate-path@^6.0.0:
-  version "6.0.0"
-  resolved "https://registry.yarnpkg.com/locate-path/-/locate-path-6.0.0.tgz#55321eb309febbc59c4801d931a72452a681d286"
-  integrity sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==
-  dependencies:
-    p-locate "^5.0.0"
-
-lodash.capitalize@^4.2.1:
-  version "4.2.1"
-  resolved "https://registry.yarnpkg.com/lodash.capitalize/-/lodash.capitalize-4.2.1.tgz#f826c9b4e2a8511d84e3aca29db05e1a4f3b72a9"
-  integrity sha512-kZzYOKspf8XVX5AvmQF94gQW0lejFVgb80G85bU4ZWzoJ6C03PQg3coYAUpSTpQWelrZELd3XWgHzw4Ck5kaIw==
-
-lodash.clonedeep@^4.5.0:
-  version "4.5.0"
-  resolved "https://registry.yarnpkg.com/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz#e23f3f9c4f8fbdde872529c1071857a086e5ccef"
-  integrity sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==
-
-lodash.escaperegexp@^4.1.2:
-  version "4.1.2"
-  resolved "https://registry.yarnpkg.com/lodash.escaperegexp/-/lodash.escaperegexp-4.1.2.tgz#64762c48618082518ac3df4ccf5d5886dae20347"
-  integrity sha512-TM9YBvyC84ZxE3rgfefxUWiQKLilstD6k7PTGt6wfbtXF8ixIJLOL3VYyV/z+ZiPLsVxAsKAFVwWlWeb2Y8Yyw==
-
-lodash.ismatch@^4.4.0:
-  version "4.4.0"
-  resolved "https://registry.yarnpkg.com/lodash.ismatch/-/lodash.ismatch-4.4.0.tgz#756cb5150ca3ba6f11085a78849645f188f85f37"
-  integrity sha512-fPMfXjGQEV9Xsq/8MTSgUf255gawYRbjwMyDbcvDhXgV7enSZA0hynz6vMPnpAb5iONEzBHBPsT+0zes5Z301g==
-
-lodash.isplainobject@^4.0.6:
-  version "4.0.6"
-  resolved "https://registry.yarnpkg.com/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz#7c526a52d89b45c45cc690b88163be0497f550cb"
-  integrity sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==
-
-lodash.isstring@^4.0.1:
-  version "4.0.1"
-  resolved "https://registry.yarnpkg.com/lodash.isstring/-/lodash.isstring-4.0.1.tgz#d527dfb5456eca7cc9bb95d5daeaf88ba54a5451"
-  integrity sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==
-
-lodash.memoize@4.x:
-  version "4.1.2"
-  resolved "https://registry.yarnpkg.com/lodash.memoize/-/lodash.memoize-4.1.2.tgz#bcc6c49a42a2840ed997f323eada5ecd182e0bfe"
-  integrity sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==
-
-lodash.merge@^4.6.2:
-  version "4.6.2"
-  resolved "https://registry.yarnpkg.com/lodash.merge/-/lodash.merge-4.6.2.tgz#558aa53b43b661e1925a0afdfa36a9a1085fe57a"
-  integrity sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==
-
-lodash.uniqby@^4.7.0:
-  version "4.7.0"
-  resolved "https://registry.yarnpkg.com/lodash.uniqby/-/lodash.uniqby-4.7.0.tgz#d99c07a669e9e6d24e1362dfe266c67616af1302"
-  integrity sha512-e/zcLx6CSbmaEgFHCA7BnoQKyCtKMxnuWrJygbwPs/AIn+IMKl66L8/s+wBUn5LRw2pZx3bUHibiV1b6aTWIww==
-
-lodash@4.17.21, lodash@^4.17.15, lodash@^4.17.21, lodash@^4.7.0:
-  version "4.17.21"
-  resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz#679591c564c3bffaae8454cf0b3df370c3d6911c"
-  integrity sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==
-
-log-symbols@^4.1.0:
-  version "4.1.0"
-  resolved "https://registry.yarnpkg.com/log-symbols/-/log-symbols-4.1.0.tgz#3fbdbb95b4683ac9fc785111e792e558d4abd503"
-  integrity sha512-8XPvpAA8uyhfteu8pIvQxpJZ7SYYdpUivZpGy6sFsBuKRY/7rQGavedeB8aK+Zkyq6upMFVL/9AW6vOYzfRyLg==
-  dependencies:
-    chalk "^4.1.0"
-    is-unicode-supported "^0.1.0"
-
-log-symbols@^5.1.0:
-  version "5.1.0"
-  resolved "https://registry.yarnpkg.com/log-symbols/-/log-symbols-5.1.0.tgz#a20e3b9a5f53fac6aeb8e2bb22c07cf2c8f16d93"
-  integrity sha512-l0x2DvrW294C9uDCoQe1VSU4gf529FkSZ6leBl4TiqZH/e+0R7hSfHQBNut2mNygDgHwvYHfFLn6Oxb3VWj2rA==
-  dependencies:
-    chalk "^5.0.0"
-    is-unicode-supported "^1.1.0"
-
-long@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/long/-/long-4.0.0.tgz#9a7b71cfb7d361a194ea555241c92f7468d5bf28"
-  integrity sha512-XsP+KhQif4bjX1kbuSiySJFNAehNxgLb6hPRGJ9QsUr8ajHkuXGdrHmFUTUUXhDwVX2R5bY4JNZEwbUiMhV+MA==
-
-long@^5.0.0:
-  version "5.2.3"
-  resolved "https://registry.yarnpkg.com/long/-/long-5.2.3.tgz#a3ba97f3877cf1d778eccbcb048525ebb77499e1"
-  integrity sha512-lcHwpNoggQTObv5apGNCTdJrO69eHOZMi4BNC+rTLER8iHAqGrUVeLh/irVIM7zTw2bOXA8T6uNPeujwOLg/2Q==
-
-loose-envify@^1.4.0:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/loose-envify/-/loose-envify-1.4.0.tgz#71ee51fa7be4caec1a63839f7e682d8132d30caf"
-  integrity sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==
-  dependencies:
-    js-tokens "^3.0.0 || ^4.0.0"
-
-lowercase-keys@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/lowercase-keys/-/lowercase-keys-3.0.0.tgz#c5e7d442e37ead247ae9db117a9d0a467c89d4f2"
-  integrity sha512-ozCC6gdQ+glXOQsveKD0YsDy8DSQFjDTz4zyzEHNV5+JP5D62LmfDZ6o1cycFx9ouG940M5dE8C8CTewdj2YWQ==
-
-lru-cache@^5.1.1:
-  version "5.1.1"
-  resolved "https://registry.yarnpkg.com/lru-cache/-/lru-cache-5.1.1.tgz#1da27e6710271947695daf6848e847f01d84b920"
-  integrity sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==
-  dependencies:
-    yallist "^3.0.2"
-
-lru-cache@^6.0.0:
-  version "6.0.0"
-  resolved "https://registry.yarnpkg.com/lru-cache/-/lru-cache-6.0.0.tgz#6d6fe6570ebd96aaf90fcad1dafa3b2566db3a94"
-  integrity sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==
-  dependencies:
-    yallist "^4.0.0"
-
-lru-cache@^7.10.1, lru-cache@^7.14.1:
-  version "7.18.3"
-  resolved "https://registry.yarnpkg.com/lru-cache/-/lru-cache-7.18.3.tgz#f793896e0fd0e954a59dfdd82f0773808df6aa89"
-  integrity sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==
-
-lunr@^2.3.9:
-  version "2.3.9"
-  resolved "https://registry.yarnpkg.com/lunr/-/lunr-2.3.9.tgz#18b123142832337dd6e964df1a5a7707b25d35e1"
-  integrity sha512-zTU3DaZaF3Rt9rhN3uBMGQD3dD2/vFQqnvZCDv4dl5iOzq2IZQqTxu90r4E5J+nP70J3ilqVCrbho2eWaeW8Ow==
-
-macos-release@^3.1.0:
-  version "3.2.0"
-  resolved "https://registry.yarnpkg.com/macos-release/-/macos-release-3.2.0.tgz#dcee82b6a4932971b1538dbf6f3aabc4a903b613"
-  integrity sha512-fSErXALFNsnowREYZ49XCdOHF8wOPWuFOGQrAhP7x5J/BqQv+B02cNsTykGpDgRVx43EKg++6ANmTaGTtW+hUA==
-
-make-dir@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/make-dir/-/make-dir-4.0.0.tgz#c3c2307a771277cd9638305f915c29ae741b614e"
-  integrity sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==
-  dependencies:
-    semver "^7.5.3"
-
-make-error@1.x, make-error@^1.1.1:
-  version "1.3.6"
-  resolved "https://registry.yarnpkg.com/make-error/-/make-error-1.3.6.tgz#2eb2e37ea9b67c4891f684a1394799af484cf7a2"
-  integrity sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==
-
-makeerror@1.0.12:
-  version "1.0.12"
-  resolved "https://registry.yarnpkg.com/makeerror/-/makeerror-1.0.12.tgz#3e5dd2079a82e812e983cc6610c4a2cb0eaa801a"
-  integrity sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==
-  dependencies:
-    tmpl "1.0.5"
-
-map-obj@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/map-obj/-/map-obj-1.0.1.tgz#d933ceb9205d82bdcf4886f6742bdc2b4dea146d"
-  integrity sha512-7N/q3lyZ+LVCp7PzuxrJr4KMbBE2hW7BT7YNia330OFxIf4d3r5zVpicP2650l7CPN6RM9zOJRl3NGpqSiw3Eg==
-
-map-obj@^4.0.0:
-  version "4.3.0"
-  resolved "https://registry.yarnpkg.com/map-obj/-/map-obj-4.3.0.tgz#9304f906e93faae70880da102a9f1df0ea8bb05a"
-  integrity sha512-hdN1wVrZbb29eBGiGjJbeP8JbKjq1urkHJ/LIP/NY48MZ1QVXUsQBV1G1zvYFHn1XE06cwjBsOI2K3Ulnj1YXQ==
-
-marked@^4.3.0:
-  version "4.3.0"
-  resolved "https://registry.yarnpkg.com/marked/-/marked-4.3.0.tgz#796362821b019f734054582038b116481b456cf3"
-  integrity sha512-PRsaiG84bK+AMvxziE/lCFss8juXjNaWzVbN5tXAm4XjeaS9NAHhop+PjQxz2A9h8Q4M/xGmzP8vqNwy6JeK0A==
-
-media-typer@^1.1.0:
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/media-typer/-/media-typer-1.1.0.tgz#6ab74b8f2d3320f2064b2a87a38e7931ff3a5561"
-  integrity sha512-aisnrDP4GNe06UcKFnV5bfMNPBUw4jsLGaWwWfnH3v02GnBuXX2MCVn5RbrWo0j3pczUilYblq7fQ7Nw2t5XKw==
-
-meow@^8.0.0:
-  version "8.1.2"
-  resolved "https://registry.yarnpkg.com/meow/-/meow-8.1.2.tgz#bcbe45bda0ee1729d350c03cffc8395a36c4e897"
-  integrity sha512-r85E3NdZ+mpYk1C6RjPFEMSE+s1iZMuHtsHAqY0DT3jZczl0diWUZ8g6oU7h0M9cD2EL+PzaYghhCLzR0ZNn5Q==
-  dependencies:
-    "@types/minimist" "^1.2.0"
-    camelcase-keys "^6.2.2"
-    decamelize-keys "^1.1.0"
-    hard-rejection "^2.1.0"
-    minimist-options "4.1.0"
-    normalize-package-data "^3.0.0"
-    read-pkg-up "^7.0.1"
-    redent "^3.0.0"
-    trim-newlines "^3.0.0"
-    type-fest "^0.18.0"
-    yargs-parser "^20.2.3"
-
-merge-stream@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/merge-stream/-/merge-stream-2.0.0.tgz#52823629a14dd00c9770fb6ad47dc6310f2c1f60"
-  integrity sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==
-
-merge2@^1.3.0, merge2@^1.4.1:
-  version "1.4.1"
-  resolved "https://registry.yarnpkg.com/merge2/-/merge2-1.4.1.tgz#4368892f885e907455a6fd7dc55c0c9d404990ae"
-  integrity sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==
-
-micromatch@^4.0.4:
-  version "4.0.5"
-  resolved "https://registry.yarnpkg.com/micromatch/-/micromatch-4.0.5.tgz#bc8999a7cbbf77cdc89f132f6e467051b49090c6"
-  integrity sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==
-  dependencies:
-    braces "^3.0.2"
-    picomatch "^2.3.1"
-
-mime-db@1.52.0:
-  version "1.52.0"
-  resolved "https://registry.yarnpkg.com/mime-db/-/mime-db-1.52.0.tgz#bbabcdc02859f4987301c856e3387ce5ec43bf70"
-  integrity sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==
-
-mime-types@2.1.35, mime-types@^2.1.12:
-  version "2.1.35"
-  resolved "https://registry.yarnpkg.com/mime-types/-/mime-types-2.1.35.tgz#381a871b62a734450660ae3deee44813f70d959a"
-  integrity sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==
-  dependencies:
-    mime-db "1.52.0"
-
-mime@^1.3.4:
-  version "1.6.0"
-  resolved "https://registry.yarnpkg.com/mime/-/mime-1.6.0.tgz#32cd9e5c64553bd58d19a568af452acff04981b1"
-  integrity sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==
-
-mimic-fn@^2.1.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/mimic-fn/-/mimic-fn-2.1.0.tgz#7ed2c2ccccaf84d3ffcb7a69b57711fc2083401b"
-  integrity sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==
-
-mimic-fn@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/mimic-fn/-/mimic-fn-4.0.0.tgz#60a90550d5cb0b239cca65d893b1a53b29871ecc"
-  integrity sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==
-
-mimic-response@^3.1.0:
-  version "3.1.0"
-  resolved "https://registry.yarnpkg.com/mimic-response/-/mimic-response-3.1.0.tgz#2d1d59af9c1b129815accc2c46a022a5ce1fa3c9"
-  integrity sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==
-
-mimic-response@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/mimic-response/-/mimic-response-4.0.0.tgz#35468b19e7c75d10f5165ea25e75a5ceea7cf70f"
-  integrity sha512-e5ISH9xMYU0DzrT+jl8q2ze9D6eWBto+I8CNpe+VI+K2J/F/k3PdkdTdz4wvGVH4NTpo+NRYTVIuMQEMMcsLqg==
-
-min-document@^2.19.0:
-  version "2.19.0"
-  resolved "https://registry.yarnpkg.com/min-document/-/min-document-2.19.0.tgz#7bd282e3f5842ed295bb748cdd9f1ffa2c824685"
-  integrity sha512-9Wy1B3m3f66bPPmU5hdA4DR4PB2OfDU/+GS3yAB7IQozE3tqXaVv2zOjgla7MEGSRv95+ILmOuvhLkOK6wJtCQ==
-  dependencies:
-    dom-walk "^0.1.0"
-
-min-indent@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/min-indent/-/min-indent-1.0.1.tgz#a63f681673b30571fbe8bc25686ae746eefa9869"
-  integrity sha512-I9jwMn07Sy/IwOj3zVkVik2JTvgpaykDZEigL6Rx6N9LbMywwUSMtxET+7lVoDLLd3O3IXwJwvuuns8UB/HeAg==
-
-minimatch@^3.0.4, minimatch@^3.0.5, minimatch@^3.1.1, minimatch@^3.1.2:
-  version "3.1.2"
-  resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-3.1.2.tgz#19cd194bfd3e428f049a70817c038d89ab4be35b"
-  integrity sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==
-  dependencies:
-    brace-expansion "^1.1.7"
-
-minimatch@^9.0.0:
-  version "9.0.3"
-  resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-9.0.3.tgz#a6e00c3de44c3a542bfaae70abfc22420a6da825"
-  integrity sha512-RHiac9mvaRw0x3AYRgDC1CxAP7HTcNrrECeA8YYJeWnpo+2Q5CegtZjaotWTWxDG3UeGA1coE05iH1mPjT/2mg==
-  dependencies:
-    brace-expansion "^2.0.1"
-
-minimist-options@4.1.0:
-  version "4.1.0"
-  resolved "https://registry.yarnpkg.com/minimist-options/-/minimist-options-4.1.0.tgz#c0655713c53a8a2ebd77ffa247d342c40f010619"
-  integrity sha512-Q4r8ghd80yhO/0j1O3B2BjweX3fiHg9cdOwjJd2J76Q135c+NDxGCqdYKQ1SKBuFfgWbAUzBfvYjPUEeNgqN1A==
-  dependencies:
-    arrify "^1.0.1"
-    is-plain-obj "^1.1.0"
-    kind-of "^6.0.3"
-
-minimist@^1.2.0, minimist@^1.2.3, minimist@^1.2.5, minimist@^1.2.6:
-  version "1.2.8"
-  resolved "https://registry.yarnpkg.com/minimist/-/minimist-1.2.8.tgz#c1a464e7693302e082a075cee0c057741ac4772c"
-  integrity sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==
-
-mkdirp-classic@^0.5.2, mkdirp-classic@^0.5.3:
-  version "0.5.3"
-  resolved "https://registry.yarnpkg.com/mkdirp-classic/-/mkdirp-classic-0.5.3.tgz#fa10c9115cc6d8865be221ba47ee9bed78601113"
-  integrity sha512-gKLcREMhtuZRwRAfqP3RFW+TK4JqApVBtOIftVgjuABpAtpxhPGaDcfvbhNvD0B8iD1oUr/txX35NjcaY6Ns/A==
-
-mkdirp@^0.5.1:
-  version "0.5.6"
-  resolved "https://registry.yarnpkg.com/mkdirp/-/mkdirp-0.5.6.tgz#7def03d2432dcae4ba1d611445c48396062255f6"
-  integrity sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==
-  dependencies:
-    minimist "^1.2.6"
-
-modify-values@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/modify-values/-/modify-values-1.0.1.tgz#b3939fa605546474e3e3e3c63d64bd43b4ee6022"
-  integrity sha512-xV2bxeN6F7oYjZWTe/YPAy6MN2M+sL4u/Rlm2AHCIVGfo2p1yGmBHQ6vHehl4bRTZBdHu3TSkWdYgkwpYzAGSw==
-
-mpg123-decoder@^0.4.8:
-  version "0.4.8"
-  resolved "https://registry.yarnpkg.com/mpg123-decoder/-/mpg123-decoder-0.4.8.tgz#a2b5e77f491c7b7bf8b896e4764d71dcaec56e59"
-  integrity sha512-HXs8vbPjiFM0NOZ45T3C5i7mpYGEYhjH37SnFA907lOb9c93DQL40cDjerxj65IMwAYyPFq1aUjtDOjyR7O0gQ==
-  dependencies:
-    "@wasm-audio-decoders/common" "9.0.1"
-
-ms@2.1.2:
-  version "2.1.2"
-  resolved "https://registry.yarnpkg.com/ms/-/ms-2.1.2.tgz#d09d1f357b443f493382a8eb3ccd183872ae6009"
-  integrity sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==
-
-music-metadata@^7.12.3:
-  version "7.13.4"
-  resolved "https://registry.yarnpkg.com/music-metadata/-/music-metadata-7.13.4.tgz#17d2d3d894fdee9899cc5b08110f790788758f7e"
-  integrity sha512-eRRoEMhhYdth2Ws24FmkvIqrtkIBE9sqjHbrRNpkg2Iux3zc37PQKRv2/r/mTtELb7XlB1uWC2UcKKX7BzNMGA==
-  dependencies:
-    "@tokenizer/token" "^0.3.0"
-    content-type "^1.0.5"
-    debug "^4.3.4"
-    file-type "^16.5.4"
-    media-typer "^1.1.0"
-    strtok3 "^6.3.0"
-    token-types "^4.2.1"
-
-mute-stream@1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/mute-stream/-/mute-stream-1.0.0.tgz#e31bd9fe62f0aed23520aa4324ea6671531e013e"
-  integrity sha512-avsJQhyd+680gKXyG/sQc0nXaC6rBkPOfyHYcFb9+hdkqQkR9bdnkJ0AMZhke0oesPqIO+mFFJ+IdBc7mst4IA==
-
-napi-build-utils@^1.0.1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/napi-build-utils/-/napi-build-utils-1.0.2.tgz#b1fddc0b2c46e380a0b7a76f984dd47c41a13806"
-  integrity sha512-ONmRUqK7zj7DWX0D9ADe03wbwOBZxNAfF20PlGfCWQcD3+/MakShIHrMqx9YwPTfxDdF1zLeL+RGZiR9kGMLdg==
-
-natural-compare-lite@^1.4.0:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/natural-compare-lite/-/natural-compare-lite-1.4.0.tgz#17b09581988979fddafe0201e931ba933c96cbb4"
-  integrity sha512-Tj+HTDSJJKaZnfiuw+iaF9skdPpTo2GtEly5JHnWV/hfv2Qj/9RKsGISQtLh2ox3l5EAGw487hnBee0sIJ6v2g==
-
-natural-compare@^1.4.0:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/natural-compare/-/natural-compare-1.4.0.tgz#4abebfeed7541f2c27acfb29bdbbd15c8d5ba4f7"
-  integrity sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==
-
-neo-async@^2.6.2:
-  version "2.6.2"
-  resolved "https://registry.yarnpkg.com/neo-async/-/neo-async-2.6.2.tgz#b4aafb93e3aeb2d8174ca53cf163ab7d7308305f"
-  integrity sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==
-
-netmask@^2.0.2:
-  version "2.0.2"
-  resolved "https://registry.yarnpkg.com/netmask/-/netmask-2.0.2.tgz#8b01a07644065d536383835823bc52004ebac5e7"
-  integrity sha512-dBpDMdxv9Irdq66304OLfEmQ9tbNRFnFTuZiLo+bD+r332bBmMJ8GBLXklIXXgxd3+v9+KUnZaUR5PJMa75Gsg==
-
-new-github-release-url@2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/new-github-release-url/-/new-github-release-url-2.0.0.tgz#335189b91f52bbb9569042a7485900a205a0500b"
-  integrity sha512-NHDDGYudnvRutt/VhKFlX26IotXe1w0cmkDm6JGquh5bz/bDTw0LufSmH/GxTjEdpHEO+bVKFTwdrcGa/9XlKQ==
-  dependencies:
-    type-fest "^2.5.1"
-
-node-abi@^3.3.0:
-  version "3.47.0"
-  resolved "https://registry.yarnpkg.com/node-abi/-/node-abi-3.47.0.tgz#6cbfa2916805ae25c2b7156ca640131632eb05e8"
-  integrity sha512-2s6B2CWZM//kPgwnuI0KrYwNjfdByE25zvAaEpq9IH4zcNsarH8Ihu/UuX6XMPEogDAxkuUFeZn60pXNHAqn3A==
-  dependencies:
-    semver "^7.3.5"
-
-node-addon-api@^5.0.0:
-  version "5.1.0"
-  resolved "https://registry.yarnpkg.com/node-addon-api/-/node-addon-api-5.1.0.tgz#49da1ca055e109a23d537e9de43c09cca21eb762"
-  integrity sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA==
-
-node-cache@^5.1.2:
-  version "5.1.2"
-  resolved "https://registry.yarnpkg.com/node-cache/-/node-cache-5.1.2.tgz#f264dc2ccad0a780e76253a694e9fd0ed19c398d"
-  integrity sha512-t1QzWwnk4sjLWaQAS8CHgOJ+RAfmHpxFWmc36IWTiWHQfs0w5JDMBS1b1ZxQteo0vVVuWJvIUKHDkkeK7vIGCg==
-  dependencies:
-    clone "2.x"
-
-node-domexception@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/node-domexception/-/node-domexception-1.0.0.tgz#6888db46a1f71c0b76b3f7555016b63fe64766e5"
-  integrity sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==
-
-node-fetch@2.6.7:
-  version "2.6.7"
-  resolved "https://registry.yarnpkg.com/node-fetch/-/node-fetch-2.6.7.tgz#24de9fba827e3b4ae44dc8b20256a379160052ad"
-  integrity sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==
-  dependencies:
-    whatwg-url "^5.0.0"
-
-node-fetch@3.3.1:
-  version "3.3.1"
-  resolved "https://registry.yarnpkg.com/node-fetch/-/node-fetch-3.3.1.tgz#b3eea7b54b3a48020e46f4f88b9c5a7430d20b2e"
-  integrity sha512-cRVc/kyto/7E5shrWca1Wsea4y6tL9iYJE5FBCius3JQfb/4P4I295PfhgbJQBLTx6lATE4z+wK0rPM4VS2uow==
-  dependencies:
-    data-uri-to-buffer "^4.0.0"
-    fetch-blob "^3.1.4"
-    formdata-polyfill "^4.0.10"
-
-node-fetch@^2.6.7:
-  version "2.7.0"
-  resolved "https://registry.yarnpkg.com/node-fetch/-/node-fetch-2.7.0.tgz#d0f0fa6e3e2dc1d27efcd8ad99d550bda94d187d"
-  integrity sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==
-  dependencies:
-    whatwg-url "^5.0.0"
-
-node-int64@^0.4.0:
-  version "0.4.0"
-  resolved "https://registry.yarnpkg.com/node-int64/-/node-int64-0.4.0.tgz#87a9065cdb355d3182d8f94ce11188b825c68a3b"
-  integrity sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==
-
-node-releases@^2.0.13:
-  version "2.0.13"
-  resolved "https://registry.yarnpkg.com/node-releases/-/node-releases-2.0.13.tgz#d5ed1627c23e3461e819b02e57b75e4899b1c81d"
-  integrity sha512-uYr7J37ae/ORWdZeQ1xxMJe3NtdmqMC/JZK+geofDrkLUApKRHPd18/TxtBOJ4A0/+uUIliorNrfYV6s1b02eQ==
-
-node-wav@^0.0.2:
-  version "0.0.2"
-  resolved "https://registry.yarnpkg.com/node-wav/-/node-wav-0.0.2.tgz#89cb63cf8cd66ec8ab455f5ba4864e5fcb4605e8"
-  integrity sha512-M6Rm/bbG6De/gKGxOpeOobx/dnGuP0dz40adqx38boqHhlWssBJZgLCPBNtb9NkrmnKYiV04xELq+R6PFOnoLA==
-
-normalize-package-data@^2.3.2, normalize-package-data@^2.5.0:
-  version "2.5.0"
-  resolved "https://registry.yarnpkg.com/normalize-package-data/-/normalize-package-data-2.5.0.tgz#e66db1838b200c1dfc233225d12cb36520e234a8"
-  integrity sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==
-  dependencies:
-    hosted-git-info "^2.1.4"
-    resolve "^1.10.0"
-    semver "2 || 3 || 4 || 5"
-    validate-npm-package-license "^3.0.1"
-
-normalize-package-data@^3.0.0:
-  version "3.0.3"
-  resolved "https://registry.yarnpkg.com/normalize-package-data/-/normalize-package-data-3.0.3.tgz#dbcc3e2da59509a0983422884cd172eefdfa525e"
-  integrity sha512-p2W1sgqij3zMMyRC067Dg16bfzVH+w7hyegmpIvZ4JNjqtGOVAIvLmjBx3yP7YTe9vKJgkoNOPjwQGogDoMXFA==
-  dependencies:
-    hosted-git-info "^4.0.1"
-    is-core-module "^2.5.0"
-    semver "^7.3.4"
-    validate-npm-package-license "^3.0.1"
-
-normalize-path@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/normalize-path/-/normalize-path-3.0.0.tgz#0dcd69ff23a1c9b11fd0978316644a0388216a65"
-  integrity sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==
-
-normalize-url@^8.0.0:
-  version "8.0.0"
-  resolved "https://registry.yarnpkg.com/normalize-url/-/normalize-url-8.0.0.tgz#593dbd284f743e8dcf6a5ddf8fadff149c82701a"
-  integrity sha512-uVFpKhj5MheNBJRTiMZ9pE/7hD1QTeEvugSJW/OmLzAp78PB5O6adfMNTvmfKhXBkvCzC+rqifWcVYpGFwTjnw==
-
-npm-run-path@^4.0.1:
-  version "4.0.1"
-  resolved "https://registry.yarnpkg.com/npm-run-path/-/npm-run-path-4.0.1.tgz#b7ecd1e5ed53da8e37a55e1c2269e0b97ed748ea"
-  integrity sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==
-  dependencies:
-    path-key "^3.0.0"
-
-npm-run-path@^5.1.0:
-  version "5.1.0"
-  resolved "https://registry.yarnpkg.com/npm-run-path/-/npm-run-path-5.1.0.tgz#bc62f7f3f6952d9894bd08944ba011a6ee7b7e00"
-  integrity sha512-sJOdmRGrY2sjNTRMbSvluQqg+8X7ZK61yvzBEIDhz4f8z1TZFYABsqjjCBd/0PUNE9M6QDgHJXQkGUEm7Q+l9Q==
-  dependencies:
-    path-key "^4.0.0"
-
-nth-check@^2.0.1:
-  version "2.1.1"
-  resolved "https://registry.yarnpkg.com/nth-check/-/nth-check-2.1.1.tgz#c9eab428effce36cd6b92c924bdb000ef1f1ed1d"
-  integrity sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==
-  dependencies:
-    boolbase "^1.0.0"
-
-nwsapi@^2.2.0:
-  version "2.2.7"
-  resolved "https://registry.yarnpkg.com/nwsapi/-/nwsapi-2.2.7.tgz#738e0707d3128cb750dddcfe90e4610482df0f30"
-  integrity sha512-ub5E4+FBPKwAZx0UwIQOjYWGHTEq5sPqHQNRN8Z9e4A7u3Tj1weLJsL59yH9vmvqEtBHaOmT6cYQKIZOxp35FQ==
-
-object-assign@^4.1.1:
-  version "4.1.1"
-  resolved "https://registry.yarnpkg.com/object-assign/-/object-assign-4.1.1.tgz#2109adc7965887cfc05cbbd442cac8bfbb360863"
-  integrity sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==
-
-object-inspect@^1.12.3, object-inspect@^1.9.0:
-  version "1.12.3"
-  resolved "https://registry.yarnpkg.com/object-inspect/-/object-inspect-1.12.3.tgz#ba62dffd67ee256c8c086dfae69e016cd1f198b9"
-  integrity sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g==
-
-object-keys@^1.1.1:
-  version "1.1.1"
-  resolved "https://registry.yarnpkg.com/object-keys/-/object-keys-1.1.1.tgz#1c47f272df277f3b1daf061677d9c82e2322c60e"
-  integrity sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==
-
-object.assign@^4.1.4:
-  version "4.1.4"
-  resolved "https://registry.yarnpkg.com/object.assign/-/object.assign-4.1.4.tgz#9673c7c7c351ab8c4d0b516f4343ebf4dfb7799f"
-  integrity sha512-1mxKf0e58bvyjSCtKYY4sRe9itRk3PJpquJOjeIkz885CczcI4IvJJDLPS72oowuSh+pBxUFROpX+TU++hxhZQ==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    has-symbols "^1.0.3"
-    object-keys "^1.1.1"
-
-object.entries@^1.1.6:
-  version "1.1.6"
-  resolved "https://registry.yarnpkg.com/object.entries/-/object.entries-1.1.6.tgz#9737d0e5b8291edd340a3e3264bb8a3b00d5fa23"
-  integrity sha512-leTPzo4Zvg3pmbQ3rDK69Rl8GQvIqMWubrkxONG9/ojtFE2rD9fjMKfSI5BxW3osRH1m6VdzmqK8oAY9aT4x5w==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-
-object.fromentries@^2.0.6:
-  version "2.0.6"
-  resolved "https://registry.yarnpkg.com/object.fromentries/-/object.fromentries-2.0.6.tgz#cdb04da08c539cffa912dcd368b886e0904bfa73"
-  integrity sha512-VciD13dswC4j1Xt5394WR4MzmAQmlgN72phd/riNp9vtD7tp4QQWJ0R4wvclXcafgcYK8veHRed2W6XeGBvcfg==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-
-object.hasown@^1.1.2:
-  version "1.1.2"
-  resolved "https://registry.yarnpkg.com/object.hasown/-/object.hasown-1.1.2.tgz#f919e21fad4eb38a57bc6345b3afd496515c3f92"
-  integrity sha512-B5UIT3J1W+WuWIU55h0mjlwaqxiE5vYENJXIXZ4VFe05pNYrkKuK0U/6aFcb0pKywYJh7IhfoqUfKVmrJJHZHw==
-  dependencies:
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-
-object.values@^1.1.6:
-  version "1.1.6"
-  resolved "https://registry.yarnpkg.com/object.values/-/object.values-1.1.6.tgz#4abbaa71eba47d63589d402856f908243eea9b1d"
-  integrity sha512-FVVTkD1vENCsAcwNs9k6jea2uHC/X0+JcjG8YA60FN5CMaJmG95wT9jek/xX9nornqGRrBkKtzuAu2wuHpKqvw==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-
-ogg-opus-decoder@^1.6.4:
-  version "1.6.5"
-  resolved "https://registry.yarnpkg.com/ogg-opus-decoder/-/ogg-opus-decoder-1.6.5.tgz#069545d584fc4102cf8c23776185010124b82f17"
-  integrity sha512-7NjCePv+XAcfsPdVhVjrKdrKc2BUAxhzkSY9ySOv3FSgqymu1J90J7vQRtSd2DoStFASznmJr5LB9j/EXrJZfQ==
-  dependencies:
-    "@wasm-audio-decoders/common" "9.0.1"
-    codec-parser "2.4.3"
-    opus-decoder "0.7.1"
-
-omggif@^1.0.10, omggif@^1.0.9:
-  version "1.0.10"
-  resolved "https://registry.yarnpkg.com/omggif/-/omggif-1.0.10.tgz#ddaaf90d4a42f532e9e7cb3a95ecdd47f17c7b19"
-  integrity sha512-LMJTtvgc/nugXj0Vcrrs68Mn2D1r0zf630VNtqtpI1FEO7e+O9FP4gqs9AcnBaSEeoHIPm28u6qgPR0oyEpGSw==
-
-on-exit-leak-free@^0.2.0:
-  version "0.2.0"
-  resolved "https://registry.yarnpkg.com/on-exit-leak-free/-/on-exit-leak-free-0.2.0.tgz#b39c9e3bf7690d890f4861558b0d7b90a442d209"
-  integrity sha512-dqaz3u44QbRXQooZLTUKU41ZrzYrcvLISVgbrzbyCMxpmSLJvZ3ZamIJIZ29P6OhZIkNIQKosdeM6t1LYbA9hg==
-
-once@^1.3.0, once@^1.3.1, once@^1.4.0:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1"
-  integrity sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==
-  dependencies:
-    wrappy "1"
-
-onetime@^5.1.0, onetime@^5.1.2:
-  version "5.1.2"
-  resolved "https://registry.yarnpkg.com/onetime/-/onetime-5.1.2.tgz#d0e96ebb56b07476df1dd9c4806e5237985ca45e"
-  integrity sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==
-  dependencies:
-    mimic-fn "^2.1.0"
-
-onetime@^6.0.0:
-  version "6.0.0"
-  resolved "https://registry.yarnpkg.com/onetime/-/onetime-6.0.0.tgz#7c24c18ed1fd2e9bca4bd26806a33613c77d34b4"
-  integrity sha512-1FlR+gjXK7X+AsAHso35MnyN5KqGwJRi/31ft6x0M194ht7S+rWAvd7PHss9xSKMzE0asv1pyIHaJYq+BbacAQ==
-  dependencies:
-    mimic-fn "^4.0.0"
-
-open@9.1.0:
-  version "9.1.0"
-  resolved "https://registry.yarnpkg.com/open/-/open-9.1.0.tgz#684934359c90ad25742f5a26151970ff8c6c80b6"
-  integrity sha512-OS+QTnw1/4vrf+9hh1jc1jnYjzSG4ttTBB8UxOwAnInG3Uo4ssetzC1ihqaIHjLJnA5GGlRl6QlZXOTQhRBUvg==
-  dependencies:
-    default-browser "^4.0.0"
-    define-lazy-prop "^3.0.0"
-    is-inside-container "^1.0.0"
-    is-wsl "^2.2.0"
-
-open@^8.4.2:
-  version "8.4.2"
-  resolved "https://registry.yarnpkg.com/open/-/open-8.4.2.tgz#5b5ffe2a8f793dcd2aad73e550cb87b59cb084f9"
-  integrity sha512-7x81NCL719oNbsq/3mh+hVrAWmFuEYUqrq/Iw3kUzH8ReypT9QQ0BLoJS7/G9k6N81XjW4qHWtjWwe/9eLy1EQ==
-  dependencies:
-    define-lazy-prop "^2.0.0"
-    is-docker "^2.1.1"
-    is-wsl "^2.2.0"
-
-optionator@^0.8.1:
-  version "0.8.3"
-  resolved "https://registry.yarnpkg.com/optionator/-/optionator-0.8.3.tgz#84fa1d036fe9d3c7e21d99884b601167ec8fb495"
-  integrity sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==
-  dependencies:
-    deep-is "~0.1.3"
-    fast-levenshtein "~2.0.6"
-    levn "~0.3.0"
-    prelude-ls "~1.1.2"
-    type-check "~0.3.2"
-    word-wrap "~1.2.3"
-
-optionator@^0.9.3:
-  version "0.9.3"
-  resolved "https://registry.yarnpkg.com/optionator/-/optionator-0.9.3.tgz#007397d44ed1872fdc6ed31360190f81814e2c64"
-  integrity sha512-JjCoypp+jKn1ttEFExxhetCKeJt9zhAgAve5FXHixTvFDW/5aEktX9bufBKLRRMdU7bNtpLfcGu94B3cdEJgjg==
-  dependencies:
-    "@aashutoshrathi/word-wrap" "^1.2.3"
-    deep-is "^0.1.3"
-    fast-levenshtein "^2.0.6"
-    levn "^0.4.1"
-    prelude-ls "^1.2.1"
-    type-check "^0.4.0"
-
-opus-decoder@0.7.1:
-  version "0.7.1"
-  resolved "https://registry.yarnpkg.com/opus-decoder/-/opus-decoder-0.7.1.tgz#48c50f1feb0b49fa078ade93f08caeff9142ffae"
-  integrity sha512-AOFCMKLn7LJm8pOkksY5TsW/6+XmNyh1OQS9gxmdOGHLNYoOBrjSfc0nPNcmUMGEzOrTqZtPi8VJ/ABs2Hndvg==
-  dependencies:
-    "@wasm-audio-decoders/common" "9.0.1"
-
-ora@6.3.1:
-  version "6.3.1"
-  resolved "https://registry.yarnpkg.com/ora/-/ora-6.3.1.tgz#a4e9e5c2cf5ee73c259e8b410273e706a2ad3ed6"
-  integrity sha512-ERAyNnZOfqM+Ao3RAvIXkYh5joP220yf59gVe2X/cI6SiCxIdi4c9HZKZD8R6q/RDXEje1THBju6iExiSsgJaQ==
-  dependencies:
-    chalk "^5.0.0"
-    cli-cursor "^4.0.0"
-    cli-spinners "^2.6.1"
-    is-interactive "^2.0.0"
-    is-unicode-supported "^1.1.0"
-    log-symbols "^5.1.0"
-    stdin-discarder "^0.1.0"
-    strip-ansi "^7.0.1"
-    wcwidth "^1.0.1"
-
-ora@^5.4.1:
-  version "5.4.1"
-  resolved "https://registry.yarnpkg.com/ora/-/ora-5.4.1.tgz#1b2678426af4ac4a509008e5e4ac9e9959db9e18"
-  integrity sha512-5b6Y85tPxZZ7QytO+BQzysW31HJku27cRIlkbAXaNx+BdcVi+LlRFmVXzeF6a7JCwJpyw5c4b+YSVImQIrBpuQ==
-  dependencies:
-    bl "^4.1.0"
-    chalk "^4.1.0"
-    cli-cursor "^3.1.0"
-    cli-spinners "^2.5.0"
-    is-interactive "^1.0.0"
-    is-unicode-supported "^0.1.0"
-    log-symbols "^4.1.0"
-    strip-ansi "^6.0.0"
-    wcwidth "^1.0.1"
-
-os-name@5.1.0:
-  version "5.1.0"
-  resolved "https://registry.yarnpkg.com/os-name/-/os-name-5.1.0.tgz#4f5ab5edfa6938b590112714f1570fe79f1d957a"
-  integrity sha512-YEIoAnM6zFmzw3PQ201gCVCIWbXNyKObGlVvpAVvraAeOHnlYVKFssbA/riRX5R40WA6kKrZ7Dr7dWzO3nKSeQ==
-  dependencies:
-    macos-release "^3.1.0"
-    windows-release "^5.0.1"
-
-os-tmpdir@~1.0.2:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/os-tmpdir/-/os-tmpdir-1.0.2.tgz#bbe67406c79aa85c5cfec766fe5734555dfa1274"
-  integrity sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==
-
-p-cancelable@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/p-cancelable/-/p-cancelable-3.0.0.tgz#63826694b54d61ca1c20ebcb6d3ecf5e14cd8050"
-  integrity sha512-mlVgR3PGuzlo0MmTdk4cXqXWlwQDLnONTAg6sm62XkMJEiRxN3GL3SffkYvqwonbkJBcrI7Uvv5Zh9yjvn2iUw==
-
-p-limit@^1.1.0:
-  version "1.3.0"
-  resolved "https://registry.yarnpkg.com/p-limit/-/p-limit-1.3.0.tgz#b86bd5f0c25690911c7590fcbfc2010d54b3ccb8"
-  integrity sha512-vvcXsLAJ9Dr5rQOPk7toZQZJApBl2K4J6dANSsEuh6QI41JYcsS/qhTGa9ErIUUgK3WNQoJYvylxvjqmiqEA9Q==
-  dependencies:
-    p-try "^1.0.0"
-
-p-limit@^2.2.0:
-  version "2.3.0"
-  resolved "https://registry.yarnpkg.com/p-limit/-/p-limit-2.3.0.tgz#3dd33c647a214fdfffd835933eb086da0dc21db1"
-  integrity sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==
-  dependencies:
-    p-try "^2.0.0"
-
-p-limit@^3.0.2:
-  version "3.1.0"
-  resolved "https://registry.yarnpkg.com/p-limit/-/p-limit-3.1.0.tgz#e1daccbe78d0d1388ca18c64fea38e3e57e3706b"
-  integrity sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==
-  dependencies:
-    yocto-queue "^0.1.0"
-
-p-locate@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/p-locate/-/p-locate-2.0.0.tgz#20a0103b222a70c8fd39cc2e580680f3dde5ec43"
-  integrity sha512-nQja7m7gSKuewoVRen45CtVfODR3crN3goVQ0DDZ9N3yHxgpkuBhZqsaiotSQRrADUrne346peY7kT3TSACykg==
-  dependencies:
-    p-limit "^1.1.0"
-
-p-locate@^4.1.0:
-  version "4.1.0"
-  resolved "https://registry.yarnpkg.com/p-locate/-/p-locate-4.1.0.tgz#a3428bb7088b3a60292f66919278b7c297ad4f07"
-  integrity sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==
-  dependencies:
-    p-limit "^2.2.0"
-
-p-locate@^5.0.0:
-  version "5.0.0"
-  resolved "https://registry.yarnpkg.com/p-locate/-/p-locate-5.0.0.tgz#83c8315c6785005e3bd021839411c9e110e6d834"
-  integrity sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==
-  dependencies:
-    p-limit "^3.0.2"
-
-p-try@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/p-try/-/p-try-1.0.0.tgz#cbc79cdbaf8fd4228e13f621f2b1a237c1b207b3"
-  integrity sha512-U1etNYuMJoIz3ZXSrrySFjsXQTWOx2/jdi86L+2pRvph/qMKL6sbcCYdH23fqsbm8TH2Gn0OybpT4eSFlCVHww==
-
-p-try@^2.0.0:
-  version "2.2.0"
-  resolved "https://registry.yarnpkg.com/p-try/-/p-try-2.2.0.tgz#cb2868540e313d61de58fafbe35ce9004d5540e6"
-  integrity sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==
-
-pac-proxy-agent@^6.0.3:
-  version "6.0.4"
-  resolved "https://registry.yarnpkg.com/pac-proxy-agent/-/pac-proxy-agent-6.0.4.tgz#f90d066808974cd6813dfcdac69a2aa483b18ba1"
-  integrity sha512-FbJYeusBOZNe6bmrC2/+r/HljwExryon16lNKEU82gWiwIPMCEktUPSEAcTkO9K3jd/YPGuX/azZel1ltmo6nQ==
-  dependencies:
-    agent-base "^7.0.2"
-    debug "^4.3.4"
-    get-uri "^6.0.1"
-    http-proxy-agent "^7.0.0"
-    https-proxy-agent "^7.0.0"
-    pac-resolver "^6.0.1"
-    socks-proxy-agent "^8.0.1"
-
-pac-resolver@^6.0.1:
-  version "6.0.2"
-  resolved "https://registry.yarnpkg.com/pac-resolver/-/pac-resolver-6.0.2.tgz#742ef24d2805b18c0a684ac02bcb0b5ce9644648"
-  integrity sha512-EQpuJ2ifOjpZY5sg1Q1ZeAxvtLwR7Mj3RgY8cysPGbsRu3RBXyJFWxnMus9PScjxya/0LzvVDxNh/gl0eXBU4w==
-  dependencies:
-    degenerator "^4.0.4"
-    ip "^1.1.8"
-    netmask "^2.0.2"
-
-package-json@^8.1.0:
-  version "8.1.1"
-  resolved "https://registry.yarnpkg.com/package-json/-/package-json-8.1.1.tgz#3e9948e43df40d1e8e78a85485f1070bf8f03dc8"
-  integrity sha512-cbH9IAIJHNj9uXi196JVsRlt7cHKak6u/e6AkL/bkRelZ7rlL3X1YKxsZwa36xipOEKAsdtmaG6aAJoM1fx2zA==
-  dependencies:
-    got "^12.1.0"
-    registry-auth-token "^5.0.1"
-    registry-url "^6.0.0"
-    semver "^7.3.7"
-
-pako@^1.0.5:
-  version "1.0.11"
-  resolved "https://registry.yarnpkg.com/pako/-/pako-1.0.11.tgz#6c9599d340d54dfd3946380252a35705a6b992bf"
-  integrity sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==
-
-parent-module@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/parent-module/-/parent-module-1.0.1.tgz#691d2709e78c79fae3a156622452d00762caaaa2"
-  integrity sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==
-  dependencies:
-    callsites "^3.0.0"
-
-parse-bmfont-ascii@^1.0.3:
-  version "1.0.6"
-  resolved "https://registry.yarnpkg.com/parse-bmfont-ascii/-/parse-bmfont-ascii-1.0.6.tgz#11ac3c3ff58f7c2020ab22769079108d4dfa0285"
-  integrity sha512-U4RrVsUFCleIOBsIGYOMKjn9PavsGOXxbvYGtMOEfnId0SVNsgehXh1DxUdVPLoxd5mvcEtvmKs2Mmf0Mpa1ZA==
-
-parse-bmfont-binary@^1.0.5:
-  version "1.0.6"
-  resolved "https://registry.yarnpkg.com/parse-bmfont-binary/-/parse-bmfont-binary-1.0.6.tgz#d038b476d3e9dd9db1e11a0b0e53a22792b69006"
-  integrity sha512-GxmsRea0wdGdYthjuUeWTMWPqm2+FAd4GI8vCvhgJsFnoGhTrLhXDDupwTo7rXVAgaLIGoVHDZS9p/5XbSqeWA==
-
-parse-bmfont-xml@^1.1.4:
-  version "1.1.4"
-  resolved "https://registry.yarnpkg.com/parse-bmfont-xml/-/parse-bmfont-xml-1.1.4.tgz#015319797e3e12f9e739c4d513872cd2fa35f389"
-  integrity sha512-bjnliEOmGv3y1aMEfREMBJ9tfL3WR0i0CKPj61DnSLaoxWR3nLrsQrEbCId/8rF4NyRF0cCqisSVXyQYWM+mCQ==
-  dependencies:
-    xml-parse-from-string "^1.0.0"
-    xml2js "^0.4.5"
-
-parse-headers@^2.0.0:
-  version "2.0.5"
-  resolved "https://registry.yarnpkg.com/parse-headers/-/parse-headers-2.0.5.tgz#069793f9356a54008571eb7f9761153e6c770da9"
-  integrity sha512-ft3iAoLOB/MlwbNXgzy43SWGP6sQki2jQvAyBg/zDFAgr9bfNWZIUj42Kw2eJIl8kEi4PbgE6U1Zau/HwI75HA==
-
-parse-json@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/parse-json/-/parse-json-4.0.0.tgz#be35f5425be1f7f6c747184f98a788cb99477ee0"
-  integrity sha512-aOIos8bujGN93/8Ox/jPLh7RwVnPEysynVFE+fQZyg6jKELEHwzgKdLRFHUgXJL6kylijVSBC4BvN9OmsB48Rw==
-  dependencies:
-    error-ex "^1.3.1"
-    json-parse-better-errors "^1.0.1"
-
-parse-json@^5.0.0, parse-json@^5.2.0:
-  version "5.2.0"
-  resolved "https://registry.yarnpkg.com/parse-json/-/parse-json-5.2.0.tgz#c76fc66dee54231c962b22bcc8a72cf2f99753cd"
-  integrity sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==
-  dependencies:
-    "@babel/code-frame" "^7.0.0"
-    error-ex "^1.3.1"
-    json-parse-even-better-errors "^2.3.0"
-    lines-and-columns "^1.1.6"
-
-parse-path@^7.0.0:
-  version "7.0.0"
-  resolved "https://registry.yarnpkg.com/parse-path/-/parse-path-7.0.0.tgz#605a2d58d0a749c8594405d8cc3a2bf76d16099b"
-  integrity sha512-Euf9GG8WT9CdqwuWJGdf3RkUcTBArppHABkO7Lm8IzRQp0e2r/kkFnmhu4TSK30Wcu5rVAZLmfPKSBBi9tWFog==
-  dependencies:
-    protocols "^2.0.0"
-
-parse-url@^8.1.0:
-  version "8.1.0"
-  resolved "https://registry.yarnpkg.com/parse-url/-/parse-url-8.1.0.tgz#972e0827ed4b57fc85f0ea6b0d839f0d8a57a57d"
-  integrity sha512-xDvOoLU5XRrcOZvnI6b8zA6n9O9ejNk/GExuz1yBuWUGn9KA97GI6HTs6u02wKara1CeVmZhH+0TZFdWScR89w==
-  dependencies:
-    parse-path "^7.0.0"
-
-parse5-htmlparser2-tree-adapter@^7.0.0:
-  version "7.0.0"
-  resolved "https://registry.yarnpkg.com/parse5-htmlparser2-tree-adapter/-/parse5-htmlparser2-tree-adapter-7.0.0.tgz#23c2cc233bcf09bb7beba8b8a69d46b08c62c2f1"
-  integrity sha512-B77tOZrqqfUfnVcOrUvfdLbz4pu4RopLD/4vmu3HUPswwTA8OH0EMW9BlWR2B0RCoiZRAHEUu7IxeP1Pd1UU+g==
-  dependencies:
-    domhandler "^5.0.2"
-    parse5 "^7.0.0"
-
-parse5@6.0.1:
-  version "6.0.1"
-  resolved "https://registry.yarnpkg.com/parse5/-/parse5-6.0.1.tgz#e1a1c085c569b3dc08321184f19a39cc27f7c30b"
-  integrity sha512-Ofn/CTFzRGTTxwpNEs9PP93gXShHcTq255nzRYSKe8AkVpZY7e1fpmTfOyoIvjP5HG7Z2ZM7VS9PPhQGW2pOpw==
-
-parse5@^7.0.0:
-  version "7.1.2"
-  resolved "https://registry.yarnpkg.com/parse5/-/parse5-7.1.2.tgz#0736bebbfd77793823240a23b7fc5e010b7f8e32"
-  integrity sha512-Czj1WaSVpaoj0wbhMzLmWD69anp2WH7FXMB9n1Sy8/ZFF9jolSQVMu1Ij5WIyGmcBmhk7EOndpO4mIpihVqAXw==
-  dependencies:
-    entities "^4.4.0"
-
-path-exists@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/path-exists/-/path-exists-3.0.0.tgz#ce0ebeaa5f78cb18925ea7d810d7b59b010fd515"
-  integrity sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==
-
-path-exists@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/path-exists/-/path-exists-4.0.0.tgz#513bdbe2d3b95d7762e8c1137efa195c6c61b5b3"
-  integrity sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==
-
-path-is-absolute@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz#174b9268735534ffbc7ace6bf53a5a9e1b5c5f5f"
-  integrity sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==
-
-path-key@^3.0.0, path-key@^3.1.0:
-  version "3.1.1"
-  resolved "https://registry.yarnpkg.com/path-key/-/path-key-3.1.1.tgz#581f6ade658cbba65a0d3380de7753295054f375"
-  integrity sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==
-
-path-key@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/path-key/-/path-key-4.0.0.tgz#295588dc3aee64154f877adb9d780b81c554bf18"
-  integrity sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==
-
-path-parse@^1.0.7:
-  version "1.0.7"
-  resolved "https://registry.yarnpkg.com/path-parse/-/path-parse-1.0.7.tgz#fbc114b60ca42b30d9daf5858e4bd68bbedb6735"
-  integrity sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==
-
-path-type@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/path-type/-/path-type-3.0.0.tgz#cef31dc8e0a1a3bb0d105c0cd97cf3bf47f4e36f"
-  integrity sha512-T2ZUsdZFHgA3u4e5PfPbjd7HDDpxPnQb5jN0SrDsjNSuVXHJqtwTnWqG0B1jZrgmJ/7lj1EmVIByWt1gxGkWvg==
-  dependencies:
-    pify "^3.0.0"
-
-path-type@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/path-type/-/path-type-4.0.0.tgz#84ed01c0a7ba380afe09d90a8c180dcd9d03043b"
-  integrity sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==
-
-peek-readable@^4.1.0:
-  version "4.1.0"
-  resolved "https://registry.yarnpkg.com/peek-readable/-/peek-readable-4.1.0.tgz#4ece1111bf5c2ad8867c314c81356847e8a62e72"
-  integrity sha512-ZI3LnwUv5nOGbQzD9c2iDG6toheuXSZP5esSHBjopsXH4dg19soufvpUGA3uohi5anFtGb2lhAVdHzH6R/Evvg==
-
-phin@^2.9.1:
-  version "2.9.3"
-  resolved "https://registry.yarnpkg.com/phin/-/phin-2.9.3.tgz#f9b6ac10a035636fb65dfc576aaaa17b8743125c"
-  integrity sha512-CzFr90qM24ju5f88quFC/6qohjC144rehe5n6DH900lgXmUe86+xCKc10ev56gRKC4/BkHUoG4uSiQgBiIXwDA==
-
-picocolors@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/picocolors/-/picocolors-1.0.0.tgz#cb5bdc74ff3f51892236eaf79d68bc44564ab81c"
-  integrity sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==
-
-picomatch@^2.0.4, picomatch@^2.2.3, picomatch@^2.3.1:
-  version "2.3.1"
-  resolved "https://registry.yarnpkg.com/picomatch/-/picomatch-2.3.1.tgz#3ba3833733646d9d3e4995946c1365a67fb07a42"
-  integrity sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==
-
-pify@^2.3.0:
-  version "2.3.0"
-  resolved "https://registry.yarnpkg.com/pify/-/pify-2.3.0.tgz#ed141a6ac043a849ea588498e7dca8b15330e90c"
-  integrity sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==
-
-pify@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/pify/-/pify-3.0.0.tgz#e5a4acd2c101fdf3d9a4d07f0dbc4db49dd28176"
-  integrity sha512-C3FsVNH1udSEX48gGX1xfvwTWfsYWj5U+8/uK15BGzIGrKoUpghX8hWZwa/OFnakBiiVNmBvemTJR5mcy7iPcg==
-
-pino-abstract-transport@v0.5.0:
-  version "0.5.0"
-  resolved "https://registry.yarnpkg.com/pino-abstract-transport/-/pino-abstract-transport-0.5.0.tgz#4b54348d8f73713bfd14e3dc44228739aa13d9c0"
-  integrity sha512-+KAgmVeqXYbTtU2FScx1XS3kNyfZ5TrXY07V96QnUSFqo2gAqlvmaxH67Lj7SWazqsMabf+58ctdTcBgnOLUOQ==
-  dependencies:
-    duplexify "^4.1.2"
-    split2 "^4.0.0"
-
-pino-std-serializers@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/pino-std-serializers/-/pino-std-serializers-4.0.0.tgz#1791ccd2539c091ae49ce9993205e2cd5dbba1e2"
-  integrity sha512-cK0pekc1Kjy5w9V2/n+8MkZwusa6EyyxfeQCB799CQRhRt/CqYKiWs5adeu8Shve2ZNffvfC/7J64A2PJo1W/Q==
-
-pino@^7.0.0:
-  version "7.11.0"
-  resolved "https://registry.yarnpkg.com/pino/-/pino-7.11.0.tgz#0f0ea5c4683dc91388081d44bff10c83125066f6"
-  integrity sha512-dMACeu63HtRLmCG8VKdy4cShCPKaYDR4youZqoSWLxl5Gu99HUw8bw75thbPv9Nip+H+QYX8o3ZJbTdVZZ2TVg==
-  dependencies:
-    atomic-sleep "^1.0.0"
-    fast-redact "^3.0.0"
-    on-exit-leak-free "^0.2.0"
-    pino-abstract-transport v0.5.0
-    pino-std-serializers "^4.0.0"
-    process-warning "^1.0.0"
-    quick-format-unescaped "^4.0.3"
-    real-require "^0.1.0"
-    safe-stable-stringify "^2.1.0"
-    sonic-boom "^2.2.1"
-    thread-stream "^0.15.1"
-
-pirates@^4.0.4:
-  version "4.0.6"
-  resolved "https://registry.yarnpkg.com/pirates/-/pirates-4.0.6.tgz#3018ae32ecfcff6c29ba2267cbf21166ac1f36b9"
-  integrity sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==
-
-pixelmatch@^4.0.2:
-  version "4.0.2"
-  resolved "https://registry.yarnpkg.com/pixelmatch/-/pixelmatch-4.0.2.tgz#8f47dcec5011b477b67db03c243bc1f3085e8854"
-  integrity sha512-J8B6xqiO37sU/gkcMglv6h5Jbd9xNER7aHzpfRdNmV4IbQBzBpe4l9XmbG+xPF/znacgu2jfEw+wHffaq/YkXA==
-  dependencies:
-    pngjs "^3.0.0"
-
-pkg-dir@^4.2.0:
-  version "4.2.0"
-  resolved "https://registry.yarnpkg.com/pkg-dir/-/pkg-dir-4.2.0.tgz#f099133df7ede422e81d1d8448270eeb3e4261f3"
-  integrity sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==
-  dependencies:
-    find-up "^4.0.0"
-
-pngjs@^3.0.0, pngjs@^3.3.3:
-  version "3.4.0"
-  resolved "https://registry.yarnpkg.com/pngjs/-/pngjs-3.4.0.tgz#99ca7d725965fb655814eaf65f38f12bbdbf555f"
-  integrity sha512-NCrCHhWmnQklfH4MtJMRjZ2a8c80qXeMlQMv2uVp9ISJMTt562SbGd6n2oq0PaPgKm7Z6pL9E2UlLIhC+SHL3w==
-
-prebuild-install@^7.1.1:
-  version "7.1.1"
-  resolved "https://registry.yarnpkg.com/prebuild-install/-/prebuild-install-7.1.1.tgz#de97d5b34a70a0c81334fd24641f2a1702352e45"
-  integrity sha512-jAXscXWMcCK8GgCoHOfIr0ODh5ai8mj63L2nWrjuAgXE6tDyYGnx4/8o/rCgU+B4JSyZBKbeZqzhtwtC3ovxjw==
-  dependencies:
-    detect-libc "^2.0.0"
-    expand-template "^2.0.3"
-    github-from-package "0.0.0"
-    minimist "^1.2.3"
-    mkdirp-classic "^0.5.3"
-    napi-build-utils "^1.0.1"
-    node-abi "^3.3.0"
-    pump "^3.0.0"
-    rc "^1.2.7"
-    simple-get "^4.0.0"
-    tar-fs "^2.0.0"
-    tunnel-agent "^0.6.0"
-
-prelude-ls@^1.2.1:
-  version "1.2.1"
-  resolved "https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.2.1.tgz#debc6489d7a6e6b0e7611888cec880337d316396"
-  integrity sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==
-
-prelude-ls@~1.1.2:
-  version "1.1.2"
-  resolved "https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.1.2.tgz#21932a549f5e52ffd9a827f570e04be62a97da54"
-  integrity sha512-ESF23V4SKG6lVSGZgYNpbsiaAkdab6ZgOxe52p7+Kid3W3u3bxR4Vfd/o21dmN7jSt0IwgZ4v5MUd26FEtXE9w==
-
-pretty-format@^27.0.0, pretty-format@^27.5.1:
-  version "27.5.1"
-  resolved "https://registry.yarnpkg.com/pretty-format/-/pretty-format-27.5.1.tgz#2181879fdea51a7a5851fb39d920faa63f01d88e"
-  integrity sha512-Qb1gy5OrP5+zDf2Bvnzdl3jsTf1qXVMazbvCoKhtKqVs4/YK4ozX4gKQJJVyNe+cajNPn0KoC0MC3FUmaHWEmQ==
-  dependencies:
-    ansi-regex "^5.0.1"
-    ansi-styles "^5.0.0"
-    react-is "^17.0.1"
-
-process-nextick-args@~2.0.0:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/process-nextick-args/-/process-nextick-args-2.0.1.tgz#7820d9b16120cc55ca9ae7792680ae7dba6d7fe2"
-  integrity sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==
-
-process-warning@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/process-warning/-/process-warning-1.0.0.tgz#980a0b25dc38cd6034181be4b7726d89066b4616"
-  integrity sha512-du4wfLyj4yCZq1VupnVSZmRsPJsNuxoDQFdCFHLaYiEbFBD7QE0a+I4D7hOxrVnh78QE/YipFAj9lXHiXocV+Q==
-
-process@^0.11.10:
-  version "0.11.10"
-  resolved "https://registry.yarnpkg.com/process/-/process-0.11.10.tgz#7332300e840161bda3e69a1d1d91a7d4bc16f182"
-  integrity sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==
-
-promise.allsettled@1.0.6:
-  version "1.0.6"
-  resolved "https://registry.yarnpkg.com/promise.allsettled/-/promise.allsettled-1.0.6.tgz#8dc8ba8edf429feb60f8e81335b920e109c94b6e"
-  integrity sha512-22wJUOD3zswWFqgwjNHa1965LvqTX87WPu/lreY2KSd7SVcERfuZ4GfUaOnJNnvtoIv2yXT/W00YIGMetXtFXg==
-  dependencies:
-    array.prototype.map "^1.0.5"
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-    get-intrinsic "^1.1.3"
-    iterate-value "^1.0.2"
-
-prompts@^2.0.1:
-  version "2.4.2"
-  resolved "https://registry.yarnpkg.com/prompts/-/prompts-2.4.2.tgz#7b57e73b3a48029ad10ebd44f74b01722a4cb069"
-  integrity sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==
-  dependencies:
-    kleur "^3.0.3"
-    sisteransi "^1.0.5"
-
-prop-types@^15.8.1:
-  version "15.8.1"
-  resolved "https://registry.yarnpkg.com/prop-types/-/prop-types-15.8.1.tgz#67d87bf1a694f48435cf332c24af10214a3140b5"
-  integrity sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==
-  dependencies:
-    loose-envify "^1.4.0"
-    object-assign "^4.1.1"
-    react-is "^16.13.1"
-
-proto-list@~1.2.1:
-  version "1.2.4"
-  resolved "https://registry.yarnpkg.com/proto-list/-/proto-list-1.2.4.tgz#212d5bfe1318306a420f6402b8e26ff39647a849"
-  integrity sha512-vtK/94akxsTMhe0/cbfpR+syPuszcuwhqVjJq26CuNDgFGj682oRBXOP5MJpv2r7JtE8MsiepGIqvvOTBwn2vA==
-
-protobufjs@6.8.8:
-  version "6.8.8"
-  resolved "https://registry.yarnpkg.com/protobufjs/-/protobufjs-6.8.8.tgz#c8b4f1282fd7a90e6f5b109ed11c84af82908e7c"
-  integrity sha512-AAmHtD5pXgZfi7GMpllpO3q1Xw1OYldr+dMUlAnffGTAhqkg72WdmSY71uKBF/JuyiKs8psYbtKrhi0ASCD8qw==
-  dependencies:
-    "@protobufjs/aspromise" "^1.1.2"
-    "@protobufjs/base64" "^1.1.2"
-    "@protobufjs/codegen" "^2.0.4"
-    "@protobufjs/eventemitter" "^1.1.0"
-    "@protobufjs/fetch" "^1.1.0"
-    "@protobufjs/float" "^1.0.2"
-    "@protobufjs/inquire" "^1.1.0"
-    "@protobufjs/path" "^1.1.2"
-    "@protobufjs/pool" "^1.1.0"
-    "@protobufjs/utf8" "^1.1.0"
-    "@types/long" "^4.0.0"
-    "@types/node" "^10.1.0"
-    long "^4.0.0"
-
-protobufjs@^7.2.4:
-  version "7.2.4"
-  resolved "https://registry.yarnpkg.com/protobufjs/-/protobufjs-7.2.4.tgz#3fc1ec0cdc89dd91aef9ba6037ba07408485c3ae"
-  integrity sha512-AT+RJgD2sH8phPmCf7OUZR8xGdcJRga4+1cOaXJ64hvcSkVhNcRHOwIxUatPH15+nj59WAGTDv3LSGZPEQbJaQ==
-  dependencies:
-    "@protobufjs/aspromise" "^1.1.2"
-    "@protobufjs/base64" "^1.1.2"
-    "@protobufjs/codegen" "^2.0.4"
-    "@protobufjs/eventemitter" "^1.1.0"
-    "@protobufjs/fetch" "^1.1.0"
-    "@protobufjs/float" "^1.0.2"
-    "@protobufjs/inquire" "^1.1.0"
-    "@protobufjs/path" "^1.1.2"
-    "@protobufjs/pool" "^1.1.0"
-    "@protobufjs/utf8" "^1.1.0"
-    "@types/node" ">=13.7.0"
-    long "^5.0.0"
-
-protocols@^2.0.0, protocols@^2.0.1:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/protocols/-/protocols-2.0.1.tgz#8f155da3fc0f32644e83c5782c8e8212ccf70a86"
-  integrity sha512-/XJ368cyBJ7fzLMwLKv1e4vLxOju2MNAIokcr7meSaNcVbWz/CPcW22cP04mwxOErdA5mwjA8Q6w/cdAQxVn7Q==
-
-proxy-agent@6.2.1:
-  version "6.2.1"
-  resolved "https://registry.yarnpkg.com/proxy-agent/-/proxy-agent-6.2.1.tgz#062df6609a4012fd1c108974865599b61e77abde"
-  integrity sha512-OIbBKlRAT+ycCm6wAYIzMwPejzRtjy8F3QiDX0eKOA3e4pe3U9F/IvzcHP42bmgQxVv97juG+J8/gx+JIeCX/Q==
-  dependencies:
-    agent-base "^7.0.2"
-    debug "^4.3.4"
-    http-proxy-agent "^7.0.0"
-    https-proxy-agent "^7.0.0"
-    lru-cache "^7.14.1"
-    pac-proxy-agent "^6.0.3"
-    proxy-from-env "^1.1.0"
-    socks-proxy-agent "^8.0.1"
-
-proxy-from-env@^1.1.0:
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/proxy-from-env/-/proxy-from-env-1.1.0.tgz#e102f16ca355424865755d2c9e8ea4f24d58c3e2"
-  integrity sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==
-
-psl@^1.1.33:
-  version "1.9.0"
-  resolved "https://registry.yarnpkg.com/psl/-/psl-1.9.0.tgz#d0df2a137f00794565fcaf3b2c00cd09f8d5a5a7"
-  integrity sha512-E/ZsdU4HLs/68gYzgGTkMicWTLPdAftJLfJFlLUAAKZGkStNU72sZjT66SnMDVOfOWY/YAoiD7Jxa9iHvngcag==
-
-pump@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/pump/-/pump-3.0.0.tgz#b4a2116815bde2f4e1ea602354e8c75565107a64"
-  integrity sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==
-  dependencies:
-    end-of-stream "^1.1.0"
-    once "^1.3.1"
-
-punycode@1.3.2:
-  version "1.3.2"
-  resolved "https://registry.yarnpkg.com/punycode/-/punycode-1.3.2.tgz#9653a036fb7c1ee42342f2325cceefea3926c48d"
-  integrity sha512-RofWgt/7fL5wP1Y7fxE7/EmTLzQVnB0ycyibJ0OOHIlJqTNzglYFxVwETOcIoJqJmpDXJ9xImDv+Fq34F/d4Dw==
-
-punycode@^2.1.0, punycode@^2.1.1:
-  version "2.3.0"
-  resolved "https://registry.yarnpkg.com/punycode/-/punycode-2.3.0.tgz#f67fa67c94da8f4d0cfff981aee4118064199b8f"
-  integrity sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA==
-
-pupa@^3.1.0:
-  version "3.1.0"
-  resolved "https://registry.yarnpkg.com/pupa/-/pupa-3.1.0.tgz#f15610274376bbcc70c9a3aa8b505ea23f41c579"
-  integrity sha512-FLpr4flz5xZTSJxSeaheeMKN/EDzMdK7b8PTOC6a5PYFKTucWbdqjgqaEyH0shFiSJrVB1+Qqi4Tk19ccU6Aug==
-  dependencies:
-    escape-goat "^4.0.0"
-
-q@^1.5.1:
-  version "1.5.1"
-  resolved "https://registry.yarnpkg.com/q/-/q-1.5.1.tgz#7e32f75b41381291d04611f1bf14109ac00651d7"
-  integrity sha512-kV/CThkXo6xyFEZUugw/+pIOywXcDbFYgSct5cT3gqlbkBE1SJdwy6UQoZvodiWF/ckQLZyDE/Bu1M6gVu5lVw==
-
-qoa-format@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/qoa-format/-/qoa-format-1.0.0.tgz#1638adb119ed3a32cf65efdb2c7e278f6d64b2ef"
-  integrity sha512-Vjp2aV2x06tHbZesCi2UtISaFdlLzy47Vbt0rNwwdihKFvGtUeFfytdnA8XZYADqWtRbK19+XXeRkv1Stg4qSQ==
-  dependencies:
-    "@thi.ng/bitstream" "^2.2.12"
-
-qrcode-terminal@^0.12.0:
-  version "0.12.0"
-  resolved "https://registry.yarnpkg.com/qrcode-terminal/-/qrcode-terminal-0.12.0.tgz#bb5b699ef7f9f0505092a3748be4464fe71b5819"
-  integrity sha512-EXtzRZmC+YGmGlDFbXKxQiMZNwCLEO6BANKXG4iCtSIM0yqc/pappSx3RIKr4r0uh5JsBckOXeKrB3Iz7mdQpQ==
-
-querystring@0.2.0:
-  version "0.2.0"
-  resolved "https://registry.yarnpkg.com/querystring/-/querystring-0.2.0.tgz#b209849203bb25df820da756e747005878521620"
-  integrity sha512-X/xY82scca2tau62i9mDyU9K+I+djTMUsvwf7xnUX5GLvVzgJybOJf4Y6o9Zx3oJK/LSXg5tTZBjwzqVPaPO2g==
-
-querystringify@^2.1.1:
-  version "2.2.0"
-  resolved "https://registry.yarnpkg.com/querystringify/-/querystringify-2.2.0.tgz#3345941b4153cb9d082d8eee4cda2016a9aef7f6"
-  integrity sha512-FIqgj2EUvTa7R50u0rGsyTftzjYmv/a3hO345bZNrqabNqjtgiDMgmo4mkUjd+nzU5oF3dClKqFIPUKybUyqoQ==
-
-queue-microtask@^1.2.2:
-  version "1.2.3"
-  resolved "https://registry.yarnpkg.com/queue-microtask/-/queue-microtask-1.2.3.tgz#4929228bbc724dfac43e0efb058caf7b6cfb6243"
-  integrity sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==
-
-quick-format-unescaped@^4.0.3:
-  version "4.0.4"
-  resolved "https://registry.yarnpkg.com/quick-format-unescaped/-/quick-format-unescaped-4.0.4.tgz#93ef6dd8d3453cbc7970dd614fad4c5954d6b5a7"
-  integrity sha512-tYC1Q1hgyRuHgloV/YXs2w15unPVh8qfu/qCTfhTYamaw7fyhumKa2yGpdSo87vY32rIclj+4fWYQXUMs9EHvg==
-
-quick-lru@^4.0.1:
-  version "4.0.1"
-  resolved "https://registry.yarnpkg.com/quick-lru/-/quick-lru-4.0.1.tgz#5b8878f113a58217848c6482026c73e1ba57727f"
-  integrity sha512-ARhCpm70fzdcvNQfPoy49IaanKkTlRWF2JMzqhcJbhSFRZv7nPTvZJdcY7301IPmvW+/p0RgIWnQDLJxifsQ7g==
-
-quick-lru@^5.1.1:
-  version "5.1.1"
-  resolved "https://registry.yarnpkg.com/quick-lru/-/quick-lru-5.1.1.tgz#366493e6b3e42a3a6885e2e99d18f80fb7a8c932"
-  integrity sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==
-
-rc@1.2.8, rc@^1.2.7:
-  version "1.2.8"
-  resolved "https://registry.yarnpkg.com/rc/-/rc-1.2.8.tgz#cd924bf5200a075b83c188cd6b9e211b7fc0d3ed"
-  integrity sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==
-  dependencies:
-    deep-extend "^0.6.0"
-    ini "~1.3.0"
-    minimist "^1.2.0"
-    strip-json-comments "~2.0.1"
-
-react-is@^16.13.1:
-  version "16.13.1"
-  resolved "https://registry.yarnpkg.com/react-is/-/react-is-16.13.1.tgz#789729a4dc36de2999dc156dd6c1d9c18cea56a4"
-  integrity sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==
-
-react-is@^17.0.1:
-  version "17.0.2"
-  resolved "https://registry.yarnpkg.com/react-is/-/react-is-17.0.2.tgz#e691d4a8e9c789365655539ab372762b0efb54f0"
-  integrity sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==
-
-read-pkg-up@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/read-pkg-up/-/read-pkg-up-3.0.0.tgz#3ed496685dba0f8fe118d0691dc51f4a1ff96f07"
-  integrity sha512-YFzFrVvpC6frF1sz8psoHDBGF7fLPc+llq/8NB43oagqWkx8ar5zYtsTORtOjw9W2RHLpWP+zTWwBvf1bCmcSw==
-  dependencies:
-    find-up "^2.0.0"
-    read-pkg "^3.0.0"
-
-read-pkg-up@^7.0.1:
-  version "7.0.1"
-  resolved "https://registry.yarnpkg.com/read-pkg-up/-/read-pkg-up-7.0.1.tgz#f3a6135758459733ae2b95638056e1854e7ef507"
-  integrity sha512-zK0TB7Xd6JpCLmlLmufqykGE+/TlOePD6qKClNW7hHDKFh/J7/7gCWGR7joEQEW1bKq3a3yUZSObOoWLFQ4ohg==
-  dependencies:
-    find-up "^4.1.0"
-    read-pkg "^5.2.0"
-    type-fest "^0.8.1"
-
-read-pkg@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/read-pkg/-/read-pkg-3.0.0.tgz#9cbc686978fee65d16c00e2b19c237fcf6e38389"
-  integrity sha512-BLq/cCO9two+lBgiTYNqD6GdtK8s4NpaWrl6/rCO9w0TUS8oJl7cmToOZfRYllKTISY6nt1U7jQ53brmKqY6BA==
-  dependencies:
-    load-json-file "^4.0.0"
-    normalize-package-data "^2.3.2"
-    path-type "^3.0.0"
-
-read-pkg@^5.2.0:
-  version "5.2.0"
-  resolved "https://registry.yarnpkg.com/read-pkg/-/read-pkg-5.2.0.tgz#7bf295438ca5a33e56cd30e053b34ee7250c93cc"
-  integrity sha512-Ug69mNOpfvKDAc2Q8DRpMjjzdtrnv9HcSMX+4VsZxD1aZ6ZzrIE7rlzXBtWTyhULSMKg076AW6WR5iZpD0JiOg==
-  dependencies:
-    "@types/normalize-package-data" "^2.4.0"
-    normalize-package-data "^2.5.0"
-    parse-json "^5.0.0"
-    type-fest "^0.6.0"
-
-readable-stream@3, readable-stream@^3.0.0, readable-stream@^3.1.1, readable-stream@^3.4.0, readable-stream@^3.6.0:
-  version "3.6.2"
-  resolved "https://registry.yarnpkg.com/readable-stream/-/readable-stream-3.6.2.tgz#56a9b36ea965c00c5a93ef31eb111a0f11056967"
-  integrity sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==
-  dependencies:
-    inherits "^2.0.3"
-    string_decoder "^1.1.1"
-    util-deprecate "^1.0.1"
-
-readable-stream@~2.3.6:
-  version "2.3.8"
-  resolved "https://registry.yarnpkg.com/readable-stream/-/readable-stream-2.3.8.tgz#91125e8042bba1b9887f49345f6277027ce8be9b"
-  integrity sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==
-  dependencies:
-    core-util-is "~1.0.0"
-    inherits "~2.0.3"
-    isarray "~1.0.0"
-    process-nextick-args "~2.0.0"
-    safe-buffer "~5.1.1"
-    string_decoder "~1.1.1"
-    util-deprecate "~1.0.1"
-
-readable-web-to-node-stream@^3.0.0:
-  version "3.0.2"
-  resolved "https://registry.yarnpkg.com/readable-web-to-node-stream/-/readable-web-to-node-stream-3.0.2.tgz#5d52bb5df7b54861fd48d015e93a2cb87b3ee0bb"
-  integrity sha512-ePeK6cc1EcKLEhJFt/AebMCLL+GgSKhuygrZ/GLaKZYEecIgIECf4UaUuaByiGtzckwR4ain9VzUh95T1exYGw==
-  dependencies:
-    readable-stream "^3.6.0"
-
-real-require@^0.1.0:
-  version "0.1.0"
-  resolved "https://registry.yarnpkg.com/real-require/-/real-require-0.1.0.tgz#736ac214caa20632847b7ca8c1056a0767df9381"
-  integrity sha512-r/H9MzAWtrv8aSVjPCMFpDMl5q66GqtmmRkRjpHTsp4zBAa+snZyiQNlMONiUmEJcsnaw0wCauJ2GWODr/aFkg==
-
-rechoir@^0.6.2:
-  version "0.6.2"
-  resolved "https://registry.yarnpkg.com/rechoir/-/rechoir-0.6.2.tgz#85204b54dba82d5742e28c96756ef43af50e3384"
-  integrity sha512-HFM8rkZ+i3zrV+4LQjwQ0W+ez98pApMGM3HUrN04j3CqzPOzl9nmP15Y8YXNm8QHGv/eacOVEjqhmWpkRV0NAw==
-  dependencies:
-    resolve "^1.1.6"
-
-redent@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/redent/-/redent-3.0.0.tgz#e557b7998316bb53c9f1f56fa626352c6963059f"
-  integrity sha512-6tDA8g98We0zd0GvVeMT9arEOnTw9qM03L9cJXaCjrip1OO764RDBLBfrB4cwzNGDj5OA5ioymC9GkizgWJDUg==
-  dependencies:
-    indent-string "^4.0.0"
-    strip-indent "^3.0.0"
-
-reflect.getprototypeof@^1.0.3:
-  version "1.0.3"
-  resolved "https://registry.yarnpkg.com/reflect.getprototypeof/-/reflect.getprototypeof-1.0.3.tgz#2738fd896fcc3477ffbd4190b40c2458026b6928"
-  integrity sha512-TTAOZpkJ2YLxl7mVHWrNo3iDMEkYlva/kgFcXndqMgbo/AZUmmavEkdXV+hXtE4P8xdyEKRzalaFqZVuwIk/Nw==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-    get-intrinsic "^1.1.1"
-    globalthis "^1.0.3"
-    which-builtin-type "^1.1.3"
-
-regenerator-runtime@^0.13.3:
-  version "0.13.11"
-  resolved "https://registry.yarnpkg.com/regenerator-runtime/-/regenerator-runtime-0.13.11.tgz#f6dca3e7ceec20590d07ada785636a90cdca17f9"
-  integrity sha512-kY1AZVr2Ra+t+piVaJ4gxaFaReZVH40AKNo7UCX6W+dEwBo/2oZJzqfuN1qLq1oL45o56cPaTXELwrTh8Fpggg==
-
-regenerator-runtime@^0.14.0:
-  version "0.14.0"
-  resolved "https://registry.yarnpkg.com/regenerator-runtime/-/regenerator-runtime-0.14.0.tgz#5e19d68eb12d486f797e15a3c6a918f7cec5eb45"
-  integrity sha512-srw17NI0TUWHuGa5CFGGmhfNIeja30WMBfbslPNhf6JrqQlLN5gcrvig1oqPxiVaXb0oW0XRKtH6Nngs5lKCIA==
-
-regexp.prototype.flags@^1.4.3, regexp.prototype.flags@^1.5.0:
-  version "1.5.0"
-  resolved "https://registry.yarnpkg.com/regexp.prototype.flags/-/regexp.prototype.flags-1.5.0.tgz#fe7ce25e7e4cca8db37b6634c8a2c7009199b9cb"
-  integrity sha512-0SutC3pNudRKgquxGoRGIz946MZVHqbNfPjBdxeOhBrdgDKlRoXmYLQN9xRbrR09ZXWeGAdPuif7egofn6v5LA==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.2.0"
-    functions-have-names "^1.2.3"
-
-registry-auth-token@^5.0.1:
-  version "5.0.2"
-  resolved "https://registry.yarnpkg.com/registry-auth-token/-/registry-auth-token-5.0.2.tgz#8b026cc507c8552ebbe06724136267e63302f756"
-  integrity sha512-o/3ikDxtXaA59BmZuZrJZDJv8NMDGSj+6j6XaeBmHw8eY1i1qd9+6H+LjVvQXx3HN6aRCGa1cUdJ9RaJZUugnQ==
-  dependencies:
-    "@pnpm/npm-conf" "^2.1.0"
-
-registry-url@^6.0.0:
-  version "6.0.1"
-  resolved "https://registry.yarnpkg.com/registry-url/-/registry-url-6.0.1.tgz#056d9343680f2f64400032b1e199faa692286c58"
-  integrity sha512-+crtS5QjFRqFCoQmvGduwYWEBng99ZvmFvF+cUJkGYF1L1BfU8C6Zp9T7f5vPAwyLkUExpvK+ANVZmGU49qi4Q==
-  dependencies:
-    rc "1.2.8"
-
-release-it@^15.10.3:
-  version "15.11.0"
-  resolved "https://registry.yarnpkg.com/release-it/-/release-it-15.11.0.tgz#389cf1e8f367b51f3f3bc4dc3e01046b6bdb166c"
-  integrity sha512-lZwoGEnKYKwGnfxxlA7vtR7vvozPrOSsIgQaHO4bgQ5ARbG3IA6Dmo0IVusv6nR1KmnjH70QIeNAgsWs6Ji/tw==
-  dependencies:
-    "@iarna/toml" "2.2.5"
-    "@octokit/rest" "19.0.11"
-    async-retry "1.3.3"
-    chalk "5.2.0"
-    cosmiconfig "8.1.3"
-    execa "7.1.1"
-    git-url-parse "13.1.0"
-    globby "13.1.4"
-    got "12.6.1"
-    inquirer "9.2.6"
-    is-ci "3.0.1"
-    issue-parser "6.0.0"
-    lodash "4.17.21"
-    mime-types "2.1.35"
-    new-github-release-url "2.0.0"
-    node-fetch "3.3.1"
-    open "9.1.0"
-    ora "6.3.1"
-    os-name "5.1.0"
-    promise.allsettled "1.0.6"
-    proxy-agent "6.2.1"
-    semver "7.5.1"
-    shelljs "0.8.5"
-    update-notifier "6.0.2"
-    url-join "5.0.0"
-    wildcard-match "5.1.2"
-    yargs-parser "21.1.1"
-
-require-directory@^2.1.1:
-  version "2.1.1"
-  resolved "https://registry.yarnpkg.com/require-directory/-/require-directory-2.1.1.tgz#8c64ad5fd30dab1c976e2344ffe7f792a6a6df42"
-  integrity sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==
-
-requires-port@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/requires-port/-/requires-port-1.0.0.tgz#925d2601d39ac485e091cf0da5c6e694dc3dcaff"
-  integrity sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ==
-
-resolve-alpn@^1.2.0:
-  version "1.2.1"
-  resolved "https://registry.yarnpkg.com/resolve-alpn/-/resolve-alpn-1.2.1.tgz#b7adbdac3546aaaec20b45e7d8265927072726f9"
-  integrity sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g==
-
-resolve-cwd@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/resolve-cwd/-/resolve-cwd-3.0.0.tgz#0f0075f1bb2544766cf73ba6a6e2adfebcb13f2d"
-  integrity sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==
-  dependencies:
-    resolve-from "^5.0.0"
-
-resolve-from@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/resolve-from/-/resolve-from-4.0.0.tgz#4abcd852ad32dd7baabfe9b40e00a36db5f392e6"
-  integrity sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==
-
-resolve-from@^5.0.0:
-  version "5.0.0"
-  resolved "https://registry.yarnpkg.com/resolve-from/-/resolve-from-5.0.0.tgz#c35225843df8f776df21c57557bc087e9dfdfc69"
-  integrity sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==
-
-resolve.exports@^1.1.0:
-  version "1.1.1"
-  resolved "https://registry.yarnpkg.com/resolve.exports/-/resolve.exports-1.1.1.tgz#05cfd5b3edf641571fd46fa608b610dda9ead999"
-  integrity sha512-/NtpHNDN7jWhAaQ9BvBUYZ6YTXsRBgfqWFWP7BZBaoMJO/I3G5OFzvTuWNlZC3aPjins1F+TNrLKsGbH4rfsRQ==
-
-resolve@^1.1.6, resolve@^1.10.0, resolve@^1.20.0:
-  version "1.22.4"
-  resolved "https://registry.yarnpkg.com/resolve/-/resolve-1.22.4.tgz#1dc40df46554cdaf8948a486a10f6ba1e2026c34"
-  integrity sha512-PXNdCiPqDqeUou+w1C2eTQbNfxKSuMxqTCuvlmmMsk1NWHL5fRrhY6Pl0qEYYc6+QqGClco1Qj8XnjPego4wfg==
-  dependencies:
-    is-core-module "^2.13.0"
-    path-parse "^1.0.7"
-    supports-preserve-symlinks-flag "^1.0.0"
-
-resolve@^2.0.0-next.4:
-  version "2.0.0-next.4"
-  resolved "https://registry.yarnpkg.com/resolve/-/resolve-2.0.0-next.4.tgz#3d37a113d6429f496ec4752d2a2e58efb1fd4660"
-  integrity sha512-iMDbmAWtfU+MHpxt/I5iWI7cY6YVEZUQ3MBgPQ++XD1PELuJHIl82xBmObyP2KyQmkNB2dsqF7seoQQiAn5yDQ==
-  dependencies:
-    is-core-module "^2.9.0"
-    path-parse "^1.0.7"
-    supports-preserve-symlinks-flag "^1.0.0"
-
-responselike@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/responselike/-/responselike-3.0.0.tgz#20decb6c298aff0dbee1c355ca95461d42823626"
-  integrity sha512-40yHxbNcl2+rzXvZuVkrYohathsSJlMTXKryG5y8uciHv1+xDLHQpgjG64JUO9nrEq2jGLH6IZ8BcZyw3wrweg==
-  dependencies:
-    lowercase-keys "^3.0.0"
-
-restore-cursor@^3.1.0:
-  version "3.1.0"
-  resolved "https://registry.yarnpkg.com/restore-cursor/-/restore-cursor-3.1.0.tgz#39f67c54b3a7a58cea5236d95cf0034239631f7e"
-  integrity sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==
-  dependencies:
-    onetime "^5.1.0"
-    signal-exit "^3.0.2"
-
-restore-cursor@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/restore-cursor/-/restore-cursor-4.0.0.tgz#519560a4318975096def6e609d44100edaa4ccb9"
-  integrity sha512-I9fPXU9geO9bHOt9pHHOhOkYerIMsmVaWB0rA2AI9ERh/+x/i7MV5HKBNrg+ljO5eoPVgCcnFuRjJ9uH6I/3eg==
-  dependencies:
-    onetime "^5.1.0"
-    signal-exit "^3.0.2"
-
-retry@0.13.1:
-  version "0.13.1"
-  resolved "https://registry.yarnpkg.com/retry/-/retry-0.13.1.tgz#185b1587acf67919d63b357349e03537b2484658"
-  integrity sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==
-
-reusify@^1.0.4:
-  version "1.0.4"
-  resolved "https://registry.yarnpkg.com/reusify/-/reusify-1.0.4.tgz#90da382b1e126efc02146e90845a88db12925d76"
-  integrity sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==
-
-rimraf@^3.0.0, rimraf@^3.0.2:
-  version "3.0.2"
-  resolved "https://registry.yarnpkg.com/rimraf/-/rimraf-3.0.2.tgz#f1a5402ba6220ad52cc1282bac1ae3aa49fd061a"
-  integrity sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==
-  dependencies:
-    glob "^7.1.3"
-
-run-applescript@^5.0.0:
-  version "5.0.0"
-  resolved "https://registry.yarnpkg.com/run-applescript/-/run-applescript-5.0.0.tgz#e11e1c932e055d5c6b40d98374e0268d9b11899c"
-  integrity sha512-XcT5rBksx1QdIhlFOCtgZkB99ZEouFZ1E2Kc2LHqNW13U3/74YGdkQRmThTwxy4QIyookibDKYZOPqX//6BlAg==
-  dependencies:
-    execa "^5.0.0"
-
-run-async@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/run-async/-/run-async-3.0.0.tgz#42a432f6d76c689522058984384df28be379daad"
-  integrity sha512-540WwVDOMxA6dN6We19EcT9sc3hkXPw5mzRNGM3FkdN/vtE9NFvj5lFAPNwUDmJjXidm3v7TC1cTE7t17Ulm1Q==
-
-run-parallel@^1.1.9:
-  version "1.2.0"
-  resolved "https://registry.yarnpkg.com/run-parallel/-/run-parallel-1.2.0.tgz#66d1368da7bdf921eb9d95bd1a9229e7f21a43ee"
-  integrity sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==
-  dependencies:
-    queue-microtask "^1.2.2"
-
-rxjs@^7.8.1:
-  version "7.8.1"
-  resolved "https://registry.yarnpkg.com/rxjs/-/rxjs-7.8.1.tgz#6f6f3d99ea8044291efd92e7c7fcf562c4057543"
-  integrity sha512-AA3TVj+0A2iuIoQkWEK/tqFjBq2j+6PO6Y0zJcvzLAFhEFIO3HL0vls9hWLncZbAAbK0mar7oZ4V079I/qPMxg==
-  dependencies:
-    tslib "^2.1.0"
-
-safe-array-concat@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/safe-array-concat/-/safe-array-concat-1.0.0.tgz#2064223cba3c08d2ee05148eedbc563cd6d84060"
-  integrity sha512-9dVEFruWIsnie89yym+xWTAYASdpw3CJV7Li/6zBewGf9z2i1j31rP6jnY0pHEO4QZh6N0K11bFjWmdR8UGdPQ==
-  dependencies:
-    call-bind "^1.0.2"
-    get-intrinsic "^1.2.0"
-    has-symbols "^1.0.3"
-    isarray "^2.0.5"
-
-safe-buffer@^5.0.1, safe-buffer@~5.2.0:
-  version "5.2.1"
-  resolved "https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.2.1.tgz#1eaf9fa9bdb1fdd4ec75f58f9cdb4e6b7827eec6"
-  integrity sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==
-
-safe-buffer@~5.1.0, safe-buffer@~5.1.1:
-  version "5.1.2"
-  resolved "https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.1.2.tgz#991ec69d296e0313747d59bdfd2b745c35f8828d"
-  integrity sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==
-
-safe-regex-test@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/safe-regex-test/-/safe-regex-test-1.0.0.tgz#793b874d524eb3640d1873aad03596db2d4f2295"
-  integrity sha512-JBUUzyOgEwXQY1NuPtvcj/qcBDbDmEvWufhlnXZIm75DEHp+afM1r1ujJpJsV/gSM4t59tpDyPi1sd6ZaPFfsA==
-  dependencies:
-    call-bind "^1.0.2"
-    get-intrinsic "^1.1.3"
-    is-regex "^1.1.4"
-
-safe-stable-stringify@^2.1.0:
-  version "2.4.3"
-  resolved "https://registry.yarnpkg.com/safe-stable-stringify/-/safe-stable-stringify-2.4.3.tgz#138c84b6f6edb3db5f8ef3ef7115b8f55ccbf886"
-  integrity sha512-e2bDA2WJT0wxseVd4lsDP4+3ONX6HpMXQa1ZhFQ7SU+GjvORCmShbCMltrtIDfkYhVHrOcPtj+KhmDBdPdZD1g==
-
-"safer-buffer@>= 2.1.2 < 3":
-  version "2.1.2"
-  resolved "https://registry.yarnpkg.com/safer-buffer/-/safer-buffer-2.1.2.tgz#44fa161b0187b9549dd84bb91802f9bd8385cd6a"
-  integrity sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==
-
-sax@>=0.6.0:
-  version "1.2.4"
-  resolved "https://registry.yarnpkg.com/sax/-/sax-1.2.4.tgz#2816234e2378bddc4e5354fab5caa895df7100d9"
-  integrity sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw==
-
-saxes@^5.0.1:
-  version "5.0.1"
-  resolved "https://registry.yarnpkg.com/saxes/-/saxes-5.0.1.tgz#eebab953fa3b7608dbe94e5dadb15c888fa6696d"
-  integrity sha512-5LBh1Tls8c9xgGjw3QrMwETmTMVk0oFgvrFSvWx62llR2hcEInrKNZ2GZCCuuy2lvWrdl5jhbpeqc5hRYKFOcw==
-  dependencies:
-    xmlchars "^2.2.0"
-
-semver-diff@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/semver-diff/-/semver-diff-4.0.0.tgz#3afcf5ed6d62259f5c72d0d5d50dffbdc9680df5"
-  integrity sha512-0Ju4+6A8iOnpL/Thra7dZsSlOHYAHIeMxfhWQRI1/VLcT3WDBZKKtQt/QkBOsiIN9ZpuvHE6cGZ0x4glCMmfiA==
-  dependencies:
-    semver "^7.3.5"
-
-"semver@2 || 3 || 4 || 5":
-  version "5.7.2"
-  resolved "https://registry.yarnpkg.com/semver/-/semver-5.7.2.tgz#48d55db737c3287cd4835e17fa13feace1c41ef8"
-  integrity sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==
-
-semver@7.5.1:
-  version "7.5.1"
-  resolved "https://registry.yarnpkg.com/semver/-/semver-7.5.1.tgz#c90c4d631cf74720e46b21c1d37ea07edfab91ec"
-  integrity sha512-Wvss5ivl8TMRZXXESstBA4uR5iXgEN/VC5/sOcuXdVLzcdkz4HWetIoRfG5gb5X+ij/G9rw9YoGn3QoQ8OCSpw==
-  dependencies:
-    lru-cache "^6.0.0"
-
-semver@7.x, semver@^7.3.2, semver@^7.3.4, semver@^7.3.5, semver@^7.3.7, semver@^7.5.3:
-  version "7.5.4"
-  resolved "https://registry.yarnpkg.com/semver/-/semver-7.5.4.tgz#483986ec4ed38e1c6c48c34894a9182dbff68a6e"
-  integrity sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==
-  dependencies:
-    lru-cache "^6.0.0"
-
-semver@^6.0.0, semver@^6.3.0, semver@^6.3.1:
-  version "6.3.1"
-  resolved "https://registry.yarnpkg.com/semver/-/semver-6.3.1.tgz#556d2ef8689146e46dcea4bfdd095f3434dffcb4"
-  integrity sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==
-
-sharp@^0.30.5:
-  version "0.30.7"
-  resolved "https://registry.yarnpkg.com/sharp/-/sharp-0.30.7.tgz#7862bda98804fdd1f0d5659c85e3324b90d94c7c"
-  integrity sha512-G+MY2YW33jgflKPTXXptVO28HvNOo9G3j0MybYAHeEmby+QuD2U98dT6ueht9cv/XDqZspSpIhoSW+BAKJ7Hig==
-  dependencies:
-    color "^4.2.3"
-    detect-libc "^2.0.1"
-    node-addon-api "^5.0.0"
-    prebuild-install "^7.1.1"
-    semver "^7.3.7"
-    simple-get "^4.0.1"
-    tar-fs "^2.1.1"
-    tunnel-agent "^0.6.0"
-
-shebang-command@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/shebang-command/-/shebang-command-2.0.0.tgz#ccd0af4f8835fbdc265b82461aaf0c36663f34ea"
-  integrity sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==
-  dependencies:
-    shebang-regex "^3.0.0"
-
-shebang-regex@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/shebang-regex/-/shebang-regex-3.0.0.tgz#ae16f1644d873ecad843b0307b143362d4c42172"
-  integrity sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==
-
-shelljs@0.8.5:
-  version "0.8.5"
-  resolved "https://registry.yarnpkg.com/shelljs/-/shelljs-0.8.5.tgz#de055408d8361bed66c669d2f000538ced8ee20c"
-  integrity sha512-TiwcRcrkhHvbrZbnRcFYMLl30Dfov3HKqzp5tO5b4pt6G/SezKcYhmDg15zXVBswHmctSAQKznqNW2LO5tTDow==
-  dependencies:
-    glob "^7.0.0"
-    interpret "^1.0.0"
-    rechoir "^0.6.2"
-
-shiki@^0.14.1:
-  version "0.14.3"
-  resolved "https://registry.yarnpkg.com/shiki/-/shiki-0.14.3.tgz#d1a93c463942bdafb9866d74d619a4347d0bbf64"
-  integrity sha512-U3S/a+b0KS+UkTyMjoNojvTgrBHjgp7L6ovhFVZsXmBGnVdQ4K4U9oK0z63w538S91ATngv1vXigHCSWOwnr+g==
-  dependencies:
-    ansi-sequence-parser "^1.1.0"
-    jsonc-parser "^3.2.0"
-    vscode-oniguruma "^1.7.0"
-    vscode-textmate "^8.0.0"
-
-side-channel@^1.0.4:
-  version "1.0.4"
-  resolved "https://registry.yarnpkg.com/side-channel/-/side-channel-1.0.4.tgz#efce5c8fdc104ee751b25c58d4290011fa5ea2cf"
-  integrity sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==
-  dependencies:
-    call-bind "^1.0.0"
-    get-intrinsic "^1.0.2"
-    object-inspect "^1.9.0"
-
-signal-exit@^3.0.2, signal-exit@^3.0.3, signal-exit@^3.0.7:
-  version "3.0.7"
-  resolved "https://registry.yarnpkg.com/signal-exit/-/signal-exit-3.0.7.tgz#a9a1767f8af84155114eaabd73f99273c8f59ad9"
-  integrity sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==
-
-simple-concat@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/simple-concat/-/simple-concat-1.0.1.tgz#f46976082ba35c2263f1c8ab5edfe26c41c9552f"
-  integrity sha512-cSFtAPtRhljv69IK0hTVZQ+OfE9nePi/rtJmw5UjHeVyVroEqJXP1sFztKUy1qU+xvz3u/sfYJLa947b7nAN2Q==
-
-simple-get@^4.0.0, simple-get@^4.0.1:
-  version "4.0.1"
-  resolved "https://registry.yarnpkg.com/simple-get/-/simple-get-4.0.1.tgz#4a39db549287c979d352112fa03fd99fd6bc3543"
-  integrity sha512-brv7p5WgH0jmQJr1ZDDfKDOSeWWg+OVypG99A/5vYGPqJ6pxiaHLy8nxtFjBA7oMa01ebA9gfh1uMCFqOuXxvA==
-  dependencies:
-    decompress-response "^6.0.0"
-    once "^1.3.1"
-    simple-concat "^1.0.0"
-
-simple-swizzle@^0.2.2:
-  version "0.2.2"
-  resolved "https://registry.yarnpkg.com/simple-swizzle/-/simple-swizzle-0.2.2.tgz#a4da6b635ffcccca33f70d17cb92592de95e557a"
-  integrity sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==
-  dependencies:
-    is-arrayish "^0.3.1"
-
-sisteransi@^1.0.5:
-  version "1.0.5"
-  resolved "https://registry.yarnpkg.com/sisteransi/-/sisteransi-1.0.5.tgz#134d681297756437cc05ca01370d3a7a571075ed"
-  integrity sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==
-
-slash@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/slash/-/slash-3.0.0.tgz#6539be870c165adbd5240220dbe361f1bc4d4634"
-  integrity sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==
-
-slash@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/slash/-/slash-4.0.0.tgz#2422372176c4c6c5addb5e2ada885af984b396a7"
-  integrity sha512-3dOsAHXXUkQTpOYcoAxLIorMTp4gIQr5IW3iVb7A7lFIp0VHhnynm9izx6TssdrIcVIESAlVjtnO2K8bg+Coew==
-
-smart-buffer@^4.2.0:
-  version "4.2.0"
-  resolved "https://registry.yarnpkg.com/smart-buffer/-/smart-buffer-4.2.0.tgz#6e1d71fa4f18c05f7d0ff216dd16a481d0e8d9ae"
-  integrity sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==
-
-socks-proxy-agent@^8.0.1:
-  version "8.0.1"
-  resolved "https://registry.yarnpkg.com/socks-proxy-agent/-/socks-proxy-agent-8.0.1.tgz#ffc5859a66dac89b0c4dab90253b96705f3e7120"
-  integrity sha512-59EjPbbgg8U3x62hhKOFVAmySQUcfRQ4C7Q/D5sEHnZTQRrQlNKINks44DMR1gwXp0p4LaVIeccX2KHTTcHVqQ==
-  dependencies:
-    agent-base "^7.0.1"
-    debug "^4.3.4"
-    socks "^2.7.1"
-
-socks@^2.7.1:
-  version "2.7.1"
-  resolved "https://registry.yarnpkg.com/socks/-/socks-2.7.1.tgz#d8e651247178fde79c0663043e07240196857d55"
-  integrity sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==
-  dependencies:
-    ip "^2.0.0"
-    smart-buffer "^4.2.0"
-
-sonic-boom@^2.2.1:
-  version "2.8.0"
-  resolved "https://registry.yarnpkg.com/sonic-boom/-/sonic-boom-2.8.0.tgz#c1def62a77425090e6ad7516aad8eb402e047611"
-  integrity sha512-kuonw1YOYYNOve5iHdSahXPOK49GqwA+LZhI6Wz/l0rP57iKyXXIHaRagOBHAPmGwJC6od2Z9zgvZ5loSgMlVg==
-  dependencies:
-    atomic-sleep "^1.0.0"
-
-source-map-support@^0.5.6:
-  version "0.5.21"
-  resolved "https://registry.yarnpkg.com/source-map-support/-/source-map-support-0.5.21.tgz#04fe7c7f9e1ed2d662233c28cb2b35b9f63f6e4f"
-  integrity sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==
-  dependencies:
-    buffer-from "^1.0.0"
-    source-map "^0.6.0"
-
-source-map@^0.6.0, source-map@^0.6.1, source-map@~0.6.1:
-  version "0.6.1"
-  resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.6.1.tgz#74722af32e9614e9c287a8d0bbde48b5e2f1a263"
-  integrity sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==
-
-source-map@^0.7.3:
-  version "0.7.4"
-  resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.7.4.tgz#a9bbe705c9d8846f4e08ff6765acf0f1b0898656"
-  integrity sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==
-
-spdx-correct@^3.0.0:
-  version "3.2.0"
-  resolved "https://registry.yarnpkg.com/spdx-correct/-/spdx-correct-3.2.0.tgz#4f5ab0668f0059e34f9c00dce331784a12de4e9c"
-  integrity sha512-kN9dJbvnySHULIluDHy32WHRUu3Og7B9sbY7tsFLctQkIqnMh3hErYgdMjTYuqmcXX+lK5T1lnUt3G7zNswmZA==
-  dependencies:
-    spdx-expression-parse "^3.0.0"
-    spdx-license-ids "^3.0.0"
-
-spdx-exceptions@^2.1.0:
-  version "2.3.0"
-  resolved "https://registry.yarnpkg.com/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz#3f28ce1a77a00372683eade4a433183527a2163d"
-  integrity sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A==
-
-spdx-expression-parse@^3.0.0:
-  version "3.0.1"
-  resolved "https://registry.yarnpkg.com/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz#cf70f50482eefdc98e3ce0a6833e4a53ceeba679"
-  integrity sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==
-  dependencies:
-    spdx-exceptions "^2.1.0"
-    spdx-license-ids "^3.0.0"
-
-spdx-license-ids@^3.0.0:
-  version "3.0.13"
-  resolved "https://registry.yarnpkg.com/spdx-license-ids/-/spdx-license-ids-3.0.13.tgz#7189a474c46f8d47c7b0da4b987bb45e908bd2d5"
-  integrity sha512-XkD+zwiqXHikFZm4AX/7JSCXA98U5Db4AFd5XUg/+9UNtnH75+Z9KxtpYiJZx36mUDVOwH83pl7yvCer6ewM3w==
-
-split2@^3.0.0:
-  version "3.2.2"
-  resolved "https://registry.yarnpkg.com/split2/-/split2-3.2.2.tgz#bf2cf2a37d838312c249c89206fd7a17dd12365f"
-  integrity sha512-9NThjpgZnifTkJpzTZ7Eue85S49QwpNhZTq6GRJwObb6jnLFNGB7Qm73V5HewTROPyxD0C29xqmaI68bQtV+hg==
-  dependencies:
-    readable-stream "^3.0.0"
-
-split2@^4.0.0:
-  version "4.2.0"
-  resolved "https://registry.yarnpkg.com/split2/-/split2-4.2.0.tgz#c9c5920904d148bab0b9f67145f245a86aadbfa4"
-  integrity sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==
-
-split@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/split/-/split-1.0.1.tgz#605bd9be303aa59fb35f9229fbea0ddec9ea07d9"
-  integrity sha512-mTyOoPbrivtXnwnIxZRFYRrPNtEFKlpB2fvjSnCQUiAA6qAZzqwna5envK4uk6OIeP17CsdF3rSBGYVBsU0Tkg==
-  dependencies:
-    through "2"
-
-sprintf-js@~1.0.2:
-  version "1.0.3"
-  resolved "https://registry.yarnpkg.com/sprintf-js/-/sprintf-js-1.0.3.tgz#04e6926f662895354f3dd015203633b857297e2c"
-  integrity sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==
-
-stack-utils@^2.0.3:
-  version "2.0.6"
-  resolved "https://registry.yarnpkg.com/stack-utils/-/stack-utils-2.0.6.tgz#aaf0748169c02fc33c8232abccf933f54a1cc34f"
-  integrity sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==
-  dependencies:
-    escape-string-regexp "^2.0.0"
-
-stdin-discarder@^0.1.0:
-  version "0.1.0"
-  resolved "https://registry.yarnpkg.com/stdin-discarder/-/stdin-discarder-0.1.0.tgz#22b3e400393a8e28ebf53f9958f3880622efde21"
-  integrity sha512-xhV7w8S+bUwlPTb4bAOUQhv8/cSS5offJuX8GQGq32ONF0ZtDWKfkdomM3HMRA+LhX6um/FZ0COqlwsjD53LeQ==
-  dependencies:
-    bl "^5.0.0"
-
-stop-iteration-iterator@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/stop-iteration-iterator/-/stop-iteration-iterator-1.0.0.tgz#6a60be0b4ee757d1ed5254858ec66b10c49285e4"
-  integrity sha512-iCGQj+0l0HOdZ2AEeBADlsRC+vsnDsZsbdSiH1yNSjcfKM7fdpCMfqAL/dwF5BLiw/XhRft/Wax6zQbhq2BcjQ==
-  dependencies:
-    internal-slot "^1.0.4"
-
-stream-shift@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/stream-shift/-/stream-shift-1.0.1.tgz#d7088281559ab2778424279b0877da3c392d5a3d"
-  integrity sha512-AiisoFqQ0vbGcZgQPY1cdP2I76glaVA/RauYR4G4thNFgkTqr90yXTo4LYX60Jl+sIlPNHHdGSwo01AvbKUSVQ==
-
-string-length@^4.0.1:
-  version "4.0.2"
-  resolved "https://registry.yarnpkg.com/string-length/-/string-length-4.0.2.tgz#a8a8dc7bd5c1a82b9b3c8b87e125f66871b6e57a"
-  integrity sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==
-  dependencies:
-    char-regex "^1.0.2"
-    strip-ansi "^6.0.0"
-
-string-width@^4.1.0, string-width@^4.2.0, string-width@^4.2.3:
-  version "4.2.3"
-  resolved "https://registry.yarnpkg.com/string-width/-/string-width-4.2.3.tgz#269c7117d27b05ad2e536830a8ec895ef9c6d010"
-  integrity sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==
-  dependencies:
-    emoji-regex "^8.0.0"
-    is-fullwidth-code-point "^3.0.0"
-    strip-ansi "^6.0.1"
-
-string-width@^5.0.1, string-width@^5.1.2:
-  version "5.1.2"
-  resolved "https://registry.yarnpkg.com/string-width/-/string-width-5.1.2.tgz#14f8daec6d81e7221d2a357e668cab73bdbca794"
-  integrity sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==
-  dependencies:
-    eastasianwidth "^0.2.0"
-    emoji-regex "^9.2.2"
-    strip-ansi "^7.0.1"
-
-string.prototype.matchall@^4.0.8:
-  version "4.0.8"
-  resolved "https://registry.yarnpkg.com/string.prototype.matchall/-/string.prototype.matchall-4.0.8.tgz#3bf85722021816dcd1bf38bb714915887ca79fd3"
-  integrity sha512-6zOCOcJ+RJAQshcTvXPHoxoQGONa3e/Lqx90wUA+wEzX78sg5Bo+1tQo4N0pohS0erG9qtCqJDjNCQBjeWVxyg==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-    get-intrinsic "^1.1.3"
-    has-symbols "^1.0.3"
-    internal-slot "^1.0.3"
-    regexp.prototype.flags "^1.4.3"
-    side-channel "^1.0.4"
-
-string.prototype.trim@^1.2.7:
-  version "1.2.7"
-  resolved "https://registry.yarnpkg.com/string.prototype.trim/-/string.prototype.trim-1.2.7.tgz#a68352740859f6893f14ce3ef1bb3037f7a90533"
-  integrity sha512-p6TmeT1T3411M8Cgg9wBTMRtY2q9+PNy9EV1i2lIXUN/btt763oIfxwN3RR8VU6wHX8j/1CFy0L+YuThm6bgOg==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-
-string.prototype.trimend@^1.0.6:
-  version "1.0.6"
-  resolved "https://registry.yarnpkg.com/string.prototype.trimend/-/string.prototype.trimend-1.0.6.tgz#c4a27fa026d979d79c04f17397f250a462944533"
-  integrity sha512-JySq+4mrPf9EsDBEDYMOb/lM7XQLulwg5R/m1r0PXEFqrV0qHvl58sdTilSXtKOflCsK2E8jxf+GKC0T07RWwQ==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-
-string.prototype.trimstart@^1.0.6:
-  version "1.0.6"
-  resolved "https://registry.yarnpkg.com/string.prototype.trimstart/-/string.prototype.trimstart-1.0.6.tgz#e90ab66aa8e4007d92ef591bbf3cd422c56bdcf4"
-  integrity sha512-omqjMDaY92pbn5HOX7f9IccLA+U1tA9GvtU4JrodiXFfYB7jPzzHpRzpglLAjtUV6bB557zwClJezTqnAiYnQA==
-  dependencies:
-    call-bind "^1.0.2"
-    define-properties "^1.1.4"
-    es-abstract "^1.20.4"
-
-string_decoder@^1.1.1:
-  version "1.3.0"
-  resolved "https://registry.yarnpkg.com/string_decoder/-/string_decoder-1.3.0.tgz#42f114594a46cf1a8e30b0a84f56c78c3edac21e"
-  integrity sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==
-  dependencies:
-    safe-buffer "~5.2.0"
-
-string_decoder@~1.1.1:
-  version "1.1.1"
-  resolved "https://registry.yarnpkg.com/string_decoder/-/string_decoder-1.1.1.tgz#9cf1611ba62685d7030ae9e4ba34149c3af03fc8"
-  integrity sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==
-  dependencies:
-    safe-buffer "~5.1.0"
-
-strip-ansi@^6.0.0, strip-ansi@^6.0.1:
-  version "6.0.1"
-  resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-6.0.1.tgz#9e26c63d30f53443e9489495b2105d37b67a85d9"
-  integrity sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==
-  dependencies:
-    ansi-regex "^5.0.1"
-
-strip-ansi@^7.0.1:
-  version "7.1.0"
-  resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-7.1.0.tgz#d5b6568ca689d8561370b0707685d22434faff45"
-  integrity sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==
-  dependencies:
-    ansi-regex "^6.0.1"
-
-strip-bom@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/strip-bom/-/strip-bom-3.0.0.tgz#2334c18e9c759f7bdd56fdef7e9ae3d588e68ed3"
-  integrity sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==
-
-strip-bom@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/strip-bom/-/strip-bom-4.0.0.tgz#9c3505c1db45bcedca3d9cf7a16f5c5aa3901878"
-  integrity sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==
-
-strip-final-newline@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/strip-final-newline/-/strip-final-newline-2.0.0.tgz#89b852fb2fcbe936f6f4b3187afb0a12c1ab58ad"
-  integrity sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==
-
-strip-final-newline@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/strip-final-newline/-/strip-final-newline-3.0.0.tgz#52894c313fbff318835280aed60ff71ebf12b8fd"
-  integrity sha512-dOESqjYr96iWYylGObzd39EuNTa5VJxyvVAEm5Jnh7KGo75V43Hk1odPQkNDyXNmUR6k+gEiDVXnjB8HJ3crXw==
-
-strip-indent@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/strip-indent/-/strip-indent-3.0.0.tgz#c32e1cee940b6b3432c771bc2c54bcce73cd3001"
-  integrity sha512-laJTa3Jb+VQpaC6DseHhF7dXVqHTfJPCRDaEbid/drOhgitgYku/letMUqOXFoWV0zIIUbjpdH2t+tYj4bQMRQ==
-  dependencies:
-    min-indent "^1.0.0"
-
-strip-json-comments@^3.1.1:
-  version "3.1.1"
-  resolved "https://registry.yarnpkg.com/strip-json-comments/-/strip-json-comments-3.1.1.tgz#31f1281b3832630434831c310c01cccda8cbe006"
-  integrity sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==
-
-strip-json-comments@~2.0.1:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/strip-json-comments/-/strip-json-comments-2.0.1.tgz#3c531942e908c2697c0ec344858c286c7ca0a60a"
-  integrity sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==
-
-strtok3@^6.2.4, strtok3@^6.3.0:
-  version "6.3.0"
-  resolved "https://registry.yarnpkg.com/strtok3/-/strtok3-6.3.0.tgz#358b80ffe6d5d5620e19a073aa78ce947a90f9a0"
-  integrity sha512-fZtbhtvI9I48xDSywd/somNqgUHl2L2cstmXCCif0itOf96jeW18MBSyrLuNicYQVkvpOxkZtkzujiTJ9LW5Jw==
-  dependencies:
-    "@tokenizer/token" "^0.3.0"
-    peek-readable "^4.1.0"
-
-supports-color@^5.3.0:
-  version "5.5.0"
-  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-5.5.0.tgz#e2e69a44ac8772f78a1ec0b35b689df6530efc8f"
-  integrity sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==
-  dependencies:
-    has-flag "^3.0.0"
-
-supports-color@^7.0.0, supports-color@^7.1.0:
-  version "7.2.0"
-  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-7.2.0.tgz#1b7dcdcb32b8138801b3e478ba6a51caa89648da"
-  integrity sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==
-  dependencies:
-    has-flag "^4.0.0"
-
-supports-color@^8.0.0:
-  version "8.1.1"
-  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-8.1.1.tgz#cd6fc17e28500cff56c1b86c0a7fd4a54a73005c"
-  integrity sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==
-  dependencies:
-    has-flag "^4.0.0"
-
-supports-hyperlinks@^2.0.0:
-  version "2.3.0"
-  resolved "https://registry.yarnpkg.com/supports-hyperlinks/-/supports-hyperlinks-2.3.0.tgz#3943544347c1ff90b15effb03fc14ae45ec10624"
-  integrity sha512-RpsAZlpWcDwOPQA22aCH4J0t7L8JmAvsCxfOSEwm7cQs3LshN36QaTkwd70DnBOXDWGssw2eUoc8CaRWT0XunA==
-  dependencies:
-    has-flag "^4.0.0"
-    supports-color "^7.0.0"
-
-supports-preserve-symlinks-flag@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz#6eda4bd344a3c94aea376d4cc31bc77311039e09"
-  integrity sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==
-
-symbol-tree@^3.2.4:
-  version "3.2.4"
-  resolved "https://registry.yarnpkg.com/symbol-tree/-/symbol-tree-3.2.4.tgz#430637d248ba77e078883951fb9aa0eed7c63fa2"
-  integrity sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw==
-
-tar-fs@^2.0.0, tar-fs@^2.1.1:
-  version "2.1.1"
-  resolved "https://registry.yarnpkg.com/tar-fs/-/tar-fs-2.1.1.tgz#489a15ab85f1f0befabb370b7de4f9eb5cbe8784"
-  integrity sha512-V0r2Y9scmbDRLCNex/+hYzvp/zyYjvFbHPNgVTKfQvVrb6guiE/fxP+XblDNR011utopbkex2nM4dHNV6GDsng==
-  dependencies:
-    chownr "^1.1.1"
-    mkdirp-classic "^0.5.2"
-    pump "^3.0.0"
-    tar-stream "^2.1.4"
-
-tar-stream@^2.1.4:
-  version "2.2.0"
-  resolved "https://registry.yarnpkg.com/tar-stream/-/tar-stream-2.2.0.tgz#acad84c284136b060dc3faa64474aa9aebd77287"
-  integrity sha512-ujeqbceABgwMZxEJnk2HDY2DlnUZ+9oEcb1KzTVfYHio0UE6dG71n60d8D2I4qNvleWrrXpmjpt7vZeF1LnMZQ==
-  dependencies:
-    bl "^4.0.3"
-    end-of-stream "^1.4.1"
-    fs-constants "^1.0.0"
-    inherits "^2.0.3"
-    readable-stream "^3.1.1"
-
-temp-dir@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/temp-dir/-/temp-dir-2.0.0.tgz#bde92b05bdfeb1516e804c9c00ad45177f31321e"
-  integrity sha512-aoBAniQmmwtcKp/7BzsH8Cxzv8OL736p7v1ihGb5e9DJ9kTwGWHrQrVB5+lfVDzfGrdRzXch+ig7LHaY1JTOrg==
-
-tempfile@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/tempfile/-/tempfile-3.0.0.tgz#5376a3492de7c54150d0cc0612c3f00e2cdaf76c"
-  integrity sha512-uNFCg478XovRi85iD42egu+eSFUmmka750Jy7L5tfHI5hQKKtbPnxaSaXAbBqCDYrw3wx4tXjKwci4/QmsZJxw==
-  dependencies:
-    temp-dir "^2.0.0"
-    uuid "^3.3.2"
-
-terminal-link@^2.0.0:
-  version "2.1.1"
-  resolved "https://registry.yarnpkg.com/terminal-link/-/terminal-link-2.1.1.tgz#14a64a27ab3c0df933ea546fba55f2d078edc994"
-  integrity sha512-un0FmiRUQNr5PJqy9kP7c40F5BOfpGlYTrxonDChEZB7pzZxRNp/bt+ymiy9/npwXya9KH99nJ/GXFIiUkYGFQ==
-  dependencies:
-    ansi-escapes "^4.2.1"
-    supports-hyperlinks "^2.0.0"
-
-test-exclude@^6.0.0:
-  version "6.0.0"
-  resolved "https://registry.yarnpkg.com/test-exclude/-/test-exclude-6.0.0.tgz#04a8698661d805ea6fa293b6cb9e63ac044ef15e"
-  integrity sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==
-  dependencies:
-    "@istanbuljs/schema" "^0.1.2"
-    glob "^7.1.4"
-    minimatch "^3.0.4"
-
-text-extensions@^1.0.0:
-  version "1.9.0"
-  resolved "https://registry.yarnpkg.com/text-extensions/-/text-extensions-1.9.0.tgz#1853e45fee39c945ce6f6c36b2d659b5aabc2a26"
-  integrity sha512-wiBrwC1EhBelW12Zy26JeOUkQ5mRu+5o8rpsJk5+2t+Y5vE7e842qtZDQ2g1NpX/29HdyFeJ4nSIhI47ENSxlQ==
-
-text-table@^0.2.0:
-  version "0.2.0"
-  resolved "https://registry.yarnpkg.com/text-table/-/text-table-0.2.0.tgz#7f5ee823ae805207c00af2df4a84ec3fcfa570b4"
-  integrity sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==
-
-thread-stream@^0.15.1:
-  version "0.15.2"
-  resolved "https://registry.yarnpkg.com/thread-stream/-/thread-stream-0.15.2.tgz#fb95ad87d2f1e28f07116eb23d85aba3bc0425f4"
-  integrity sha512-UkEhKIg2pD+fjkHQKyJO3yoIvAP3N6RlNFt2dUhcS1FGvCD1cQa1M/PGknCLFIyZdtJOWQjejp7bdNqmN7zwdA==
-  dependencies:
-    real-require "^0.1.0"
-
-throat@^6.0.1:
-  version "6.0.2"
-  resolved "https://registry.yarnpkg.com/throat/-/throat-6.0.2.tgz#51a3fbb5e11ae72e2cf74861ed5c8020f89f29fe"
-  integrity sha512-WKexMoJj3vEuK0yFEapj8y64V0A6xcuPuK9Gt1d0R+dzCSJc0lHqQytAbSB4cDAK0dWh4T0E2ETkoLE2WZ41OQ==
-
-through2@^2.0.0:
-  version "2.0.5"
-  resolved "https://registry.yarnpkg.com/through2/-/through2-2.0.5.tgz#01c1e39eb31d07cb7d03a96a70823260b23132cd"
-  integrity sha512-/mrRod8xqpA+IHSLyGCQ2s8SPHiCDEeQJSep1jqLYeEUClOFG2Qsh+4FU6G9VeqpZnGW/Su8LQGc4YKni5rYSQ==
-  dependencies:
-    readable-stream "~2.3.6"
-    xtend "~4.0.1"
-
-through2@^4.0.0:
-  version "4.0.2"
-  resolved "https://registry.yarnpkg.com/through2/-/through2-4.0.2.tgz#a7ce3ac2a7a8b0b966c80e7c49f0484c3b239764"
-  integrity sha512-iOqSav00cVxEEICeD7TjLB1sueEL+81Wpzp2bY17uZjZN0pWZPuo4suZ/61VujxmqSGFfgOcNuTZ85QJwNZQpw==
-  dependencies:
-    readable-stream "3"
-
-through@2, "through@>=2.2.7 <3", through@^2.3.6:
-  version "2.3.8"
-  resolved "https://registry.yarnpkg.com/through/-/through-2.3.8.tgz#0dd4c9ffaabc357960b1b724115d7e0e86a2e1f5"
-  integrity sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg==
-
-timm@^1.6.1:
-  version "1.7.1"
-  resolved "https://registry.yarnpkg.com/timm/-/timm-1.7.1.tgz#96bab60c7d45b5a10a8a4d0f0117c6b7e5aff76f"
-  integrity sha512-IjZc9KIotudix8bMaBW6QvMuq64BrJWFs1+4V0lXwWGQZwH+LnX87doAYhem4caOEusRP9/g6jVDQmZ8XOk1nw==
-
-tinycolor2@^1.4.1:
-  version "1.6.0"
-  resolved "https://registry.yarnpkg.com/tinycolor2/-/tinycolor2-1.6.0.tgz#f98007460169b0263b97072c5ae92484ce02d09e"
-  integrity sha512-XPaBkWQJdsf3pLKJV9p4qN/S+fm2Oj8AIPo1BTUhg5oxkvm9+SVEGFdhyOz7tTdUTfvxMiAs4sp6/eZO2Ew+pw==
-
-titleize@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/titleize/-/titleize-3.0.0.tgz#71c12eb7fdd2558aa8a44b0be83b8a76694acd53"
-  integrity sha512-KxVu8EYHDPBdUYdKZdKtU2aj2XfEx9AfjXxE/Aj0vT06w2icA09Vus1rh6eSu1y01akYg6BjIK/hxyLJINoMLQ==
-
-tmp@^0.0.33:
-  version "0.0.33"
-  resolved "https://registry.yarnpkg.com/tmp/-/tmp-0.0.33.tgz#6d34335889768d21b2bcda0aa277ced3b1bfadf9"
-  integrity sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==
-  dependencies:
-    os-tmpdir "~1.0.2"
-
-tmpl@1.0.5:
-  version "1.0.5"
-  resolved "https://registry.yarnpkg.com/tmpl/-/tmpl-1.0.5.tgz#8683e0b902bb9c20c4f726e3c0b69f36518c07cc"
-  integrity sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==
-
-to-fast-properties@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/to-fast-properties/-/to-fast-properties-2.0.0.tgz#dc5e698cbd079265bc73e0377681a4e4e83f616e"
-  integrity sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==
-
-to-regex-range@^5.0.1:
-  version "5.0.1"
-  resolved "https://registry.yarnpkg.com/to-regex-range/-/to-regex-range-5.0.1.tgz#1648c44aae7c8d988a326018ed72f5b4dd0392e4"
-  integrity sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==
-  dependencies:
-    is-number "^7.0.0"
-
-token-types@^4.1.1, token-types@^4.2.1:
-  version "4.2.1"
-  resolved "https://registry.yarnpkg.com/token-types/-/token-types-4.2.1.tgz#0f897f03665846982806e138977dbe72d44df753"
-  integrity sha512-6udB24Q737UD/SDsKAHI9FCRP7Bqc9D/MQUV02ORQg5iskjtLJlZJNdN4kKtcdtwCeWIwIHDGaUsTsCCAa8sFQ==
-  dependencies:
-    "@tokenizer/token" "^0.3.0"
-    ieee754 "^1.2.1"
-
-tough-cookie@^4.0.0:
-  version "4.1.3"
-  resolved "https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-4.1.3.tgz#97b9adb0728b42280aa3d814b6b999b2ff0318bf"
-  integrity sha512-aX/y5pVRkfRnfmuX+OdbSdXvPe6ieKX/G2s7e98f4poJHnqH3281gDPm/metm6E/WRamfx7WC4HUqkWHfQHprw==
-  dependencies:
-    psl "^1.1.33"
-    punycode "^2.1.1"
-    universalify "^0.2.0"
-    url-parse "^1.5.3"
-
-tr46@^2.1.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/tr46/-/tr46-2.1.0.tgz#fa87aa81ca5d5941da8cbf1f9b749dc969a4e240"
-  integrity sha512-15Ih7phfcdP5YxqiB+iDtLoaTz4Nd35+IiAv0kQ5FNKHzXgdWqPoTIqEDDJmXceQt4JZk6lVPT8lnDlPpGDppw==
-  dependencies:
-    punycode "^2.1.1"
-
-tr46@~0.0.3:
-  version "0.0.3"
-  resolved "https://registry.yarnpkg.com/tr46/-/tr46-0.0.3.tgz#8184fd347dac9cdc185992f3a6622e14b9d9ab6a"
-  integrity sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==
-
-trim-newlines@^3.0.0:
-  version "3.0.1"
-  resolved "https://registry.yarnpkg.com/trim-newlines/-/trim-newlines-3.0.1.tgz#260a5d962d8b752425b32f3a7db0dcacd176c144"
-  integrity sha512-c1PTsA3tYrIsLGkJkzHF+w9F2EyxfXGo4UyJc4pFL++FMjnq0HJS69T3M7d//gKrFKwy429bouPescbjecU+Zw==
-
-ts-jest@^27.0.3:
-  version "27.1.5"
-  resolved "https://registry.yarnpkg.com/ts-jest/-/ts-jest-27.1.5.tgz#0ddf1b163fbaae3d5b7504a1e65c914a95cff297"
-  integrity sha512-Xv6jBQPoBEvBq/5i2TeSG9tt/nqkbpcurrEG1b+2yfBrcJelOZF9Ml6dmyMh7bcW9JyFbRYpR5rxROSlBLTZHA==
-  dependencies:
-    bs-logger "0.x"
-    fast-json-stable-stringify "2.x"
-    jest-util "^27.0.0"
-    json5 "2.x"
-    lodash.memoize "4.x"
-    make-error "1.x"
-    semver "7.x"
-    yargs-parser "20.x"
-
-ts-node@^10.8.1:
-  version "10.9.1"
-  resolved "https://registry.yarnpkg.com/ts-node/-/ts-node-10.9.1.tgz#e73de9102958af9e1f0b168a6ff320e25adcff4b"
-  integrity sha512-NtVysVPkxxrwFGUUxGYhfux8k78pQB3JqYBXlLRZgdGUqTO5wU/UyHop5p70iEbGhB7q5KmiZiU0Y3KlJrScEw==
-  dependencies:
-    "@cspotcode/source-map-support" "^0.8.0"
-    "@tsconfig/node10" "^1.0.7"
-    "@tsconfig/node12" "^1.0.7"
-    "@tsconfig/node14" "^1.0.0"
-    "@tsconfig/node16" "^1.0.2"
-    acorn "^8.4.1"
-    acorn-walk "^8.1.1"
-    arg "^4.1.0"
-    create-require "^1.1.0"
-    diff "^4.0.1"
-    make-error "^1.1.1"
-    v8-compile-cache-lib "^3.0.1"
-    yn "3.1.1"
-
-tslib@^1.8.1:
-  version "1.14.1"
-  resolved "https://registry.yarnpkg.com/tslib/-/tslib-1.14.1.tgz#cf2d38bdc34a134bcaf1091c41f6619e2f672d00"
-  integrity sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==
-
-tslib@^2.0.1, tslib@^2.1.0, tslib@^2.4.0:
-  version "2.6.2"
-  resolved "https://registry.yarnpkg.com/tslib/-/tslib-2.6.2.tgz#703ac29425e7b37cd6fd456e92404d46d1f3e4ae"
-  integrity sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==
-
-tsutils@^3.21.0:
-  version "3.21.0"
-  resolved "https://registry.yarnpkg.com/tsutils/-/tsutils-3.21.0.tgz#b48717d394cea6c1e096983eed58e9d61715b623"
-  integrity sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==
-  dependencies:
-    tslib "^1.8.1"
-
-tunnel-agent@^0.6.0:
-  version "0.6.0"
-  resolved "https://registry.yarnpkg.com/tunnel-agent/-/tunnel-agent-0.6.0.tgz#27a5dea06b36b04a0a9966774b290868f0fc40fd"
-  integrity sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==
-  dependencies:
-    safe-buffer "^5.0.1"
-
-type-check@^0.4.0, type-check@~0.4.0:
-  version "0.4.0"
-  resolved "https://registry.yarnpkg.com/type-check/-/type-check-0.4.0.tgz#07b8203bfa7056c0657050e3ccd2c37730bab8f1"
-  integrity sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==
-  dependencies:
-    prelude-ls "^1.2.1"
-
-type-check@~0.3.2:
-  version "0.3.2"
-  resolved "https://registry.yarnpkg.com/type-check/-/type-check-0.3.2.tgz#5884cab512cf1d355e3fb784f30804b2b520db72"
-  integrity sha512-ZCmOJdvOWDBYJlzAoFkC+Q0+bUyEOS1ltgp1MGU03fqHG+dbi9tBFU2Rd9QKiDZFAYrhPh2JUf7rZRIuHRKtOg==
-  dependencies:
-    prelude-ls "~1.1.2"
-
-type-detect@4.0.8:
-  version "4.0.8"
-  resolved "https://registry.yarnpkg.com/type-detect/-/type-detect-4.0.8.tgz#7646fb5f18871cfbb7749e69bd39a6388eb7450c"
-  integrity sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==
-
-type-fest@^0.18.0:
-  version "0.18.1"
-  resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.18.1.tgz#db4bc151a4a2cf4eebf9add5db75508db6cc841f"
-  integrity sha512-OIAYXk8+ISY+qTOwkHtKqzAuxchoMiD9Udx+FSGQDuiRR+PJKJHc2NJAXlbhkGwTt/4/nKZxELY1w3ReWOL8mw==
-
-type-fest@^0.20.2:
-  version "0.20.2"
-  resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.20.2.tgz#1bf207f4b28f91583666cb5fbd327887301cd5f4"
-  integrity sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==
-
-type-fest@^0.21.3:
-  version "0.21.3"
-  resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.21.3.tgz#d260a24b0198436e133fa26a524a6d65fa3b2e37"
-  integrity sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==
-
-type-fest@^0.6.0:
-  version "0.6.0"
-  resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.6.0.tgz#8d2a2370d3df886eb5c90ada1c5bf6188acf838b"
-  integrity sha512-q+MB8nYR1KDLrgr4G5yemftpMC7/QLqVndBmEEdqzmNj5dcFOO4Oo8qlwZE3ULT3+Zim1F8Kq4cBnikNhlCMlg==
-
-type-fest@^0.8.1:
-  version "0.8.1"
-  resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.8.1.tgz#09e249ebde851d3b1e48d27c105444667f17b83d"
-  integrity sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==
-
-type-fest@^1.0.1:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-1.4.0.tgz#e9fb813fe3bf1744ec359d55d1affefa76f14be1"
-  integrity sha512-yGSza74xk0UG8k+pLh5oeoYirvIiWo5t0/o3zHHAO2tRDiZcxWP7fywNlXhqb6/r6sWvwi+RsyQMWhVLe4BVuA==
-
-type-fest@^2.13.0, type-fest@^2.5.1:
-  version "2.19.0"
-  resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-2.19.0.tgz#88068015bb33036a598b952e55e9311a60fd3a9b"
-  integrity sha512-RAH822pAdBgcNMAfWnCBU3CFZcfZ/i1eZjwFU/dsLKumyuuP3niueg2UAukXYF0E2AAoc82ZSSf9J0WQBinzHA==
-
-typed-array-buffer@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/typed-array-buffer/-/typed-array-buffer-1.0.0.tgz#18de3e7ed7974b0a729d3feecb94338d1472cd60"
-  integrity sha512-Y8KTSIglk9OZEr8zywiIHG/kmQ7KWyjseXs1CbSo8vC42w7hg2HgYTxSWwP0+is7bWDc1H+Fo026CpHFwm8tkw==
-  dependencies:
-    call-bind "^1.0.2"
-    get-intrinsic "^1.2.1"
-    is-typed-array "^1.1.10"
-
-typed-array-byte-length@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/typed-array-byte-length/-/typed-array-byte-length-1.0.0.tgz#d787a24a995711611fb2b87a4052799517b230d0"
-  integrity sha512-Or/+kvLxNpeQ9DtSydonMxCx+9ZXOswtwJn17SNLvhptaXYDJvkFFP5zbfU/uLmvnBJlI4yrnXRxpdWH/M5tNA==
-  dependencies:
-    call-bind "^1.0.2"
-    for-each "^0.3.3"
-    has-proto "^1.0.1"
-    is-typed-array "^1.1.10"
-
-typed-array-byte-offset@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/typed-array-byte-offset/-/typed-array-byte-offset-1.0.0.tgz#cbbe89b51fdef9cd6aaf07ad4707340abbc4ea0b"
-  integrity sha512-RD97prjEt9EL8YgAgpOkf3O4IF9lhJFr9g0htQkm0rchFp/Vx7LW5Q8fSXXub7BXAODyUQohRMyOc3faCPd0hg==
-  dependencies:
-    available-typed-arrays "^1.0.5"
-    call-bind "^1.0.2"
-    for-each "^0.3.3"
-    has-proto "^1.0.1"
-    is-typed-array "^1.1.10"
-
-typed-array-length@^1.0.4:
-  version "1.0.4"
-  resolved "https://registry.yarnpkg.com/typed-array-length/-/typed-array-length-1.0.4.tgz#89d83785e5c4098bec72e08b319651f0eac9c1bb"
-  integrity sha512-KjZypGq+I/H7HI5HlOoGHkWUUGq+Q0TPhQurLbyrVrvnKTBgzLhIJ7j6J/XTQOi0d1RjyZ0wdas8bKs2p0x3Ng==
-  dependencies:
-    call-bind "^1.0.2"
-    for-each "^0.3.3"
-    is-typed-array "^1.1.9"
-
-typedarray-to-buffer@^3.1.5:
-  version "3.1.5"
-  resolved "https://registry.yarnpkg.com/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz#a97ee7a9ff42691b9f783ff1bc5112fe3fca9080"
-  integrity sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==
-  dependencies:
-    is-typedarray "^1.0.0"
-
-typedoc@^0.24.7:
-  version "0.24.8"
-  resolved "https://registry.yarnpkg.com/typedoc/-/typedoc-0.24.8.tgz#cce9f47ba6a8d52389f5e583716a2b3b4335b63e"
-  integrity sha512-ahJ6Cpcvxwaxfu4KtjA8qZNqS43wYt6JL27wYiIgl1vd38WW/KWX11YuAeZhuz9v+ttrutSsgK+XO1CjL1kA3w==
-  dependencies:
-    lunr "^2.3.9"
-    marked "^4.3.0"
-    minimatch "^9.0.0"
-    shiki "^0.14.1"
-
-typescript@^4.6.4:
-  version "4.9.5"
-  resolved "https://registry.yarnpkg.com/typescript/-/typescript-4.9.5.tgz#095979f9bcc0d09da324d58d03ce8f8374cbe65a"
-  integrity sha512-1FXk9E2Hm+QzZQ7z+McJiHL4NW1F2EzMu9Nq9i3zAaGqibafqYwCVU6WyWAuyQRRzOlxou8xZSyXLEN8oKj24g==
-
-uglify-js@^3.1.4:
-  version "3.17.4"
-  resolved "https://registry.yarnpkg.com/uglify-js/-/uglify-js-3.17.4.tgz#61678cf5fa3f5b7eb789bb345df29afb8257c22c"
-  integrity sha512-T9q82TJI9e/C1TAxYvfb16xO120tMVFZrGA3f9/P4424DNu6ypK103y0GPFVa17yotwSyZW5iYXgjYHkGrJW/g==
-
-unbox-primitive@^1.0.2:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/unbox-primitive/-/unbox-primitive-1.0.2.tgz#29032021057d5e6cdbd08c5129c226dff8ed6f9e"
-  integrity sha512-61pPlCD9h51VoreyJ0BReideM3MDKMKnh6+V9L08331ipq6Q8OFXZYiqP6n/tbHx4s5I9uRhcye6BrbkizkBDw==
-  dependencies:
-    call-bind "^1.0.2"
-    has-bigints "^1.0.2"
-    has-symbols "^1.0.3"
-    which-boxed-primitive "^1.0.2"
-
-unique-string@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/unique-string/-/unique-string-3.0.0.tgz#84a1c377aff5fd7a8bc6b55d8244b2bd90d75b9a"
-  integrity sha512-VGXBUVwxKMBUznyffQweQABPRRW1vHZAbadFZud4pLFAqRGvv/96vafgjWFqzourzr8YonlQiPgH0YCJfawoGQ==
-  dependencies:
-    crypto-random-string "^4.0.0"
-
-universal-user-agent@^6.0.0:
-  version "6.0.0"
-  resolved "https://registry.yarnpkg.com/universal-user-agent/-/universal-user-agent-6.0.0.tgz#3381f8503b251c0d9cd21bc1de939ec9df5480ee"
-  integrity sha512-isyNax3wXoKaulPDZWHQqbmIx1k2tb9fb3GGDBRxCscfYV2Ch7WxPArBsFEG8s/safwXTT7H4QGhaIkTp9447w==
-
-universalify@^0.1.0:
-  version "0.1.2"
-  resolved "https://registry.yarnpkg.com/universalify/-/universalify-0.1.2.tgz#b646f69be3942dabcecc9d6639c80dc105efaa66"
-  integrity sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==
-
-universalify@^0.2.0:
-  version "0.2.0"
-  resolved "https://registry.yarnpkg.com/universalify/-/universalify-0.2.0.tgz#6451760566fa857534745ab1dde952d1b1761be0"
-  integrity sha512-CJ1QgKmNg3CwvAv/kOFmtnEN05f0D/cn9QntgNOQlQF9dgvVTHj3t+8JPdjqawCHk7V/KA+fbUqzZ9XWhcqPUg==
-
-untildify@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/untildify/-/untildify-4.0.0.tgz#2bc947b953652487e4600949fb091e3ae8cd919b"
-  integrity sha512-KK8xQ1mkzZeg9inewmFVDNkg3l5LUhoq9kN6iWYB/CC9YMG8HA+c1Q8HwDe6dEX7kErrEVNVBO3fWsVq5iDgtw==
-
-update-browserslist-db@^1.0.11:
-  version "1.0.11"
-  resolved "https://registry.yarnpkg.com/update-browserslist-db/-/update-browserslist-db-1.0.11.tgz#9a2a641ad2907ae7b3616506f4b977851db5b940"
-  integrity sha512-dCwEFf0/oT85M1fHBg4F0jtLwJrutGoHSQXCh7u4o2t1drG+c0a9Flnqww6XUKSfQMPpJBRjU8d4RXB09qtvaA==
-  dependencies:
-    escalade "^3.1.1"
-    picocolors "^1.0.0"
-
-update-notifier@6.0.2:
-  version "6.0.2"
-  resolved "https://registry.yarnpkg.com/update-notifier/-/update-notifier-6.0.2.tgz#a6990253dfe6d5a02bd04fbb6a61543f55026b60"
-  integrity sha512-EDxhTEVPZZRLWYcJ4ZXjGFN0oP7qYvbXWzEgRm/Yql4dHX5wDbvh89YHP6PK1lzZJYrMtXUuZZz8XGK+U6U1og==
-  dependencies:
-    boxen "^7.0.0"
-    chalk "^5.0.1"
-    configstore "^6.0.0"
-    has-yarn "^3.0.0"
-    import-lazy "^4.0.0"
-    is-ci "^3.0.1"
-    is-installed-globally "^0.4.0"
-    is-npm "^6.0.0"
-    is-yarn-global "^0.4.0"
-    latest-version "^7.0.0"
-    pupa "^3.1.0"
-    semver "^7.3.7"
-    semver-diff "^4.0.0"
-    xdg-basedir "^5.1.0"
-
-uri-js@^4.2.2:
-  version "4.4.1"
-  resolved "https://registry.yarnpkg.com/uri-js/-/uri-js-4.4.1.tgz#9b1a52595225859e55f669d928f88c6c57f2a77e"
-  integrity sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==
-  dependencies:
-    punycode "^2.1.0"
-
-url-join@5.0.0:
-  version "5.0.0"
-  resolved "https://registry.yarnpkg.com/url-join/-/url-join-5.0.0.tgz#c2f1e5cbd95fa91082a93b58a1f42fecb4bdbcf1"
-  integrity sha512-n2huDr9h9yzd6exQVnH/jU5mr+Pfx08LRXXZhkLLetAMESRj+anQsTAh940iMrIetKAmry9coFuZQ2jY8/p3WA==
-
-url-parse@^1.5.3:
-  version "1.5.10"
-  resolved "https://registry.yarnpkg.com/url-parse/-/url-parse-1.5.10.tgz#9d3c2f736c1d75dd3bd2be507dcc111f1e2ea9c1"
-  integrity sha512-WypcfiRhfeUP9vvF0j6rw0J3hrWrw6iZv3+22h6iRMJ/8z1Tj6XfLP4DsUix5MhMPnXpiHDoKyoZ/bdCkwBCiQ==
-  dependencies:
-    querystringify "^2.1.1"
-    requires-port "^1.0.0"
-
-url@0.11.0:
-  version "0.11.0"
-  resolved "https://registry.yarnpkg.com/url/-/url-0.11.0.tgz#3838e97cfc60521eb73c525a8e55bfdd9e2e28f1"
-  integrity sha512-kbailJa29QrtXnxgq+DdCEGlbTeYM2eJUxsz6vjZavrCYPMIFHMKQmSKYAIuUK2i7hgPm28a8piX5NTUtM/LKQ==
-  dependencies:
-    punycode "1.3.2"
-    querystring "0.2.0"
-
-utif@^2.0.1:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/utif/-/utif-2.0.1.tgz#9e1582d9bbd20011a6588548ed3266298e711759"
-  integrity sha512-Z/S1fNKCicQTf375lIP9G8Sa1H/phcysstNrrSdZKj1f9g58J4NMgb5IgiEZN9/nLMPDwF0W7hdOe9Qq2IYoLg==
-  dependencies:
-    pako "^1.0.5"
-
-util-deprecate@^1.0.1, util-deprecate@~1.0.1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/util-deprecate/-/util-deprecate-1.0.2.tgz#450d4dc9fa70de732762fbd2d4a28981419a0ccf"
-  integrity sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==
-
-uuid@^3.3.2:
-  version "3.4.0"
-  resolved "https://registry.yarnpkg.com/uuid/-/uuid-3.4.0.tgz#b23e4358afa8a202fe7a100af1f5f883f02007ee"
-  integrity sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==
-
-uuid@^9.0.0:
-  version "9.0.0"
-  resolved "https://registry.yarnpkg.com/uuid/-/uuid-9.0.0.tgz#592f550650024a38ceb0c562f2f6aa435761efb5"
-  integrity sha512-MXcSTerfPa4uqyzStbRoTgt5XIe3x5+42+q1sDuy3R5MDk66URdLMOZe5aPX/SQd+kuYAh0FdP/pO28IkQyTeg==
-
-v8-compile-cache-lib@^3.0.1:
-  version "3.0.1"
-  resolved "https://registry.yarnpkg.com/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz#6336e8d71965cb3d35a1bbb7868445a7c05264bf"
-  integrity sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==
-
-v8-to-istanbul@^8.1.0:
-  version "8.1.1"
-  resolved "https://registry.yarnpkg.com/v8-to-istanbul/-/v8-to-istanbul-8.1.1.tgz#77b752fd3975e31bbcef938f85e9bd1c7a8d60ed"
-  integrity sha512-FGtKtv3xIpR6BYhvgH8MI/y78oT7d8Au3ww4QIxymrCtZEh5b8gCw2siywE+puhEmuWKDtmfrvF5UlB298ut3w==
-  dependencies:
-    "@types/istanbul-lib-coverage" "^2.0.1"
-    convert-source-map "^1.6.0"
-    source-map "^0.7.3"
-
-validate-npm-package-license@^3.0.1:
-  version "3.0.4"
-  resolved "https://registry.yarnpkg.com/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz#fc91f6b9c7ba15c857f4cb2c5defeec39d4f410a"
-  integrity sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==
-  dependencies:
-    spdx-correct "^3.0.0"
-    spdx-expression-parse "^3.0.0"
-
-vm2@^3.9.19:
-  version "3.9.19"
-  resolved "https://registry.yarnpkg.com/vm2/-/vm2-3.9.19.tgz#be1e1d7a106122c6c492b4d51c2e8b93d3ed6a4a"
-  integrity sha512-J637XF0DHDMV57R6JyVsTak7nIL8gy5KH4r1HiwWLf/4GBbb5MKL5y7LpmF4A8E2nR6XmzpmMFQ7V7ppPTmUQg==
-  dependencies:
-    acorn "^8.7.0"
-    acorn-walk "^8.2.0"
-
-vscode-oniguruma@^1.7.0:
-  version "1.7.0"
-  resolved "https://registry.yarnpkg.com/vscode-oniguruma/-/vscode-oniguruma-1.7.0.tgz#439bfad8fe71abd7798338d1cd3dc53a8beea94b"
-  integrity sha512-L9WMGRfrjOhgHSdOYgCt/yRMsXzLDJSL7BPrOZt73gU0iWO4mpqzqQzOz5srxqTvMBaR0XZTSrVWo4j55Rc6cA==
-
-vscode-textmate@^8.0.0:
-  version "8.0.0"
-  resolved "https://registry.yarnpkg.com/vscode-textmate/-/vscode-textmate-8.0.0.tgz#2c7a3b1163ef0441097e0b5d6389cd5504b59e5d"
-  integrity sha512-AFbieoL7a5LMqcnOF04ji+rpXadgOXnZsxQr//r83kLPr7biP7am3g9zbaZIaBGwBRWeSvoMD4mgPdX3e4NWBg==
-
-w3c-hr-time@^1.0.2:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/w3c-hr-time/-/w3c-hr-time-1.0.2.tgz#0a89cdf5cc15822df9c360543676963e0cc308cd"
-  integrity sha512-z8P5DvDNjKDoFIHK7q8r8lackT6l+jo/Ye3HOle7l9nICP9lf1Ci25fy9vHd0JOWewkIFzXIEig3TdKT7JQ5fQ==
-  dependencies:
-    browser-process-hrtime "^1.0.0"
-
-w3c-xmlserializer@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/w3c-xmlserializer/-/w3c-xmlserializer-2.0.0.tgz#3e7104a05b75146cc60f564380b7f683acf1020a"
-  integrity sha512-4tzD0mF8iSiMiNs30BiLO3EpfGLZUT2MSX/G+o7ZywDzliWQ3OPtTZ0PTC3B3ca1UAf4cJMHB+2Bf56EriJuRA==
-  dependencies:
-    xml-name-validator "^3.0.0"
-
-walker@^1.0.7:
-  version "1.0.8"
-  resolved "https://registry.yarnpkg.com/walker/-/walker-1.0.8.tgz#bd498db477afe573dc04185f011d3ab8a8d7653f"
-  integrity sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==
-  dependencies:
-    makeerror "1.0.12"
-
-wcwidth@^1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/wcwidth/-/wcwidth-1.0.1.tgz#f0b0dcf915bc5ff1528afadb2c0e17b532da2fe8"
-  integrity sha512-XHPEwS0q6TaxcvG85+8EYkbiCux2XtWG2mkc47Ng2A77BQu9+DqIOJldST4HgPkuea7dvKSj5VgX3P1d4rW8Tg==
-  dependencies:
-    defaults "^1.0.3"
-
-web-streams-polyfill@^3.0.3:
-  version "3.2.1"
-  resolved "https://registry.yarnpkg.com/web-streams-polyfill/-/web-streams-polyfill-3.2.1.tgz#71c2718c52b45fd49dbeee88634b3a60ceab42a6"
-  integrity sha512-e0MO3wdXWKrLbL0DgGnUV7WHVuw9OUvL4hjgnPkIeEvESk74gAITi5G606JtZPp39cd8HA9VQzCIvA49LpPN5Q==
-
-webidl-conversions@^3.0.0:
-  version "3.0.1"
-  resolved "https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-3.0.1.tgz#24534275e2a7bc6be7bc86611cc16ae0a5654871"
-  integrity sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==
-
-webidl-conversions@^5.0.0:
-  version "5.0.0"
-  resolved "https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-5.0.0.tgz#ae59c8a00b121543a2acc65c0434f57b0fc11aff"
-  integrity sha512-VlZwKPCkYKxQgeSbH5EyngOmRp7Ww7I9rQLERETtf5ofd9pGeswWiOtogpEO850jziPRarreGxn5QIiTqpb2wA==
-
-webidl-conversions@^6.1.0:
-  version "6.1.0"
-  resolved "https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-6.1.0.tgz#9111b4d7ea80acd40f5270d666621afa78b69514"
-  integrity sha512-qBIvFLGiBpLjfwmYAaHPXsn+ho5xZnGvyGvsarywGNc8VyQJUMHJ8OBKGGrPER0okBeMDaan4mNBlgBROxuI8w==
-
-whatwg-encoding@^1.0.5:
-  version "1.0.5"
-  resolved "https://registry.yarnpkg.com/whatwg-encoding/-/whatwg-encoding-1.0.5.tgz#5abacf777c32166a51d085d6b4f3e7d27113ddb0"
-  integrity sha512-b5lim54JOPN9HtzvK9HFXvBma/rnfFeqsic0hSpjtDbVxR3dJKLc+KB4V6GgiGOvl7CY/KNh8rxSo9DKQrnUEw==
-  dependencies:
-    iconv-lite "0.4.24"
-
-whatwg-mimetype@^2.3.0:
-  version "2.3.0"
-  resolved "https://registry.yarnpkg.com/whatwg-mimetype/-/whatwg-mimetype-2.3.0.tgz#3d4b1e0312d2079879f826aff18dbeeca5960fbf"
-  integrity sha512-M4yMwr6mAnQz76TbJm914+gPpB/nCwvZbJU28cUD6dR004SAxDLOOSUaB1JDRqLtaOV/vi0IC5lEAGFgrjGv/g==
-
-whatwg-url@^5.0.0:
-  version "5.0.0"
-  resolved "https://registry.yarnpkg.com/whatwg-url/-/whatwg-url-5.0.0.tgz#966454e8765462e37644d3626f6742ce8b70965d"
-  integrity sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==
-  dependencies:
-    tr46 "~0.0.3"
-    webidl-conversions "^3.0.0"
-
-whatwg-url@^8.0.0, whatwg-url@^8.5.0:
-  version "8.7.0"
-  resolved "https://registry.yarnpkg.com/whatwg-url/-/whatwg-url-8.7.0.tgz#656a78e510ff8f3937bc0bcbe9f5c0ac35941b77"
-  integrity sha512-gAojqb/m9Q8a5IV96E3fHJM70AzCkgt4uXYX2O7EmuyOnLrViCQlsEBmF9UQIu3/aeAIp2U17rtbpZWNntQqdg==
-  dependencies:
-    lodash "^4.7.0"
-    tr46 "^2.1.0"
-    webidl-conversions "^6.1.0"
-
-which-boxed-primitive@^1.0.2:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/which-boxed-primitive/-/which-boxed-primitive-1.0.2.tgz#13757bc89b209b049fe5d86430e21cf40a89a8e6"
-  integrity sha512-bwZdv0AKLpplFY2KZRX6TvyuN7ojjr7lwkg6ml0roIy9YeuSr7JS372qlNW18UQYzgYK9ziGcerWqZOmEn9VNg==
-  dependencies:
-    is-bigint "^1.0.1"
-    is-boolean-object "^1.1.0"
-    is-number-object "^1.0.4"
-    is-string "^1.0.5"
-    is-symbol "^1.0.3"
-
-which-builtin-type@^1.1.3:
-  version "1.1.3"
-  resolved "https://registry.yarnpkg.com/which-builtin-type/-/which-builtin-type-1.1.3.tgz#b1b8443707cc58b6e9bf98d32110ff0c2cbd029b"
-  integrity sha512-YmjsSMDBYsM1CaFiayOVT06+KJeXf0o5M/CAd4o1lTadFAtacTUM49zoYxr/oroopFDfhvN6iEcBxUyc3gvKmw==
-  dependencies:
-    function.prototype.name "^1.1.5"
-    has-tostringtag "^1.0.0"
-    is-async-function "^2.0.0"
-    is-date-object "^1.0.5"
-    is-finalizationregistry "^1.0.2"
-    is-generator-function "^1.0.10"
-    is-regex "^1.1.4"
-    is-weakref "^1.0.2"
-    isarray "^2.0.5"
-    which-boxed-primitive "^1.0.2"
-    which-collection "^1.0.1"
-    which-typed-array "^1.1.9"
-
-which-collection@^1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/which-collection/-/which-collection-1.0.1.tgz#70eab71ebbbd2aefaf32f917082fc62cdcb70906"
-  integrity sha512-W8xeTUwaln8i3K/cY1nGXzdnVZlidBcagyNFtBdD5kxnb4TvGKR7FfSIS3mYpwWS1QUCutfKz8IY8RjftB0+1A==
-  dependencies:
-    is-map "^2.0.1"
-    is-set "^2.0.1"
-    is-weakmap "^2.0.1"
-    is-weakset "^2.0.1"
-
-which-typed-array@^1.1.10, which-typed-array@^1.1.11, which-typed-array@^1.1.9:
-  version "1.1.11"
-  resolved "https://registry.yarnpkg.com/which-typed-array/-/which-typed-array-1.1.11.tgz#99d691f23c72aab6768680805a271b69761ed61a"
-  integrity sha512-qe9UWWpkeG5yzZ0tNYxDmd7vo58HDBc39mZ0xWWpolAGADdFOzkfamWLDxkOWcvHQKVmdTyQdLD4NOfjLWTKew==
-  dependencies:
-    available-typed-arrays "^1.0.5"
-    call-bind "^1.0.2"
-    for-each "^0.3.3"
-    gopd "^1.0.1"
-    has-tostringtag "^1.0.0"
-
-which@^2.0.1:
-  version "2.0.2"
-  resolved "https://registry.yarnpkg.com/which/-/which-2.0.2.tgz#7c6a8dd0a636a0327e10b59c9286eee93f3f51b1"
-  integrity sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==
-  dependencies:
-    isexe "^2.0.0"
-
-widest-line@^4.0.1:
-  version "4.0.1"
-  resolved "https://registry.yarnpkg.com/widest-line/-/widest-line-4.0.1.tgz#a0fc673aaba1ea6f0a0d35b3c2795c9a9cc2ebf2"
-  integrity sha512-o0cyEG0e8GPzT4iGHphIOh0cJOV8fivsXxddQasHPHfoZf1ZexrfeA21w2NaEN1RHE+fXlfISmOE8R9N3u3Qig==
-  dependencies:
-    string-width "^5.0.1"
-
-wildcard-match@5.1.2:
-  version "5.1.2"
-  resolved "https://registry.yarnpkg.com/wildcard-match/-/wildcard-match-5.1.2.tgz#66b438001391674d8599b45da051e0bd9f33cd2a"
-  integrity sha512-qNXwI591Z88c8bWxp+yjV60Ch4F8Riawe3iGxbzquhy8Xs9m+0+SLFBGb/0yCTIDElawtaImC37fYZ+dr32KqQ==
-
-windows-release@^5.0.1:
-  version "5.1.1"
-  resolved "https://registry.yarnpkg.com/windows-release/-/windows-release-5.1.1.tgz#7ac7019f9baeaea6c00ec889b11824f46c12ee8d"
-  integrity sha512-NMD00arvqcq2nwqc5Q6KtrSRHK+fVD31erE5FEMahAw5PmVCgD7MUXodq3pdZSUkqA9Cda2iWx6s1XYwiJWRmw==
-  dependencies:
-    execa "^5.1.1"
-
-word-wrap@~1.2.3:
-  version "1.2.5"
-  resolved "https://registry.yarnpkg.com/word-wrap/-/word-wrap-1.2.5.tgz#d2c45c6dd4fbce621a66f136cbe328afd0410b34"
-  integrity sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==
-
-wordwrap@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/wordwrap/-/wordwrap-1.0.0.tgz#27584810891456a4171c8d0226441ade90cbcaeb"
-  integrity sha512-gvVzJFlPycKc5dZN4yPkP8w7Dc37BtP1yczEneOb4uq34pXZcvrtRTmWV8W+Ume+XCxKgbjM+nevkyFPMybd4Q==
-
-wrap-ansi@^6.0.1:
-  version "6.2.0"
-  resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-6.2.0.tgz#e9393ba07102e6c91a3b221478f0257cd2856e53"
-  integrity sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==
-  dependencies:
-    ansi-styles "^4.0.0"
-    string-width "^4.1.0"
-    strip-ansi "^6.0.0"
-
-wrap-ansi@^7.0.0:
-  version "7.0.0"
-  resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-7.0.0.tgz#67e145cff510a6a6984bdf1152911d69d2eb9e43"
-  integrity sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==
-  dependencies:
-    ansi-styles "^4.0.0"
-    string-width "^4.1.0"
-    strip-ansi "^6.0.0"
-
-wrap-ansi@^8.1.0:
-  version "8.1.0"
-  resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-8.1.0.tgz#56dc22368ee570face1b49819975d9b9a5ead214"
-  integrity sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==
-  dependencies:
-    ansi-styles "^6.1.0"
-    string-width "^5.0.1"
-    strip-ansi "^7.0.1"
-
-wrappy@1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/wrappy/-/wrappy-1.0.2.tgz#b5243d8f3ec1aa35f1364605bc0d1036e30ab69f"
-  integrity sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==
-
-write-file-atomic@^3.0.0, write-file-atomic@^3.0.3:
-  version "3.0.3"
-  resolved "https://registry.yarnpkg.com/write-file-atomic/-/write-file-atomic-3.0.3.tgz#56bd5c5a5c70481cd19c571bd39ab965a5de56e8"
-  integrity sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==
-  dependencies:
-    imurmurhash "^0.1.4"
-    is-typedarray "^1.0.0"
-    signal-exit "^3.0.2"
-    typedarray-to-buffer "^3.1.5"
-
-ws@^7.4.6:
-  version "7.5.9"
-  resolved "https://registry.yarnpkg.com/ws/-/ws-7.5.9.tgz#54fa7db29f4c7cec68b1ddd3a89de099942bb591"
-  integrity sha512-F+P9Jil7UiSKSkppIiD94dN07AwvFixvLIj1Og1Rl9GGMuNipJnV9JzjD6XuqmAeiswGvUmNLjr5cFuXwNS77Q==
-
-ws@^8.13.0:
-  version "8.13.0"
-  resolved "https://registry.yarnpkg.com/ws/-/ws-8.13.0.tgz#9a9fb92f93cf41512a0735c8f4dd09b8a1211cd0"
-  integrity sha512-x9vcZYTrFPC7aSIbj7sRCYo7L/Xb8Iy+pW0ng0wt2vCJv7M9HOMy0UoN3rr+IFC7hb7vXoqS+P9ktyLLLhO+LA==
-
-xdg-basedir@^5.0.1, xdg-basedir@^5.1.0:
-  version "5.1.0"
-  resolved "https://registry.yarnpkg.com/xdg-basedir/-/xdg-basedir-5.1.0.tgz#1efba19425e73be1bc6f2a6ceb52a3d2c884c0c9"
-  integrity sha512-GCPAHLvrIH13+c0SuacwvRYj2SxJXQ4kaVTT5xgL3kPrz56XxkF21IGhjSE1+W0aw7gpBWRGXLCPnPby6lSpmQ==
-
-xhr@^2.0.1:
-  version "2.6.0"
-  resolved "https://registry.yarnpkg.com/xhr/-/xhr-2.6.0.tgz#b69d4395e792b4173d6b7df077f0fc5e4e2b249d"
-  integrity sha512-/eCGLb5rxjx5e3mF1A7s+pLlR6CGyqWN91fv1JgER5mVWg1MZmlhBvy9kjcsOdRk8RrIujotWyJamfyrp+WIcA==
-  dependencies:
-    global "~4.4.0"
-    is-function "^1.0.1"
-    parse-headers "^2.0.0"
-    xtend "^4.0.0"
-
-xml-name-validator@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/xml-name-validator/-/xml-name-validator-3.0.0.tgz#6ae73e06de4d8c6e47f9fb181f78d648ad457c6a"
-  integrity sha512-A5CUptxDsvxKJEU3yO6DuWBSJz/qizqzJKOMIfUJHETbBw/sFaDxgd6fxm1ewUaM0jZ444Fc5vC5ROYurg/4Pw==
-
-xml-parse-from-string@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/xml-parse-from-string/-/xml-parse-from-string-1.0.1.tgz#a9029e929d3dbcded169f3c6e28238d95a5d5a28"
-  integrity sha512-ErcKwJTF54uRzzNMXq2X5sMIy88zJvfN2DmdoQvy7PAFJ+tPRU6ydWuOKNMyfmOjdyBQTFREi60s0Y0SyI0G0g==
-
-xml2js@^0.4.5:
-  version "0.4.23"
-  resolved "https://registry.yarnpkg.com/xml2js/-/xml2js-0.4.23.tgz#a0c69516752421eb2ac758ee4d4ccf58843eac66"
-  integrity sha512-ySPiMjM0+pLDftHgXY4By0uswI3SPKLDw/i3UXbnO8M/p28zqexCUoPmQFrYD+/1BzhGJSs2i1ERWKJAtiLrug==
-  dependencies:
-    sax ">=0.6.0"
-    xmlbuilder "~11.0.0"
-
-xmlbuilder@~11.0.0:
-  version "11.0.1"
-  resolved "https://registry.yarnpkg.com/xmlbuilder/-/xmlbuilder-11.0.1.tgz#be9bae1c8a046e76b31127726347d0ad7002beb3"
-  integrity sha512-fDlsI/kFEx7gLvbecc0/ohLG50fugQp8ryHzMTuW9vSa1GJ0XYWKnhsUx7oie3G98+r56aTQIUB4kht42R3JvA==
-
-xmlchars@^2.2.0:
-  version "2.2.0"
-  resolved "https://registry.yarnpkg.com/xmlchars/-/xmlchars-2.2.0.tgz#060fe1bcb7f9c76fe2a17db86a9bc3ab894210cb"
-  integrity sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw==
-
-xtend@^4.0.0, xtend@~4.0.1:
-  version "4.0.2"
-  resolved "https://registry.yarnpkg.com/xtend/-/xtend-4.0.2.tgz#bb72779f5fa465186b1f438f674fa347fdb5db54"
-  integrity sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==
-
-y18n@^5.0.5:
-  version "5.0.8"
-  resolved "https://registry.yarnpkg.com/y18n/-/y18n-5.0.8.tgz#7f4934d0f7ca8c56f95314939ddcd2dd91ce1d55"
-  integrity sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==
-
-yallist@^3.0.2:
-  version "3.1.1"
-  resolved "https://registry.yarnpkg.com/yallist/-/yallist-3.1.1.tgz#dbb7daf9bfd8bac9ab45ebf602b8cbad0d5d08fd"
-  integrity sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==
-
-yallist@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/yallist/-/yallist-4.0.0.tgz#9bb92790d9c0effec63be73519e11a35019a3a72"
-  integrity sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==
-
-yargs-parser@20.x, yargs-parser@^20.2.2, yargs-parser@^20.2.3:
-  version "20.2.9"
-  resolved "https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-20.2.9.tgz#2eb7dc3b0289718fc295f362753845c41a0c94ee"
-  integrity sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==
-
-yargs-parser@21.1.1:
-  version "21.1.1"
-  resolved "https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-21.1.1.tgz#9096bceebf990d21bb31fa9516e0ede294a77d35"
-  integrity sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==
-
-yargs@^16.2.0:
-  version "16.2.0"
-  resolved "https://registry.yarnpkg.com/yargs/-/yargs-16.2.0.tgz#1c82bf0f6b6a66eafce7ef30e376f49a12477f66"
-  integrity sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==
-  dependencies:
-    cliui "^7.0.2"
-    escalade "^3.1.1"
-    get-caller-file "^2.0.5"
-    require-directory "^2.1.1"
-    string-width "^4.2.0"
-    y18n "^5.0.5"
-    yargs-parser "^20.2.2"
-
-yn@3.1.1:
-  version "3.1.1"
-  resolved "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz"
-  integrity sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==
-
-yocto-queue@^0.1.0:
-  version "0.1.0"
-  resolved "https://registry.yarnpkg.com/yocto-queue/-/yocto-queue-0.1.0.tgz#0294eb3dee05028d31ee1a5fa2c556a6aaf10a1b"
-  integrity sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==
